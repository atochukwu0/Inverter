
Dev_NucleoH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca38  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800ccd8  0800ccd8  0001ccd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cde0  0800cde0  0001cde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cde4  0800cde4  0001cde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  24000000  0800cde8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004cd0  24000064  0800ce4c  00020064  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24004d34  0800ce4c  00024d34  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 10 .debug_info   000222b6  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000450f  00000000  00000000  0004238b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a58  00000000  00000000  000468a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001423  00000000  00000000  000482f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b701  00000000  00000000  0004971b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022862  00000000  00000000  00084e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017a4dd  00000000  00000000  000a767e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007120  00000000  00000000  00221b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005e  00000000  00000000  00228c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ccc0 	.word	0x0800ccc0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	0800ccc0 	.word	0x0800ccc0

080002e0 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b088      	sub	sp, #32
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
 80002f4:	615a      	str	r2, [r3, #20]
 80002f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80002f8:	4b34      	ldr	r3, [pc, #208]	; (80003cc <MX_ADC3_Init+0xec>)
 80002fa:	4a35      	ldr	r2, [pc, #212]	; (80003d0 <MX_ADC3_Init+0xf0>)
 80002fc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80002fe:	4b33      	ldr	r3, [pc, #204]	; (80003cc <MX_ADC3_Init+0xec>)
 8000300:	2208      	movs	r2, #8
 8000302:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000304:	4b31      	ldr	r3, [pc, #196]	; (80003cc <MX_ADC3_Init+0xec>)
 8000306:	2201      	movs	r2, #1
 8000308:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800030a:	4b30      	ldr	r3, [pc, #192]	; (80003cc <MX_ADC3_Init+0xec>)
 800030c:	2208      	movs	r2, #8
 800030e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000310:	4b2e      	ldr	r3, [pc, #184]	; (80003cc <MX_ADC3_Init+0xec>)
 8000312:	2200      	movs	r2, #0
 8000314:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000316:	4b2d      	ldr	r3, [pc, #180]	; (80003cc <MX_ADC3_Init+0xec>)
 8000318:	2201      	movs	r2, #1
 800031a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 800031c:	4b2b      	ldr	r3, [pc, #172]	; (80003cc <MX_ADC3_Init+0xec>)
 800031e:	2203      	movs	r2, #3
 8000320:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000322:	4b2a      	ldr	r3, [pc, #168]	; (80003cc <MX_ADC3_Init+0xec>)
 8000324:	2200      	movs	r2, #0
 8000326:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8000328:	4b28      	ldr	r3, [pc, #160]	; (80003cc <MX_ADC3_Init+0xec>)
 800032a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800032e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000330:	4b26      	ldr	r3, [pc, #152]	; (80003cc <MX_ADC3_Init+0xec>)
 8000332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000336:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000338:	4b24      	ldr	r3, [pc, #144]	; (80003cc <MX_ADC3_Init+0xec>)
 800033a:	2203      	movs	r2, #3
 800033c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800033e:	4b23      	ldr	r3, [pc, #140]	; (80003cc <MX_ADC3_Init+0xec>)
 8000340:	2200      	movs	r2, #0
 8000342:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000344:	4b21      	ldr	r3, [pc, #132]	; (80003cc <MX_ADC3_Init+0xec>)
 8000346:	2200      	movs	r2, #0
 8000348:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800034a:	4b20      	ldr	r3, [pc, #128]	; (80003cc <MX_ADC3_Init+0xec>)
 800034c:	2200      	movs	r2, #0
 800034e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <MX_ADC3_Init+0xec>)
 8000354:	f001 f986 	bl	8001664 <HAL_ADC_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 800035e:	f000 fbbb 	bl	8000ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000362:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <MX_ADC3_Init+0xf4>)
 8000364:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000366:	2306      	movs	r3, #6
 8000368:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800036e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000372:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000374:	2304      	movs	r3, #4
 8000376:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800037c:	2300      	movs	r3, #0
 800037e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	4619      	mov	r1, r3
 8000384:	4811      	ldr	r0, [pc, #68]	; (80003cc <MX_ADC3_Init+0xec>)
 8000386:	f001 fbf1 	bl	8001b6c <HAL_ADC_ConfigChannel>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000390:	f000 fba2 	bl	8000ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000394:	230c      	movs	r3, #12
 8000396:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	4619      	mov	r1, r3
 800039c:	480b      	ldr	r0, [pc, #44]	; (80003cc <MX_ADC3_Init+0xec>)
 800039e:	f001 fbe5 	bl	8001b6c <HAL_ADC_ConfigChannel>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 80003a8:	f000 fb96 	bl	8000ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003ac:	2312      	movs	r3, #18
 80003ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	4619      	mov	r1, r3
 80003b4:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_ADC3_Init+0xec>)
 80003b6:	f001 fbd9 	bl	8001b6c <HAL_ADC_ConfigChannel>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 80003c0:	f000 fb8a 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80003c4:	bf00      	nop
 80003c6:	3720      	adds	r7, #32
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	24000080 	.word	0x24000080
 80003d0:	58026000 	.word	0x58026000
 80003d4:	04300002 	.word	0x04300002

080003d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b0bc      	sub	sp, #240	; 0xf0
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003f0:	f107 0318 	add.w	r3, r7, #24
 80003f4:	22c0      	movs	r2, #192	; 0xc0
 80003f6:	2100      	movs	r1, #0
 80003f8:	4618      	mov	r0, r3
 80003fa:	f00c fb77 	bl	800caec <memset>
  if(adcHandle->Instance==ADC3)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a4f      	ldr	r2, [pc, #316]	; (8000540 <HAL_ADC_MspInit+0x168>)
 8000404:	4293      	cmp	r3, r2
 8000406:	f040 8096 	bne.w	8000536 <HAL_ADC_MspInit+0x15e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800040a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800040e:	f04f 0300 	mov.w	r3, #0
 8000412:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000416:	2301      	movs	r3, #1
 8000418:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 800041a:	2313      	movs	r3, #19
 800041c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800041e:	2302      	movs	r3, #2
 8000420:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000422:	2302      	movs	r3, #2
 8000424:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000426:	2302      	movs	r3, #2
 8000428:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800042a:	23c0      	movs	r3, #192	; 0xc0
 800042c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800042e:	2320      	movs	r3, #32
 8000430:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000436:	2300      	movs	r3, #0
 8000438:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800043c:	f107 0318 	add.w	r3, r7, #24
 8000440:	4618      	mov	r0, r3
 8000442:	f005 fdd1 	bl	8005fe8 <HAL_RCCEx_PeriphCLKConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 800044c:	f000 fb44 	bl	8000ad8 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000450:	4b3c      	ldr	r3, [pc, #240]	; (8000544 <HAL_ADC_MspInit+0x16c>)
 8000452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000456:	4a3b      	ldr	r2, [pc, #236]	; (8000544 <HAL_ADC_MspInit+0x16c>)
 8000458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800045c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000460:	4b38      	ldr	r3, [pc, #224]	; (8000544 <HAL_ADC_MspInit+0x16c>)
 8000462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800046e:	4b35      	ldr	r3, [pc, #212]	; (8000544 <HAL_ADC_MspInit+0x16c>)
 8000470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000474:	4a33      	ldr	r2, [pc, #204]	; (8000544 <HAL_ADC_MspInit+0x16c>)
 8000476:	f043 0320 	orr.w	r3, r3, #32
 800047a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800047e:	4b31      	ldr	r3, [pc, #196]	; (8000544 <HAL_ADC_MspInit+0x16c>)
 8000480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000484:	f003 0320 	and.w	r3, r3, #32
 8000488:	613b      	str	r3, [r7, #16]
 800048a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800048c:	4b2d      	ldr	r3, [pc, #180]	; (8000544 <HAL_ADC_MspInit+0x16c>)
 800048e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000492:	4a2c      	ldr	r2, [pc, #176]	; (8000544 <HAL_ADC_MspInit+0x16c>)
 8000494:	f043 0304 	orr.w	r3, r3, #4
 8000498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800049c:	4b29      	ldr	r3, [pc, #164]	; (8000544 <HAL_ADC_MspInit+0x16c>)
 800049e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a2:	f003 0304 	and.w	r3, r3, #4
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
    PF7     ------> ADC3_INP3
    PF8     ------> ADC3_INN3
    PF9     ------> ADC3_INP2
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80004aa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80004ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004b2:	2303      	movs	r3, #3
 80004b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80004c2:	4619      	mov	r1, r3
 80004c4:	4820      	ldr	r0, [pc, #128]	; (8000548 <HAL_ADC_MspInit+0x170>)
 80004c6:	f004 fb79 	bl	8004bbc <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80004ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80004ce:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80004d2:	f000 fea3 	bl	800121c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 80004d6:	4b1d      	ldr	r3, [pc, #116]	; (800054c <HAL_ADC_MspInit+0x174>)
 80004d8:	4a1d      	ldr	r2, [pc, #116]	; (8000550 <HAL_ADC_MspInit+0x178>)
 80004da:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80004dc:	4b1b      	ldr	r3, [pc, #108]	; (800054c <HAL_ADC_MspInit+0x174>)
 80004de:	2273      	movs	r2, #115	; 0x73
 80004e0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004e2:	4b1a      	ldr	r3, [pc, #104]	; (800054c <HAL_ADC_MspInit+0x174>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80004e8:	4b18      	ldr	r3, [pc, #96]	; (800054c <HAL_ADC_MspInit+0x174>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80004ee:	4b17      	ldr	r3, [pc, #92]	; (800054c <HAL_ADC_MspInit+0x174>)
 80004f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004f4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <HAL_ADC_MspInit+0x174>)
 80004f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004fc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <HAL_ADC_MspInit+0x174>)
 8000500:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000504:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <HAL_ADC_MspInit+0x174>)
 8000508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800050c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <HAL_ADC_MspInit+0x174>)
 8000510:	2200      	movs	r2, #0
 8000512:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <HAL_ADC_MspInit+0x174>)
 8000516:	2200      	movs	r2, #0
 8000518:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800051a:	480c      	ldr	r0, [pc, #48]	; (800054c <HAL_ADC_MspInit+0x174>)
 800051c:	f002 fa76 	bl	8002a0c <HAL_DMA_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <HAL_ADC_MspInit+0x152>
    {
      Error_Handler();
 8000526:	f000 fad7 	bl	8000ad8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a07      	ldr	r2, [pc, #28]	; (800054c <HAL_ADC_MspInit+0x174>)
 800052e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000530:	4a06      	ldr	r2, [pc, #24]	; (800054c <HAL_ADC_MspInit+0x174>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000536:	bf00      	nop
 8000538:	37f0      	adds	r7, #240	; 0xf0
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	58026000 	.word	0x58026000
 8000544:	58024400 	.word	0x58024400
 8000548:	58021400 	.word	0x58021400
 800054c:	240000e4 	.word	0x240000e4
 8000550:	40020010 	.word	0x40020010

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <MX_DMA_Init+0x3c>)
 800055c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <MX_DMA_Init+0x3c>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_DMA_Init+0x3c>)
 800056c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000578:	2200      	movs	r2, #0
 800057a:	2105      	movs	r1, #5
 800057c:	200b      	movs	r0, #11
 800057e:	f002 fa1d 	bl	80029bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000582:	200b      	movs	r0, #11
 8000584:	f002 fa34 	bl	80029f0 <HAL_NVIC_EnableIRQ>

}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	58024400 	.word	0x58024400

08000594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qMeasurements */
  qMeasurementsHandle = osMessageQueueNew (16, sizeof(float), &qMeasurements_attributes);
 8000598:	4a08      	ldr	r2, [pc, #32]	; (80005bc <MX_FREERTOS_Init+0x28>)
 800059a:	2104      	movs	r1, #4
 800059c:	2010      	movs	r0, #16
 800059e:	f009 fcfd 	bl	8009f9c <osMessageQueueNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <MX_FREERTOS_Init+0x2c>)
 80005a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Measurements */
  MeasurementsHandle = osThreadNew(initMeasurements, NULL, &Measurements_attributes);
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <MX_FREERTOS_Init+0x30>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	4806      	ldr	r0, [pc, #24]	; (80005c8 <MX_FREERTOS_Init+0x34>)
 80005ae:	f009 fc63 	bl	8009e78 <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a05      	ldr	r2, [pc, #20]	; (80005cc <MX_FREERTOS_Init+0x38>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	0800cdb0 	.word	0x0800cdb0
 80005c0:	24000160 	.word	0x24000160
 80005c4:	0800cd8c 	.word	0x0800cd8c
 80005c8:	080005d1 	.word	0x080005d1
 80005cc:	2400015c 	.word	0x2400015c

080005d0 <initMeasurements>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_initMeasurements */
void initMeasurements(void *argument)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	// Wait for notification from TIM1 ISR
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80005d8:	f04f 31ff 	mov.w	r1, #4294967295
 80005dc:	2001      	movs	r0, #1
 80005de:	f00b fa5f 	bl	800baa0 <ulTaskNotifyTake>

	// Read ADC3 and use getLinear and getTemperature results
	float current = getLinear(Results_ADC3_buffer[0], currentSlope, currentOffset);
 80005e2:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <initMeasurements+0xc0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a2b      	ldr	r2, [pc, #172]	; (8000694 <initMeasurements+0xc4>)
 80005e8:	6812      	ldr	r2, [r2, #0]
 80005ea:	ee07 2a90 	vmov	s15, r2
 80005ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005f2:	4a29      	ldr	r2, [pc, #164]	; (8000698 <initMeasurements+0xc8>)
 80005f4:	6812      	ldr	r2, [r2, #0]
 80005f6:	ee07 2a10 	vmov	s14, r2
 80005fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80005fe:	eef0 0a47 	vmov.f32	s1, s14
 8000602:	eeb0 0a67 	vmov.f32	s0, s15
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fae0 	bl	8000bcc <getLinear>
 800060c:	eef0 7a40 	vmov.f32	s15, s0
 8000610:	edc7 7a05 	vstr	s15, [r7, #20]
	float voltage = getLinear(Results_ADC3_buffer[2], voltageSlope, voltageOffset);
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <initMeasurements+0xc0>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	4a20      	ldr	r2, [pc, #128]	; (800069c <initMeasurements+0xcc>)
 800061a:	6812      	ldr	r2, [r2, #0]
 800061c:	ee07 2a90 	vmov	s15, r2
 8000620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000624:	4a1e      	ldr	r2, [pc, #120]	; (80006a0 <initMeasurements+0xd0>)
 8000626:	6812      	ldr	r2, [r2, #0]
 8000628:	ee07 2a10 	vmov	s14, r2
 800062c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000630:	eef0 0a47 	vmov.f32	s1, s14
 8000634:	eeb0 0a67 	vmov.f32	s0, s15
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fac7 	bl	8000bcc <getLinear>
 800063e:	eef0 7a40 	vmov.f32	s15, s0
 8000642:	edc7 7a04 	vstr	s15, [r7, #16]
	float temp = getTemperature(Results_ADC3_buffer[1], lut_size, lut_bits, lut_temp);
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <initMeasurements+0xc0>)
 8000648:	6858      	ldr	r0, [r3, #4]
 800064a:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <initMeasurements+0xd4>)
 800064c:	6819      	ldr	r1, [r3, #0]
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <initMeasurements+0xd8>)
 8000650:	4a16      	ldr	r2, [pc, #88]	; (80006ac <initMeasurements+0xdc>)
 8000652:	f000 fa46 	bl	8000ae2 <getTemperature>
 8000656:	eef0 7a40 	vmov.f32	s15, s0
 800065a:	edc7 7a03 	vstr	s15, [r7, #12]

	// Send to qMeasurements
	osMessageQueuePut(qMeasurementsHandle, &current, 0, 0);
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <initMeasurements+0xe0>)
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	f107 0114 	add.w	r1, r7, #20
 8000666:	2300      	movs	r3, #0
 8000668:	2200      	movs	r2, #0
 800066a:	f009 fd0b 	bl	800a084 <osMessageQueuePut>
	osMessageQueuePut(qMeasurementsHandle, &voltage, 0, 0);
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <initMeasurements+0xe0>)
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	f107 0110 	add.w	r1, r7, #16
 8000676:	2300      	movs	r3, #0
 8000678:	2200      	movs	r2, #0
 800067a:	f009 fd03 	bl	800a084 <osMessageQueuePut>
	osMessageQueuePut(qMeasurementsHandle, &temp, 0, 0);
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <initMeasurements+0xe0>)
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	f107 010c 	add.w	r1, r7, #12
 8000686:	2300      	movs	r3, #0
 8000688:	2200      	movs	r2, #0
 800068a:	f009 fcfb 	bl	800a084 <osMessageQueuePut>
  {
 800068e:	e7a3      	b.n	80005d8 <initMeasurements+0x8>
 8000690:	24000164 	.word	0x24000164
 8000694:	0800cd7c 	.word	0x0800cd7c
 8000698:	0800cd80 	.word	0x0800cd80
 800069c:	0800cd84 	.word	0x0800cd84
 80006a0:	0800cd88 	.word	0x0800cd88
 80006a4:	0800cd78 	.word	0x0800cd78
 80006a8:	0800cd44 	.word	0x0800cd44
 80006ac:	0800cd10 	.word	0x0800cd10
 80006b0:	24000160 	.word	0x24000160

080006b4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08e      	sub	sp, #56	; 0x38
 80006b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b8a      	ldr	r3, [pc, #552]	; (80008f4 <MX_GPIO_Init+0x240>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d0:	4a88      	ldr	r2, [pc, #544]	; (80008f4 <MX_GPIO_Init+0x240>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006da:	4b86      	ldr	r3, [pc, #536]	; (80008f4 <MX_GPIO_Init+0x240>)
 80006dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	623b      	str	r3, [r7, #32]
 80006e6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e8:	4b82      	ldr	r3, [pc, #520]	; (80008f4 <MX_GPIO_Init+0x240>)
 80006ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ee:	4a81      	ldr	r2, [pc, #516]	; (80008f4 <MX_GPIO_Init+0x240>)
 80006f0:	f043 0320 	orr.w	r3, r3, #32
 80006f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f8:	4b7e      	ldr	r3, [pc, #504]	; (80008f4 <MX_GPIO_Init+0x240>)
 80006fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fe:	f003 0320 	and.w	r3, r3, #32
 8000702:	61fb      	str	r3, [r7, #28]
 8000704:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	4b7b      	ldr	r3, [pc, #492]	; (80008f4 <MX_GPIO_Init+0x240>)
 8000708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070c:	4a79      	ldr	r2, [pc, #484]	; (80008f4 <MX_GPIO_Init+0x240>)
 800070e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000712:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000716:	4b77      	ldr	r3, [pc, #476]	; (80008f4 <MX_GPIO_Init+0x240>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000720:	61bb      	str	r3, [r7, #24]
 8000722:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	4b73      	ldr	r3, [pc, #460]	; (80008f4 <MX_GPIO_Init+0x240>)
 8000726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072a:	4a72      	ldr	r2, [pc, #456]	; (80008f4 <MX_GPIO_Init+0x240>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000734:	4b6f      	ldr	r3, [pc, #444]	; (80008f4 <MX_GPIO_Init+0x240>)
 8000736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b6c      	ldr	r3, [pc, #432]	; (80008f4 <MX_GPIO_Init+0x240>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	4a6a      	ldr	r2, [pc, #424]	; (80008f4 <MX_GPIO_Init+0x240>)
 800074a:	f043 0302 	orr.w	r3, r3, #2
 800074e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000752:	4b68      	ldr	r3, [pc, #416]	; (80008f4 <MX_GPIO_Init+0x240>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	f003 0302 	and.w	r3, r3, #2
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000760:	4b64      	ldr	r3, [pc, #400]	; (80008f4 <MX_GPIO_Init+0x240>)
 8000762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000766:	4a63      	ldr	r2, [pc, #396]	; (80008f4 <MX_GPIO_Init+0x240>)
 8000768:	f043 0310 	orr.w	r3, r3, #16
 800076c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000770:	4b60      	ldr	r3, [pc, #384]	; (80008f4 <MX_GPIO_Init+0x240>)
 8000772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000776:	f003 0310 	and.w	r3, r3, #16
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	4b5d      	ldr	r3, [pc, #372]	; (80008f4 <MX_GPIO_Init+0x240>)
 8000780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000784:	4a5b      	ldr	r2, [pc, #364]	; (80008f4 <MX_GPIO_Init+0x240>)
 8000786:	f043 0308 	orr.w	r3, r3, #8
 800078a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078e:	4b59      	ldr	r3, [pc, #356]	; (80008f4 <MX_GPIO_Init+0x240>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000794:	f003 0308 	and.w	r3, r3, #8
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800079c:	4b55      	ldr	r3, [pc, #340]	; (80008f4 <MX_GPIO_Init+0x240>)
 800079e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a2:	4a54      	ldr	r2, [pc, #336]	; (80008f4 <MX_GPIO_Init+0x240>)
 80007a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ac:	4b51      	ldr	r3, [pc, #324]	; (80008f4 <MX_GPIO_Init+0x240>)
 80007ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f244 0101 	movw	r1, #16385	; 0x4001
 80007c0:	484d      	ldr	r0, [pc, #308]	; (80008f8 <MX_GPIO_Init+0x244>)
 80007c2:	f004 fbab 	bl	8004f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2102      	movs	r1, #2
 80007ca:	484c      	ldr	r0, [pc, #304]	; (80008fc <MX_GPIO_Init+0x248>)
 80007cc:	f004 fba6 	bl	8004f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	4619      	mov	r1, r3
 80007e4:	4846      	ldr	r0, [pc, #280]	; (8000900 <MX_GPIO_Init+0x24c>)
 80007e6:	f004 f9e9 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80007ea:	2386      	movs	r3, #134	; 0x86
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007fa:	230b      	movs	r3, #11
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000802:	4619      	mov	r1, r3
 8000804:	483f      	ldr	r0, [pc, #252]	; (8000904 <MX_GPIO_Init+0x250>)
 8000806:	f004 f9d9 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800080a:	2330      	movs	r3, #48	; 0x30
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800081a:	230b      	movs	r3, #11
 800081c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	4619      	mov	r1, r3
 8000824:	4836      	ldr	r0, [pc, #216]	; (8000900 <MX_GPIO_Init+0x24c>)
 8000826:	f004 f9c9 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800082a:	f244 0301 	movw	r3, #16385	; 0x4001
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	482d      	ldr	r0, [pc, #180]	; (80008f8 <MX_GPIO_Init+0x244>)
 8000844:	f004 f9ba 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800085a:	230b      	movs	r3, #11
 800085c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	4824      	ldr	r0, [pc, #144]	; (80008f8 <MX_GPIO_Init+0x244>)
 8000866:	f004 f9a9 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800086a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800087c:	2307      	movs	r3, #7
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	4619      	mov	r1, r3
 8000886:	4820      	ldr	r0, [pc, #128]	; (8000908 <MX_GPIO_Init+0x254>)
 8000888:	f004 f998 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800088c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800089e:	230a      	movs	r3, #10
 80008a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a6:	4619      	mov	r1, r3
 80008a8:	4816      	ldr	r0, [pc, #88]	; (8000904 <MX_GPIO_Init+0x250>)
 80008aa:	f004 f987 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80008ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c0:	230b      	movs	r3, #11
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c8:	4619      	mov	r1, r3
 80008ca:	4810      	ldr	r0, [pc, #64]	; (800090c <MX_GPIO_Init+0x258>)
 80008cc:	f004 f976 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008d0:	2302      	movs	r3, #2
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	4619      	mov	r1, r3
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_GPIO_Init+0x248>)
 80008e8:	f004 f968 	bl	8004bbc <HAL_GPIO_Init>

}
 80008ec:	bf00      	nop
 80008ee:	3738      	adds	r7, #56	; 0x38
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	58024400 	.word	0x58024400
 80008f8:	58020400 	.word	0x58020400
 80008fc:	58021000 	.word	0x58021000
 8000900:	58020800 	.word	0x58020800
 8000904:	58020000 	.word	0x58020000
 8000908:	58020c00 	.word	0x58020c00
 800090c:	58021800 	.word	0x58021800

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000914:	f000 fc1a 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000918:	f000 f81e 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091c:	f7ff feca 	bl	80006b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000920:	f7ff fe18 	bl	8000554 <MX_DMA_Init>
  MX_ADC3_Init();
 8000924:	f7ff fcdc 	bl	80002e0 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000928:	f000 facc 	bl	8000ec4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 800092c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000930:	2100      	movs	r1, #0
 8000932:	4807      	ldr	r0, [pc, #28]	; (8000950 <main+0x40>)
 8000934:	f001 ff26 	bl	8002784 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc3, (uint32_t *)&Results_ADC3_buffer,3);
 8000938:	2203      	movs	r2, #3
 800093a:	4906      	ldr	r1, [pc, #24]	; (8000954 <main+0x44>)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <main+0x40>)
 800093e:	f001 f833 	bl	80019a8 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000942:	f009 fa4f 	bl	8009de4 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000946:	f7ff fe25 	bl	8000594 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800094a:	f009 fa6f 	bl	8009e2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800094e:	e7fe      	b.n	800094e <main+0x3e>
 8000950:	24000080 	.word	0x24000080
 8000954:	24000164 	.word	0x24000164

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b09e      	sub	sp, #120	; 0x78
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000962:	224c      	movs	r2, #76	; 0x4c
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f00c f8c0 	bl	800caec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2220      	movs	r2, #32
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f00c f8b9 	bl	800caec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800097a:	2002      	movs	r0, #2
 800097c:	f004 fae8 	bl	8004f50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	4b48      	ldr	r3, [pc, #288]	; (8000aa8 <SystemClock_Config+0x150>)
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	4a47      	ldr	r2, [pc, #284]	; (8000aa8 <SystemClock_Config+0x150>)
 800098a:	f023 0301 	bic.w	r3, r3, #1
 800098e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000990:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <SystemClock_Config+0x150>)
 8000992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	4b44      	ldr	r3, [pc, #272]	; (8000aac <SystemClock_Config+0x154>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a43      	ldr	r2, [pc, #268]	; (8000aac <SystemClock_Config+0x154>)
 80009a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b41      	ldr	r3, [pc, #260]	; (8000aac <SystemClock_Config+0x154>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009b2:	bf00      	nop
 80009b4:	4b3d      	ldr	r3, [pc, #244]	; (8000aac <SystemClock_Config+0x154>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009c0:	d1f8      	bne.n	80009b4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	4b3b      	ldr	r3, [pc, #236]	; (8000ab0 <SystemClock_Config+0x158>)
 80009c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009c8:	4a39      	ldr	r2, [pc, #228]	; (8000ab0 <SystemClock_Config+0x158>)
 80009ca:	f043 0302 	orr.w	r3, r3, #2
 80009ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009d2:	4b37      	ldr	r3, [pc, #220]	; (8000ab0 <SystemClock_Config+0x158>)
 80009d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009d8:	f003 0302 	and.w	r3, r3, #2
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009e0:	2300      	movs	r3, #0
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	4b31      	ldr	r3, [pc, #196]	; (8000aac <SystemClock_Config+0x154>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a30      	ldr	r2, [pc, #192]	; (8000aac <SystemClock_Config+0x154>)
 80009ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <SystemClock_Config+0x154>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <SystemClock_Config+0x150>)
 80009fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fe:	4a2a      	ldr	r2, [pc, #168]	; (8000aa8 <SystemClock_Config+0x150>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a06:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <SystemClock_Config+0x150>)
 8000a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a12:	bf00      	nop
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <SystemClock_Config+0x154>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a20:	d1f8      	bne.n	8000a14 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a22:	2301      	movs	r3, #1
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a26:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a30:	2302      	movs	r3, #2
 8000a32:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000a38:	2378      	movs	r3, #120	; 0x78
 8000a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a40:	2304      	movs	r3, #4
 8000a42:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a48:	230c      	movs	r3, #12
 8000a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f004 fab3 	bl	8004fc4 <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000a64:	f000 f838 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a68:	233f      	movs	r3, #63	; 0x3f
 8000a6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a74:	2308      	movs	r3, #8
 8000a76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a78:	2340      	movs	r3, #64	; 0x40
 8000a7a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a7c:	2340      	movs	r3, #64	; 0x40
 8000a7e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a86:	2340      	movs	r3, #64	; 0x40
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	2104      	movs	r1, #4
 8000a90:	4618      	mov	r0, r3
 8000a92:	f004 fef1 	bl	8005878 <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000a9c:	f000 f81c 	bl	8000ad8 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3778      	adds	r7, #120	; 0x78
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	58000400 	.word	0x58000400
 8000aac:	58024800 	.word	0x58024800
 8000ab0:	58024400 	.word	0x58024400

08000ab4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ac6:	f000 fb7d 	bl	80011c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40001000 	.word	0x40001000

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <Error_Handler+0x8>

08000ae2 <getTemperature>:
 * @param lut_temp Array containing corresponding temperature values in the LUT.
 * @return The temperature corresponding to the ADC bits.
 */


float getTemperature(uint32_t bits, int lut_size, const int lut_bits[], const int lut_temp[]) {
 8000ae2:	b480      	push	{r7}
 8000ae4:	b089      	sub	sp, #36	; 0x24
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	60f8      	str	r0, [r7, #12]
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	603b      	str	r3, [r7, #0]
    // Find the closest ADC values in the LUT
    int i;
    for (i = 1; i < lut_size; i++) {
 8000af0:	2301      	movs	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	e00b      	b.n	8000b0e <getTemperature+0x2c>
        if (bits < lut_bits[i]) {
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d307      	bcc.n	8000b18 <getTemperature+0x36>
    for (i = 1; i < lut_size; i++) {
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	69fa      	ldr	r2, [r7, #28]
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	dbef      	blt.n	8000af6 <getTemperature+0x14>
 8000b16:	e000      	b.n	8000b1a <getTemperature+0x38>
            break;
 8000b18:	bf00      	nop
        }
    }

    // Calculate the interpolated temperature
    float adc_diff = lut_bits[i] - lut_bits[i - 1];
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	69f9      	ldr	r1, [r7, #28]
 8000b26:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000b2a:	440b      	add	r3, r1
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	440b      	add	r3, r1
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	ee07 3a90 	vmov	s15, r3
 8000b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b3e:	edc7 7a06 	vstr	s15, [r7, #24]
    float temp_diff = lut_temp[i] - lut_temp[i - 1];
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	4413      	add	r3, r2
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	69f9      	ldr	r1, [r7, #28]
 8000b4e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000b52:	440b      	add	r3, r1
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	6839      	ldr	r1, [r7, #0]
 8000b58:	440b      	add	r3, r1
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	ee07 3a90 	vmov	s15, r3
 8000b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b66:	edc7 7a05 	vstr	s15, [r7, #20]
    float temp = lut_temp[i - 1] + (temp_diff * (bits - lut_bits[i - 1])) / adc_diff;
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000b70:	4413      	add	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	ee07 3a90 	vmov	s15, r3
 8000b7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b82:	69fa      	ldr	r2, [r7, #28]
 8000b84:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000b88:	4413      	add	r3, r2
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	1a9b      	subs	r3, r3, r2
 8000b98:	ee07 3a90 	vmov	s15, r3
 8000b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000ba0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ba4:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000ba8:	edd7 6a06 	vldr	s13, [r7, #24]
 8000bac:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb4:	edc7 7a04 	vstr	s15, [r7, #16]

    return temp;
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	ee07 3a90 	vmov	s15, r3
}
 8000bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc2:	3724      	adds	r7, #36	; 0x24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <getLinear>:
 * @param bits The ADC reading.
 * @param slope The slope (volts per unit).
 * @param offset The offset (volts at zero).
 * @return The physical measurement.
 */
float getLinear(uint32_t bits, float slope, float offset) {
 8000bcc:	b480      	push	{r7}
 8000bce:	b087      	sub	sp, #28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000bd8:	edc7 0a01 	vstr	s1, [r7, #4]
    // Convert ADC reading to voltage
    float voltage = bits * (3.3f / 4095); // Assuming 12-bit ADC and 3.3V reference
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	ee07 3a90 	vmov	s15, r3
 8000be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000be6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000c20 <getLinear+0x54>
 8000bea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bee:	edc7 7a05 	vstr	s15, [r7, #20]

    // Convert voltage to physical measurement
    float measurement = (voltage - offset) / slope;
 8000bf2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bfa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000bfe:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c06:	edc7 7a04 	vstr	s15, [r7, #16]

    return measurement;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	ee07 3a90 	vmov	s15, r3
}
 8000c10:	eeb0 0a67 	vmov.f32	s0, s15
 8000c14:	371c      	adds	r7, #28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	3a534067 	.word	0x3a534067

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_MspInit+0x38>)
 8000c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c30:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <HAL_MspInit+0x38>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_MspInit+0x38>)
 8000c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f06f 0001 	mvn.w	r0, #1
 8000c50:	f001 feb4 	bl	80029bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	58024400 	.word	0x58024400

08000c60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b090      	sub	sp, #64	; 0x40
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b0f      	cmp	r3, #15
 8000c6c:	d827      	bhi.n	8000cbe <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	2036      	movs	r0, #54	; 0x36
 8000c74:	f001 fea2 	bl	80029bc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c78:	2036      	movs	r0, #54	; 0x36
 8000c7a:	f001 feb9 	bl	80029f0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000c7e:	4a29      	ldr	r2, [pc, #164]	; (8000d24 <HAL_InitTick+0xc4>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <HAL_InitTick+0xc8>)
 8000c86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c8a:	4a27      	ldr	r2, [pc, #156]	; (8000d28 <HAL_InitTick+0xc8>)
 8000c8c:	f043 0310 	orr.w	r3, r3, #16
 8000c90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <HAL_InitTick+0xc8>)
 8000c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c9a:	f003 0310 	and.w	r3, r3, #16
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca2:	f107 0210 	add.w	r2, r7, #16
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f005 f959 	bl	8005f64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d106      	bne.n	8000cca <HAL_InitTick+0x6a>
 8000cbc:	e001      	b.n	8000cc2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e02b      	b.n	8000d1a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cc2:	f005 f939 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8000cc6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000cc8:	e004      	b.n	8000cd4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cca:	f005 f935 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cd6:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <HAL_InitTick+0xcc>)
 8000cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cdc:	0c9b      	lsrs	r3, r3, #18
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <HAL_InitTick+0xd0>)
 8000ce4:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <HAL_InitTick+0xd4>)
 8000ce6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_InitTick+0xd0>)
 8000cea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cf0:	4a0f      	ldr	r2, [pc, #60]	; (8000d30 <HAL_InitTick+0xd0>)
 8000cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cf4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_InitTick+0xd0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_InitTick+0xd0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d02:	480b      	ldr	r0, [pc, #44]	; (8000d30 <HAL_InitTick+0xd0>)
 8000d04:	f007 fe6e 	bl	80089e4 <HAL_TIM_Base_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d104      	bne.n	8000d18 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d0e:	4808      	ldr	r0, [pc, #32]	; (8000d30 <HAL_InitTick+0xd0>)
 8000d10:	f007 fec0 	bl	8008a94 <HAL_TIM_Base_Start_IT>
 8000d14:	4603      	mov	r3, r0
 8000d16:	e000      	b.n	8000d1a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3740      	adds	r7, #64	; 0x40
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	24000008 	.word	0x24000008
 8000d28:	58024400 	.word	0x58024400
 8000d2c:	431bde83 	.word	0x431bde83
 8000d30:	24000170 	.word	0x24000170
 8000d34:	40001000 	.word	0x40001000

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <DMA1_Stream0_IRQHandler+0x10>)
 8000d6a:	f002 fc15 	bl	8003598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	240000e4 	.word	0x240000e4

08000d78 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <TIM1_BRK_IRQHandler+0x10>)
 8000d7e:	f007 ff62 	bl	8008c46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	240001bc 	.word	0x240001bc

08000d8c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <TIM1_UP_IRQHandler+0x10>)
 8000d92:	f007 ff58 	bl	8008c46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	240001bc 	.word	0x240001bc

08000da0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <TIM6_DAC_IRQHandler+0x10>)
 8000da6:	f007 ff4e 	bl	8008c46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	24000170 	.word	0x24000170

08000db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000db8:	4b37      	ldr	r3, [pc, #220]	; (8000e98 <SystemInit+0xe4>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dbe:	4a36      	ldr	r2, [pc, #216]	; (8000e98 <SystemInit+0xe4>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dc8:	4b34      	ldr	r3, [pc, #208]	; (8000e9c <SystemInit+0xe8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 030f 	and.w	r3, r3, #15
 8000dd0:	2b06      	cmp	r3, #6
 8000dd2:	d807      	bhi.n	8000de4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dd4:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <SystemInit+0xe8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 030f 	bic.w	r3, r3, #15
 8000ddc:	4a2f      	ldr	r2, [pc, #188]	; (8000e9c <SystemInit+0xe8>)
 8000dde:	f043 0307 	orr.w	r3, r3, #7
 8000de2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000de4:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <SystemInit+0xec>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a2d      	ldr	r2, [pc, #180]	; (8000ea0 <SystemInit+0xec>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000df0:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <SystemInit+0xec>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000df6:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <SystemInit+0xec>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4929      	ldr	r1, [pc, #164]	; (8000ea0 <SystemInit+0xec>)
 8000dfc:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <SystemInit+0xf0>)
 8000dfe:	4013      	ands	r3, r2
 8000e00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <SystemInit+0xe8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d007      	beq.n	8000e1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <SystemInit+0xe8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f023 030f 	bic.w	r3, r3, #15
 8000e16:	4a21      	ldr	r2, [pc, #132]	; (8000e9c <SystemInit+0xe8>)
 8000e18:	f043 0307 	orr.w	r3, r3, #7
 8000e1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e1e:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <SystemInit+0xec>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e24:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <SystemInit+0xec>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <SystemInit+0xec>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <SystemInit+0xec>)
 8000e32:	4a1d      	ldr	r2, [pc, #116]	; (8000ea8 <SystemInit+0xf4>)
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <SystemInit+0xec>)
 8000e38:	4a1c      	ldr	r2, [pc, #112]	; (8000eac <SystemInit+0xf8>)
 8000e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <SystemInit+0xec>)
 8000e3e:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <SystemInit+0xfc>)
 8000e40:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <SystemInit+0xec>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <SystemInit+0xec>)
 8000e4a:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <SystemInit+0xfc>)
 8000e4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <SystemInit+0xec>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <SystemInit+0xec>)
 8000e56:	4a16      	ldr	r2, [pc, #88]	; (8000eb0 <SystemInit+0xfc>)
 8000e58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <SystemInit+0xec>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <SystemInit+0xec>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <SystemInit+0xec>)
 8000e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <SystemInit+0xec>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <SystemInit+0x100>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <SystemInit+0x104>)
 8000e78:	4013      	ands	r3, r2
 8000e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e7e:	d202      	bcs.n	8000e86 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <SystemInit+0x108>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <SystemInit+0x10c>)
 8000e88:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e8c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00
 8000e9c:	52002000 	.word	0x52002000
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ea8:	02020200 	.word	0x02020200
 8000eac:	01ff0000 	.word	0x01ff0000
 8000eb0:	01010280 	.word	0x01010280
 8000eb4:	5c001000 	.word	0x5c001000
 8000eb8:	ffff0000 	.word	0xffff0000
 8000ebc:	51008108 	.word	0x51008108
 8000ec0:	52004000 	.word	0x52004000

08000ec4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b09a      	sub	sp, #104	; 0x68
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
 8000ef4:	615a      	str	r2, [r3, #20]
 8000ef6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	222c      	movs	r2, #44	; 0x2c
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00b fdf4 	bl	800caec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f04:	4b44      	ldr	r3, [pc, #272]	; (8001018 <MX_TIM1_Init+0x154>)
 8000f06:	4a45      	ldr	r2, [pc, #276]	; (800101c <MX_TIM1_Init+0x158>)
 8000f08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f0a:	4b43      	ldr	r3, [pc, #268]	; (8001018 <MX_TIM1_Init+0x154>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f10:	4b41      	ldr	r3, [pc, #260]	; (8001018 <MX_TIM1_Init+0x154>)
 8000f12:	2220      	movs	r2, #32
 8000f14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = FSW;
 8000f16:	4b40      	ldr	r3, [pc, #256]	; (8001018 <MX_TIM1_Init+0x154>)
 8000f18:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000f1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1e:	4b3e      	ldr	r3, [pc, #248]	; (8001018 <MX_TIM1_Init+0x154>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f24:	4b3c      	ldr	r3, [pc, #240]	; (8001018 <MX_TIM1_Init+0x154>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f2a:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <MX_TIM1_Init+0x154>)
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f30:	4839      	ldr	r0, [pc, #228]	; (8001018 <MX_TIM1_Init+0x154>)
 8000f32:	f007 fd57 	bl	80089e4 <HAL_TIM_Base_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f3c:	f7ff fdcc 	bl	8000ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f44:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4832      	ldr	r0, [pc, #200]	; (8001018 <MX_TIM1_Init+0x154>)
 8000f4e:	f008 f8ad 	bl	80090ac <HAL_TIM_ConfigClockSource>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f58:	f7ff fdbe 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f5c:	482e      	ldr	r0, [pc, #184]	; (8001018 <MX_TIM1_Init+0x154>)
 8000f5e:	f007 fe11 	bl	8008b84 <HAL_TIM_PWM_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f68:	f7ff fdb6 	bl	8000ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f6c:	2320      	movs	r3, #32
 8000f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4826      	ldr	r0, [pc, #152]	; (8001018 <MX_TIM1_Init+0x154>)
 8000f80:	f008 fdc2 	bl	8009b08 <HAL_TIMEx_MasterConfigSynchronization>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f8a:	f7ff fda5 	bl	8000ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8e:	2360      	movs	r3, #96	; 0x60
 8000f90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f96:	2300      	movs	r3, #0
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000faa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4818      	ldr	r0, [pc, #96]	; (8001018 <MX_TIM1_Init+0x154>)
 8000fb6:	f007 ff65 	bl	8008e84 <HAL_TIM_PWM_ConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000fc0:	f7ff fd8a 	bl	8000ad8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000fcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = DEAD_TIME;
 8000fd2:	23f0      	movs	r3, #240	; 0xf0
 8000fd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fe8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4807      	ldr	r0, [pc, #28]	; (8001018 <MX_TIM1_Init+0x154>)
 8000ffc:	f008 fe12 	bl	8009c24 <HAL_TIMEx_ConfigBreakDeadTime>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001006:	f7ff fd67 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <MX_TIM1_Init+0x154>)
 800100c:	f000 f838 	bl	8001080 <HAL_TIM_MspPostInit>

}
 8001010:	bf00      	nop
 8001012:	3768      	adds	r7, #104	; 0x68
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	240001bc 	.word	0x240001bc
 800101c:	40010000 	.word	0x40010000

08001020 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a12      	ldr	r2, [pc, #72]	; (8001078 <HAL_TIM_Base_MspInit+0x58>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d11e      	bne.n	8001070 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_TIM_Base_MspInit+0x5c>)
 8001034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001038:	4a10      	ldr	r2, [pc, #64]	; (800107c <HAL_TIM_Base_MspInit+0x5c>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_TIM_Base_MspInit+0x5c>)
 8001044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2105      	movs	r1, #5
 8001054:	2018      	movs	r0, #24
 8001056:	f001 fcb1 	bl	80029bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800105a:	2018      	movs	r0, #24
 800105c:	f001 fcc8 	bl	80029f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2105      	movs	r1, #5
 8001064:	2019      	movs	r0, #25
 8001066:	f001 fca9 	bl	80029bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800106a:	2019      	movs	r0, #25
 800106c:	f001 fcc0 	bl	80029f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40010000 	.word	0x40010000
 800107c:	58024400 	.word	0x58024400

08001080 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a13      	ldr	r2, [pc, #76]	; (80010ec <HAL_TIM_MspPostInit+0x6c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d11f      	bne.n	80010e2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_TIM_MspPostInit+0x70>)
 80010a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a8:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <HAL_TIM_MspPostInit+0x70>)
 80010aa:	f043 0310 	orr.w	r3, r3, #16
 80010ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_TIM_MspPostInit+0x70>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b8:	f003 0310 	and.w	r3, r3, #16
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <HAL_TIM_MspPostInit+0x74>)
 80010de:	f003 fd6d 	bl	8004bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010e2:	bf00      	nop
 80010e4:	3720      	adds	r7, #32
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40010000 	.word	0x40010000
 80010f0:	58024400 	.word	0x58024400
 80010f4:	58021000 	.word	0x58021000

080010f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001130 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010fc:	f7ff fe5a 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001100:	480c      	ldr	r0, [pc, #48]	; (8001134 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001102:	490d      	ldr	r1, [pc, #52]	; (8001138 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001118:	4c0a      	ldr	r4, [pc, #40]	; (8001144 <LoopFillZerobss+0x22>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001126:	f00b fd3f 	bl	800cba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112a:	f7ff fbf1 	bl	8000910 <main>
  bx  lr
 800112e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001134:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001138:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 800113c:	0800cde8 	.word	0x0800cde8
  ldr r2, =_sbss
 8001140:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001144:	24004d34 	.word	0x24004d34

08001148 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC3_IRQHandler>
	...

0800114c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001152:	2003      	movs	r0, #3
 8001154:	f001 fc27 	bl	80029a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001158:	f004 fd44 	bl	8005be4 <HAL_RCC_GetSysClockFreq>
 800115c:	4602      	mov	r2, r0
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_Init+0x68>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	4913      	ldr	r1, [pc, #76]	; (80011b8 <HAL_Init+0x6c>)
 800116a:	5ccb      	ldrb	r3, [r1, r3]
 800116c:	f003 031f 	and.w	r3, r3, #31
 8001170:	fa22 f303 	lsr.w	r3, r2, r3
 8001174:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <HAL_Init+0x68>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <HAL_Init+0x6c>)
 8001180:	5cd3      	ldrb	r3, [r2, r3]
 8001182:	f003 031f 	and.w	r3, r3, #31
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	fa22 f303 	lsr.w	r3, r2, r3
 800118c:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <HAL_Init+0x70>)
 800118e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001190:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <HAL_Init+0x74>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001196:	200f      	movs	r0, #15
 8001198:	f7ff fd62 	bl	8000c60 <HAL_InitTick>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e002      	b.n	80011ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011a6:	f7ff fd3d 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	58024400 	.word	0x58024400
 80011b8:	0800cdc8 	.word	0x0800cdc8
 80011bc:	24000004 	.word	0x24000004
 80011c0:	24000000 	.word	0x24000000

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	2400000c 	.word	0x2400000c
 80011e8:	24000208 	.word	0x24000208

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	24000208 	.word	0x24000208

08001204 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_GetREVID+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	0c1b      	lsrs	r3, r3, #16
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	5c001000 	.word	0x5c001000

0800121c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	43db      	mvns	r3, r3
 800122e:	401a      	ands	r2, r3
 8001230:	4904      	ldr	r1, [pc, #16]	; (8001244 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	4313      	orrs	r3, r2
 8001236:	604b      	str	r3, [r1, #4]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	58000400 	.word	0x58000400

08001248 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	609a      	str	r2, [r3, #8]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	609a      	str	r2, [r3, #8]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3360      	adds	r3, #96	; 0x60
 80012c2:	461a      	mov	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	430b      	orrs	r3, r1
 80012de:	431a      	orrs	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	f003 031f 	and.w	r3, r3, #31
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	431a      	orrs	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	611a      	str	r2, [r3, #16]
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001322:	b480      	push	{r7}
 8001324:	b087      	sub	sp, #28
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3360      	adds	r3, #96	; 0x60
 8001332:	461a      	mov	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	431a      	orrs	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	601a      	str	r2, [r3, #0]
  }
}
 800134c:	bf00      	nop
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800136c:	2301      	movs	r3, #1
 800136e:	e000      	b.n	8001372 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800137e:	b480      	push	{r7}
 8001380:	b087      	sub	sp, #28
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	3330      	adds	r3, #48	; 0x30
 800138e:	461a      	mov	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	4413      	add	r3, r2
 800139c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	211f      	movs	r1, #31
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	401a      	ands	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	0e9b      	lsrs	r3, r3, #26
 80013b6:	f003 011f 	and.w	r1, r3, #31
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	f003 031f 	and.w	r3, r3, #31
 80013c0:	fa01 f303 	lsl.w	r3, r1, r3
 80013c4:	431a      	orrs	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013ca:	bf00      	nop
 80013cc:	371c      	adds	r7, #28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f023 0203 	bic.w	r2, r3, #3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	60da      	str	r2, [r3, #12]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3314      	adds	r3, #20
 800140c:	461a      	mov	r2, r3
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	0e5b      	lsrs	r3, r3, #25
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	0d1b      	lsrs	r3, r3, #20
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	2107      	movs	r1, #7
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	401a      	ands	r2, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	0d1b      	lsrs	r3, r3, #20
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	431a      	orrs	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001446:	bf00      	nop
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800146c:	43db      	mvns	r3, r3
 800146e:	401a      	ands	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0318 	and.w	r3, r3, #24
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001478:	40d9      	lsrs	r1, r3
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	400b      	ands	r3, r1
 800147e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001482:	431a      	orrs	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	000fffff 	.word	0x000fffff

0800149c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 031f 	and.w	r3, r3, #31
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6093      	str	r3, [r2, #8]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	5fffffc0 	.word	0x5fffffc0

080014dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014f0:	d101      	bne.n	80014f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <LL_ADC_EnableInternalRegulator+0x24>)
 8001512:	4013      	ands	r3, r2
 8001514:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	6fffffc0 	.word	0x6fffffc0

0800152c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001540:	d101      	bne.n	8001546 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <LL_ADC_Enable+0x24>)
 8001562:	4013      	ands	r3, r2
 8001564:	f043 0201 	orr.w	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	7fffffc0 	.word	0x7fffffc0

0800157c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <LL_ADC_Disable+0x24>)
 800158a:	4013      	ands	r3, r2
 800158c:	f043 0202 	orr.w	r2, r3, #2
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	7fffffc0 	.word	0x7fffffc0

080015a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <LL_ADC_IsEnabled+0x18>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <LL_ADC_IsEnabled+0x1a>
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d101      	bne.n	80015e2 <LL_ADC_IsDisableOngoing+0x18>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <LL_ADC_IsDisableOngoing+0x1a>
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <LL_ADC_REG_StartConversion+0x24>)
 80015fe:	4013      	ands	r3, r2
 8001600:	f043 0204 	orr.w	r2, r3, #4
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	7fffffc0 	.word	0x7fffffc0

08001618 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b04      	cmp	r3, #4
 800162a:	d101      	bne.n	8001630 <LL_ADC_REG_IsConversionOngoing+0x18>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b08      	cmp	r3, #8
 8001650:	d101      	bne.n	8001656 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e18f      	b.n	800199e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001688:	2b00      	cmp	r3, #0
 800168a:	d109      	bne.n	80016a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7fe fea3 	bl	80003d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff19 	bl	80014dc <LL_ADC_IsDeepPowerDownEnabled>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d004      	beq.n	80016ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff feff 	bl	80014b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff34 	bl	800152c <LL_ADC_IsInternalRegulatorEnabled>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d114      	bne.n	80016f4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff18 	bl	8001504 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016d4:	4b87      	ldr	r3, [pc, #540]	; (80018f4 <HAL_ADC_Init+0x290>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	099b      	lsrs	r3, r3, #6
 80016da:	4a87      	ldr	r2, [pc, #540]	; (80018f8 <HAL_ADC_Init+0x294>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	099b      	lsrs	r3, r3, #6
 80016e2:	3301      	adds	r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016e6:	e002      	b.n	80016ee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1f9      	bne.n	80016e8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff17 	bl	800152c <LL_ADC_IsInternalRegulatorEnabled>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10d      	bne.n	8001720 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001708:	f043 0210 	orr.w	r2, r3, #16
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	f043 0201 	orr.w	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff77 	bl	8001618 <LL_ADC_REG_IsConversionOngoing>
 800172a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	2b00      	cmp	r3, #0
 8001736:	f040 8129 	bne.w	800198c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2b00      	cmp	r3, #0
 800173e:	f040 8125 	bne.w	800198c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001746:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800174a:	f043 0202 	orr.w	r2, r3, #2
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff24 	bl	80015a4 <LL_ADC_IsEnabled>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d136      	bne.n	80017d0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a65      	ldr	r2, [pc, #404]	; (80018fc <HAL_ADC_Init+0x298>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d004      	beq.n	8001776 <HAL_ADC_Init+0x112>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a63      	ldr	r2, [pc, #396]	; (8001900 <HAL_ADC_Init+0x29c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d10e      	bne.n	8001794 <HAL_ADC_Init+0x130>
 8001776:	4861      	ldr	r0, [pc, #388]	; (80018fc <HAL_ADC_Init+0x298>)
 8001778:	f7ff ff14 	bl	80015a4 <LL_ADC_IsEnabled>
 800177c:	4604      	mov	r4, r0
 800177e:	4860      	ldr	r0, [pc, #384]	; (8001900 <HAL_ADC_Init+0x29c>)
 8001780:	f7ff ff10 	bl	80015a4 <LL_ADC_IsEnabled>
 8001784:	4603      	mov	r3, r0
 8001786:	4323      	orrs	r3, r4
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
 800178e:	2300      	movne	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	e008      	b.n	80017a6 <HAL_ADC_Init+0x142>
 8001794:	485b      	ldr	r0, [pc, #364]	; (8001904 <HAL_ADC_Init+0x2a0>)
 8001796:	f7ff ff05 	bl	80015a4 <LL_ADC_IsEnabled>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	bf0c      	ite	eq
 80017a0:	2301      	moveq	r3, #1
 80017a2:	2300      	movne	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d012      	beq.n	80017d0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a53      	ldr	r2, [pc, #332]	; (80018fc <HAL_ADC_Init+0x298>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d004      	beq.n	80017be <HAL_ADC_Init+0x15a>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a51      	ldr	r2, [pc, #324]	; (8001900 <HAL_ADC_Init+0x29c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_ADC_Init+0x15e>
 80017be:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_ADC_Init+0x2a4>)
 80017c0:	e000      	b.n	80017c4 <HAL_ADC_Init+0x160>
 80017c2:	4a52      	ldr	r2, [pc, #328]	; (800190c <HAL_ADC_Init+0x2a8>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	4619      	mov	r1, r3
 80017ca:	4610      	mov	r0, r2
 80017cc:	f7ff fd3c 	bl	8001248 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80017d0:	f7ff fd18 	bl	8001204 <HAL_GetREVID>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80017da:	4293      	cmp	r3, r2
 80017dc:	d914      	bls.n	8001808 <HAL_ADC_Init+0x1a4>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b10      	cmp	r3, #16
 80017e4:	d110      	bne.n	8001808 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	7d5b      	ldrb	r3, [r3, #21]
 80017ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017f0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80017f6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7f1b      	ldrb	r3, [r3, #28]
 80017fc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80017fe:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001800:	f043 030c 	orr.w	r3, r3, #12
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	e00d      	b.n	8001824 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7d5b      	ldrb	r3, [r3, #21]
 800180c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001812:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001818:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	7f1b      	ldrb	r3, [r3, #28]
 800181e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7f1b      	ldrb	r3, [r3, #28]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d106      	bne.n	800183a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	3b01      	subs	r3, #1
 8001832:	045b      	lsls	r3, r3, #17
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	2b00      	cmp	r3, #0
 8001840:	d009      	beq.n	8001856 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <HAL_ADC_Init+0x2ac>)
 800185e:	4013      	ands	r3, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	69b9      	ldr	r1, [r7, #24]
 8001866:	430b      	orrs	r3, r1
 8001868:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fed2 	bl	8001618 <LL_ADC_REG_IsConversionOngoing>
 8001874:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fedf 	bl	800163e <LL_ADC_INJ_IsConversionOngoing>
 8001880:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d15f      	bne.n	8001948 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d15c      	bne.n	8001948 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7d1b      	ldrb	r3, [r3, #20]
 8001892:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_ADC_Init+0x2b0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	69b9      	ldr	r1, [r7, #24]
 80018ac:	430b      	orrs	r3, r1
 80018ae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d130      	bne.n	800191c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	691a      	ldr	r2, [r3, #16]
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_ADC_Init+0x2b4>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018ce:	3a01      	subs	r2, #1
 80018d0:	0411      	lsls	r1, r2, #16
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018d6:	4311      	orrs	r1, r2
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018dc:	4311      	orrs	r1, r2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018e2:	430a      	orrs	r2, r1
 80018e4:	431a      	orrs	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	611a      	str	r2, [r3, #16]
 80018f0:	e01c      	b.n	800192c <HAL_ADC_Init+0x2c8>
 80018f2:	bf00      	nop
 80018f4:	24000000 	.word	0x24000000
 80018f8:	053e2d63 	.word	0x053e2d63
 80018fc:	40022000 	.word	0x40022000
 8001900:	40022100 	.word	0x40022100
 8001904:	58026000 	.word	0x58026000
 8001908:	40022300 	.word	0x40022300
 800190c:	58026300 	.word	0x58026300
 8001910:	fff0c003 	.word	0xfff0c003
 8001914:	ffffbffc 	.word	0xffffbffc
 8001918:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 fde0 	bl	8002508 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d10c      	bne.n	800196a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f023 010f 	bic.w	r1, r3, #15
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	1e5a      	subs	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	631a      	str	r2, [r3, #48]	; 0x30
 8001968:	e007      	b.n	800197a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 020f 	bic.w	r2, r2, #15
 8001978:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197e:	f023 0303 	bic.w	r3, r3, #3
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	655a      	str	r2, [r3, #84]	; 0x54
 800198a:	e007      	b.n	800199c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001990:	f043 0210 	orr.w	r2, r3, #16
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800199c:	7ffb      	ldrb	r3, [r7, #31]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd90      	pop	{r4, r7, pc}
 80019a6:	bf00      	nop

080019a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a55      	ldr	r2, [pc, #340]	; (8001b10 <HAL_ADC_Start_DMA+0x168>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d004      	beq.n	80019c8 <HAL_ADC_Start_DMA+0x20>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a54      	ldr	r2, [pc, #336]	; (8001b14 <HAL_ADC_Start_DMA+0x16c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d101      	bne.n	80019cc <HAL_ADC_Start_DMA+0x24>
 80019c8:	4b53      	ldr	r3, [pc, #332]	; (8001b18 <HAL_ADC_Start_DMA+0x170>)
 80019ca:	e000      	b.n	80019ce <HAL_ADC_Start_DMA+0x26>
 80019cc:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <HAL_ADC_Start_DMA+0x174>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fd64 	bl	800149c <LL_ADC_GetMultimode>
 80019d4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fe1c 	bl	8001618 <LL_ADC_REG_IsConversionOngoing>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f040 808c 	bne.w	8001b00 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <HAL_ADC_Start_DMA+0x4e>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e087      	b.n	8001b06 <HAL_ADC_Start_DMA+0x15e>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2b05      	cmp	r3, #5
 8001a08:	d002      	beq.n	8001a10 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	2b09      	cmp	r3, #9
 8001a0e:	d170      	bne.n	8001af2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 fbfb 	bl	800220c <ADC_Enable>
 8001a16:	4603      	mov	r3, r0
 8001a18:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d163      	bne.n	8001ae8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a24:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <HAL_ADC_Start_DMA+0x178>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a37      	ldr	r2, [pc, #220]	; (8001b14 <HAL_ADC_Start_DMA+0x16c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d002      	beq.n	8001a40 <HAL_ADC_Start_DMA+0x98>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	e000      	b.n	8001a42 <HAL_ADC_Start_DMA+0x9a>
 8001a40:	4b33      	ldr	r3, [pc, #204]	; (8001b10 <HAL_ADC_Start_DMA+0x168>)
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d002      	beq.n	8001a50 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d105      	bne.n	8001a5c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a54:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6c:	f023 0206 	bic.w	r2, r3, #6
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	659a      	str	r2, [r3, #88]	; 0x58
 8001a74:	e002      	b.n	8001a7c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a80:	4a28      	ldr	r2, [pc, #160]	; (8001b24 <HAL_ADC_Start_DMA+0x17c>)
 8001a82:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a88:	4a27      	ldr	r2, [pc, #156]	; (8001b28 <HAL_ADC_Start_DMA+0x180>)
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a90:	4a26      	ldr	r2, [pc, #152]	; (8001b2c <HAL_ADC_Start_DMA+0x184>)
 8001a92:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	221c      	movs	r2, #28
 8001a9a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0210 	orr.w	r2, r2, #16
 8001ab2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f7ff fc89 	bl	80013d6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3340      	adds	r3, #64	; 0x40
 8001ace:	4619      	mov	r1, r3
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f001 faf6 	bl	80030c4 <HAL_DMA_Start_IT>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fd85 	bl	80015f0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001ae6:	e00d      	b.n	8001b04 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001af0:	e008      	b.n	8001b04 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001afe:	e001      	b.n	8001b04 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b00:	2302      	movs	r3, #2
 8001b02:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40022000 	.word	0x40022000
 8001b14:	40022100 	.word	0x40022100
 8001b18:	40022300 	.word	0x40022300
 8001b1c:	58026300 	.word	0x58026300
 8001b20:	fffff0fe 	.word	0xfffff0fe
 8001b24:	080023df 	.word	0x080023df
 8001b28:	080024b7 	.word	0x080024b7
 8001b2c:	080024d3 	.word	0x080024d3

08001b30 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b0a1      	sub	sp, #132	; 0x84
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4a9d      	ldr	r2, [pc, #628]	; (8001dfc <HAL_ADC_ConfigChannel+0x290>)
 8001b86:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x2a>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e321      	b.n	80021da <HAL_ADC_ConfigChannel+0x66e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fd38 	bl	8001618 <LL_ADC_REG_IsConversionOngoing>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 8306 	bne.w	80021bc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d108      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x62>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	0e9b      	lsrs	r3, r3, #26
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	e016      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x90>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bde:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001be0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001be6:	2320      	movs	r3, #32
 8001be8:	e003      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001bea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	69d1      	ldr	r1, [r2, #28]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	430b      	orrs	r3, r1
 8001c08:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6859      	ldr	r1, [r3, #4]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	f7ff fbb1 	bl	800137e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fcf9 	bl	8001618 <LL_ADC_REG_IsConversionOngoing>
 8001c26:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fd06 	bl	800163e <LL_ADC_INJ_IsConversionOngoing>
 8001c32:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 80b3 	bne.w	8001da2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f040 80af 	bne.w	8001da2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6819      	ldr	r1, [r3, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	461a      	mov	r2, r3
 8001c52:	f7ff fbd3 	bl	80013fc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c56:	4b6a      	ldr	r3, [pc, #424]	; (8001e00 <HAL_ADC_ConfigChannel+0x294>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001c5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c62:	d10b      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x110>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	695a      	ldr	r2, [r3, #20]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	e01d      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x14c>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10b      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x136>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	e00a      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x14c>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d027      	beq.n	8001d12 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	6919      	ldr	r1, [r3, #16]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cd0:	f7ff faee 	bl	80012b0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	6919      	ldr	r1, [r3, #16]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	7e5b      	ldrb	r3, [r3, #25]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d102      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x17e>
 8001ce4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ce8:	e000      	b.n	8001cec <HAL_ADC_ConfigChannel+0x180>
 8001cea:	2300      	movs	r3, #0
 8001cec:	461a      	mov	r2, r3
 8001cee:	f7ff fb18 	bl	8001322 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6919      	ldr	r1, [r3, #16]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	7e1b      	ldrb	r3, [r3, #24]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d102      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x19c>
 8001d02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d06:	e000      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x19e>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f7ff faf0 	bl	80012f0 <LL_ADC_SetDataRightShift>
 8001d10:	e047      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	069b      	lsls	r3, r3, #26
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d107      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d34:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	069b      	lsls	r3, r3, #26
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d107      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d58:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	069b      	lsls	r3, r3, #26
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d107      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d7c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	069b      	lsls	r3, r3, #26
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d107      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001da0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fbfc 	bl	80015a4 <LL_ADC_IsEnabled>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f040 820d 	bne.w	80021ce <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6819      	ldr	r1, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f7ff fb47 	bl	8001454 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	4a0c      	ldr	r2, [pc, #48]	; (8001dfc <HAL_ADC_ConfigChannel+0x290>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	f040 8133 	bne.w	8002038 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d110      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x298>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	0e9b      	lsrs	r3, r3, #26
 8001de8:	3301      	adds	r3, #1
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	2b09      	cmp	r3, #9
 8001df0:	bf94      	ite	ls
 8001df2:	2301      	movls	r3, #1
 8001df4:	2300      	movhi	r3, #0
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	e01e      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x2cc>
 8001dfa:	bf00      	nop
 8001dfc:	47ff0000 	.word	0x47ff0000
 8001e00:	5c001000 	.word	0x5c001000
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e14:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	e003      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	2b09      	cmp	r3, #9
 8001e30:	bf94      	ite	ls
 8001e32:	2301      	movls	r3, #1
 8001e34:	2300      	movhi	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d079      	beq.n	8001f30 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d107      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x2ec>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	0e9b      	lsrs	r3, r3, #26
 8001e4e:	3301      	adds	r3, #1
 8001e50:	069b      	lsls	r3, r3, #26
 8001e52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e56:	e015      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x318>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e68:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001e70:	2320      	movs	r3, #32
 8001e72:	e003      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	069b      	lsls	r3, r3, #26
 8001e80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x338>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0e9b      	lsrs	r3, r3, #26
 8001e96:	3301      	adds	r3, #1
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	e017      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x368>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001ebc:	2320      	movs	r3, #32
 8001ebe:	e003      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	2101      	movs	r1, #1
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	ea42 0103 	orr.w	r1, r2, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10a      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x38e>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	0e9b      	lsrs	r3, r3, #26
 8001eea:	3301      	adds	r3, #1
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	051b      	lsls	r3, r3, #20
 8001ef8:	e018      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x3c0>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001f12:	2320      	movs	r3, #32
 8001f14:	e003      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f18:	fab3 f383 	clz	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	e07e      	b.n	800202e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d107      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x3e0>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	0e9b      	lsrs	r3, r3, #26
 8001f42:	3301      	adds	r3, #1
 8001f44:	069b      	lsls	r3, r3, #26
 8001f46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f4a:	e015      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x40c>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001f64:	2320      	movs	r3, #32
 8001f66:	e003      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	069b      	lsls	r3, r3, #26
 8001f74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d109      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x42c>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0e9b      	lsrs	r3, r3, #26
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	2101      	movs	r1, #1
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	e017      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x45c>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	61bb      	str	r3, [r7, #24]
  return result;
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	e003      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	ea42 0103 	orr.w	r1, r2, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10d      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x488>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0e9b      	lsrs	r3, r3, #26
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	3b1e      	subs	r3, #30
 8001fec:	051b      	lsls	r3, r3, #20
 8001fee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	e01b      	b.n	800202c <HAL_ADC_ConfigChannel+0x4c0>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	60fb      	str	r3, [r7, #12]
  return result;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800200c:	2320      	movs	r3, #32
 800200e:	e003      	b.n	8002018 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	3301      	adds	r3, #1
 800201a:	f003 021f 	and.w	r2, r3, #31
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	3b1e      	subs	r3, #30
 8002026:	051b      	lsls	r3, r3, #20
 8002028:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800202c:	430b      	orrs	r3, r1
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	6892      	ldr	r2, [r2, #8]
 8002032:	4619      	mov	r1, r3
 8002034:	f7ff f9e2 	bl	80013fc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	f280 80c6 	bge.w	80021ce <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a67      	ldr	r2, [pc, #412]	; (80021e4 <HAL_ADC_ConfigChannel+0x678>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d004      	beq.n	8002056 <HAL_ADC_ConfigChannel+0x4ea>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a65      	ldr	r2, [pc, #404]	; (80021e8 <HAL_ADC_ConfigChannel+0x67c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x4ee>
 8002056:	4b65      	ldr	r3, [pc, #404]	; (80021ec <HAL_ADC_ConfigChannel+0x680>)
 8002058:	e000      	b.n	800205c <HAL_ADC_ConfigChannel+0x4f0>
 800205a:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <HAL_ADC_ConfigChannel+0x684>)
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff f919 	bl	8001294 <LL_ADC_GetCommonPathInternalCh>
 8002062:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a5e      	ldr	r2, [pc, #376]	; (80021e4 <HAL_ADC_ConfigChannel+0x678>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d004      	beq.n	8002078 <HAL_ADC_ConfigChannel+0x50c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a5d      	ldr	r2, [pc, #372]	; (80021e8 <HAL_ADC_ConfigChannel+0x67c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d10e      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x52a>
 8002078:	485a      	ldr	r0, [pc, #360]	; (80021e4 <HAL_ADC_ConfigChannel+0x678>)
 800207a:	f7ff fa93 	bl	80015a4 <LL_ADC_IsEnabled>
 800207e:	4604      	mov	r4, r0
 8002080:	4859      	ldr	r0, [pc, #356]	; (80021e8 <HAL_ADC_ConfigChannel+0x67c>)
 8002082:	f7ff fa8f 	bl	80015a4 <LL_ADC_IsEnabled>
 8002086:	4603      	mov	r3, r0
 8002088:	4323      	orrs	r3, r4
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf0c      	ite	eq
 800208e:	2301      	moveq	r3, #1
 8002090:	2300      	movne	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	e008      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x53c>
 8002096:	4857      	ldr	r0, [pc, #348]	; (80021f4 <HAL_ADC_ConfigChannel+0x688>)
 8002098:	f7ff fa84 	bl	80015a4 <LL_ADC_IsEnabled>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	bf0c      	ite	eq
 80020a2:	2301      	moveq	r3, #1
 80020a4:	2300      	movne	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d07d      	beq.n	80021a8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a51      	ldr	r2, [pc, #324]	; (80021f8 <HAL_ADC_ConfigChannel+0x68c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d130      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x5ac>
 80020b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d12b      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a4b      	ldr	r2, [pc, #300]	; (80021f4 <HAL_ADC_ConfigChannel+0x688>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	f040 8081 	bne.w	80021ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a44      	ldr	r2, [pc, #272]	; (80021e4 <HAL_ADC_ConfigChannel+0x678>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d004      	beq.n	80020e0 <HAL_ADC_ConfigChannel+0x574>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a43      	ldr	r2, [pc, #268]	; (80021e8 <HAL_ADC_ConfigChannel+0x67c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x578>
 80020e0:	4a42      	ldr	r2, [pc, #264]	; (80021ec <HAL_ADC_ConfigChannel+0x680>)
 80020e2:	e000      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x57a>
 80020e4:	4a42      	ldr	r2, [pc, #264]	; (80021f0 <HAL_ADC_ConfigChannel+0x684>)
 80020e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f7ff f8bd 	bl	800126e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020f4:	4b41      	ldr	r3, [pc, #260]	; (80021fc <HAL_ADC_ConfigChannel+0x690>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	099b      	lsrs	r3, r3, #6
 80020fa:	4a41      	ldr	r2, [pc, #260]	; (8002200 <HAL_ADC_ConfigChannel+0x694>)
 80020fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002100:	099b      	lsrs	r3, r3, #6
 8002102:	3301      	adds	r3, #1
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002108:	e002      	b.n	8002110 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	3b01      	subs	r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f9      	bne.n	800210a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002116:	e05a      	b.n	80021ce <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a39      	ldr	r2, [pc, #228]	; (8002204 <HAL_ADC_ConfigChannel+0x698>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d11e      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x5f4>
 8002122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d119      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a30      	ldr	r2, [pc, #192]	; (80021f4 <HAL_ADC_ConfigChannel+0x688>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d14b      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a2a      	ldr	r2, [pc, #168]	; (80021e4 <HAL_ADC_ConfigChannel+0x678>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d004      	beq.n	800214a <HAL_ADC_ConfigChannel+0x5de>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a28      	ldr	r2, [pc, #160]	; (80021e8 <HAL_ADC_ConfigChannel+0x67c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d101      	bne.n	800214e <HAL_ADC_ConfigChannel+0x5e2>
 800214a:	4a28      	ldr	r2, [pc, #160]	; (80021ec <HAL_ADC_ConfigChannel+0x680>)
 800214c:	e000      	b.n	8002150 <HAL_ADC_ConfigChannel+0x5e4>
 800214e:	4a28      	ldr	r2, [pc, #160]	; (80021f0 <HAL_ADC_ConfigChannel+0x684>)
 8002150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002156:	4619      	mov	r1, r3
 8002158:	4610      	mov	r0, r2
 800215a:	f7ff f888 	bl	800126e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800215e:	e036      	b.n	80021ce <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a28      	ldr	r2, [pc, #160]	; (8002208 <HAL_ADC_ConfigChannel+0x69c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d131      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x662>
 800216a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d12c      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <HAL_ADC_ConfigChannel+0x688>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d127      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <HAL_ADC_ConfigChannel+0x678>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d004      	beq.n	8002192 <HAL_ADC_ConfigChannel+0x626>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a16      	ldr	r2, [pc, #88]	; (80021e8 <HAL_ADC_ConfigChannel+0x67c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x62a>
 8002192:	4a16      	ldr	r2, [pc, #88]	; (80021ec <HAL_ADC_ConfigChannel+0x680>)
 8002194:	e000      	b.n	8002198 <HAL_ADC_ConfigChannel+0x62c>
 8002196:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <HAL_ADC_ConfigChannel+0x684>)
 8002198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800219e:	4619      	mov	r1, r3
 80021a0:	4610      	mov	r0, r2
 80021a2:	f7ff f864 	bl	800126e <LL_ADC_SetCommonPathInternalCh>
 80021a6:	e012      	b.n	80021ce <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	f043 0220 	orr.w	r2, r3, #32
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80021ba:	e008      	b.n	80021ce <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3784      	adds	r7, #132	; 0x84
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd90      	pop	{r4, r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40022000 	.word	0x40022000
 80021e8:	40022100 	.word	0x40022100
 80021ec:	40022300 	.word	0x40022300
 80021f0:	58026300 	.word	0x58026300
 80021f4:	58026000 	.word	0x58026000
 80021f8:	cb840000 	.word	0xcb840000
 80021fc:	24000000 	.word	0x24000000
 8002200:	053e2d63 	.word	0x053e2d63
 8002204:	c7520000 	.word	0xc7520000
 8002208:	cfb80000 	.word	0xcfb80000

0800220c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff f9c3 	bl	80015a4 <LL_ADC_IsEnabled>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d16e      	bne.n	8002302 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	4b38      	ldr	r3, [pc, #224]	; (800230c <ADC_Enable+0x100>)
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00d      	beq.n	800224e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002236:	f043 0210 	orr.w	r2, r3, #16
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	f043 0201 	orr.w	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e05a      	b.n	8002304 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff f97e 	bl	8001554 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002258:	f7fe ffc8 	bl	80011ec <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a2b      	ldr	r2, [pc, #172]	; (8002310 <ADC_Enable+0x104>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d004      	beq.n	8002272 <ADC_Enable+0x66>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a29      	ldr	r2, [pc, #164]	; (8002314 <ADC_Enable+0x108>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <ADC_Enable+0x6a>
 8002272:	4b29      	ldr	r3, [pc, #164]	; (8002318 <ADC_Enable+0x10c>)
 8002274:	e000      	b.n	8002278 <ADC_Enable+0x6c>
 8002276:	4b29      	ldr	r3, [pc, #164]	; (800231c <ADC_Enable+0x110>)
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff f90f 	bl	800149c <LL_ADC_GetMultimode>
 800227e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a23      	ldr	r2, [pc, #140]	; (8002314 <ADC_Enable+0x108>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d002      	beq.n	8002290 <ADC_Enable+0x84>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	e000      	b.n	8002292 <ADC_Enable+0x86>
 8002290:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <ADC_Enable+0x104>)
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	4293      	cmp	r3, r2
 8002298:	d02c      	beq.n	80022f4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d130      	bne.n	8002302 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022a0:	e028      	b.n	80022f4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff f97c 	bl	80015a4 <LL_ADC_IsEnabled>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d104      	bne.n	80022bc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff f94c 	bl	8001554 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022bc:	f7fe ff96 	bl	80011ec <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d914      	bls.n	80022f4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d00d      	beq.n	80022f4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022dc:	f043 0210 	orr.w	r2, r3, #16
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	f043 0201 	orr.w	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e007      	b.n	8002304 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d1cf      	bne.n	80022a2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	8000003f 	.word	0x8000003f
 8002310:	40022000 	.word	0x40022000
 8002314:	40022100 	.word	0x40022100
 8002318:	40022300 	.word	0x40022300
 800231c:	58026300 	.word	0x58026300

08002320 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff f94c 	bl	80015ca <LL_ADC_IsDisableOngoing>
 8002332:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff f933 	bl	80015a4 <LL_ADC_IsEnabled>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d047      	beq.n	80023d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d144      	bne.n	80023d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 030d 	and.w	r3, r3, #13
 8002354:	2b01      	cmp	r3, #1
 8002356:	d10c      	bne.n	8002372 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff f90d 	bl	800157c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2203      	movs	r2, #3
 8002368:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800236a:	f7fe ff3f 	bl	80011ec <HAL_GetTick>
 800236e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002370:	e029      	b.n	80023c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	f043 0210 	orr.w	r2, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	f043 0201 	orr.w	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e023      	b.n	80023d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800238e:	f7fe ff2d 	bl	80011ec <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d914      	bls.n	80023c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00d      	beq.n	80023c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	f043 0210 	orr.w	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	f043 0201 	orr.w	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e007      	b.n	80023d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1dc      	bne.n	800238e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d14b      	bne.n	8002490 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d021      	beq.n	8002456 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe ff9e 	bl	8001358 <LL_ADC_REG_IsTriggerSourceSWStart>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d032      	beq.n	8002488 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d12b      	bne.n	8002488 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d11f      	bne.n	8002488 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244c:	f043 0201 	orr.w	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
 8002454:	e018      	b.n	8002488 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d111      	bne.n	8002488 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	f043 0201 	orr.w	r2, r3, #1
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f7ff fb51 	bl	8001b30 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800248e:	e00e      	b.n	80024ae <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f7ff fb5b 	bl	8001b58 <HAL_ADC_ErrorCallback>
}
 80024a2:	e004      	b.n	80024ae <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	4798      	blx	r3
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff fb3d 	bl	8001b44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f0:	f043 0204 	orr.w	r2, r3, #4
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f7ff fb2d 	bl	8001b58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a7a      	ldr	r2, [pc, #488]	; (8002700 <ADC_ConfigureBoostMode+0x1f8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d004      	beq.n	8002524 <ADC_ConfigureBoostMode+0x1c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a79      	ldr	r2, [pc, #484]	; (8002704 <ADC_ConfigureBoostMode+0x1fc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d109      	bne.n	8002538 <ADC_ConfigureBoostMode+0x30>
 8002524:	4b78      	ldr	r3, [pc, #480]	; (8002708 <ADC_ConfigureBoostMode+0x200>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	e008      	b.n	800254a <ADC_ConfigureBoostMode+0x42>
 8002538:	4b74      	ldr	r3, [pc, #464]	; (800270c <ADC_ConfigureBoostMode+0x204>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf14      	ite	ne
 8002544:	2301      	movne	r3, #1
 8002546:	2300      	moveq	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01c      	beq.n	8002588 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800254e:	f003 fcc3 	bl	8005ed8 <HAL_RCC_GetHCLKFreq>
 8002552:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800255c:	d010      	beq.n	8002580 <ADC_ConfigureBoostMode+0x78>
 800255e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002562:	d873      	bhi.n	800264c <ADC_ConfigureBoostMode+0x144>
 8002564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002568:	d002      	beq.n	8002570 <ADC_ConfigureBoostMode+0x68>
 800256a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800256e:	d16d      	bne.n	800264c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	60fb      	str	r3, [r7, #12]
        break;
 800257e:	e068      	b.n	8002652 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	60fb      	str	r3, [r7, #12]
        break;
 8002586:	e064      	b.n	8002652 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002588:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800258c:	f04f 0100 	mov.w	r1, #0
 8002590:	f004 ff34 	bl	80073fc <HAL_RCCEx_GetPeriphCLKFreq>
 8002594:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800259e:	d051      	beq.n	8002644 <ADC_ConfigureBoostMode+0x13c>
 80025a0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80025a4:	d854      	bhi.n	8002650 <ADC_ConfigureBoostMode+0x148>
 80025a6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80025aa:	d047      	beq.n	800263c <ADC_ConfigureBoostMode+0x134>
 80025ac:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80025b0:	d84e      	bhi.n	8002650 <ADC_ConfigureBoostMode+0x148>
 80025b2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80025b6:	d03d      	beq.n	8002634 <ADC_ConfigureBoostMode+0x12c>
 80025b8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80025bc:	d848      	bhi.n	8002650 <ADC_ConfigureBoostMode+0x148>
 80025be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025c2:	d033      	beq.n	800262c <ADC_ConfigureBoostMode+0x124>
 80025c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025c8:	d842      	bhi.n	8002650 <ADC_ConfigureBoostMode+0x148>
 80025ca:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80025ce:	d029      	beq.n	8002624 <ADC_ConfigureBoostMode+0x11c>
 80025d0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80025d4:	d83c      	bhi.n	8002650 <ADC_ConfigureBoostMode+0x148>
 80025d6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80025da:	d01a      	beq.n	8002612 <ADC_ConfigureBoostMode+0x10a>
 80025dc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80025e0:	d836      	bhi.n	8002650 <ADC_ConfigureBoostMode+0x148>
 80025e2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80025e6:	d014      	beq.n	8002612 <ADC_ConfigureBoostMode+0x10a>
 80025e8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80025ec:	d830      	bhi.n	8002650 <ADC_ConfigureBoostMode+0x148>
 80025ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025f2:	d00e      	beq.n	8002612 <ADC_ConfigureBoostMode+0x10a>
 80025f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025f8:	d82a      	bhi.n	8002650 <ADC_ConfigureBoostMode+0x148>
 80025fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025fe:	d008      	beq.n	8002612 <ADC_ConfigureBoostMode+0x10a>
 8002600:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002604:	d824      	bhi.n	8002650 <ADC_ConfigureBoostMode+0x148>
 8002606:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800260a:	d002      	beq.n	8002612 <ADC_ConfigureBoostMode+0x10a>
 800260c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002610:	d11e      	bne.n	8002650 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	0c9b      	lsrs	r3, r3, #18
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002620:	60fb      	str	r3, [r7, #12]
        break;
 8002622:	e016      	b.n	8002652 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	091b      	lsrs	r3, r3, #4
 8002628:	60fb      	str	r3, [r7, #12]
        break;
 800262a:	e012      	b.n	8002652 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	60fb      	str	r3, [r7, #12]
        break;
 8002632:	e00e      	b.n	8002652 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	099b      	lsrs	r3, r3, #6
 8002638:	60fb      	str	r3, [r7, #12]
        break;
 800263a:	e00a      	b.n	8002652 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	09db      	lsrs	r3, r3, #7
 8002640:	60fb      	str	r3, [r7, #12]
        break;
 8002642:	e006      	b.n	8002652 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	60fb      	str	r3, [r7, #12]
        break;
 800264a:	e002      	b.n	8002652 <ADC_ConfigureBoostMode+0x14a>
        break;
 800264c:	bf00      	nop
 800264e:	e000      	b.n	8002652 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002650:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002652:	f7fe fdd7 	bl	8001204 <HAL_GetREVID>
 8002656:	4603      	mov	r3, r0
 8002658:	f241 0203 	movw	r2, #4099	; 0x1003
 800265c:	4293      	cmp	r3, r2
 800265e:	d815      	bhi.n	800268c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a2b      	ldr	r2, [pc, #172]	; (8002710 <ADC_ConfigureBoostMode+0x208>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d908      	bls.n	800267a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002676:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002678:	e03e      	b.n	80026f8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002688:	609a      	str	r2, [r3, #8]
}
 800268a:	e035      	b.n	80026f8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	085b      	lsrs	r3, r3, #1
 8002690:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <ADC_ConfigureBoostMode+0x20c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d808      	bhi.n	80026ac <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026a8:	609a      	str	r2, [r3, #8]
}
 80026aa:	e025      	b.n	80026f8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4a1a      	ldr	r2, [pc, #104]	; (8002718 <ADC_ConfigureBoostMode+0x210>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d80a      	bhi.n	80026ca <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c6:	609a      	str	r2, [r3, #8]
}
 80026c8:	e016      	b.n	80026f8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4a13      	ldr	r2, [pc, #76]	; (800271c <ADC_ConfigureBoostMode+0x214>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d80a      	bhi.n	80026e8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e4:	609a      	str	r2, [r3, #8]
}
 80026e6:	e007      	b.n	80026f8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80026f6:	609a      	str	r2, [r3, #8]
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40022000 	.word	0x40022000
 8002704:	40022100 	.word	0x40022100
 8002708:	40022300 	.word	0x40022300
 800270c:	58026300 	.word	0x58026300
 8002710:	01312d00 	.word	0x01312d00
 8002714:	005f5e10 	.word	0x005f5e10
 8002718:	00bebc20 	.word	0x00bebc20
 800271c:	017d7840 	.word	0x017d7840

08002720 <LL_ADC_StartCalibration>:
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <LL_ADC_StartCalibration+0x38>)
 8002732:	4013      	ands	r3, r2
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002740:	430a      	orrs	r2, r1
 8002742:	4313      	orrs	r3, r2
 8002744:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	609a      	str	r2, [r3, #8]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	3ffeffc0 	.word	0x3ffeffc0

0800275c <LL_ADC_IsCalibrationOnGoing>:
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800276c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002770:	d101      	bne.n	8002776 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_ADCEx_Calibration_Start+0x1e>
 800279e:	2302      	movs	r3, #2
 80027a0:	e04c      	b.n	800283c <HAL_ADCEx_Calibration_Start+0xb8>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f7ff fdb8 	bl	8002320 <ADC_Disable>
 80027b0:	4603      	mov	r3, r0
 80027b2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80027b4:	7dfb      	ldrb	r3, [r7, #23]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d135      	bne.n	8002826 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027be:	4b21      	ldr	r3, [pc, #132]	; (8002844 <HAL_ADCEx_Calibration_Start+0xc0>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	f043 0202 	orr.w	r2, r3, #2
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ffa4 	bl	8002720 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027d8:	e014      	b.n	8002804 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	3301      	adds	r3, #1
 80027de:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4a19      	ldr	r2, [pc, #100]	; (8002848 <HAL_ADCEx_Calibration_Start+0xc4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d30d      	bcc.n	8002804 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ec:	f023 0312 	bic.w	r3, r3, #18
 80027f0:	f043 0210 	orr.w	r2, r3, #16
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e01b      	b.n	800283c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ffa7 	bl	800275c <LL_ADC_IsCalibrationOnGoing>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1e2      	bne.n	80027da <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	f023 0303 	bic.w	r3, r3, #3
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
 8002824:	e005      	b.n	8002832 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f043 0210 	orr.w	r2, r3, #16
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800283a:	7dfb      	ldrb	r3, [r7, #23]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	ffffeefd 	.word	0xffffeefd
 8002848:	25c3f800 	.word	0x25c3f800

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <__NVIC_SetPriorityGrouping+0x40>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002876:	4313      	orrs	r3, r2
 8002878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287a:	4a04      	ldr	r2, [pc, #16]	; (800288c <__NVIC_SetPriorityGrouping+0x40>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	60d3      	str	r3, [r2, #12]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00
 8002890:	05fa0000 	.word	0x05fa0000

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	; (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <__NVIC_SetPriority+0x50>)
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ff4c 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029ca:	f7ff ff63 	bl	8002894 <__NVIC_GetPriorityGrouping>
 80029ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	6978      	ldr	r0, [r7, #20]
 80029d6:	f7ff ffb3 	bl	8002940 <NVIC_EncodePriority>
 80029da:	4602      	mov	r2, r0
 80029dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ff82 	bl	80028ec <__NVIC_SetPriority>
}
 80029e8:	bf00      	nop
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ff56 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002a14:	f7fe fbea 	bl	80011ec <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e316      	b.n	8003052 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a66      	ldr	r2, [pc, #408]	; (8002bc4 <HAL_DMA_Init+0x1b8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d04a      	beq.n	8002ac4 <HAL_DMA_Init+0xb8>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a65      	ldr	r2, [pc, #404]	; (8002bc8 <HAL_DMA_Init+0x1bc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d045      	beq.n	8002ac4 <HAL_DMA_Init+0xb8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a63      	ldr	r2, [pc, #396]	; (8002bcc <HAL_DMA_Init+0x1c0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d040      	beq.n	8002ac4 <HAL_DMA_Init+0xb8>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a62      	ldr	r2, [pc, #392]	; (8002bd0 <HAL_DMA_Init+0x1c4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d03b      	beq.n	8002ac4 <HAL_DMA_Init+0xb8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a60      	ldr	r2, [pc, #384]	; (8002bd4 <HAL_DMA_Init+0x1c8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d036      	beq.n	8002ac4 <HAL_DMA_Init+0xb8>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a5f      	ldr	r2, [pc, #380]	; (8002bd8 <HAL_DMA_Init+0x1cc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d031      	beq.n	8002ac4 <HAL_DMA_Init+0xb8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a5d      	ldr	r2, [pc, #372]	; (8002bdc <HAL_DMA_Init+0x1d0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d02c      	beq.n	8002ac4 <HAL_DMA_Init+0xb8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a5c      	ldr	r2, [pc, #368]	; (8002be0 <HAL_DMA_Init+0x1d4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d027      	beq.n	8002ac4 <HAL_DMA_Init+0xb8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a5a      	ldr	r2, [pc, #360]	; (8002be4 <HAL_DMA_Init+0x1d8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d022      	beq.n	8002ac4 <HAL_DMA_Init+0xb8>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a59      	ldr	r2, [pc, #356]	; (8002be8 <HAL_DMA_Init+0x1dc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d01d      	beq.n	8002ac4 <HAL_DMA_Init+0xb8>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a57      	ldr	r2, [pc, #348]	; (8002bec <HAL_DMA_Init+0x1e0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d018      	beq.n	8002ac4 <HAL_DMA_Init+0xb8>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a56      	ldr	r2, [pc, #344]	; (8002bf0 <HAL_DMA_Init+0x1e4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d013      	beq.n	8002ac4 <HAL_DMA_Init+0xb8>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a54      	ldr	r2, [pc, #336]	; (8002bf4 <HAL_DMA_Init+0x1e8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00e      	beq.n	8002ac4 <HAL_DMA_Init+0xb8>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a53      	ldr	r2, [pc, #332]	; (8002bf8 <HAL_DMA_Init+0x1ec>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d009      	beq.n	8002ac4 <HAL_DMA_Init+0xb8>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a51      	ldr	r2, [pc, #324]	; (8002bfc <HAL_DMA_Init+0x1f0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d004      	beq.n	8002ac4 <HAL_DMA_Init+0xb8>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a50      	ldr	r2, [pc, #320]	; (8002c00 <HAL_DMA_Init+0x1f4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d101      	bne.n	8002ac8 <HAL_DMA_Init+0xbc>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <HAL_DMA_Init+0xbe>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 813b 	beq.w	8002d46 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a37      	ldr	r2, [pc, #220]	; (8002bc4 <HAL_DMA_Init+0x1b8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d04a      	beq.n	8002b80 <HAL_DMA_Init+0x174>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a36      	ldr	r2, [pc, #216]	; (8002bc8 <HAL_DMA_Init+0x1bc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d045      	beq.n	8002b80 <HAL_DMA_Init+0x174>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a34      	ldr	r2, [pc, #208]	; (8002bcc <HAL_DMA_Init+0x1c0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d040      	beq.n	8002b80 <HAL_DMA_Init+0x174>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a33      	ldr	r2, [pc, #204]	; (8002bd0 <HAL_DMA_Init+0x1c4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d03b      	beq.n	8002b80 <HAL_DMA_Init+0x174>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a31      	ldr	r2, [pc, #196]	; (8002bd4 <HAL_DMA_Init+0x1c8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d036      	beq.n	8002b80 <HAL_DMA_Init+0x174>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a30      	ldr	r2, [pc, #192]	; (8002bd8 <HAL_DMA_Init+0x1cc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d031      	beq.n	8002b80 <HAL_DMA_Init+0x174>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a2e      	ldr	r2, [pc, #184]	; (8002bdc <HAL_DMA_Init+0x1d0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d02c      	beq.n	8002b80 <HAL_DMA_Init+0x174>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a2d      	ldr	r2, [pc, #180]	; (8002be0 <HAL_DMA_Init+0x1d4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d027      	beq.n	8002b80 <HAL_DMA_Init+0x174>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a2b      	ldr	r2, [pc, #172]	; (8002be4 <HAL_DMA_Init+0x1d8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d022      	beq.n	8002b80 <HAL_DMA_Init+0x174>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a2a      	ldr	r2, [pc, #168]	; (8002be8 <HAL_DMA_Init+0x1dc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d01d      	beq.n	8002b80 <HAL_DMA_Init+0x174>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a28      	ldr	r2, [pc, #160]	; (8002bec <HAL_DMA_Init+0x1e0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d018      	beq.n	8002b80 <HAL_DMA_Init+0x174>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a27      	ldr	r2, [pc, #156]	; (8002bf0 <HAL_DMA_Init+0x1e4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d013      	beq.n	8002b80 <HAL_DMA_Init+0x174>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a25      	ldr	r2, [pc, #148]	; (8002bf4 <HAL_DMA_Init+0x1e8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00e      	beq.n	8002b80 <HAL_DMA_Init+0x174>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a24      	ldr	r2, [pc, #144]	; (8002bf8 <HAL_DMA_Init+0x1ec>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d009      	beq.n	8002b80 <HAL_DMA_Init+0x174>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <HAL_DMA_Init+0x1f0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d004      	beq.n	8002b80 <HAL_DMA_Init+0x174>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a21      	ldr	r2, [pc, #132]	; (8002c00 <HAL_DMA_Init+0x1f4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d108      	bne.n	8002b92 <HAL_DMA_Init+0x186>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0201 	bic.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	e007      	b.n	8002ba2 <HAL_DMA_Init+0x196>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0201 	bic.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ba2:	e02f      	b.n	8002c04 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ba4:	f7fe fb22 	bl	80011ec <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d928      	bls.n	8002c04 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2203      	movs	r2, #3
 8002bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e246      	b.n	8003052 <HAL_DMA_Init+0x646>
 8002bc4:	40020010 	.word	0x40020010
 8002bc8:	40020028 	.word	0x40020028
 8002bcc:	40020040 	.word	0x40020040
 8002bd0:	40020058 	.word	0x40020058
 8002bd4:	40020070 	.word	0x40020070
 8002bd8:	40020088 	.word	0x40020088
 8002bdc:	400200a0 	.word	0x400200a0
 8002be0:	400200b8 	.word	0x400200b8
 8002be4:	40020410 	.word	0x40020410
 8002be8:	40020428 	.word	0x40020428
 8002bec:	40020440 	.word	0x40020440
 8002bf0:	40020458 	.word	0x40020458
 8002bf4:	40020470 	.word	0x40020470
 8002bf8:	40020488 	.word	0x40020488
 8002bfc:	400204a0 	.word	0x400204a0
 8002c00:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1c8      	bne.n	8002ba4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4b83      	ldr	r3, [pc, #524]	; (8002e2c <HAL_DMA_Init+0x420>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002c2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c36:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c42:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d107      	bne.n	8002c68 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	4313      	orrs	r3, r2
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002c68:	4b71      	ldr	r3, [pc, #452]	; (8002e30 <HAL_DMA_Init+0x424>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b71      	ldr	r3, [pc, #452]	; (8002e34 <HAL_DMA_Init+0x428>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c74:	d328      	bcc.n	8002cc8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b28      	cmp	r3, #40	; 0x28
 8002c7c:	d903      	bls.n	8002c86 <HAL_DMA_Init+0x27a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b2e      	cmp	r3, #46	; 0x2e
 8002c84:	d917      	bls.n	8002cb6 <HAL_DMA_Init+0x2aa>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b3e      	cmp	r3, #62	; 0x3e
 8002c8c:	d903      	bls.n	8002c96 <HAL_DMA_Init+0x28a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b42      	cmp	r3, #66	; 0x42
 8002c94:	d90f      	bls.n	8002cb6 <HAL_DMA_Init+0x2aa>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b46      	cmp	r3, #70	; 0x46
 8002c9c:	d903      	bls.n	8002ca6 <HAL_DMA_Init+0x29a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b48      	cmp	r3, #72	; 0x48
 8002ca4:	d907      	bls.n	8002cb6 <HAL_DMA_Init+0x2aa>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b4e      	cmp	r3, #78	; 0x4e
 8002cac:	d905      	bls.n	8002cba <HAL_DMA_Init+0x2ae>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b52      	cmp	r3, #82	; 0x52
 8002cb4:	d801      	bhi.n	8002cba <HAL_DMA_Init+0x2ae>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_DMA_Init+0x2b0>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cc6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f023 0307 	bic.w	r3, r3, #7
 8002cde:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d117      	bne.n	8002d22 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00e      	beq.n	8002d22 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f001 fdcf 	bl	80048a8 <DMA_CheckFifoParam>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2240      	movs	r2, #64	; 0x40
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e197      	b.n	8003052 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f001 fd0a 	bl	8004744 <DMA_CalcBaseAndBitshift>
 8002d30:	4603      	mov	r3, r0
 8002d32:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	223f      	movs	r2, #63	; 0x3f
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	e0cd      	b.n	8002ee2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a3b      	ldr	r2, [pc, #236]	; (8002e38 <HAL_DMA_Init+0x42c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d022      	beq.n	8002d96 <HAL_DMA_Init+0x38a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a39      	ldr	r2, [pc, #228]	; (8002e3c <HAL_DMA_Init+0x430>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d01d      	beq.n	8002d96 <HAL_DMA_Init+0x38a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a38      	ldr	r2, [pc, #224]	; (8002e40 <HAL_DMA_Init+0x434>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d018      	beq.n	8002d96 <HAL_DMA_Init+0x38a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a36      	ldr	r2, [pc, #216]	; (8002e44 <HAL_DMA_Init+0x438>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d013      	beq.n	8002d96 <HAL_DMA_Init+0x38a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a35      	ldr	r2, [pc, #212]	; (8002e48 <HAL_DMA_Init+0x43c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00e      	beq.n	8002d96 <HAL_DMA_Init+0x38a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a33      	ldr	r2, [pc, #204]	; (8002e4c <HAL_DMA_Init+0x440>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d009      	beq.n	8002d96 <HAL_DMA_Init+0x38a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a32      	ldr	r2, [pc, #200]	; (8002e50 <HAL_DMA_Init+0x444>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_DMA_Init+0x38a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a30      	ldr	r2, [pc, #192]	; (8002e54 <HAL_DMA_Init+0x448>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_DMA_Init+0x38e>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_DMA_Init+0x390>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 8097 	beq.w	8002ed0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a24      	ldr	r2, [pc, #144]	; (8002e38 <HAL_DMA_Init+0x42c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d021      	beq.n	8002df0 <HAL_DMA_Init+0x3e4>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a22      	ldr	r2, [pc, #136]	; (8002e3c <HAL_DMA_Init+0x430>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01c      	beq.n	8002df0 <HAL_DMA_Init+0x3e4>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a21      	ldr	r2, [pc, #132]	; (8002e40 <HAL_DMA_Init+0x434>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d017      	beq.n	8002df0 <HAL_DMA_Init+0x3e4>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1f      	ldr	r2, [pc, #124]	; (8002e44 <HAL_DMA_Init+0x438>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d012      	beq.n	8002df0 <HAL_DMA_Init+0x3e4>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1e      	ldr	r2, [pc, #120]	; (8002e48 <HAL_DMA_Init+0x43c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d00d      	beq.n	8002df0 <HAL_DMA_Init+0x3e4>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <HAL_DMA_Init+0x440>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d008      	beq.n	8002df0 <HAL_DMA_Init+0x3e4>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1b      	ldr	r2, [pc, #108]	; (8002e50 <HAL_DMA_Init+0x444>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d003      	beq.n	8002df0 <HAL_DMA_Init+0x3e4>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a19      	ldr	r2, [pc, #100]	; (8002e54 <HAL_DMA_Init+0x448>)
 8002dee:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <HAL_DMA_Init+0x44c>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d021      	beq.n	8002e5c <HAL_DMA_Init+0x450>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b80      	cmp	r3, #128	; 0x80
 8002e1e:	d102      	bne.n	8002e26 <HAL_DMA_Init+0x41a>
 8002e20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e24:	e01b      	b.n	8002e5e <HAL_DMA_Init+0x452>
 8002e26:	2300      	movs	r3, #0
 8002e28:	e019      	b.n	8002e5e <HAL_DMA_Init+0x452>
 8002e2a:	bf00      	nop
 8002e2c:	fe10803f 	.word	0xfe10803f
 8002e30:	5c001000 	.word	0x5c001000
 8002e34:	ffff0000 	.word	0xffff0000
 8002e38:	58025408 	.word	0x58025408
 8002e3c:	5802541c 	.word	0x5802541c
 8002e40:	58025430 	.word	0x58025430
 8002e44:	58025444 	.word	0x58025444
 8002e48:	58025458 	.word	0x58025458
 8002e4c:	5802546c 	.word	0x5802546c
 8002e50:	58025480 	.word	0x58025480
 8002e54:	58025494 	.word	0x58025494
 8002e58:	fffe000f 	.word	0xfffe000f
 8002e5c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68d2      	ldr	r2, [r2, #12]
 8002e62:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e8c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b6e      	ldr	r3, [pc, #440]	; (800305c <HAL_DMA_Init+0x650>)
 8002ea4:	4413      	add	r3, r2
 8002ea6:	4a6e      	ldr	r2, [pc, #440]	; (8003060 <HAL_DMA_Init+0x654>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	009a      	lsls	r2, r3, #2
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f001 fc45 	bl	8004744 <DMA_CalcBaseAndBitshift>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	e008      	b.n	8002ee2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2240      	movs	r2, #64	; 0x40
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2203      	movs	r2, #3
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0b7      	b.n	8003052 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a5f      	ldr	r2, [pc, #380]	; (8003064 <HAL_DMA_Init+0x658>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d072      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a5d      	ldr	r2, [pc, #372]	; (8003068 <HAL_DMA_Init+0x65c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d06d      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a5c      	ldr	r2, [pc, #368]	; (800306c <HAL_DMA_Init+0x660>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d068      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a5a      	ldr	r2, [pc, #360]	; (8003070 <HAL_DMA_Init+0x664>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d063      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a59      	ldr	r2, [pc, #356]	; (8003074 <HAL_DMA_Init+0x668>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d05e      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a57      	ldr	r2, [pc, #348]	; (8003078 <HAL_DMA_Init+0x66c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d059      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a56      	ldr	r2, [pc, #344]	; (800307c <HAL_DMA_Init+0x670>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d054      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a54      	ldr	r2, [pc, #336]	; (8003080 <HAL_DMA_Init+0x674>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d04f      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a53      	ldr	r2, [pc, #332]	; (8003084 <HAL_DMA_Init+0x678>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d04a      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a51      	ldr	r2, [pc, #324]	; (8003088 <HAL_DMA_Init+0x67c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d045      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a50      	ldr	r2, [pc, #320]	; (800308c <HAL_DMA_Init+0x680>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d040      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a4e      	ldr	r2, [pc, #312]	; (8003090 <HAL_DMA_Init+0x684>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d03b      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a4d      	ldr	r2, [pc, #308]	; (8003094 <HAL_DMA_Init+0x688>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d036      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a4b      	ldr	r2, [pc, #300]	; (8003098 <HAL_DMA_Init+0x68c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d031      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a4a      	ldr	r2, [pc, #296]	; (800309c <HAL_DMA_Init+0x690>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d02c      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a48      	ldr	r2, [pc, #288]	; (80030a0 <HAL_DMA_Init+0x694>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d027      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a47      	ldr	r2, [pc, #284]	; (80030a4 <HAL_DMA_Init+0x698>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d022      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a45      	ldr	r2, [pc, #276]	; (80030a8 <HAL_DMA_Init+0x69c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01d      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a44      	ldr	r2, [pc, #272]	; (80030ac <HAL_DMA_Init+0x6a0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d018      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a42      	ldr	r2, [pc, #264]	; (80030b0 <HAL_DMA_Init+0x6a4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a41      	ldr	r2, [pc, #260]	; (80030b4 <HAL_DMA_Init+0x6a8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00e      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a3f      	ldr	r2, [pc, #252]	; (80030b8 <HAL_DMA_Init+0x6ac>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d009      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a3e      	ldr	r2, [pc, #248]	; (80030bc <HAL_DMA_Init+0x6b0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_DMA_Init+0x5c6>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a3c      	ldr	r2, [pc, #240]	; (80030c0 <HAL_DMA_Init+0x6b4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d101      	bne.n	8002fd6 <HAL_DMA_Init+0x5ca>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_DMA_Init+0x5cc>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d032      	beq.n	8003042 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f001 fcdf 	bl	80049a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b80      	cmp	r3, #128	; 0x80
 8002fe8:	d102      	bne.n	8002ff0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003004:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d010      	beq.n	8003030 <HAL_DMA_Init+0x624>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b08      	cmp	r3, #8
 8003014:	d80c      	bhi.n	8003030 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f001 fd5c 	bl	8004ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	e008      	b.n	8003042 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	a7fdabf8 	.word	0xa7fdabf8
 8003060:	cccccccd 	.word	0xcccccccd
 8003064:	40020010 	.word	0x40020010
 8003068:	40020028 	.word	0x40020028
 800306c:	40020040 	.word	0x40020040
 8003070:	40020058 	.word	0x40020058
 8003074:	40020070 	.word	0x40020070
 8003078:	40020088 	.word	0x40020088
 800307c:	400200a0 	.word	0x400200a0
 8003080:	400200b8 	.word	0x400200b8
 8003084:	40020410 	.word	0x40020410
 8003088:	40020428 	.word	0x40020428
 800308c:	40020440 	.word	0x40020440
 8003090:	40020458 	.word	0x40020458
 8003094:	40020470 	.word	0x40020470
 8003098:	40020488 	.word	0x40020488
 800309c:	400204a0 	.word	0x400204a0
 80030a0:	400204b8 	.word	0x400204b8
 80030a4:	58025408 	.word	0x58025408
 80030a8:	5802541c 	.word	0x5802541c
 80030ac:	58025430 	.word	0x58025430
 80030b0:	58025444 	.word	0x58025444
 80030b4:	58025458 	.word	0x58025458
 80030b8:	5802546c 	.word	0x5802546c
 80030bc:	58025480 	.word	0x58025480
 80030c0:	58025494 	.word	0x58025494

080030c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e226      	b.n	800352e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_DMA_Start_IT+0x2a>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e21f      	b.n	800352e <HAL_DMA_Start_IT+0x46a>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	f040 820a 	bne.w	8003518 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a68      	ldr	r2, [pc, #416]	; (80032b8 <HAL_DMA_Start_IT+0x1f4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d04a      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a66      	ldr	r2, [pc, #408]	; (80032bc <HAL_DMA_Start_IT+0x1f8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d045      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a65      	ldr	r2, [pc, #404]	; (80032c0 <HAL_DMA_Start_IT+0x1fc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d040      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a63      	ldr	r2, [pc, #396]	; (80032c4 <HAL_DMA_Start_IT+0x200>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d03b      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a62      	ldr	r2, [pc, #392]	; (80032c8 <HAL_DMA_Start_IT+0x204>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d036      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a60      	ldr	r2, [pc, #384]	; (80032cc <HAL_DMA_Start_IT+0x208>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d031      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a5f      	ldr	r2, [pc, #380]	; (80032d0 <HAL_DMA_Start_IT+0x20c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d02c      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a5d      	ldr	r2, [pc, #372]	; (80032d4 <HAL_DMA_Start_IT+0x210>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d027      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a5c      	ldr	r2, [pc, #368]	; (80032d8 <HAL_DMA_Start_IT+0x214>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d022      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5a      	ldr	r2, [pc, #360]	; (80032dc <HAL_DMA_Start_IT+0x218>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01d      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a59      	ldr	r2, [pc, #356]	; (80032e0 <HAL_DMA_Start_IT+0x21c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d018      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a57      	ldr	r2, [pc, #348]	; (80032e4 <HAL_DMA_Start_IT+0x220>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a56      	ldr	r2, [pc, #344]	; (80032e8 <HAL_DMA_Start_IT+0x224>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00e      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a54      	ldr	r2, [pc, #336]	; (80032ec <HAL_DMA_Start_IT+0x228>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a53      	ldr	r2, [pc, #332]	; (80032f0 <HAL_DMA_Start_IT+0x22c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_DMA_Start_IT+0xee>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a51      	ldr	r2, [pc, #324]	; (80032f4 <HAL_DMA_Start_IT+0x230>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d108      	bne.n	80031c4 <HAL_DMA_Start_IT+0x100>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e007      	b.n	80031d4 <HAL_DMA_Start_IT+0x110>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f001 f906 	bl	80043ec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a34      	ldr	r2, [pc, #208]	; (80032b8 <HAL_DMA_Start_IT+0x1f4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d04a      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a33      	ldr	r2, [pc, #204]	; (80032bc <HAL_DMA_Start_IT+0x1f8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d045      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a31      	ldr	r2, [pc, #196]	; (80032c0 <HAL_DMA_Start_IT+0x1fc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d040      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a30      	ldr	r2, [pc, #192]	; (80032c4 <HAL_DMA_Start_IT+0x200>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d03b      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a2e      	ldr	r2, [pc, #184]	; (80032c8 <HAL_DMA_Start_IT+0x204>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d036      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2d      	ldr	r2, [pc, #180]	; (80032cc <HAL_DMA_Start_IT+0x208>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d031      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <HAL_DMA_Start_IT+0x20c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d02c      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2a      	ldr	r2, [pc, #168]	; (80032d4 <HAL_DMA_Start_IT+0x210>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d027      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a28      	ldr	r2, [pc, #160]	; (80032d8 <HAL_DMA_Start_IT+0x214>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d022      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a27      	ldr	r2, [pc, #156]	; (80032dc <HAL_DMA_Start_IT+0x218>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d01d      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a25      	ldr	r2, [pc, #148]	; (80032e0 <HAL_DMA_Start_IT+0x21c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d018      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a24      	ldr	r2, [pc, #144]	; (80032e4 <HAL_DMA_Start_IT+0x220>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a22      	ldr	r2, [pc, #136]	; (80032e8 <HAL_DMA_Start_IT+0x224>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00e      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a21      	ldr	r2, [pc, #132]	; (80032ec <HAL_DMA_Start_IT+0x228>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d009      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <HAL_DMA_Start_IT+0x22c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_DMA_Start_IT+0x1bc>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <HAL_DMA_Start_IT+0x230>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d101      	bne.n	8003284 <HAL_DMA_Start_IT+0x1c0>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_DMA_Start_IT+0x1c2>
 8003284:	2300      	movs	r3, #0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d036      	beq.n	80032f8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f023 021e 	bic.w	r2, r3, #30
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0216 	orr.w	r2, r2, #22
 800329c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d03e      	beq.n	8003324 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0208 	orr.w	r2, r2, #8
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e035      	b.n	8003324 <HAL_DMA_Start_IT+0x260>
 80032b8:	40020010 	.word	0x40020010
 80032bc:	40020028 	.word	0x40020028
 80032c0:	40020040 	.word	0x40020040
 80032c4:	40020058 	.word	0x40020058
 80032c8:	40020070 	.word	0x40020070
 80032cc:	40020088 	.word	0x40020088
 80032d0:	400200a0 	.word	0x400200a0
 80032d4:	400200b8 	.word	0x400200b8
 80032d8:	40020410 	.word	0x40020410
 80032dc:	40020428 	.word	0x40020428
 80032e0:	40020440 	.word	0x40020440
 80032e4:	40020458 	.word	0x40020458
 80032e8:	40020470 	.word	0x40020470
 80032ec:	40020488 	.word	0x40020488
 80032f0:	400204a0 	.word	0x400204a0
 80032f4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 020e 	bic.w	r2, r3, #14
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 020a 	orr.w	r2, r2, #10
 800330a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d007      	beq.n	8003324 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0204 	orr.w	r2, r2, #4
 8003322:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a83      	ldr	r2, [pc, #524]	; (8003538 <HAL_DMA_Start_IT+0x474>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d072      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a82      	ldr	r2, [pc, #520]	; (800353c <HAL_DMA_Start_IT+0x478>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d06d      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a80      	ldr	r2, [pc, #512]	; (8003540 <HAL_DMA_Start_IT+0x47c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d068      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a7f      	ldr	r2, [pc, #508]	; (8003544 <HAL_DMA_Start_IT+0x480>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d063      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a7d      	ldr	r2, [pc, #500]	; (8003548 <HAL_DMA_Start_IT+0x484>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d05e      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7c      	ldr	r2, [pc, #496]	; (800354c <HAL_DMA_Start_IT+0x488>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d059      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a7a      	ldr	r2, [pc, #488]	; (8003550 <HAL_DMA_Start_IT+0x48c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d054      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a79      	ldr	r2, [pc, #484]	; (8003554 <HAL_DMA_Start_IT+0x490>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d04f      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a77      	ldr	r2, [pc, #476]	; (8003558 <HAL_DMA_Start_IT+0x494>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d04a      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a76      	ldr	r2, [pc, #472]	; (800355c <HAL_DMA_Start_IT+0x498>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d045      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a74      	ldr	r2, [pc, #464]	; (8003560 <HAL_DMA_Start_IT+0x49c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d040      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a73      	ldr	r2, [pc, #460]	; (8003564 <HAL_DMA_Start_IT+0x4a0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d03b      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a71      	ldr	r2, [pc, #452]	; (8003568 <HAL_DMA_Start_IT+0x4a4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d036      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a70      	ldr	r2, [pc, #448]	; (800356c <HAL_DMA_Start_IT+0x4a8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d031      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a6e      	ldr	r2, [pc, #440]	; (8003570 <HAL_DMA_Start_IT+0x4ac>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d02c      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a6d      	ldr	r2, [pc, #436]	; (8003574 <HAL_DMA_Start_IT+0x4b0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d027      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a6b      	ldr	r2, [pc, #428]	; (8003578 <HAL_DMA_Start_IT+0x4b4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d022      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6a      	ldr	r2, [pc, #424]	; (800357c <HAL_DMA_Start_IT+0x4b8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d01d      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a68      	ldr	r2, [pc, #416]	; (8003580 <HAL_DMA_Start_IT+0x4bc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d018      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a67      	ldr	r2, [pc, #412]	; (8003584 <HAL_DMA_Start_IT+0x4c0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d013      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a65      	ldr	r2, [pc, #404]	; (8003588 <HAL_DMA_Start_IT+0x4c4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00e      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a64      	ldr	r2, [pc, #400]	; (800358c <HAL_DMA_Start_IT+0x4c8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d009      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a62      	ldr	r2, [pc, #392]	; (8003590 <HAL_DMA_Start_IT+0x4cc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d004      	beq.n	8003414 <HAL_DMA_Start_IT+0x350>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a61      	ldr	r2, [pc, #388]	; (8003594 <HAL_DMA_Start_IT+0x4d0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d101      	bne.n	8003418 <HAL_DMA_Start_IT+0x354>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <HAL_DMA_Start_IT+0x356>
 8003418:	2300      	movs	r3, #0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d01a      	beq.n	8003454 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d007      	beq.n	800343c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800343a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800344e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003452:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a37      	ldr	r2, [pc, #220]	; (8003538 <HAL_DMA_Start_IT+0x474>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d04a      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a36      	ldr	r2, [pc, #216]	; (800353c <HAL_DMA_Start_IT+0x478>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d045      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a34      	ldr	r2, [pc, #208]	; (8003540 <HAL_DMA_Start_IT+0x47c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d040      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a33      	ldr	r2, [pc, #204]	; (8003544 <HAL_DMA_Start_IT+0x480>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d03b      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a31      	ldr	r2, [pc, #196]	; (8003548 <HAL_DMA_Start_IT+0x484>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d036      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a30      	ldr	r2, [pc, #192]	; (800354c <HAL_DMA_Start_IT+0x488>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d031      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a2e      	ldr	r2, [pc, #184]	; (8003550 <HAL_DMA_Start_IT+0x48c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d02c      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a2d      	ldr	r2, [pc, #180]	; (8003554 <HAL_DMA_Start_IT+0x490>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d027      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a2b      	ldr	r2, [pc, #172]	; (8003558 <HAL_DMA_Start_IT+0x494>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d022      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a2a      	ldr	r2, [pc, #168]	; (800355c <HAL_DMA_Start_IT+0x498>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d01d      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a28      	ldr	r2, [pc, #160]	; (8003560 <HAL_DMA_Start_IT+0x49c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d018      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a27      	ldr	r2, [pc, #156]	; (8003564 <HAL_DMA_Start_IT+0x4a0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a25      	ldr	r2, [pc, #148]	; (8003568 <HAL_DMA_Start_IT+0x4a4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00e      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a24      	ldr	r2, [pc, #144]	; (800356c <HAL_DMA_Start_IT+0x4a8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d009      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a22      	ldr	r2, [pc, #136]	; (8003570 <HAL_DMA_Start_IT+0x4ac>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d004      	beq.n	80034f4 <HAL_DMA_Start_IT+0x430>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a21      	ldr	r2, [pc, #132]	; (8003574 <HAL_DMA_Start_IT+0x4b0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d108      	bne.n	8003506 <HAL_DMA_Start_IT+0x442>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e012      	b.n	800352c <HAL_DMA_Start_IT+0x468>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0201 	orr.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e009      	b.n	800352c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800351e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800352c:	7dfb      	ldrb	r3, [r7, #23]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40020010 	.word	0x40020010
 800353c:	40020028 	.word	0x40020028
 8003540:	40020040 	.word	0x40020040
 8003544:	40020058 	.word	0x40020058
 8003548:	40020070 	.word	0x40020070
 800354c:	40020088 	.word	0x40020088
 8003550:	400200a0 	.word	0x400200a0
 8003554:	400200b8 	.word	0x400200b8
 8003558:	40020410 	.word	0x40020410
 800355c:	40020428 	.word	0x40020428
 8003560:	40020440 	.word	0x40020440
 8003564:	40020458 	.word	0x40020458
 8003568:	40020470 	.word	0x40020470
 800356c:	40020488 	.word	0x40020488
 8003570:	400204a0 	.word	0x400204a0
 8003574:	400204b8 	.word	0x400204b8
 8003578:	58025408 	.word	0x58025408
 800357c:	5802541c 	.word	0x5802541c
 8003580:	58025430 	.word	0x58025430
 8003584:	58025444 	.word	0x58025444
 8003588:	58025458 	.word	0x58025458
 800358c:	5802546c 	.word	0x5802546c
 8003590:	58025480 	.word	0x58025480
 8003594:	58025494 	.word	0x58025494

08003598 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	; 0x28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035a4:	4b67      	ldr	r3, [pc, #412]	; (8003744 <HAL_DMA_IRQHandler+0x1ac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a67      	ldr	r2, [pc, #412]	; (8003748 <HAL_DMA_IRQHandler+0x1b0>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	0a9b      	lsrs	r3, r3, #10
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a5f      	ldr	r2, [pc, #380]	; (800374c <HAL_DMA_IRQHandler+0x1b4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d04a      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a5d      	ldr	r2, [pc, #372]	; (8003750 <HAL_DMA_IRQHandler+0x1b8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d045      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a5c      	ldr	r2, [pc, #368]	; (8003754 <HAL_DMA_IRQHandler+0x1bc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d040      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a5a      	ldr	r2, [pc, #360]	; (8003758 <HAL_DMA_IRQHandler+0x1c0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d03b      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a59      	ldr	r2, [pc, #356]	; (800375c <HAL_DMA_IRQHandler+0x1c4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d036      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a57      	ldr	r2, [pc, #348]	; (8003760 <HAL_DMA_IRQHandler+0x1c8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d031      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a56      	ldr	r2, [pc, #344]	; (8003764 <HAL_DMA_IRQHandler+0x1cc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d02c      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a54      	ldr	r2, [pc, #336]	; (8003768 <HAL_DMA_IRQHandler+0x1d0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d027      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a53      	ldr	r2, [pc, #332]	; (800376c <HAL_DMA_IRQHandler+0x1d4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d022      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a51      	ldr	r2, [pc, #324]	; (8003770 <HAL_DMA_IRQHandler+0x1d8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01d      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a50      	ldr	r2, [pc, #320]	; (8003774 <HAL_DMA_IRQHandler+0x1dc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d018      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a4e      	ldr	r2, [pc, #312]	; (8003778 <HAL_DMA_IRQHandler+0x1e0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a4d      	ldr	r2, [pc, #308]	; (800377c <HAL_DMA_IRQHandler+0x1e4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00e      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a4b      	ldr	r2, [pc, #300]	; (8003780 <HAL_DMA_IRQHandler+0x1e8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d009      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a4a      	ldr	r2, [pc, #296]	; (8003784 <HAL_DMA_IRQHandler+0x1ec>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_DMA_IRQHandler+0xd2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a48      	ldr	r2, [pc, #288]	; (8003788 <HAL_DMA_IRQHandler+0x1f0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d101      	bne.n	800366e <HAL_DMA_IRQHandler+0xd6>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <HAL_DMA_IRQHandler+0xd8>
 800366e:	2300      	movs	r3, #0
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 842b 	beq.w	8003ecc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	2208      	movs	r2, #8
 8003680:	409a      	lsls	r2, r3
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80a2 	beq.w	80037d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2e      	ldr	r2, [pc, #184]	; (800374c <HAL_DMA_IRQHandler+0x1b4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d04a      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2d      	ldr	r2, [pc, #180]	; (8003750 <HAL_DMA_IRQHandler+0x1b8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d045      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2b      	ldr	r2, [pc, #172]	; (8003754 <HAL_DMA_IRQHandler+0x1bc>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d040      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2a      	ldr	r2, [pc, #168]	; (8003758 <HAL_DMA_IRQHandler+0x1c0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d03b      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a28      	ldr	r2, [pc, #160]	; (800375c <HAL_DMA_IRQHandler+0x1c4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d036      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a27      	ldr	r2, [pc, #156]	; (8003760 <HAL_DMA_IRQHandler+0x1c8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d031      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a25      	ldr	r2, [pc, #148]	; (8003764 <HAL_DMA_IRQHandler+0x1cc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d02c      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a24      	ldr	r2, [pc, #144]	; (8003768 <HAL_DMA_IRQHandler+0x1d0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d027      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a22      	ldr	r2, [pc, #136]	; (800376c <HAL_DMA_IRQHandler+0x1d4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d022      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a21      	ldr	r2, [pc, #132]	; (8003770 <HAL_DMA_IRQHandler+0x1d8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d01d      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1f      	ldr	r2, [pc, #124]	; (8003774 <HAL_DMA_IRQHandler+0x1dc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d018      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1e      	ldr	r2, [pc, #120]	; (8003778 <HAL_DMA_IRQHandler+0x1e0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1c      	ldr	r2, [pc, #112]	; (800377c <HAL_DMA_IRQHandler+0x1e4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00e      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <HAL_DMA_IRQHandler+0x1e8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d009      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a19      	ldr	r2, [pc, #100]	; (8003784 <HAL_DMA_IRQHandler+0x1ec>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <HAL_DMA_IRQHandler+0x194>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a18      	ldr	r2, [pc, #96]	; (8003788 <HAL_DMA_IRQHandler+0x1f0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d12f      	bne.n	800378c <HAL_DMA_IRQHandler+0x1f4>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b00      	cmp	r3, #0
 8003738:	bf14      	ite	ne
 800373a:	2301      	movne	r3, #1
 800373c:	2300      	moveq	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	e02e      	b.n	80037a0 <HAL_DMA_IRQHandler+0x208>
 8003742:	bf00      	nop
 8003744:	24000000 	.word	0x24000000
 8003748:	1b4e81b5 	.word	0x1b4e81b5
 800374c:	40020010 	.word	0x40020010
 8003750:	40020028 	.word	0x40020028
 8003754:	40020040 	.word	0x40020040
 8003758:	40020058 	.word	0x40020058
 800375c:	40020070 	.word	0x40020070
 8003760:	40020088 	.word	0x40020088
 8003764:	400200a0 	.word	0x400200a0
 8003768:	400200b8 	.word	0x400200b8
 800376c:	40020410 	.word	0x40020410
 8003770:	40020428 	.word	0x40020428
 8003774:	40020440 	.word	0x40020440
 8003778:	40020458 	.word	0x40020458
 800377c:	40020470 	.word	0x40020470
 8003780:	40020488 	.word	0x40020488
 8003784:	400204a0 	.word	0x400204a0
 8003788:	400204b8 	.word	0x400204b8
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d015      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0204 	bic.w	r2, r2, #4
 80037b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	2208      	movs	r2, #8
 80037be:	409a      	lsls	r2, r3
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	fa22 f303 	lsr.w	r3, r2, r3
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d06e      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a69      	ldr	r2, [pc, #420]	; (8003990 <HAL_DMA_IRQHandler+0x3f8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d04a      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a67      	ldr	r2, [pc, #412]	; (8003994 <HAL_DMA_IRQHandler+0x3fc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d045      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a66      	ldr	r2, [pc, #408]	; (8003998 <HAL_DMA_IRQHandler+0x400>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d040      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a64      	ldr	r2, [pc, #400]	; (800399c <HAL_DMA_IRQHandler+0x404>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d03b      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a63      	ldr	r2, [pc, #396]	; (80039a0 <HAL_DMA_IRQHandler+0x408>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d036      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a61      	ldr	r2, [pc, #388]	; (80039a4 <HAL_DMA_IRQHandler+0x40c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d031      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a60      	ldr	r2, [pc, #384]	; (80039a8 <HAL_DMA_IRQHandler+0x410>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d02c      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a5e      	ldr	r2, [pc, #376]	; (80039ac <HAL_DMA_IRQHandler+0x414>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d027      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a5d      	ldr	r2, [pc, #372]	; (80039b0 <HAL_DMA_IRQHandler+0x418>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d022      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a5b      	ldr	r2, [pc, #364]	; (80039b4 <HAL_DMA_IRQHandler+0x41c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01d      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a5a      	ldr	r2, [pc, #360]	; (80039b8 <HAL_DMA_IRQHandler+0x420>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d018      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a58      	ldr	r2, [pc, #352]	; (80039bc <HAL_DMA_IRQHandler+0x424>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a57      	ldr	r2, [pc, #348]	; (80039c0 <HAL_DMA_IRQHandler+0x428>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00e      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a55      	ldr	r2, [pc, #340]	; (80039c4 <HAL_DMA_IRQHandler+0x42c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d009      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a54      	ldr	r2, [pc, #336]	; (80039c8 <HAL_DMA_IRQHandler+0x430>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d004      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2ee>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a52      	ldr	r2, [pc, #328]	; (80039cc <HAL_DMA_IRQHandler+0x434>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d10a      	bne.n	800389c <HAL_DMA_IRQHandler+0x304>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf14      	ite	ne
 8003894:	2301      	movne	r3, #1
 8003896:	2300      	moveq	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e003      	b.n	80038a4 <HAL_DMA_IRQHandler+0x30c>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2300      	movs	r3, #0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00d      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	2201      	movs	r2, #1
 80038b2:	409a      	lsls	r2, r3
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038bc:	f043 0202 	orr.w	r2, r3, #2
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	2204      	movs	r2, #4
 80038ce:	409a      	lsls	r2, r3
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 808f 	beq.w	80039f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a2c      	ldr	r2, [pc, #176]	; (8003990 <HAL_DMA_IRQHandler+0x3f8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d04a      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <HAL_DMA_IRQHandler+0x3fc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d045      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a29      	ldr	r2, [pc, #164]	; (8003998 <HAL_DMA_IRQHandler+0x400>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d040      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a27      	ldr	r2, [pc, #156]	; (800399c <HAL_DMA_IRQHandler+0x404>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d03b      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <HAL_DMA_IRQHandler+0x408>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d036      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a24      	ldr	r2, [pc, #144]	; (80039a4 <HAL_DMA_IRQHandler+0x40c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d031      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a23      	ldr	r2, [pc, #140]	; (80039a8 <HAL_DMA_IRQHandler+0x410>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d02c      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a21      	ldr	r2, [pc, #132]	; (80039ac <HAL_DMA_IRQHandler+0x414>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d027      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a20      	ldr	r2, [pc, #128]	; (80039b0 <HAL_DMA_IRQHandler+0x418>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d022      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1e      	ldr	r2, [pc, #120]	; (80039b4 <HAL_DMA_IRQHandler+0x41c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d01d      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1d      	ldr	r2, [pc, #116]	; (80039b8 <HAL_DMA_IRQHandler+0x420>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d018      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1b      	ldr	r2, [pc, #108]	; (80039bc <HAL_DMA_IRQHandler+0x424>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d013      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1a      	ldr	r2, [pc, #104]	; (80039c0 <HAL_DMA_IRQHandler+0x428>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00e      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a18      	ldr	r2, [pc, #96]	; (80039c4 <HAL_DMA_IRQHandler+0x42c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d009      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a17      	ldr	r2, [pc, #92]	; (80039c8 <HAL_DMA_IRQHandler+0x430>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d004      	beq.n	800397a <HAL_DMA_IRQHandler+0x3e2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a15      	ldr	r2, [pc, #84]	; (80039cc <HAL_DMA_IRQHandler+0x434>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d12a      	bne.n	80039d0 <HAL_DMA_IRQHandler+0x438>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e023      	b.n	80039d8 <HAL_DMA_IRQHandler+0x440>
 8003990:	40020010 	.word	0x40020010
 8003994:	40020028 	.word	0x40020028
 8003998:	40020040 	.word	0x40020040
 800399c:	40020058 	.word	0x40020058
 80039a0:	40020070 	.word	0x40020070
 80039a4:	40020088 	.word	0x40020088
 80039a8:	400200a0 	.word	0x400200a0
 80039ac:	400200b8 	.word	0x400200b8
 80039b0:	40020410 	.word	0x40020410
 80039b4:	40020428 	.word	0x40020428
 80039b8:	40020440 	.word	0x40020440
 80039bc:	40020458 	.word	0x40020458
 80039c0:	40020470 	.word	0x40020470
 80039c4:	40020488 	.word	0x40020488
 80039c8:	400204a0 	.word	0x400204a0
 80039cc:	400204b8 	.word	0x400204b8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2300      	movs	r3, #0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00d      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	2204      	movs	r2, #4
 80039e6:	409a      	lsls	r2, r3
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f0:	f043 0204 	orr.w	r2, r3, #4
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	2210      	movs	r2, #16
 8003a02:	409a      	lsls	r2, r3
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80a6 	beq.w	8003b5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a85      	ldr	r2, [pc, #532]	; (8003c28 <HAL_DMA_IRQHandler+0x690>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d04a      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a83      	ldr	r2, [pc, #524]	; (8003c2c <HAL_DMA_IRQHandler+0x694>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d045      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a82      	ldr	r2, [pc, #520]	; (8003c30 <HAL_DMA_IRQHandler+0x698>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d040      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a80      	ldr	r2, [pc, #512]	; (8003c34 <HAL_DMA_IRQHandler+0x69c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d03b      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a7f      	ldr	r2, [pc, #508]	; (8003c38 <HAL_DMA_IRQHandler+0x6a0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d036      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a7d      	ldr	r2, [pc, #500]	; (8003c3c <HAL_DMA_IRQHandler+0x6a4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d031      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a7c      	ldr	r2, [pc, #496]	; (8003c40 <HAL_DMA_IRQHandler+0x6a8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d02c      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a7a      	ldr	r2, [pc, #488]	; (8003c44 <HAL_DMA_IRQHandler+0x6ac>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d027      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a79      	ldr	r2, [pc, #484]	; (8003c48 <HAL_DMA_IRQHandler+0x6b0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d022      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a77      	ldr	r2, [pc, #476]	; (8003c4c <HAL_DMA_IRQHandler+0x6b4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d01d      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a76      	ldr	r2, [pc, #472]	; (8003c50 <HAL_DMA_IRQHandler+0x6b8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d018      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a74      	ldr	r2, [pc, #464]	; (8003c54 <HAL_DMA_IRQHandler+0x6bc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a73      	ldr	r2, [pc, #460]	; (8003c58 <HAL_DMA_IRQHandler+0x6c0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00e      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a71      	ldr	r2, [pc, #452]	; (8003c5c <HAL_DMA_IRQHandler+0x6c4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d009      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a70      	ldr	r2, [pc, #448]	; (8003c60 <HAL_DMA_IRQHandler+0x6c8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d004      	beq.n	8003aae <HAL_DMA_IRQHandler+0x516>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a6e      	ldr	r2, [pc, #440]	; (8003c64 <HAL_DMA_IRQHandler+0x6cc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d10a      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x52c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e009      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x540>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d03e      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d018      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d108      	bne.n	8003b1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d024      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
 8003b18:	e01f      	b.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01b      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	4798      	blx	r3
 8003b2a:	e016      	b.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d107      	bne.n	8003b4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0208 	bic.w	r2, r2, #8
 8003b48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5e:	f003 031f 	and.w	r3, r3, #31
 8003b62:	2220      	movs	r2, #32
 8003b64:	409a      	lsls	r2, r3
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 8110 	beq.w	8003d90 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a2c      	ldr	r2, [pc, #176]	; (8003c28 <HAL_DMA_IRQHandler+0x690>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d04a      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a2b      	ldr	r2, [pc, #172]	; (8003c2c <HAL_DMA_IRQHandler+0x694>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d045      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a29      	ldr	r2, [pc, #164]	; (8003c30 <HAL_DMA_IRQHandler+0x698>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d040      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a28      	ldr	r2, [pc, #160]	; (8003c34 <HAL_DMA_IRQHandler+0x69c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d03b      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a26      	ldr	r2, [pc, #152]	; (8003c38 <HAL_DMA_IRQHandler+0x6a0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d036      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a25      	ldr	r2, [pc, #148]	; (8003c3c <HAL_DMA_IRQHandler+0x6a4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d031      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a23      	ldr	r2, [pc, #140]	; (8003c40 <HAL_DMA_IRQHandler+0x6a8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d02c      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a22      	ldr	r2, [pc, #136]	; (8003c44 <HAL_DMA_IRQHandler+0x6ac>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d027      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a20      	ldr	r2, [pc, #128]	; (8003c48 <HAL_DMA_IRQHandler+0x6b0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d022      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1f      	ldr	r2, [pc, #124]	; (8003c4c <HAL_DMA_IRQHandler+0x6b4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d01d      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1d      	ldr	r2, [pc, #116]	; (8003c50 <HAL_DMA_IRQHandler+0x6b8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d018      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1c      	ldr	r2, [pc, #112]	; (8003c54 <HAL_DMA_IRQHandler+0x6bc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d013      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a1a      	ldr	r2, [pc, #104]	; (8003c58 <HAL_DMA_IRQHandler+0x6c0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00e      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a19      	ldr	r2, [pc, #100]	; (8003c5c <HAL_DMA_IRQHandler+0x6c4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d009      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a17      	ldr	r2, [pc, #92]	; (8003c60 <HAL_DMA_IRQHandler+0x6c8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d004      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x678>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <HAL_DMA_IRQHandler+0x6cc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d12b      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x6d0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf14      	ite	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	2300      	moveq	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	e02a      	b.n	8003c7c <HAL_DMA_IRQHandler+0x6e4>
 8003c26:	bf00      	nop
 8003c28:	40020010 	.word	0x40020010
 8003c2c:	40020028 	.word	0x40020028
 8003c30:	40020040 	.word	0x40020040
 8003c34:	40020058 	.word	0x40020058
 8003c38:	40020070 	.word	0x40020070
 8003c3c:	40020088 	.word	0x40020088
 8003c40:	400200a0 	.word	0x400200a0
 8003c44:	400200b8 	.word	0x400200b8
 8003c48:	40020410 	.word	0x40020410
 8003c4c:	40020428 	.word	0x40020428
 8003c50:	40020440 	.word	0x40020440
 8003c54:	40020458 	.word	0x40020458
 8003c58:	40020470 	.word	0x40020470
 8003c5c:	40020488 	.word	0x40020488
 8003c60:	400204a0 	.word	0x400204a0
 8003c64:	400204b8 	.word	0x400204b8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8087 	beq.w	8003d90 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d139      	bne.n	8003d12 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0216 	bic.w	r2, r2, #22
 8003cac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cbc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <HAL_DMA_IRQHandler+0x736>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0208 	bic.w	r2, r2, #8
 8003cdc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	223f      	movs	r2, #63	; 0x3f
 8003ce8:	409a      	lsls	r2, r3
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 834a 	beq.w	800439c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	4798      	blx	r3
          }
          return;
 8003d10:	e344      	b.n	800439c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d018      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d108      	bne.n	8003d40 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d02c      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
 8003d3e:	e027      	b.n	8003d90 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d023      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	4798      	blx	r3
 8003d50:	e01e      	b.n	8003d90 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10f      	bne.n	8003d80 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0210 	bic.w	r2, r2, #16
 8003d6e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8306 	beq.w	80043a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8088 	beq.w	8003eb8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2204      	movs	r2, #4
 8003dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a7a      	ldr	r2, [pc, #488]	; (8003fa0 <HAL_DMA_IRQHandler+0xa08>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d04a      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a79      	ldr	r2, [pc, #484]	; (8003fa4 <HAL_DMA_IRQHandler+0xa0c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d045      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a77      	ldr	r2, [pc, #476]	; (8003fa8 <HAL_DMA_IRQHandler+0xa10>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d040      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a76      	ldr	r2, [pc, #472]	; (8003fac <HAL_DMA_IRQHandler+0xa14>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d03b      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a74      	ldr	r2, [pc, #464]	; (8003fb0 <HAL_DMA_IRQHandler+0xa18>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d036      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a73      	ldr	r2, [pc, #460]	; (8003fb4 <HAL_DMA_IRQHandler+0xa1c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d031      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a71      	ldr	r2, [pc, #452]	; (8003fb8 <HAL_DMA_IRQHandler+0xa20>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d02c      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a70      	ldr	r2, [pc, #448]	; (8003fbc <HAL_DMA_IRQHandler+0xa24>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d027      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a6e      	ldr	r2, [pc, #440]	; (8003fc0 <HAL_DMA_IRQHandler+0xa28>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d022      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a6d      	ldr	r2, [pc, #436]	; (8003fc4 <HAL_DMA_IRQHandler+0xa2c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d01d      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a6b      	ldr	r2, [pc, #428]	; (8003fc8 <HAL_DMA_IRQHandler+0xa30>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d018      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a6a      	ldr	r2, [pc, #424]	; (8003fcc <HAL_DMA_IRQHandler+0xa34>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a68      	ldr	r2, [pc, #416]	; (8003fd0 <HAL_DMA_IRQHandler+0xa38>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00e      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a67      	ldr	r2, [pc, #412]	; (8003fd4 <HAL_DMA_IRQHandler+0xa3c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d009      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a65      	ldr	r2, [pc, #404]	; (8003fd8 <HAL_DMA_IRQHandler+0xa40>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d004      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x8b8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a64      	ldr	r2, [pc, #400]	; (8003fdc <HAL_DMA_IRQHandler+0xa44>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d108      	bne.n	8003e62 <HAL_DMA_IRQHandler+0x8ca>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	e007      	b.n	8003e72 <HAL_DMA_IRQHandler+0x8da>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3301      	adds	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d307      	bcc.n	8003e8e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f2      	bne.n	8003e72 <HAL_DMA_IRQHandler+0x8da>
 8003e8c:	e000      	b.n	8003e90 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003e8e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003ea6:	e003      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8272 	beq.w	80043a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
 8003eca:	e26c      	b.n	80043a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a43      	ldr	r2, [pc, #268]	; (8003fe0 <HAL_DMA_IRQHandler+0xa48>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d022      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a42      	ldr	r2, [pc, #264]	; (8003fe4 <HAL_DMA_IRQHandler+0xa4c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d01d      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a40      	ldr	r2, [pc, #256]	; (8003fe8 <HAL_DMA_IRQHandler+0xa50>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d018      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a3f      	ldr	r2, [pc, #252]	; (8003fec <HAL_DMA_IRQHandler+0xa54>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a3d      	ldr	r2, [pc, #244]	; (8003ff0 <HAL_DMA_IRQHandler+0xa58>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a3c      	ldr	r2, [pc, #240]	; (8003ff4 <HAL_DMA_IRQHandler+0xa5c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a3a      	ldr	r2, [pc, #232]	; (8003ff8 <HAL_DMA_IRQHandler+0xa60>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x984>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a39      	ldr	r2, [pc, #228]	; (8003ffc <HAL_DMA_IRQHandler+0xa64>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <HAL_DMA_IRQHandler+0x988>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_DMA_IRQHandler+0x98a>
 8003f20:	2300      	movs	r3, #0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 823f 	beq.w	80043a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	2204      	movs	r2, #4
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80cd 	beq.w	80040e0 <HAL_DMA_IRQHandler+0xb48>
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80c7 	beq.w	80040e0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d049      	beq.n	8004000 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d109      	bne.n	8003f8a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8210 	beq.w	80043a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f88:	e20a      	b.n	80043a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8206 	beq.w	80043a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f9c:	e200      	b.n	80043a0 <HAL_DMA_IRQHandler+0xe08>
 8003f9e:	bf00      	nop
 8003fa0:	40020010 	.word	0x40020010
 8003fa4:	40020028 	.word	0x40020028
 8003fa8:	40020040 	.word	0x40020040
 8003fac:	40020058 	.word	0x40020058
 8003fb0:	40020070 	.word	0x40020070
 8003fb4:	40020088 	.word	0x40020088
 8003fb8:	400200a0 	.word	0x400200a0
 8003fbc:	400200b8 	.word	0x400200b8
 8003fc0:	40020410 	.word	0x40020410
 8003fc4:	40020428 	.word	0x40020428
 8003fc8:	40020440 	.word	0x40020440
 8003fcc:	40020458 	.word	0x40020458
 8003fd0:	40020470 	.word	0x40020470
 8003fd4:	40020488 	.word	0x40020488
 8003fd8:	400204a0 	.word	0x400204a0
 8003fdc:	400204b8 	.word	0x400204b8
 8003fe0:	58025408 	.word	0x58025408
 8003fe4:	5802541c 	.word	0x5802541c
 8003fe8:	58025430 	.word	0x58025430
 8003fec:	58025444 	.word	0x58025444
 8003ff0:	58025458 	.word	0x58025458
 8003ff4:	5802546c 	.word	0x5802546c
 8003ff8:	58025480 	.word	0x58025480
 8003ffc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d160      	bne.n	80040cc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a7f      	ldr	r2, [pc, #508]	; (800420c <HAL_DMA_IRQHandler+0xc74>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d04a      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a7d      	ldr	r2, [pc, #500]	; (8004210 <HAL_DMA_IRQHandler+0xc78>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d045      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a7c      	ldr	r2, [pc, #496]	; (8004214 <HAL_DMA_IRQHandler+0xc7c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d040      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a7a      	ldr	r2, [pc, #488]	; (8004218 <HAL_DMA_IRQHandler+0xc80>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d03b      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a79      	ldr	r2, [pc, #484]	; (800421c <HAL_DMA_IRQHandler+0xc84>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d036      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a77      	ldr	r2, [pc, #476]	; (8004220 <HAL_DMA_IRQHandler+0xc88>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d031      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a76      	ldr	r2, [pc, #472]	; (8004224 <HAL_DMA_IRQHandler+0xc8c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d02c      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a74      	ldr	r2, [pc, #464]	; (8004228 <HAL_DMA_IRQHandler+0xc90>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d027      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a73      	ldr	r2, [pc, #460]	; (800422c <HAL_DMA_IRQHandler+0xc94>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d022      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a71      	ldr	r2, [pc, #452]	; (8004230 <HAL_DMA_IRQHandler+0xc98>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01d      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a70      	ldr	r2, [pc, #448]	; (8004234 <HAL_DMA_IRQHandler+0xc9c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d018      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a6e      	ldr	r2, [pc, #440]	; (8004238 <HAL_DMA_IRQHandler+0xca0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a6d      	ldr	r2, [pc, #436]	; (800423c <HAL_DMA_IRQHandler+0xca4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00e      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a6b      	ldr	r2, [pc, #428]	; (8004240 <HAL_DMA_IRQHandler+0xca8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d009      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a6a      	ldr	r2, [pc, #424]	; (8004244 <HAL_DMA_IRQHandler+0xcac>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d004      	beq.n	80040aa <HAL_DMA_IRQHandler+0xb12>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a68      	ldr	r2, [pc, #416]	; (8004248 <HAL_DMA_IRQHandler+0xcb0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d108      	bne.n	80040bc <HAL_DMA_IRQHandler+0xb24>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0208 	bic.w	r2, r2, #8
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	e007      	b.n	80040cc <HAL_DMA_IRQHandler+0xb34>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0204 	bic.w	r2, r2, #4
 80040ca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8165 	beq.w	80043a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040de:	e15f      	b.n	80043a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	2202      	movs	r2, #2
 80040ea:	409a      	lsls	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80c5 	beq.w	8004280 <HAL_DMA_IRQHandler+0xce8>
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80bf 	beq.w	8004280 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	2202      	movs	r2, #2
 800410c:	409a      	lsls	r2, r3
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d018      	beq.n	800414e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 813a 	beq.w	80043a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004138:	e134      	b.n	80043a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 8130 	beq.w	80043a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800414c:	e12a      	b.n	80043a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	f040 8089 	bne.w	800426c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a2b      	ldr	r2, [pc, #172]	; (800420c <HAL_DMA_IRQHandler+0xc74>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d04a      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a29      	ldr	r2, [pc, #164]	; (8004210 <HAL_DMA_IRQHandler+0xc78>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d045      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a28      	ldr	r2, [pc, #160]	; (8004214 <HAL_DMA_IRQHandler+0xc7c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d040      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a26      	ldr	r2, [pc, #152]	; (8004218 <HAL_DMA_IRQHandler+0xc80>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d03b      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a25      	ldr	r2, [pc, #148]	; (800421c <HAL_DMA_IRQHandler+0xc84>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d036      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a23      	ldr	r2, [pc, #140]	; (8004220 <HAL_DMA_IRQHandler+0xc88>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d031      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a22      	ldr	r2, [pc, #136]	; (8004224 <HAL_DMA_IRQHandler+0xc8c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d02c      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a20      	ldr	r2, [pc, #128]	; (8004228 <HAL_DMA_IRQHandler+0xc90>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d027      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1f      	ldr	r2, [pc, #124]	; (800422c <HAL_DMA_IRQHandler+0xc94>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d022      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <HAL_DMA_IRQHandler+0xc98>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01d      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1c      	ldr	r2, [pc, #112]	; (8004234 <HAL_DMA_IRQHandler+0xc9c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d018      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1a      	ldr	r2, [pc, #104]	; (8004238 <HAL_DMA_IRQHandler+0xca0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d013      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a19      	ldr	r2, [pc, #100]	; (800423c <HAL_DMA_IRQHandler+0xca4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00e      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a17      	ldr	r2, [pc, #92]	; (8004240 <HAL_DMA_IRQHandler+0xca8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d009      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a16      	ldr	r2, [pc, #88]	; (8004244 <HAL_DMA_IRQHandler+0xcac>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d004      	beq.n	80041fa <HAL_DMA_IRQHandler+0xc62>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a14      	ldr	r2, [pc, #80]	; (8004248 <HAL_DMA_IRQHandler+0xcb0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d128      	bne.n	800424c <HAL_DMA_IRQHandler+0xcb4>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0214 	bic.w	r2, r2, #20
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	e027      	b.n	800425c <HAL_DMA_IRQHandler+0xcc4>
 800420c:	40020010 	.word	0x40020010
 8004210:	40020028 	.word	0x40020028
 8004214:	40020040 	.word	0x40020040
 8004218:	40020058 	.word	0x40020058
 800421c:	40020070 	.word	0x40020070
 8004220:	40020088 	.word	0x40020088
 8004224:	400200a0 	.word	0x400200a0
 8004228:	400200b8 	.word	0x400200b8
 800422c:	40020410 	.word	0x40020410
 8004230:	40020428 	.word	0x40020428
 8004234:	40020440 	.word	0x40020440
 8004238:	40020458 	.word	0x40020458
 800423c:	40020470 	.word	0x40020470
 8004240:	40020488 	.word	0x40020488
 8004244:	400204a0 	.word	0x400204a0
 8004248:	400204b8 	.word	0x400204b8
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 020a 	bic.w	r2, r2, #10
 800425a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8097 	beq.w	80043a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800427e:	e091      	b.n	80043a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2208      	movs	r2, #8
 800428a:	409a      	lsls	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8088 	beq.w	80043a6 <HAL_DMA_IRQHandler+0xe0e>
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8082 	beq.w	80043a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a41      	ldr	r2, [pc, #260]	; (80043ac <HAL_DMA_IRQHandler+0xe14>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d04a      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a3f      	ldr	r2, [pc, #252]	; (80043b0 <HAL_DMA_IRQHandler+0xe18>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d045      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a3e      	ldr	r2, [pc, #248]	; (80043b4 <HAL_DMA_IRQHandler+0xe1c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d040      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a3c      	ldr	r2, [pc, #240]	; (80043b8 <HAL_DMA_IRQHandler+0xe20>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d03b      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a3b      	ldr	r2, [pc, #236]	; (80043bc <HAL_DMA_IRQHandler+0xe24>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d036      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a39      	ldr	r2, [pc, #228]	; (80043c0 <HAL_DMA_IRQHandler+0xe28>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d031      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a38      	ldr	r2, [pc, #224]	; (80043c4 <HAL_DMA_IRQHandler+0xe2c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d02c      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a36      	ldr	r2, [pc, #216]	; (80043c8 <HAL_DMA_IRQHandler+0xe30>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d027      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a35      	ldr	r2, [pc, #212]	; (80043cc <HAL_DMA_IRQHandler+0xe34>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d022      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a33      	ldr	r2, [pc, #204]	; (80043d0 <HAL_DMA_IRQHandler+0xe38>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01d      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a32      	ldr	r2, [pc, #200]	; (80043d4 <HAL_DMA_IRQHandler+0xe3c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d018      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a30      	ldr	r2, [pc, #192]	; (80043d8 <HAL_DMA_IRQHandler+0xe40>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d013      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a2f      	ldr	r2, [pc, #188]	; (80043dc <HAL_DMA_IRQHandler+0xe44>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00e      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a2d      	ldr	r2, [pc, #180]	; (80043e0 <HAL_DMA_IRQHandler+0xe48>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d009      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2c      	ldr	r2, [pc, #176]	; (80043e4 <HAL_DMA_IRQHandler+0xe4c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d004      	beq.n	8004342 <HAL_DMA_IRQHandler+0xdaa>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2a      	ldr	r2, [pc, #168]	; (80043e8 <HAL_DMA_IRQHandler+0xe50>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d108      	bne.n	8004354 <HAL_DMA_IRQHandler+0xdbc>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 021c 	bic.w	r2, r2, #28
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e007      	b.n	8004364 <HAL_DMA_IRQHandler+0xdcc>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 020e 	bic.w	r2, r2, #14
 8004362:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	2201      	movs	r2, #1
 800436e:	409a      	lsls	r2, r3
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
 800439a:	e004      	b.n	80043a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800439c:	bf00      	nop
 800439e:	e002      	b.n	80043a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043a0:	bf00      	nop
 80043a2:	e000      	b.n	80043a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80043a6:	3728      	adds	r7, #40	; 0x28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40020010 	.word	0x40020010
 80043b0:	40020028 	.word	0x40020028
 80043b4:	40020040 	.word	0x40020040
 80043b8:	40020058 	.word	0x40020058
 80043bc:	40020070 	.word	0x40020070
 80043c0:	40020088 	.word	0x40020088
 80043c4:	400200a0 	.word	0x400200a0
 80043c8:	400200b8 	.word	0x400200b8
 80043cc:	40020410 	.word	0x40020410
 80043d0:	40020428 	.word	0x40020428
 80043d4:	40020440 	.word	0x40020440
 80043d8:	40020458 	.word	0x40020458
 80043dc:	40020470 	.word	0x40020470
 80043e0:	40020488 	.word	0x40020488
 80043e4:	400204a0 	.word	0x400204a0
 80043e8:	400204b8 	.word	0x400204b8

080043ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004404:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a7f      	ldr	r2, [pc, #508]	; (8004608 <DMA_SetConfig+0x21c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d072      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a7d      	ldr	r2, [pc, #500]	; (800460c <DMA_SetConfig+0x220>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d06d      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a7c      	ldr	r2, [pc, #496]	; (8004610 <DMA_SetConfig+0x224>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d068      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a7a      	ldr	r2, [pc, #488]	; (8004614 <DMA_SetConfig+0x228>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d063      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a79      	ldr	r2, [pc, #484]	; (8004618 <DMA_SetConfig+0x22c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d05e      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a77      	ldr	r2, [pc, #476]	; (800461c <DMA_SetConfig+0x230>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d059      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a76      	ldr	r2, [pc, #472]	; (8004620 <DMA_SetConfig+0x234>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d054      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a74      	ldr	r2, [pc, #464]	; (8004624 <DMA_SetConfig+0x238>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d04f      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a73      	ldr	r2, [pc, #460]	; (8004628 <DMA_SetConfig+0x23c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d04a      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a71      	ldr	r2, [pc, #452]	; (800462c <DMA_SetConfig+0x240>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d045      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a70      	ldr	r2, [pc, #448]	; (8004630 <DMA_SetConfig+0x244>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d040      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a6e      	ldr	r2, [pc, #440]	; (8004634 <DMA_SetConfig+0x248>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d03b      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a6d      	ldr	r2, [pc, #436]	; (8004638 <DMA_SetConfig+0x24c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d036      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a6b      	ldr	r2, [pc, #428]	; (800463c <DMA_SetConfig+0x250>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d031      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a6a      	ldr	r2, [pc, #424]	; (8004640 <DMA_SetConfig+0x254>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d02c      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a68      	ldr	r2, [pc, #416]	; (8004644 <DMA_SetConfig+0x258>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d027      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a67      	ldr	r2, [pc, #412]	; (8004648 <DMA_SetConfig+0x25c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d022      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a65      	ldr	r2, [pc, #404]	; (800464c <DMA_SetConfig+0x260>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01d      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a64      	ldr	r2, [pc, #400]	; (8004650 <DMA_SetConfig+0x264>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d018      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a62      	ldr	r2, [pc, #392]	; (8004654 <DMA_SetConfig+0x268>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a61      	ldr	r2, [pc, #388]	; (8004658 <DMA_SetConfig+0x26c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a5f      	ldr	r2, [pc, #380]	; (800465c <DMA_SetConfig+0x270>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d009      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a5e      	ldr	r2, [pc, #376]	; (8004660 <DMA_SetConfig+0x274>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <DMA_SetConfig+0x10a>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a5c      	ldr	r2, [pc, #368]	; (8004664 <DMA_SetConfig+0x278>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <DMA_SetConfig+0x10e>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <DMA_SetConfig+0x110>
 80044fa:	2300      	movs	r3, #0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00d      	beq.n	800451c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004508:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800451a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a39      	ldr	r2, [pc, #228]	; (8004608 <DMA_SetConfig+0x21c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d04a      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a38      	ldr	r2, [pc, #224]	; (800460c <DMA_SetConfig+0x220>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d045      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a36      	ldr	r2, [pc, #216]	; (8004610 <DMA_SetConfig+0x224>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d040      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a35      	ldr	r2, [pc, #212]	; (8004614 <DMA_SetConfig+0x228>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d03b      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a33      	ldr	r2, [pc, #204]	; (8004618 <DMA_SetConfig+0x22c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d036      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a32      	ldr	r2, [pc, #200]	; (800461c <DMA_SetConfig+0x230>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d031      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a30      	ldr	r2, [pc, #192]	; (8004620 <DMA_SetConfig+0x234>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d02c      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a2f      	ldr	r2, [pc, #188]	; (8004624 <DMA_SetConfig+0x238>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d027      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a2d      	ldr	r2, [pc, #180]	; (8004628 <DMA_SetConfig+0x23c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d022      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2c      	ldr	r2, [pc, #176]	; (800462c <DMA_SetConfig+0x240>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d01d      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2a      	ldr	r2, [pc, #168]	; (8004630 <DMA_SetConfig+0x244>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d018      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a29      	ldr	r2, [pc, #164]	; (8004634 <DMA_SetConfig+0x248>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d013      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a27      	ldr	r2, [pc, #156]	; (8004638 <DMA_SetConfig+0x24c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00e      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a26      	ldr	r2, [pc, #152]	; (800463c <DMA_SetConfig+0x250>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d009      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a24      	ldr	r2, [pc, #144]	; (8004640 <DMA_SetConfig+0x254>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d004      	beq.n	80045bc <DMA_SetConfig+0x1d0>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a23      	ldr	r2, [pc, #140]	; (8004644 <DMA_SetConfig+0x258>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d101      	bne.n	80045c0 <DMA_SetConfig+0x1d4>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <DMA_SetConfig+0x1d6>
 80045c0:	2300      	movs	r3, #0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d059      	beq.n	800467a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	223f      	movs	r2, #63	; 0x3f
 80045d0:	409a      	lsls	r2, r3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	d138      	bne.n	8004668 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004606:	e086      	b.n	8004716 <DMA_SetConfig+0x32a>
 8004608:	40020010 	.word	0x40020010
 800460c:	40020028 	.word	0x40020028
 8004610:	40020040 	.word	0x40020040
 8004614:	40020058 	.word	0x40020058
 8004618:	40020070 	.word	0x40020070
 800461c:	40020088 	.word	0x40020088
 8004620:	400200a0 	.word	0x400200a0
 8004624:	400200b8 	.word	0x400200b8
 8004628:	40020410 	.word	0x40020410
 800462c:	40020428 	.word	0x40020428
 8004630:	40020440 	.word	0x40020440
 8004634:	40020458 	.word	0x40020458
 8004638:	40020470 	.word	0x40020470
 800463c:	40020488 	.word	0x40020488
 8004640:	400204a0 	.word	0x400204a0
 8004644:	400204b8 	.word	0x400204b8
 8004648:	58025408 	.word	0x58025408
 800464c:	5802541c 	.word	0x5802541c
 8004650:	58025430 	.word	0x58025430
 8004654:	58025444 	.word	0x58025444
 8004658:	58025458 	.word	0x58025458
 800465c:	5802546c 	.word	0x5802546c
 8004660:	58025480 	.word	0x58025480
 8004664:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	60da      	str	r2, [r3, #12]
}
 8004678:	e04d      	b.n	8004716 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a29      	ldr	r2, [pc, #164]	; (8004724 <DMA_SetConfig+0x338>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d022      	beq.n	80046ca <DMA_SetConfig+0x2de>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a27      	ldr	r2, [pc, #156]	; (8004728 <DMA_SetConfig+0x33c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d01d      	beq.n	80046ca <DMA_SetConfig+0x2de>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a26      	ldr	r2, [pc, #152]	; (800472c <DMA_SetConfig+0x340>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d018      	beq.n	80046ca <DMA_SetConfig+0x2de>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a24      	ldr	r2, [pc, #144]	; (8004730 <DMA_SetConfig+0x344>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <DMA_SetConfig+0x2de>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a23      	ldr	r2, [pc, #140]	; (8004734 <DMA_SetConfig+0x348>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00e      	beq.n	80046ca <DMA_SetConfig+0x2de>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a21      	ldr	r2, [pc, #132]	; (8004738 <DMA_SetConfig+0x34c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d009      	beq.n	80046ca <DMA_SetConfig+0x2de>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a20      	ldr	r2, [pc, #128]	; (800473c <DMA_SetConfig+0x350>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <DMA_SetConfig+0x2de>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1e      	ldr	r2, [pc, #120]	; (8004740 <DMA_SetConfig+0x354>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d101      	bne.n	80046ce <DMA_SetConfig+0x2e2>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <DMA_SetConfig+0x2e4>
 80046ce:	2300      	movs	r3, #0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d020      	beq.n	8004716 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	2201      	movs	r2, #1
 80046de:	409a      	lsls	r2, r3
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d108      	bne.n	8004706 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	60da      	str	r2, [r3, #12]
}
 8004704:	e007      	b.n	8004716 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	60da      	str	r2, [r3, #12]
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	58025408 	.word	0x58025408
 8004728:	5802541c 	.word	0x5802541c
 800472c:	58025430 	.word	0x58025430
 8004730:	58025444 	.word	0x58025444
 8004734:	58025458 	.word	0x58025458
 8004738:	5802546c 	.word	0x5802546c
 800473c:	58025480 	.word	0x58025480
 8004740:	58025494 	.word	0x58025494

08004744 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a42      	ldr	r2, [pc, #264]	; (800485c <DMA_CalcBaseAndBitshift+0x118>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d04a      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a41      	ldr	r2, [pc, #260]	; (8004860 <DMA_CalcBaseAndBitshift+0x11c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d045      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a3f      	ldr	r2, [pc, #252]	; (8004864 <DMA_CalcBaseAndBitshift+0x120>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d040      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a3e      	ldr	r2, [pc, #248]	; (8004868 <DMA_CalcBaseAndBitshift+0x124>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d03b      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a3c      	ldr	r2, [pc, #240]	; (800486c <DMA_CalcBaseAndBitshift+0x128>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d036      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a3b      	ldr	r2, [pc, #236]	; (8004870 <DMA_CalcBaseAndBitshift+0x12c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d031      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a39      	ldr	r2, [pc, #228]	; (8004874 <DMA_CalcBaseAndBitshift+0x130>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d02c      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a38      	ldr	r2, [pc, #224]	; (8004878 <DMA_CalcBaseAndBitshift+0x134>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d027      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a36      	ldr	r2, [pc, #216]	; (800487c <DMA_CalcBaseAndBitshift+0x138>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d022      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a35      	ldr	r2, [pc, #212]	; (8004880 <DMA_CalcBaseAndBitshift+0x13c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d01d      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a33      	ldr	r2, [pc, #204]	; (8004884 <DMA_CalcBaseAndBitshift+0x140>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d018      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a32      	ldr	r2, [pc, #200]	; (8004888 <DMA_CalcBaseAndBitshift+0x144>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d013      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a30      	ldr	r2, [pc, #192]	; (800488c <DMA_CalcBaseAndBitshift+0x148>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00e      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a2f      	ldr	r2, [pc, #188]	; (8004890 <DMA_CalcBaseAndBitshift+0x14c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d009      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a2d      	ldr	r2, [pc, #180]	; (8004894 <DMA_CalcBaseAndBitshift+0x150>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d004      	beq.n	80047ec <DMA_CalcBaseAndBitshift+0xa8>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a2c      	ldr	r2, [pc, #176]	; (8004898 <DMA_CalcBaseAndBitshift+0x154>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d101      	bne.n	80047f0 <DMA_CalcBaseAndBitshift+0xac>
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <DMA_CalcBaseAndBitshift+0xae>
 80047f0:	2300      	movs	r3, #0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d024      	beq.n	8004840 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	3b10      	subs	r3, #16
 80047fe:	4a27      	ldr	r2, [pc, #156]	; (800489c <DMA_CalcBaseAndBitshift+0x158>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	4a24      	ldr	r2, [pc, #144]	; (80048a0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004810:	5cd3      	ldrb	r3, [r2, r3]
 8004812:	461a      	mov	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b03      	cmp	r3, #3
 800481c:	d908      	bls.n	8004830 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	4b1f      	ldr	r3, [pc, #124]	; (80048a4 <DMA_CalcBaseAndBitshift+0x160>)
 8004826:	4013      	ands	r3, r2
 8004828:	1d1a      	adds	r2, r3, #4
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	659a      	str	r2, [r3, #88]	; 0x58
 800482e:	e00d      	b.n	800484c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	4b1b      	ldr	r3, [pc, #108]	; (80048a4 <DMA_CalcBaseAndBitshift+0x160>)
 8004838:	4013      	ands	r3, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6593      	str	r3, [r2, #88]	; 0x58
 800483e:	e005      	b.n	800484c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	40020010 	.word	0x40020010
 8004860:	40020028 	.word	0x40020028
 8004864:	40020040 	.word	0x40020040
 8004868:	40020058 	.word	0x40020058
 800486c:	40020070 	.word	0x40020070
 8004870:	40020088 	.word	0x40020088
 8004874:	400200a0 	.word	0x400200a0
 8004878:	400200b8 	.word	0x400200b8
 800487c:	40020410 	.word	0x40020410
 8004880:	40020428 	.word	0x40020428
 8004884:	40020440 	.word	0x40020440
 8004888:	40020458 	.word	0x40020458
 800488c:	40020470 	.word	0x40020470
 8004890:	40020488 	.word	0x40020488
 8004894:	400204a0 	.word	0x400204a0
 8004898:	400204b8 	.word	0x400204b8
 800489c:	aaaaaaab 	.word	0xaaaaaaab
 80048a0:	0800cdd8 	.word	0x0800cdd8
 80048a4:	fffffc00 	.word	0xfffffc00

080048a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d120      	bne.n	80048fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d858      	bhi.n	8004976 <DMA_CheckFifoParam+0xce>
 80048c4:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <DMA_CheckFifoParam+0x24>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048dd 	.word	0x080048dd
 80048d0:	080048ef 	.word	0x080048ef
 80048d4:	080048dd 	.word	0x080048dd
 80048d8:	08004977 	.word	0x08004977
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d048      	beq.n	800497a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048ec:	e045      	b.n	800497a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048f6:	d142      	bne.n	800497e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048fc:	e03f      	b.n	800497e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004906:	d123      	bne.n	8004950 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	2b03      	cmp	r3, #3
 800490e:	d838      	bhi.n	8004982 <DMA_CheckFifoParam+0xda>
 8004910:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <DMA_CheckFifoParam+0x70>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	08004929 	.word	0x08004929
 800491c:	0800492f 	.word	0x0800492f
 8004920:	08004929 	.word	0x08004929
 8004924:	08004941 	.word	0x08004941
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	73fb      	strb	r3, [r7, #15]
        break;
 800492c:	e030      	b.n	8004990 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d025      	beq.n	8004986 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800493e:	e022      	b.n	8004986 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004948:	d11f      	bne.n	800498a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800494e:	e01c      	b.n	800498a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	2b02      	cmp	r3, #2
 8004956:	d902      	bls.n	800495e <DMA_CheckFifoParam+0xb6>
 8004958:	2b03      	cmp	r3, #3
 800495a:	d003      	beq.n	8004964 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800495c:	e018      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
        break;
 8004962:	e015      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00e      	beq.n	800498e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
    break;
 8004974:	e00b      	b.n	800498e <DMA_CheckFifoParam+0xe6>
        break;
 8004976:	bf00      	nop
 8004978:	e00a      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        break;
 800497a:	bf00      	nop
 800497c:	e008      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        break;
 800497e:	bf00      	nop
 8004980:	e006      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        break;
 8004982:	bf00      	nop
 8004984:	e004      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        break;
 8004986:	bf00      	nop
 8004988:	e002      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
        break;
 800498a:	bf00      	nop
 800498c:	e000      	b.n	8004990 <DMA_CheckFifoParam+0xe8>
    break;
 800498e:	bf00      	nop
    }
  }

  return status;
 8004990:	7bfb      	ldrb	r3, [r7, #15]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop

080049a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a38      	ldr	r2, [pc, #224]	; (8004a94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d022      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a36      	ldr	r2, [pc, #216]	; (8004a98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01d      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a35      	ldr	r2, [pc, #212]	; (8004a9c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d018      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a33      	ldr	r2, [pc, #204]	; (8004aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a32      	ldr	r2, [pc, #200]	; (8004aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00e      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a30      	ldr	r2, [pc, #192]	; (8004aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d009      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a2f      	ldr	r2, [pc, #188]	; (8004aac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a2d      	ldr	r2, [pc, #180]	; (8004ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d101      	bne.n	8004a02 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004a02:	2300      	movs	r3, #0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01a      	beq.n	8004a3e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	3b08      	subs	r3, #8
 8004a10:	4a28      	ldr	r2, [pc, #160]	; (8004ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	091b      	lsrs	r3, r3, #4
 8004a18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4b26      	ldr	r3, [pc, #152]	; (8004ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	461a      	mov	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a24      	ldr	r2, [pc, #144]	; (8004abc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004a2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	2201      	movs	r2, #1
 8004a36:	409a      	lsls	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004a3c:	e024      	b.n	8004a88 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	3b10      	subs	r3, #16
 8004a46:	4a1e      	ldr	r2, [pc, #120]	; (8004ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4a1c      	ldr	r2, [pc, #112]	; (8004ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d806      	bhi.n	8004a66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4a1b      	ldr	r2, [pc, #108]	; (8004ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d902      	bls.n	8004a66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	3308      	adds	r3, #8
 8004a64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4b18      	ldr	r3, [pc, #96]	; (8004acc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	461a      	mov	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a16      	ldr	r2, [pc, #88]	; (8004ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004a78:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	2201      	movs	r2, #1
 8004a82:	409a      	lsls	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a88:	bf00      	nop
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	58025408 	.word	0x58025408
 8004a98:	5802541c 	.word	0x5802541c
 8004a9c:	58025430 	.word	0x58025430
 8004aa0:	58025444 	.word	0x58025444
 8004aa4:	58025458 	.word	0x58025458
 8004aa8:	5802546c 	.word	0x5802546c
 8004aac:	58025480 	.word	0x58025480
 8004ab0:	58025494 	.word	0x58025494
 8004ab4:	cccccccd 	.word	0xcccccccd
 8004ab8:	16009600 	.word	0x16009600
 8004abc:	58025880 	.word	0x58025880
 8004ac0:	aaaaaaab 	.word	0xaaaaaaab
 8004ac4:	400204b8 	.word	0x400204b8
 8004ac8:	4002040f 	.word	0x4002040f
 8004acc:	10008200 	.word	0x10008200
 8004ad0:	40020880 	.word	0x40020880

08004ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d04a      	beq.n	8004b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d847      	bhi.n	8004b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a25      	ldr	r2, [pc, #148]	; (8004b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d022      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a24      	ldr	r2, [pc, #144]	; (8004b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d01d      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a22      	ldr	r2, [pc, #136]	; (8004b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d018      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a21      	ldr	r2, [pc, #132]	; (8004b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d013      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1f      	ldr	r2, [pc, #124]	; (8004b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00e      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1e      	ldr	r2, [pc, #120]	; (8004ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d009      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1c      	ldr	r2, [pc, #112]	; (8004ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d004      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1b      	ldr	r2, [pc, #108]	; (8004ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d101      	bne.n	8004b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004b40:	2301      	movs	r3, #1
 8004b42:	e000      	b.n	8004b46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004b44:	2300      	movs	r3, #0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4b17      	ldr	r3, [pc, #92]	; (8004bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	461a      	mov	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004b5c:	671a      	str	r2, [r3, #112]	; 0x70
 8004b5e:	e009      	b.n	8004b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	461a      	mov	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a11      	ldr	r2, [pc, #68]	; (8004bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004b72:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	2201      	movs	r2, #1
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004b80:	bf00      	nop
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	58025408 	.word	0x58025408
 8004b90:	5802541c 	.word	0x5802541c
 8004b94:	58025430 	.word	0x58025430
 8004b98:	58025444 	.word	0x58025444
 8004b9c:	58025458 	.word	0x58025458
 8004ba0:	5802546c 	.word	0x5802546c
 8004ba4:	58025480 	.word	0x58025480
 8004ba8:	58025494 	.word	0x58025494
 8004bac:	1600963f 	.word	0x1600963f
 8004bb0:	58025940 	.word	0x58025940
 8004bb4:	1000823f 	.word	0x1000823f
 8004bb8:	40020940 	.word	0x40020940

08004bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b089      	sub	sp, #36	; 0x24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004bca:	4b89      	ldr	r3, [pc, #548]	; (8004df0 <HAL_GPIO_Init+0x234>)
 8004bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bce:	e194      	b.n	8004efa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bdc:	4013      	ands	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 8186 	beq.w	8004ef4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d005      	beq.n	8004c00 <HAL_GPIO_Init+0x44>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d130      	bne.n	8004c62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c36:	2201      	movs	r2, #1
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	4013      	ands	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	f003 0201 	and.w	r2, r3, #1
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d017      	beq.n	8004c9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	2203      	movs	r2, #3
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	4013      	ands	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d123      	bne.n	8004cf2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	08da      	lsrs	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3208      	adds	r2, #8
 8004cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	220f      	movs	r2, #15
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	08da      	lsrs	r2, r3, #3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3208      	adds	r2, #8
 8004cec:	69b9      	ldr	r1, [r7, #24]
 8004cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4013      	ands	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 0203 	and.w	r2, r3, #3
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80e0 	beq.w	8004ef4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d34:	4b2f      	ldr	r3, [pc, #188]	; (8004df4 <HAL_GPIO_Init+0x238>)
 8004d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d3a:	4a2e      	ldr	r2, [pc, #184]	; (8004df4 <HAL_GPIO_Init+0x238>)
 8004d3c:	f043 0302 	orr.w	r3, r3, #2
 8004d40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d44:	4b2b      	ldr	r3, [pc, #172]	; (8004df4 <HAL_GPIO_Init+0x238>)
 8004d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d52:	4a29      	ldr	r2, [pc, #164]	; (8004df8 <HAL_GPIO_Init+0x23c>)
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	089b      	lsrs	r3, r3, #2
 8004d58:	3302      	adds	r3, #2
 8004d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	220f      	movs	r2, #15
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4013      	ands	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a20      	ldr	r2, [pc, #128]	; (8004dfc <HAL_GPIO_Init+0x240>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d052      	beq.n	8004e24 <HAL_GPIO_Init+0x268>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a1f      	ldr	r2, [pc, #124]	; (8004e00 <HAL_GPIO_Init+0x244>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d031      	beq.n	8004dea <HAL_GPIO_Init+0x22e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a1e      	ldr	r2, [pc, #120]	; (8004e04 <HAL_GPIO_Init+0x248>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d02b      	beq.n	8004de6 <HAL_GPIO_Init+0x22a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a1d      	ldr	r2, [pc, #116]	; (8004e08 <HAL_GPIO_Init+0x24c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d025      	beq.n	8004de2 <HAL_GPIO_Init+0x226>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <HAL_GPIO_Init+0x250>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d01f      	beq.n	8004dde <HAL_GPIO_Init+0x222>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <HAL_GPIO_Init+0x254>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d019      	beq.n	8004dda <HAL_GPIO_Init+0x21e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1a      	ldr	r2, [pc, #104]	; (8004e14 <HAL_GPIO_Init+0x258>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <HAL_GPIO_Init+0x21a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a19      	ldr	r2, [pc, #100]	; (8004e18 <HAL_GPIO_Init+0x25c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00d      	beq.n	8004dd2 <HAL_GPIO_Init+0x216>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a18      	ldr	r2, [pc, #96]	; (8004e1c <HAL_GPIO_Init+0x260>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d007      	beq.n	8004dce <HAL_GPIO_Init+0x212>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a17      	ldr	r2, [pc, #92]	; (8004e20 <HAL_GPIO_Init+0x264>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d101      	bne.n	8004dca <HAL_GPIO_Init+0x20e>
 8004dc6:	2309      	movs	r3, #9
 8004dc8:	e02d      	b.n	8004e26 <HAL_GPIO_Init+0x26a>
 8004dca:	230a      	movs	r3, #10
 8004dcc:	e02b      	b.n	8004e26 <HAL_GPIO_Init+0x26a>
 8004dce:	2308      	movs	r3, #8
 8004dd0:	e029      	b.n	8004e26 <HAL_GPIO_Init+0x26a>
 8004dd2:	2307      	movs	r3, #7
 8004dd4:	e027      	b.n	8004e26 <HAL_GPIO_Init+0x26a>
 8004dd6:	2306      	movs	r3, #6
 8004dd8:	e025      	b.n	8004e26 <HAL_GPIO_Init+0x26a>
 8004dda:	2305      	movs	r3, #5
 8004ddc:	e023      	b.n	8004e26 <HAL_GPIO_Init+0x26a>
 8004dde:	2304      	movs	r3, #4
 8004de0:	e021      	b.n	8004e26 <HAL_GPIO_Init+0x26a>
 8004de2:	2303      	movs	r3, #3
 8004de4:	e01f      	b.n	8004e26 <HAL_GPIO_Init+0x26a>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e01d      	b.n	8004e26 <HAL_GPIO_Init+0x26a>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e01b      	b.n	8004e26 <HAL_GPIO_Init+0x26a>
 8004dee:	bf00      	nop
 8004df0:	58000080 	.word	0x58000080
 8004df4:	58024400 	.word	0x58024400
 8004df8:	58000400 	.word	0x58000400
 8004dfc:	58020000 	.word	0x58020000
 8004e00:	58020400 	.word	0x58020400
 8004e04:	58020800 	.word	0x58020800
 8004e08:	58020c00 	.word	0x58020c00
 8004e0c:	58021000 	.word	0x58021000
 8004e10:	58021400 	.word	0x58021400
 8004e14:	58021800 	.word	0x58021800
 8004e18:	58021c00 	.word	0x58021c00
 8004e1c:	58022000 	.word	0x58022000
 8004e20:	58022400 	.word	0x58022400
 8004e24:	2300      	movs	r3, #0
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	f002 0203 	and.w	r2, r2, #3
 8004e2c:	0092      	lsls	r2, r2, #2
 8004e2e:	4093      	lsls	r3, r2
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e36:	4938      	ldr	r1, [pc, #224]	; (8004f18 <HAL_GPIO_Init+0x35c>)
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	089b      	lsrs	r3, r3, #2
 8004e3c:	3302      	adds	r3, #2
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4013      	ands	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	4013      	ands	r3, r2
 8004e82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4013      	ands	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f47f ae63 	bne.w	8004bd0 <HAL_GPIO_Init+0x14>
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	bf00      	nop
 8004f0e:	3724      	adds	r7, #36	; 0x24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	58000400 	.word	0x58000400

08004f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	807b      	strh	r3, [r7, #2]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f2c:	787b      	ldrb	r3, [r7, #1]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f32:	887a      	ldrh	r2, [r7, #2]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f38:	e003      	b.n	8004f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f3a:	887b      	ldrh	r3, [r7, #2]
 8004f3c:	041a      	lsls	r2, r3, #16
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	619a      	str	r2, [r3, #24]
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
	...

08004f50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f58:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d00a      	beq.n	8004f7a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f64:	4b16      	ldr	r3, [pc, #88]	; (8004fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d001      	beq.n	8004f76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e01f      	b.n	8004fb6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e01d      	b.n	8004fb6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f7a:	4b11      	ldr	r3, [pc, #68]	; (8004fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f023 0207 	bic.w	r2, r3, #7
 8004f82:	490f      	ldr	r1, [pc, #60]	; (8004fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f8a:	f7fc f92f 	bl	80011ec <HAL_GetTick>
 8004f8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f90:	e009      	b.n	8004fa6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f92:	f7fc f92b 	bl	80011ec <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fa0:	d901      	bls.n	8004fa6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e007      	b.n	8004fb6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb2:	d1ee      	bne.n	8004f92 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	58024800 	.word	0x58024800

08004fc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08c      	sub	sp, #48	; 0x30
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d102      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f000 bc48 	b.w	8005868 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8088 	beq.w	80050f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fe6:	4b99      	ldr	r3, [pc, #612]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ff0:	4b96      	ldr	r3, [pc, #600]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	2b10      	cmp	r3, #16
 8004ffa:	d007      	beq.n	800500c <HAL_RCC_OscConfig+0x48>
 8004ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffe:	2b18      	cmp	r3, #24
 8005000:	d111      	bne.n	8005026 <HAL_RCC_OscConfig+0x62>
 8005002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005004:	f003 0303 	and.w	r3, r3, #3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d10c      	bne.n	8005026 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800500c:	4b8f      	ldr	r3, [pc, #572]	; (800524c <HAL_RCC_OscConfig+0x288>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d06d      	beq.n	80050f4 <HAL_RCC_OscConfig+0x130>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d169      	bne.n	80050f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	f000 bc21 	b.w	8005868 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800502e:	d106      	bne.n	800503e <HAL_RCC_OscConfig+0x7a>
 8005030:	4b86      	ldr	r3, [pc, #536]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a85      	ldr	r2, [pc, #532]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	e02e      	b.n	800509c <HAL_RCC_OscConfig+0xd8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10c      	bne.n	8005060 <HAL_RCC_OscConfig+0x9c>
 8005046:	4b81      	ldr	r3, [pc, #516]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a80      	ldr	r2, [pc, #512]	; (800524c <HAL_RCC_OscConfig+0x288>)
 800504c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	4b7e      	ldr	r3, [pc, #504]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a7d      	ldr	r2, [pc, #500]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005058:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	e01d      	b.n	800509c <HAL_RCC_OscConfig+0xd8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005068:	d10c      	bne.n	8005084 <HAL_RCC_OscConfig+0xc0>
 800506a:	4b78      	ldr	r3, [pc, #480]	; (800524c <HAL_RCC_OscConfig+0x288>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a77      	ldr	r2, [pc, #476]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	4b75      	ldr	r3, [pc, #468]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a74      	ldr	r2, [pc, #464]	; (800524c <HAL_RCC_OscConfig+0x288>)
 800507c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	e00b      	b.n	800509c <HAL_RCC_OscConfig+0xd8>
 8005084:	4b71      	ldr	r3, [pc, #452]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a70      	ldr	r2, [pc, #448]	; (800524c <HAL_RCC_OscConfig+0x288>)
 800508a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	4b6e      	ldr	r3, [pc, #440]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a6d      	ldr	r2, [pc, #436]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800509a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d013      	beq.n	80050cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a4:	f7fc f8a2 	bl	80011ec <HAL_GetTick>
 80050a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050ac:	f7fc f89e 	bl	80011ec <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b64      	cmp	r3, #100	; 0x64
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e3d4      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050be:	4b63      	ldr	r3, [pc, #396]	; (800524c <HAL_RCC_OscConfig+0x288>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0xe8>
 80050ca:	e014      	b.n	80050f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fc f88e 	bl	80011ec <HAL_GetTick>
 80050d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d4:	f7fc f88a 	bl	80011ec <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b64      	cmp	r3, #100	; 0x64
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e3c0      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050e6:	4b59      	ldr	r3, [pc, #356]	; (800524c <HAL_RCC_OscConfig+0x288>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x110>
 80050f2:	e000      	b.n	80050f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 80ca 	beq.w	8005298 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005104:	4b51      	ldr	r3, [pc, #324]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800510c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800510e:	4b4f      	ldr	r3, [pc, #316]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005112:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d007      	beq.n	800512a <HAL_RCC_OscConfig+0x166>
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	2b18      	cmp	r3, #24
 800511e:	d156      	bne.n	80051ce <HAL_RCC_OscConfig+0x20a>
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d151      	bne.n	80051ce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800512a:	4b48      	ldr	r3, [pc, #288]	; (800524c <HAL_RCC_OscConfig+0x288>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d005      	beq.n	8005142 <HAL_RCC_OscConfig+0x17e>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e392      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005142:	4b42      	ldr	r3, [pc, #264]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f023 0219 	bic.w	r2, r3, #25
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	493f      	ldr	r1, [pc, #252]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005150:	4313      	orrs	r3, r2
 8005152:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005154:	f7fc f84a 	bl	80011ec <HAL_GetTick>
 8005158:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800515c:	f7fc f846 	bl	80011ec <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e37c      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800516e:	4b37      	ldr	r3, [pc, #220]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f0      	beq.n	800515c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800517a:	f7fc f843 	bl	8001204 <HAL_GetREVID>
 800517e:	4603      	mov	r3, r0
 8005180:	f241 0203 	movw	r2, #4099	; 0x1003
 8005184:	4293      	cmp	r3, r2
 8005186:	d817      	bhi.n	80051b8 <HAL_RCC_OscConfig+0x1f4>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	2b40      	cmp	r3, #64	; 0x40
 800518e:	d108      	bne.n	80051a2 <HAL_RCC_OscConfig+0x1de>
 8005190:	4b2e      	ldr	r3, [pc, #184]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005198:	4a2c      	ldr	r2, [pc, #176]	; (800524c <HAL_RCC_OscConfig+0x288>)
 800519a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800519e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051a0:	e07a      	b.n	8005298 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a2:	4b2a      	ldr	r3, [pc, #168]	; (800524c <HAL_RCC_OscConfig+0x288>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	031b      	lsls	r3, r3, #12
 80051b0:	4926      	ldr	r1, [pc, #152]	; (800524c <HAL_RCC_OscConfig+0x288>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051b6:	e06f      	b.n	8005298 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b8:	4b24      	ldr	r3, [pc, #144]	; (800524c <HAL_RCC_OscConfig+0x288>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	061b      	lsls	r3, r3, #24
 80051c6:	4921      	ldr	r1, [pc, #132]	; (800524c <HAL_RCC_OscConfig+0x288>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051cc:	e064      	b.n	8005298 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d047      	beq.n	8005266 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051d6:	4b1d      	ldr	r3, [pc, #116]	; (800524c <HAL_RCC_OscConfig+0x288>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f023 0219 	bic.w	r2, r3, #25
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	491a      	ldr	r1, [pc, #104]	; (800524c <HAL_RCC_OscConfig+0x288>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e8:	f7fc f800 	bl	80011ec <HAL_GetTick>
 80051ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f0:	f7fb fffc 	bl	80011ec <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e332      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005202:	4b12      	ldr	r3, [pc, #72]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0304 	and.w	r3, r3, #4
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800520e:	f7fb fff9 	bl	8001204 <HAL_GetREVID>
 8005212:	4603      	mov	r3, r0
 8005214:	f241 0203 	movw	r2, #4099	; 0x1003
 8005218:	4293      	cmp	r3, r2
 800521a:	d819      	bhi.n	8005250 <HAL_RCC_OscConfig+0x28c>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	2b40      	cmp	r3, #64	; 0x40
 8005222:	d108      	bne.n	8005236 <HAL_RCC_OscConfig+0x272>
 8005224:	4b09      	ldr	r3, [pc, #36]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800522c:	4a07      	ldr	r2, [pc, #28]	; (800524c <HAL_RCC_OscConfig+0x288>)
 800522e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005232:	6053      	str	r3, [r2, #4]
 8005234:	e030      	b.n	8005298 <HAL_RCC_OscConfig+0x2d4>
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	031b      	lsls	r3, r3, #12
 8005244:	4901      	ldr	r1, [pc, #4]	; (800524c <HAL_RCC_OscConfig+0x288>)
 8005246:	4313      	orrs	r3, r2
 8005248:	604b      	str	r3, [r1, #4]
 800524a:	e025      	b.n	8005298 <HAL_RCC_OscConfig+0x2d4>
 800524c:	58024400 	.word	0x58024400
 8005250:	4b9a      	ldr	r3, [pc, #616]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	061b      	lsls	r3, r3, #24
 800525e:	4997      	ldr	r1, [pc, #604]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005260:	4313      	orrs	r3, r2
 8005262:	604b      	str	r3, [r1, #4]
 8005264:	e018      	b.n	8005298 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005266:	4b95      	ldr	r3, [pc, #596]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a94      	ldr	r2, [pc, #592]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 800526c:	f023 0301 	bic.w	r3, r3, #1
 8005270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005272:	f7fb ffbb 	bl	80011ec <HAL_GetTick>
 8005276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800527a:	f7fb ffb7 	bl	80011ec <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e2ed      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800528c:	4b8b      	ldr	r3, [pc, #556]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1f0      	bne.n	800527a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 80a9 	beq.w	80053f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052a6:	4b85      	ldr	r3, [pc, #532]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052b0:	4b82      	ldr	r3, [pc, #520]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d007      	beq.n	80052cc <HAL_RCC_OscConfig+0x308>
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2b18      	cmp	r3, #24
 80052c0:	d13a      	bne.n	8005338 <HAL_RCC_OscConfig+0x374>
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d135      	bne.n	8005338 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052cc:	4b7b      	ldr	r3, [pc, #492]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d005      	beq.n	80052e4 <HAL_RCC_OscConfig+0x320>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	2b80      	cmp	r3, #128	; 0x80
 80052de:	d001      	beq.n	80052e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e2c1      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052e4:	f7fb ff8e 	bl	8001204 <HAL_GetREVID>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d817      	bhi.n	8005322 <HAL_RCC_OscConfig+0x35e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d108      	bne.n	800530c <HAL_RCC_OscConfig+0x348>
 80052fa:	4b70      	ldr	r3, [pc, #448]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005302:	4a6e      	ldr	r2, [pc, #440]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005304:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005308:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800530a:	e075      	b.n	80053f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800530c:	4b6b      	ldr	r3, [pc, #428]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	069b      	lsls	r3, r3, #26
 800531a:	4968      	ldr	r1, [pc, #416]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 800531c:	4313      	orrs	r3, r2
 800531e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005320:	e06a      	b.n	80053f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005322:	4b66      	ldr	r3, [pc, #408]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	061b      	lsls	r3, r3, #24
 8005330:	4962      	ldr	r1, [pc, #392]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005332:	4313      	orrs	r3, r2
 8005334:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005336:	e05f      	b.n	80053f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d042      	beq.n	80053c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005340:	4b5e      	ldr	r3, [pc, #376]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a5d      	ldr	r2, [pc, #372]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534c:	f7fb ff4e 	bl	80011ec <HAL_GetTick>
 8005350:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005354:	f7fb ff4a 	bl	80011ec <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e280      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005366:	4b55      	ldr	r3, [pc, #340]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0f0      	beq.n	8005354 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005372:	f7fb ff47 	bl	8001204 <HAL_GetREVID>
 8005376:	4603      	mov	r3, r0
 8005378:	f241 0203 	movw	r2, #4099	; 0x1003
 800537c:	4293      	cmp	r3, r2
 800537e:	d817      	bhi.n	80053b0 <HAL_RCC_OscConfig+0x3ec>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	2b20      	cmp	r3, #32
 8005386:	d108      	bne.n	800539a <HAL_RCC_OscConfig+0x3d6>
 8005388:	4b4c      	ldr	r3, [pc, #304]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005390:	4a4a      	ldr	r2, [pc, #296]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005392:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005396:	6053      	str	r3, [r2, #4]
 8005398:	e02e      	b.n	80053f8 <HAL_RCC_OscConfig+0x434>
 800539a:	4b48      	ldr	r3, [pc, #288]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	069b      	lsls	r3, r3, #26
 80053a8:	4944      	ldr	r1, [pc, #272]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	604b      	str	r3, [r1, #4]
 80053ae:	e023      	b.n	80053f8 <HAL_RCC_OscConfig+0x434>
 80053b0:	4b42      	ldr	r3, [pc, #264]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	061b      	lsls	r3, r3, #24
 80053be:	493f      	ldr	r1, [pc, #252]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60cb      	str	r3, [r1, #12]
 80053c4:	e018      	b.n	80053f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80053c6:	4b3d      	ldr	r3, [pc, #244]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a3c      	ldr	r2, [pc, #240]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 80053cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d2:	f7fb ff0b 	bl	80011ec <HAL_GetTick>
 80053d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80053d8:	e008      	b.n	80053ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80053da:	f7fb ff07 	bl	80011ec <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e23d      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80053ec:	4b33      	ldr	r3, [pc, #204]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1f0      	bne.n	80053da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d036      	beq.n	8005472 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d019      	beq.n	8005440 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800540c:	4b2b      	ldr	r3, [pc, #172]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 800540e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005410:	4a2a      	ldr	r2, [pc, #168]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005418:	f7fb fee8 	bl	80011ec <HAL_GetTick>
 800541c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005420:	f7fb fee4 	bl	80011ec <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e21a      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005432:	4b22      	ldr	r3, [pc, #136]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0f0      	beq.n	8005420 <HAL_RCC_OscConfig+0x45c>
 800543e:	e018      	b.n	8005472 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005440:	4b1e      	ldr	r3, [pc, #120]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005444:	4a1d      	ldr	r2, [pc, #116]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544c:	f7fb fece 	bl	80011ec <HAL_GetTick>
 8005450:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005454:	f7fb feca 	bl	80011ec <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e200      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005466:	4b15      	ldr	r3, [pc, #84]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f0      	bne.n	8005454 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b00      	cmp	r3, #0
 800547c:	d039      	beq.n	80054f2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d01c      	beq.n	80054c0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005486:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a0c      	ldr	r2, [pc, #48]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 800548c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005490:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005492:	f7fb feab 	bl	80011ec <HAL_GetTick>
 8005496:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800549a:	f7fb fea7 	bl	80011ec <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e1dd      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054ac:	4b03      	ldr	r3, [pc, #12]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f0      	beq.n	800549a <HAL_RCC_OscConfig+0x4d6>
 80054b8:	e01b      	b.n	80054f2 <HAL_RCC_OscConfig+0x52e>
 80054ba:	bf00      	nop
 80054bc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054c0:	4b9b      	ldr	r3, [pc, #620]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a9a      	ldr	r2, [pc, #616]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80054c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054cc:	f7fb fe8e 	bl	80011ec <HAL_GetTick>
 80054d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054d4:	f7fb fe8a 	bl	80011ec <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e1c0      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054e6:	4b92      	ldr	r3, [pc, #584]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f0      	bne.n	80054d4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 8081 	beq.w	8005602 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005500:	4b8c      	ldr	r3, [pc, #560]	; (8005734 <HAL_RCC_OscConfig+0x770>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a8b      	ldr	r2, [pc, #556]	; (8005734 <HAL_RCC_OscConfig+0x770>)
 8005506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800550a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800550c:	f7fb fe6e 	bl	80011ec <HAL_GetTick>
 8005510:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005514:	f7fb fe6a 	bl	80011ec <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b64      	cmp	r3, #100	; 0x64
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e1a0      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005526:	4b83      	ldr	r3, [pc, #524]	; (8005734 <HAL_RCC_OscConfig+0x770>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0f0      	beq.n	8005514 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d106      	bne.n	8005548 <HAL_RCC_OscConfig+0x584>
 800553a:	4b7d      	ldr	r3, [pc, #500]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 800553c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553e:	4a7c      	ldr	r2, [pc, #496]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 8005540:	f043 0301 	orr.w	r3, r3, #1
 8005544:	6713      	str	r3, [r2, #112]	; 0x70
 8005546:	e02d      	b.n	80055a4 <HAL_RCC_OscConfig+0x5e0>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10c      	bne.n	800556a <HAL_RCC_OscConfig+0x5a6>
 8005550:	4b77      	ldr	r3, [pc, #476]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 8005552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005554:	4a76      	ldr	r2, [pc, #472]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 8005556:	f023 0301 	bic.w	r3, r3, #1
 800555a:	6713      	str	r3, [r2, #112]	; 0x70
 800555c:	4b74      	ldr	r3, [pc, #464]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 800555e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005560:	4a73      	ldr	r2, [pc, #460]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 8005562:	f023 0304 	bic.w	r3, r3, #4
 8005566:	6713      	str	r3, [r2, #112]	; 0x70
 8005568:	e01c      	b.n	80055a4 <HAL_RCC_OscConfig+0x5e0>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	2b05      	cmp	r3, #5
 8005570:	d10c      	bne.n	800558c <HAL_RCC_OscConfig+0x5c8>
 8005572:	4b6f      	ldr	r3, [pc, #444]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	4a6e      	ldr	r2, [pc, #440]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 8005578:	f043 0304 	orr.w	r3, r3, #4
 800557c:	6713      	str	r3, [r2, #112]	; 0x70
 800557e:	4b6c      	ldr	r3, [pc, #432]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 8005580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005582:	4a6b      	ldr	r2, [pc, #428]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 8005584:	f043 0301 	orr.w	r3, r3, #1
 8005588:	6713      	str	r3, [r2, #112]	; 0x70
 800558a:	e00b      	b.n	80055a4 <HAL_RCC_OscConfig+0x5e0>
 800558c:	4b68      	ldr	r3, [pc, #416]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 800558e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005590:	4a67      	ldr	r2, [pc, #412]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 8005592:	f023 0301 	bic.w	r3, r3, #1
 8005596:	6713      	str	r3, [r2, #112]	; 0x70
 8005598:	4b65      	ldr	r3, [pc, #404]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 800559a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559c:	4a64      	ldr	r2, [pc, #400]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 800559e:	f023 0304 	bic.w	r3, r3, #4
 80055a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d015      	beq.n	80055d8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ac:	f7fb fe1e 	bl	80011ec <HAL_GetTick>
 80055b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055b2:	e00a      	b.n	80055ca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b4:	f7fb fe1a 	bl	80011ec <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e14e      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055ca:	4b59      	ldr	r3, [pc, #356]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80055cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0ee      	beq.n	80055b4 <HAL_RCC_OscConfig+0x5f0>
 80055d6:	e014      	b.n	8005602 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d8:	f7fb fe08 	bl	80011ec <HAL_GetTick>
 80055dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055de:	e00a      	b.n	80055f6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055e0:	f7fb fe04 	bl	80011ec <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e138      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055f6:	4b4e      	ldr	r3, [pc, #312]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1ee      	bne.n	80055e0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 812d 	beq.w	8005866 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800560c:	4b48      	ldr	r3, [pc, #288]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005614:	2b18      	cmp	r3, #24
 8005616:	f000 80bd 	beq.w	8005794 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b02      	cmp	r3, #2
 8005620:	f040 809e 	bne.w	8005760 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005624:	4b42      	ldr	r3, [pc, #264]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a41      	ldr	r2, [pc, #260]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 800562a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800562e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005630:	f7fb fddc 	bl	80011ec <HAL_GetTick>
 8005634:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005638:	f7fb fdd8 	bl	80011ec <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e10e      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800564a:	4b39      	ldr	r3, [pc, #228]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1f0      	bne.n	8005638 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005656:	4b36      	ldr	r3, [pc, #216]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 8005658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800565a:	4b37      	ldr	r3, [pc, #220]	; (8005738 <HAL_RCC_OscConfig+0x774>)
 800565c:	4013      	ands	r3, r2
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005666:	0112      	lsls	r2, r2, #4
 8005668:	430a      	orrs	r2, r1
 800566a:	4931      	ldr	r1, [pc, #196]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 800566c:	4313      	orrs	r3, r2
 800566e:	628b      	str	r3, [r1, #40]	; 0x28
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	3b01      	subs	r3, #1
 8005676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	3b01      	subs	r3, #1
 8005680:	025b      	lsls	r3, r3, #9
 8005682:	b29b      	uxth	r3, r3
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	3b01      	subs	r3, #1
 800568c:	041b      	lsls	r3, r3, #16
 800568e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005698:	3b01      	subs	r3, #1
 800569a:	061b      	lsls	r3, r3, #24
 800569c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056a0:	4923      	ldr	r1, [pc, #140]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80056a6:	4b22      	ldr	r3, [pc, #136]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80056a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056aa:	4a21      	ldr	r2, [pc, #132]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056b2:	4b1f      	ldr	r3, [pc, #124]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80056b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b6:	4b21      	ldr	r3, [pc, #132]	; (800573c <HAL_RCC_OscConfig+0x778>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80056be:	00d2      	lsls	r2, r2, #3
 80056c0:	491b      	ldr	r1, [pc, #108]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80056c6:	4b1a      	ldr	r3, [pc, #104]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80056c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ca:	f023 020c 	bic.w	r2, r3, #12
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	4917      	ldr	r1, [pc, #92]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80056d8:	4b15      	ldr	r3, [pc, #84]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	f023 0202 	bic.w	r2, r3, #2
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e4:	4912      	ldr	r1, [pc, #72]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056ea:	4b11      	ldr	r3, [pc, #68]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	4a10      	ldr	r2, [pc, #64]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80056f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056f6:	4b0e      	ldr	r3, [pc, #56]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	4a0d      	ldr	r2, [pc, #52]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 80056fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005700:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005702:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	4a0a      	ldr	r2, [pc, #40]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 8005708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800570c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800570e:	4b08      	ldr	r3, [pc, #32]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 8005710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005712:	4a07      	ldr	r2, [pc, #28]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800571a:	4b05      	ldr	r3, [pc, #20]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a04      	ldr	r2, [pc, #16]	; (8005730 <HAL_RCC_OscConfig+0x76c>)
 8005720:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005726:	f7fb fd61 	bl	80011ec <HAL_GetTick>
 800572a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800572c:	e011      	b.n	8005752 <HAL_RCC_OscConfig+0x78e>
 800572e:	bf00      	nop
 8005730:	58024400 	.word	0x58024400
 8005734:	58024800 	.word	0x58024800
 8005738:	fffffc0c 	.word	0xfffffc0c
 800573c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005740:	f7fb fd54 	bl	80011ec <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e08a      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005752:	4b47      	ldr	r3, [pc, #284]	; (8005870 <HAL_RCC_OscConfig+0x8ac>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0f0      	beq.n	8005740 <HAL_RCC_OscConfig+0x77c>
 800575e:	e082      	b.n	8005866 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005760:	4b43      	ldr	r3, [pc, #268]	; (8005870 <HAL_RCC_OscConfig+0x8ac>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a42      	ldr	r2, [pc, #264]	; (8005870 <HAL_RCC_OscConfig+0x8ac>)
 8005766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800576a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7fb fd3e 	bl	80011ec <HAL_GetTick>
 8005770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005774:	f7fb fd3a 	bl	80011ec <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e070      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005786:	4b3a      	ldr	r3, [pc, #232]	; (8005870 <HAL_RCC_OscConfig+0x8ac>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x7b0>
 8005792:	e068      	b.n	8005866 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005794:	4b36      	ldr	r3, [pc, #216]	; (8005870 <HAL_RCC_OscConfig+0x8ac>)
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800579a:	4b35      	ldr	r3, [pc, #212]	; (8005870 <HAL_RCC_OscConfig+0x8ac>)
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d031      	beq.n	800580c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f003 0203 	and.w	r2, r3, #3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d12a      	bne.n	800580c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	091b      	lsrs	r3, r3, #4
 80057ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d122      	bne.n	800580c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d11a      	bne.n	800580c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	0a5b      	lsrs	r3, r3, #9
 80057da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d111      	bne.n	800580c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	0c1b      	lsrs	r3, r3, #16
 80057ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d108      	bne.n	800580c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	0e1b      	lsrs	r3, r3, #24
 80057fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005806:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005808:	429a      	cmp	r2, r3
 800580a:	d001      	beq.n	8005810 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e02b      	b.n	8005868 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005810:	4b17      	ldr	r3, [pc, #92]	; (8005870 <HAL_RCC_OscConfig+0x8ac>)
 8005812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005814:	08db      	lsrs	r3, r3, #3
 8005816:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800581a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	429a      	cmp	r2, r3
 8005824:	d01f      	beq.n	8005866 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005826:	4b12      	ldr	r3, [pc, #72]	; (8005870 <HAL_RCC_OscConfig+0x8ac>)
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	4a11      	ldr	r2, [pc, #68]	; (8005870 <HAL_RCC_OscConfig+0x8ac>)
 800582c:	f023 0301 	bic.w	r3, r3, #1
 8005830:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005832:	f7fb fcdb 	bl	80011ec <HAL_GetTick>
 8005836:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005838:	bf00      	nop
 800583a:	f7fb fcd7 	bl	80011ec <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	4293      	cmp	r3, r2
 8005844:	d0f9      	beq.n	800583a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005846:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <HAL_RCC_OscConfig+0x8ac>)
 8005848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800584a:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <HAL_RCC_OscConfig+0x8b0>)
 800584c:	4013      	ands	r3, r2
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005852:	00d2      	lsls	r2, r2, #3
 8005854:	4906      	ldr	r1, [pc, #24]	; (8005870 <HAL_RCC_OscConfig+0x8ac>)
 8005856:	4313      	orrs	r3, r2
 8005858:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800585a:	4b05      	ldr	r3, [pc, #20]	; (8005870 <HAL_RCC_OscConfig+0x8ac>)
 800585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585e:	4a04      	ldr	r2, [pc, #16]	; (8005870 <HAL_RCC_OscConfig+0x8ac>)
 8005860:	f043 0301 	orr.w	r3, r3, #1
 8005864:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3730      	adds	r7, #48	; 0x30
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	58024400 	.word	0x58024400
 8005874:	ffff0007 	.word	0xffff0007

08005878 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e19c      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800588c:	4b8a      	ldr	r3, [pc, #552]	; (8005ab8 <HAL_RCC_ClockConfig+0x240>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d910      	bls.n	80058bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589a:	4b87      	ldr	r3, [pc, #540]	; (8005ab8 <HAL_RCC_ClockConfig+0x240>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f023 020f 	bic.w	r2, r3, #15
 80058a2:	4985      	ldr	r1, [pc, #532]	; (8005ab8 <HAL_RCC_ClockConfig+0x240>)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058aa:	4b83      	ldr	r3, [pc, #524]	; (8005ab8 <HAL_RCC_ClockConfig+0x240>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e184      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d010      	beq.n	80058ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	4b7b      	ldr	r3, [pc, #492]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d908      	bls.n	80058ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058d8:	4b78      	ldr	r3, [pc, #480]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	4975      	ldr	r1, [pc, #468]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d010      	beq.n	8005918 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	4b70      	ldr	r3, [pc, #448]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005902:	429a      	cmp	r2, r3
 8005904:	d908      	bls.n	8005918 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005906:	4b6d      	ldr	r3, [pc, #436]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	496a      	ldr	r1, [pc, #424]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 8005914:	4313      	orrs	r3, r2
 8005916:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0310 	and.w	r3, r3, #16
 8005920:	2b00      	cmp	r3, #0
 8005922:	d010      	beq.n	8005946 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699a      	ldr	r2, [r3, #24]
 8005928:	4b64      	ldr	r3, [pc, #400]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005930:	429a      	cmp	r2, r3
 8005932:	d908      	bls.n	8005946 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005934:	4b61      	ldr	r3, [pc, #388]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	495e      	ldr	r1, [pc, #376]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 8005942:	4313      	orrs	r3, r2
 8005944:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d010      	beq.n	8005974 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69da      	ldr	r2, [r3, #28]
 8005956:	4b59      	ldr	r3, [pc, #356]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800595e:	429a      	cmp	r2, r3
 8005960:	d908      	bls.n	8005974 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005962:	4b56      	ldr	r3, [pc, #344]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	4953      	ldr	r1, [pc, #332]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 8005970:	4313      	orrs	r3, r2
 8005972:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d010      	beq.n	80059a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	4b4d      	ldr	r3, [pc, #308]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	429a      	cmp	r2, r3
 800598e:	d908      	bls.n	80059a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005990:	4b4a      	ldr	r3, [pc, #296]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	f023 020f 	bic.w	r2, r3, #15
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	4947      	ldr	r1, [pc, #284]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d055      	beq.n	8005a5a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80059ae:	4b43      	ldr	r3, [pc, #268]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	4940      	ldr	r1, [pc, #256]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d107      	bne.n	80059d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059c8:	4b3c      	ldr	r3, [pc, #240]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d121      	bne.n	8005a18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e0f6      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d107      	bne.n	80059f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059e0:	4b36      	ldr	r3, [pc, #216]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d115      	bne.n	8005a18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0ea      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d107      	bne.n	8005a08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059f8:	4b30      	ldr	r3, [pc, #192]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d109      	bne.n	8005a18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e0de      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a08:	4b2c      	ldr	r3, [pc, #176]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e0d6      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a18:	4b28      	ldr	r3, [pc, #160]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	f023 0207 	bic.w	r2, r3, #7
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	4925      	ldr	r1, [pc, #148]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a2a:	f7fb fbdf 	bl	80011ec <HAL_GetTick>
 8005a2e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a30:	e00a      	b.n	8005a48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a32:	f7fb fbdb 	bl	80011ec <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e0be      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a48:	4b1c      	ldr	r3, [pc, #112]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d1eb      	bne.n	8005a32 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d010      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	4b14      	ldr	r3, [pc, #80]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d208      	bcs.n	8005a88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a76:	4b11      	ldr	r3, [pc, #68]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f023 020f 	bic.w	r2, r3, #15
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	490e      	ldr	r1, [pc, #56]	; (8005abc <HAL_RCC_ClockConfig+0x244>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a88:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <HAL_RCC_ClockConfig+0x240>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 030f 	and.w	r3, r3, #15
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d214      	bcs.n	8005ac0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a96:	4b08      	ldr	r3, [pc, #32]	; (8005ab8 <HAL_RCC_ClockConfig+0x240>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f023 020f 	bic.w	r2, r3, #15
 8005a9e:	4906      	ldr	r1, [pc, #24]	; (8005ab8 <HAL_RCC_ClockConfig+0x240>)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa6:	4b04      	ldr	r3, [pc, #16]	; (8005ab8 <HAL_RCC_ClockConfig+0x240>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e086      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x34e>
 8005ab8:	52002000 	.word	0x52002000
 8005abc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d010      	beq.n	8005aee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	4b3f      	ldr	r3, [pc, #252]	; (8005bd0 <HAL_RCC_ClockConfig+0x358>)
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d208      	bcs.n	8005aee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005adc:	4b3c      	ldr	r3, [pc, #240]	; (8005bd0 <HAL_RCC_ClockConfig+0x358>)
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	4939      	ldr	r1, [pc, #228]	; (8005bd0 <HAL_RCC_ClockConfig+0x358>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d010      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695a      	ldr	r2, [r3, #20]
 8005afe:	4b34      	ldr	r3, [pc, #208]	; (8005bd0 <HAL_RCC_ClockConfig+0x358>)
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d208      	bcs.n	8005b1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b0a:	4b31      	ldr	r3, [pc, #196]	; (8005bd0 <HAL_RCC_ClockConfig+0x358>)
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	492e      	ldr	r1, [pc, #184]	; (8005bd0 <HAL_RCC_ClockConfig+0x358>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d010      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	4b28      	ldr	r3, [pc, #160]	; (8005bd0 <HAL_RCC_ClockConfig+0x358>)
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d208      	bcs.n	8005b4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b38:	4b25      	ldr	r3, [pc, #148]	; (8005bd0 <HAL_RCC_ClockConfig+0x358>)
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	4922      	ldr	r1, [pc, #136]	; (8005bd0 <HAL_RCC_ClockConfig+0x358>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d010      	beq.n	8005b78 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69da      	ldr	r2, [r3, #28]
 8005b5a:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <HAL_RCC_ClockConfig+0x358>)
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d208      	bcs.n	8005b78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b66:	4b1a      	ldr	r3, [pc, #104]	; (8005bd0 <HAL_RCC_ClockConfig+0x358>)
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	4917      	ldr	r1, [pc, #92]	; (8005bd0 <HAL_RCC_ClockConfig+0x358>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b78:	f000 f834 	bl	8005be4 <HAL_RCC_GetSysClockFreq>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	4b14      	ldr	r3, [pc, #80]	; (8005bd0 <HAL_RCC_ClockConfig+0x358>)
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	0a1b      	lsrs	r3, r3, #8
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	4912      	ldr	r1, [pc, #72]	; (8005bd4 <HAL_RCC_ClockConfig+0x35c>)
 8005b8a:	5ccb      	ldrb	r3, [r1, r3]
 8005b8c:	f003 031f 	and.w	r3, r3, #31
 8005b90:	fa22 f303 	lsr.w	r3, r2, r3
 8005b94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b96:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <HAL_RCC_ClockConfig+0x358>)
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	4a0d      	ldr	r2, [pc, #52]	; (8005bd4 <HAL_RCC_ClockConfig+0x35c>)
 8005ba0:	5cd3      	ldrb	r3, [r2, r3]
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bac:	4a0a      	ldr	r2, [pc, #40]	; (8005bd8 <HAL_RCC_ClockConfig+0x360>)
 8005bae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bb0:	4a0a      	ldr	r2, [pc, #40]	; (8005bdc <HAL_RCC_ClockConfig+0x364>)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005bb6:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <HAL_RCC_ClockConfig+0x368>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fb f850 	bl	8000c60 <HAL_InitTick>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	58024400 	.word	0x58024400
 8005bd4:	0800cdc8 	.word	0x0800cdc8
 8005bd8:	24000004 	.word	0x24000004
 8005bdc:	24000000 	.word	0x24000000
 8005be0:	24000008 	.word	0x24000008

08005be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b089      	sub	sp, #36	; 0x24
 8005be8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bea:	4bb3      	ldr	r3, [pc, #716]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bf2:	2b18      	cmp	r3, #24
 8005bf4:	f200 8155 	bhi.w	8005ea2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005bf8:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfe:	bf00      	nop
 8005c00:	08005c65 	.word	0x08005c65
 8005c04:	08005ea3 	.word	0x08005ea3
 8005c08:	08005ea3 	.word	0x08005ea3
 8005c0c:	08005ea3 	.word	0x08005ea3
 8005c10:	08005ea3 	.word	0x08005ea3
 8005c14:	08005ea3 	.word	0x08005ea3
 8005c18:	08005ea3 	.word	0x08005ea3
 8005c1c:	08005ea3 	.word	0x08005ea3
 8005c20:	08005c8b 	.word	0x08005c8b
 8005c24:	08005ea3 	.word	0x08005ea3
 8005c28:	08005ea3 	.word	0x08005ea3
 8005c2c:	08005ea3 	.word	0x08005ea3
 8005c30:	08005ea3 	.word	0x08005ea3
 8005c34:	08005ea3 	.word	0x08005ea3
 8005c38:	08005ea3 	.word	0x08005ea3
 8005c3c:	08005ea3 	.word	0x08005ea3
 8005c40:	08005c91 	.word	0x08005c91
 8005c44:	08005ea3 	.word	0x08005ea3
 8005c48:	08005ea3 	.word	0x08005ea3
 8005c4c:	08005ea3 	.word	0x08005ea3
 8005c50:	08005ea3 	.word	0x08005ea3
 8005c54:	08005ea3 	.word	0x08005ea3
 8005c58:	08005ea3 	.word	0x08005ea3
 8005c5c:	08005ea3 	.word	0x08005ea3
 8005c60:	08005c97 	.word	0x08005c97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c64:	4b94      	ldr	r3, [pc, #592]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d009      	beq.n	8005c84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c70:	4b91      	ldr	r3, [pc, #580]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	08db      	lsrs	r3, r3, #3
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	4a90      	ldr	r2, [pc, #576]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005c82:	e111      	b.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c84:	4b8d      	ldr	r3, [pc, #564]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c86:	61bb      	str	r3, [r7, #24]
      break;
 8005c88:	e10e      	b.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005c8a:	4b8d      	ldr	r3, [pc, #564]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c8c:	61bb      	str	r3, [r7, #24]
      break;
 8005c8e:	e10b      	b.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005c90:	4b8c      	ldr	r3, [pc, #560]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005c92:	61bb      	str	r3, [r7, #24]
      break;
 8005c94:	e108      	b.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c96:	4b88      	ldr	r3, [pc, #544]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005ca0:	4b85      	ldr	r3, [pc, #532]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	091b      	lsrs	r3, r3, #4
 8005ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005caa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005cac:	4b82      	ldr	r3, [pc, #520]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005cb6:	4b80      	ldr	r3, [pc, #512]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cba:	08db      	lsrs	r3, r3, #3
 8005cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	fb02 f303 	mul.w	r3, r2, r3
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 80e1 	beq.w	8005e9c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	f000 8083 	beq.w	8005de8 <HAL_RCC_GetSysClockFreq+0x204>
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	f200 80a1 	bhi.w	8005e2c <HAL_RCC_GetSysClockFreq+0x248>
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x114>
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d056      	beq.n	8005da4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005cf6:	e099      	b.n	8005e2c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cf8:	4b6f      	ldr	r3, [pc, #444]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d02d      	beq.n	8005d60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d04:	4b6c      	ldr	r3, [pc, #432]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	08db      	lsrs	r3, r3, #3
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	4a6b      	ldr	r2, [pc, #428]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d10:	fa22 f303 	lsr.w	r3, r2, r3
 8005d14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	ee07 3a90 	vmov	s15, r3
 8005d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2e:	4b62      	ldr	r3, [pc, #392]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d42:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005d5e:	e087      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005ecc <HAL_RCC_GetSysClockFreq+0x2e8>
 8005d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d72:	4b51      	ldr	r3, [pc, #324]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d86:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005da2:	e065      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dae:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005ed0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db6:	4b40      	ldr	r3, [pc, #256]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005de6:	e043      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005ed4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dfa:	4b2f      	ldr	r3, [pc, #188]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e02:	ee07 3a90 	vmov	s15, r3
 8005e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e0e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e2a:	e021      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e36:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005ed0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e3e:	4b1e      	ldr	r3, [pc, #120]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005e70:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e74:	0a5b      	lsrs	r3, r3, #9
 8005e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	ee07 3a90 	vmov	s15, r3
 8005e84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e94:	ee17 3a90 	vmov	r3, s15
 8005e98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005e9a:	e005      	b.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	61bb      	str	r3, [r7, #24]
      break;
 8005ea0:	e002      	b.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005ea2:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ea4:	61bb      	str	r3, [r7, #24]
      break;
 8005ea6:	bf00      	nop
  }

  return sysclockfreq;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3724      	adds	r7, #36	; 0x24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	58024400 	.word	0x58024400
 8005ebc:	03d09000 	.word	0x03d09000
 8005ec0:	003d0900 	.word	0x003d0900
 8005ec4:	007a1200 	.word	0x007a1200
 8005ec8:	46000000 	.word	0x46000000
 8005ecc:	4c742400 	.word	0x4c742400
 8005ed0:	4a742400 	.word	0x4a742400
 8005ed4:	4af42400 	.word	0x4af42400

08005ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005ede:	f7ff fe81 	bl	8005be4 <HAL_RCC_GetSysClockFreq>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	4b10      	ldr	r3, [pc, #64]	; (8005f28 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	0a1b      	lsrs	r3, r3, #8
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	490f      	ldr	r1, [pc, #60]	; (8005f2c <HAL_RCC_GetHCLKFreq+0x54>)
 8005ef0:	5ccb      	ldrb	r3, [r1, r3]
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8005efa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <HAL_RCC_GetHCLKFreq+0x50>)
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	f003 030f 	and.w	r3, r3, #15
 8005f04:	4a09      	ldr	r2, [pc, #36]	; (8005f2c <HAL_RCC_GetHCLKFreq+0x54>)
 8005f06:	5cd3      	ldrb	r3, [r2, r3]
 8005f08:	f003 031f 	and.w	r3, r3, #31
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f12:	4a07      	ldr	r2, [pc, #28]	; (8005f30 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f16:	4a07      	ldr	r2, [pc, #28]	; (8005f34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005f1c:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	58024400 	.word	0x58024400
 8005f2c:	0800cdc8 	.word	0x0800cdc8
 8005f30:	24000004 	.word	0x24000004
 8005f34:	24000000 	.word	0x24000000

08005f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005f3c:	f7ff ffcc 	bl	8005ed8 <HAL_RCC_GetHCLKFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	091b      	lsrs	r3, r3, #4
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	4904      	ldr	r1, [pc, #16]	; (8005f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f4e:	5ccb      	ldrb	r3, [r1, r3]
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	58024400 	.word	0x58024400
 8005f60:	0800cdc8 	.word	0x0800cdc8

08005f64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	223f      	movs	r2, #63	; 0x3f
 8005f72:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f74:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <HAL_RCC_GetClockConfig+0x7c>)
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f003 0207 	and.w	r2, r3, #7
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005f80:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <HAL_RCC_GetClockConfig+0x7c>)
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005f8c:	4b14      	ldr	r3, [pc, #80]	; (8005fe0 <HAL_RCC_GetClockConfig+0x7c>)
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	f003 020f 	and.w	r2, r3, #15
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005f98:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <HAL_RCC_GetClockConfig+0x7c>)
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <HAL_RCC_GetClockConfig+0x7c>)
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <HAL_RCC_GetClockConfig+0x7c>)
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005fbc:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <HAL_RCC_GetClockConfig+0x7c>)
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005fc8:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <HAL_RCC_GetClockConfig+0x80>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 020f 	and.w	r2, r3, #15
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	601a      	str	r2, [r3, #0]
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	52002000 	.word	0x52002000

08005fe8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fec:	b0ca      	sub	sp, #296	; 0x128
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800600c:	2500      	movs	r5, #0
 800600e:	ea54 0305 	orrs.w	r3, r4, r5
 8006012:	d049      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800601a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800601e:	d02f      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006020:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006024:	d828      	bhi.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006026:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800602a:	d01a      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800602c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006030:	d822      	bhi.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800603a:	d007      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800603c:	e01c      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800603e:	4bb8      	ldr	r3, [pc, #736]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006042:	4ab7      	ldr	r2, [pc, #732]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006048:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800604a:	e01a      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006050:	3308      	adds	r3, #8
 8006052:	2102      	movs	r1, #2
 8006054:	4618      	mov	r0, r3
 8006056:	f002 fb61 	bl	800871c <RCCEx_PLL2_Config>
 800605a:	4603      	mov	r3, r0
 800605c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006060:	e00f      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006066:	3328      	adds	r3, #40	; 0x28
 8006068:	2102      	movs	r1, #2
 800606a:	4618      	mov	r0, r3
 800606c:	f002 fc08 	bl	8008880 <RCCEx_PLL3_Config>
 8006070:	4603      	mov	r3, r0
 8006072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006076:	e004      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800607e:	e000      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800608a:	4ba5      	ldr	r3, [pc, #660]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800608c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006098:	4aa1      	ldr	r2, [pc, #644]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800609a:	430b      	orrs	r3, r1
 800609c:	6513      	str	r3, [r2, #80]	; 0x50
 800609e:	e003      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80060b4:	f04f 0900 	mov.w	r9, #0
 80060b8:	ea58 0309 	orrs.w	r3, r8, r9
 80060bc:	d047      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80060be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d82a      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	080060e5 	.word	0x080060e5
 80060d4:	080060f3 	.word	0x080060f3
 80060d8:	08006109 	.word	0x08006109
 80060dc:	08006127 	.word	0x08006127
 80060e0:	08006127 	.word	0x08006127
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e4:	4b8e      	ldr	r3, [pc, #568]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	4a8d      	ldr	r2, [pc, #564]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060f0:	e01a      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f6:	3308      	adds	r3, #8
 80060f8:	2100      	movs	r1, #0
 80060fa:	4618      	mov	r0, r3
 80060fc:	f002 fb0e 	bl	800871c <RCCEx_PLL2_Config>
 8006100:	4603      	mov	r3, r0
 8006102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006106:	e00f      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800610c:	3328      	adds	r3, #40	; 0x28
 800610e:	2100      	movs	r1, #0
 8006110:	4618      	mov	r0, r3
 8006112:	f002 fbb5 	bl	8008880 <RCCEx_PLL3_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800611c:	e004      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006124:	e000      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006128:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10a      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006130:	4b7b      	ldr	r3, [pc, #492]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006134:	f023 0107 	bic.w	r1, r3, #7
 8006138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800613c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613e:	4a78      	ldr	r2, [pc, #480]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006140:	430b      	orrs	r3, r1
 8006142:	6513      	str	r3, [r2, #80]	; 0x50
 8006144:	e003      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006146:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800614a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800614e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800615a:	f04f 0b00 	mov.w	fp, #0
 800615e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006162:	d04c      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800616a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800616e:	d030      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006174:	d829      	bhi.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006176:	2bc0      	cmp	r3, #192	; 0xc0
 8006178:	d02d      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800617a:	2bc0      	cmp	r3, #192	; 0xc0
 800617c:	d825      	bhi.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800617e:	2b80      	cmp	r3, #128	; 0x80
 8006180:	d018      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	d821      	bhi.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d007      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800618e:	e01c      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006190:	4b63      	ldr	r3, [pc, #396]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	4a62      	ldr	r2, [pc, #392]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800619a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800619c:	e01c      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800619e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a2:	3308      	adds	r3, #8
 80061a4:	2100      	movs	r1, #0
 80061a6:	4618      	mov	r0, r3
 80061a8:	f002 fab8 	bl	800871c <RCCEx_PLL2_Config>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80061b2:	e011      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b8:	3328      	adds	r3, #40	; 0x28
 80061ba:	2100      	movs	r1, #0
 80061bc:	4618      	mov	r0, r3
 80061be:	f002 fb5f 	bl	8008880 <RCCEx_PLL3_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80061c8:	e006      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061d0:	e002      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80061d2:	bf00      	nop
 80061d4:	e000      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80061d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80061e0:	4b4f      	ldr	r3, [pc, #316]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80061e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ee:	4a4c      	ldr	r2, [pc, #304]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061f0:	430b      	orrs	r3, r1
 80061f2:	6513      	str	r3, [r2, #80]	; 0x50
 80061f4:	e003      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80061fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006206:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800620a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800620e:	2300      	movs	r3, #0
 8006210:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006214:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006218:	460b      	mov	r3, r1
 800621a:	4313      	orrs	r3, r2
 800621c:	d053      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800621e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006222:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006226:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800622a:	d035      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800622c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006230:	d82e      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006232:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006236:	d031      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006238:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800623c:	d828      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800623e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006242:	d01a      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006248:	d822      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800624e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006252:	d007      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006254:	e01c      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006256:	4b32      	ldr	r3, [pc, #200]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625a:	4a31      	ldr	r2, [pc, #196]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800625c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006260:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006262:	e01c      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006268:	3308      	adds	r3, #8
 800626a:	2100      	movs	r1, #0
 800626c:	4618      	mov	r0, r3
 800626e:	f002 fa55 	bl	800871c <RCCEx_PLL2_Config>
 8006272:	4603      	mov	r3, r0
 8006274:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006278:	e011      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800627a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800627e:	3328      	adds	r3, #40	; 0x28
 8006280:	2100      	movs	r1, #0
 8006282:	4618      	mov	r0, r3
 8006284:	f002 fafc 	bl	8008880 <RCCEx_PLL3_Config>
 8006288:	4603      	mov	r3, r0
 800628a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800628e:	e006      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006296:	e002      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006298:	bf00      	nop
 800629a:	e000      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800629c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10b      	bne.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80062a6:	4b1e      	ldr	r3, [pc, #120]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062aa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80062ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062b6:	4a1a      	ldr	r2, [pc, #104]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062b8:	430b      	orrs	r3, r1
 80062ba:	6593      	str	r3, [r2, #88]	; 0x58
 80062bc:	e003      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80062d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062d6:	2300      	movs	r3, #0
 80062d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80062dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80062e0:	460b      	mov	r3, r1
 80062e2:	4313      	orrs	r3, r2
 80062e4:	d056      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80062e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062f2:	d038      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80062f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062f8:	d831      	bhi.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062fe:	d034      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006300:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006304:	d82b      	bhi.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006306:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800630a:	d01d      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800630c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006310:	d825      	bhi.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d006      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006316:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800631a:	d00a      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800631c:	e01f      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800631e:	bf00      	nop
 8006320:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006324:	4ba2      	ldr	r3, [pc, #648]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	4aa1      	ldr	r2, [pc, #644]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800632a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800632e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006330:	e01c      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006336:	3308      	adds	r3, #8
 8006338:	2100      	movs	r1, #0
 800633a:	4618      	mov	r0, r3
 800633c:	f002 f9ee 	bl	800871c <RCCEx_PLL2_Config>
 8006340:	4603      	mov	r3, r0
 8006342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006346:	e011      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800634c:	3328      	adds	r3, #40	; 0x28
 800634e:	2100      	movs	r1, #0
 8006350:	4618      	mov	r0, r3
 8006352:	f002 fa95 	bl	8008880 <RCCEx_PLL3_Config>
 8006356:	4603      	mov	r3, r0
 8006358:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800635c:	e006      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006364:	e002      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006366:	bf00      	nop
 8006368:	e000      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800636a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800636c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10b      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006374:	4b8e      	ldr	r3, [pc, #568]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006378:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800637c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006380:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006384:	4a8a      	ldr	r2, [pc, #552]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006386:	430b      	orrs	r3, r1
 8006388:	6593      	str	r3, [r2, #88]	; 0x58
 800638a:	e003      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006390:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80063a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80063a4:	2300      	movs	r3, #0
 80063a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80063ae:	460b      	mov	r3, r1
 80063b0:	4313      	orrs	r3, r2
 80063b2:	d03a      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80063b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ba:	2b30      	cmp	r3, #48	; 0x30
 80063bc:	d01f      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x416>
 80063be:	2b30      	cmp	r3, #48	; 0x30
 80063c0:	d819      	bhi.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	d00c      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80063c6:	2b20      	cmp	r3, #32
 80063c8:	d815      	bhi.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d019      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80063ce:	2b10      	cmp	r3, #16
 80063d0:	d111      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063d2:	4b77      	ldr	r3, [pc, #476]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	4a76      	ldr	r2, [pc, #472]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80063de:	e011      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e4:	3308      	adds	r3, #8
 80063e6:	2102      	movs	r1, #2
 80063e8:	4618      	mov	r0, r3
 80063ea:	f002 f997 	bl	800871c <RCCEx_PLL2_Config>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80063f4:	e006      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063fc:	e002      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80063fe:	bf00      	nop
 8006400:	e000      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006404:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800640c:	4b68      	ldr	r3, [pc, #416]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800640e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006410:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800641a:	4a65      	ldr	r2, [pc, #404]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800641c:	430b      	orrs	r3, r1
 800641e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006420:	e003      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006426:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800642a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800642e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006432:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006436:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800643a:	2300      	movs	r3, #0
 800643c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006440:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006444:	460b      	mov	r3, r1
 8006446:	4313      	orrs	r3, r2
 8006448:	d051      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800644a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006454:	d035      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006456:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800645a:	d82e      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800645c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006460:	d031      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006462:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006466:	d828      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800646c:	d01a      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800646e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006472:	d822      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800647c:	d007      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800647e:	e01c      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006480:	4b4b      	ldr	r3, [pc, #300]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4a4a      	ldr	r2, [pc, #296]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800648a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800648c:	e01c      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006492:	3308      	adds	r3, #8
 8006494:	2100      	movs	r1, #0
 8006496:	4618      	mov	r0, r3
 8006498:	f002 f940 	bl	800871c <RCCEx_PLL2_Config>
 800649c:	4603      	mov	r3, r0
 800649e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064a2:	e011      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064a8:	3328      	adds	r3, #40	; 0x28
 80064aa:	2100      	movs	r1, #0
 80064ac:	4618      	mov	r0, r3
 80064ae:	f002 f9e7 	bl	8008880 <RCCEx_PLL3_Config>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064b8:	e006      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064c0:	e002      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80064c2:	bf00      	nop
 80064c4:	e000      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80064c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10a      	bne.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064d0:	4b37      	ldr	r3, [pc, #220]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80064d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064de:	4a34      	ldr	r2, [pc, #208]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064e0:	430b      	orrs	r3, r1
 80064e2:	6513      	str	r3, [r2, #80]	; 0x50
 80064e4:	e003      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80064ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80064fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064fe:	2300      	movs	r3, #0
 8006500:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006504:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006508:	460b      	mov	r3, r1
 800650a:	4313      	orrs	r3, r2
 800650c:	d056      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800650e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006518:	d033      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800651a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800651e:	d82c      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006520:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006524:	d02f      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006526:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800652a:	d826      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800652c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006530:	d02b      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006532:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006536:	d820      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800653c:	d012      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800653e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006542:	d81a      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d022      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800654c:	d115      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800654e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006552:	3308      	adds	r3, #8
 8006554:	2101      	movs	r1, #1
 8006556:	4618      	mov	r0, r3
 8006558:	f002 f8e0 	bl	800871c <RCCEx_PLL2_Config>
 800655c:	4603      	mov	r3, r0
 800655e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006562:	e015      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006568:	3328      	adds	r3, #40	; 0x28
 800656a:	2101      	movs	r1, #1
 800656c:	4618      	mov	r0, r3
 800656e:	f002 f987 	bl	8008880 <RCCEx_PLL3_Config>
 8006572:	4603      	mov	r3, r0
 8006574:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006578:	e00a      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006580:	e006      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006582:	bf00      	nop
 8006584:	e004      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006586:	bf00      	nop
 8006588:	e002      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800658a:	bf00      	nop
 800658c:	e000      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800658e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006590:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10d      	bne.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800659a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80065a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a6:	4a02      	ldr	r2, [pc, #8]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065a8:	430b      	orrs	r3, r1
 80065aa:	6513      	str	r3, [r2, #80]	; 0x50
 80065ac:	e006      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80065ae:	bf00      	nop
 80065b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80065c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065cc:	2300      	movs	r3, #0
 80065ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4313      	orrs	r3, r2
 80065da:	d055      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80065dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065e8:	d033      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80065ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065ee:	d82c      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f4:	d02f      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80065f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065fa:	d826      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006600:	d02b      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006602:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006606:	d820      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800660c:	d012      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800660e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006612:	d81a      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d022      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006618:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800661c:	d115      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800661e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006622:	3308      	adds	r3, #8
 8006624:	2101      	movs	r1, #1
 8006626:	4618      	mov	r0, r3
 8006628:	f002 f878 	bl	800871c <RCCEx_PLL2_Config>
 800662c:	4603      	mov	r3, r0
 800662e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006632:	e015      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006638:	3328      	adds	r3, #40	; 0x28
 800663a:	2101      	movs	r1, #1
 800663c:	4618      	mov	r0, r3
 800663e:	f002 f91f 	bl	8008880 <RCCEx_PLL3_Config>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006648:	e00a      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006650:	e006      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006652:	bf00      	nop
 8006654:	e004      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006656:	bf00      	nop
 8006658:	e002      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800665a:	bf00      	nop
 800665c:	e000      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800665e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006660:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10b      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006668:	4ba3      	ldr	r3, [pc, #652]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800666a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006674:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006678:	4a9f      	ldr	r2, [pc, #636]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800667a:	430b      	orrs	r3, r1
 800667c:	6593      	str	r3, [r2, #88]	; 0x58
 800667e:	e003      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006684:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006694:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006698:	2300      	movs	r3, #0
 800669a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800669e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80066a2:	460b      	mov	r3, r1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d037      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80066a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066b2:	d00e      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80066b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066b8:	d816      	bhi.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d018      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80066be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066c2:	d111      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066c4:	4b8c      	ldr	r3, [pc, #560]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	4a8b      	ldr	r2, [pc, #556]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066d0:	e00f      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d6:	3308      	adds	r3, #8
 80066d8:	2101      	movs	r1, #1
 80066da:	4618      	mov	r0, r3
 80066dc:	f002 f81e 	bl	800871c <RCCEx_PLL2_Config>
 80066e0:	4603      	mov	r3, r0
 80066e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066e6:	e004      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066ee:	e000      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80066f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10a      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066fa:	4b7f      	ldr	r3, [pc, #508]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006708:	4a7b      	ldr	r2, [pc, #492]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800670a:	430b      	orrs	r3, r1
 800670c:	6513      	str	r3, [r2, #80]	; 0x50
 800670e:	e003      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006710:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006714:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800671c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006720:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006728:	2300      	movs	r3, #0
 800672a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800672e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006732:	460b      	mov	r3, r1
 8006734:	4313      	orrs	r3, r2
 8006736:	d039      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800673c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800673e:	2b03      	cmp	r3, #3
 8006740:	d81c      	bhi.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006742:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006748:	08006785 	.word	0x08006785
 800674c:	08006759 	.word	0x08006759
 8006750:	08006767 	.word	0x08006767
 8006754:	08006785 	.word	0x08006785
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006758:	4b67      	ldr	r3, [pc, #412]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	4a66      	ldr	r2, [pc, #408]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800675e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006762:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006764:	e00f      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800676a:	3308      	adds	r3, #8
 800676c:	2102      	movs	r1, #2
 800676e:	4618      	mov	r0, r3
 8006770:	f001 ffd4 	bl	800871c <RCCEx_PLL2_Config>
 8006774:	4603      	mov	r3, r0
 8006776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800677a:	e004      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006782:	e000      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800678e:	4b5a      	ldr	r3, [pc, #360]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006792:	f023 0103 	bic.w	r1, r3, #3
 8006796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800679a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800679c:	4a56      	ldr	r2, [pc, #344]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800679e:	430b      	orrs	r3, r1
 80067a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067a2:	e003      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80067b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067bc:	2300      	movs	r3, #0
 80067be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80067c6:	460b      	mov	r3, r1
 80067c8:	4313      	orrs	r3, r2
 80067ca:	f000 809f 	beq.w	800690c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ce:	4b4b      	ldr	r3, [pc, #300]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a4a      	ldr	r2, [pc, #296]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067da:	f7fa fd07 	bl	80011ec <HAL_GetTick>
 80067de:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067e2:	e00b      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067e4:	f7fa fd02 	bl	80011ec <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b64      	cmp	r3, #100	; 0x64
 80067f2:	d903      	bls.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067fa:	e005      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067fc:	4b3f      	ldr	r3, [pc, #252]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0ed      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006808:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800680c:	2b00      	cmp	r3, #0
 800680e:	d179      	bne.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006810:	4b39      	ldr	r3, [pc, #228]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006818:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800681c:	4053      	eors	r3, r2
 800681e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006822:	2b00      	cmp	r3, #0
 8006824:	d015      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006826:	4b34      	ldr	r3, [pc, #208]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006832:	4b31      	ldr	r3, [pc, #196]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006836:	4a30      	ldr	r2, [pc, #192]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800683c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800683e:	4b2e      	ldr	r3, [pc, #184]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006842:	4a2d      	ldr	r2, [pc, #180]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006848:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800684a:	4a2b      	ldr	r2, [pc, #172]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800684c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006850:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006856:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800685a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800685e:	d118      	bne.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006860:	f7fa fcc4 	bl	80011ec <HAL_GetTick>
 8006864:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006868:	e00d      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800686a:	f7fa fcbf 	bl	80011ec <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006874:	1ad2      	subs	r2, r2, r3
 8006876:	f241 3388 	movw	r3, #5000	; 0x1388
 800687a:	429a      	cmp	r2, r3
 800687c:	d903      	bls.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006884:	e005      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006886:	4b1c      	ldr	r3, [pc, #112]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0eb      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006896:	2b00      	cmp	r3, #0
 8006898:	d129      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800689a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800689e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80068a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068aa:	d10e      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80068ac:	4b12      	ldr	r3, [pc, #72]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80068b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80068bc:	091a      	lsrs	r2, r3, #4
 80068be:	4b10      	ldr	r3, [pc, #64]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80068c0:	4013      	ands	r3, r2
 80068c2:	4a0d      	ldr	r2, [pc, #52]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068c4:	430b      	orrs	r3, r1
 80068c6:	6113      	str	r3, [r2, #16]
 80068c8:	e005      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80068ca:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	4a0a      	ldr	r2, [pc, #40]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80068d4:	6113      	str	r3, [r2, #16]
 80068d6:	4b08      	ldr	r3, [pc, #32]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80068da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80068e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068e6:	4a04      	ldr	r2, [pc, #16]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068e8:	430b      	orrs	r3, r1
 80068ea:	6713      	str	r3, [r2, #112]	; 0x70
 80068ec:	e00e      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80068f6:	e009      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x924>
 80068f8:	58024400 	.word	0x58024400
 80068fc:	58024800 	.word	0x58024800
 8006900:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006904:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006908:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800690c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006914:	f002 0301 	and.w	r3, r2, #1
 8006918:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800691c:	2300      	movs	r3, #0
 800691e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006922:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006926:	460b      	mov	r3, r1
 8006928:	4313      	orrs	r3, r2
 800692a:	f000 8089 	beq.w	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006934:	2b28      	cmp	r3, #40	; 0x28
 8006936:	d86b      	bhi.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006938:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	08006a19 	.word	0x08006a19
 8006944:	08006a11 	.word	0x08006a11
 8006948:	08006a11 	.word	0x08006a11
 800694c:	08006a11 	.word	0x08006a11
 8006950:	08006a11 	.word	0x08006a11
 8006954:	08006a11 	.word	0x08006a11
 8006958:	08006a11 	.word	0x08006a11
 800695c:	08006a11 	.word	0x08006a11
 8006960:	080069e5 	.word	0x080069e5
 8006964:	08006a11 	.word	0x08006a11
 8006968:	08006a11 	.word	0x08006a11
 800696c:	08006a11 	.word	0x08006a11
 8006970:	08006a11 	.word	0x08006a11
 8006974:	08006a11 	.word	0x08006a11
 8006978:	08006a11 	.word	0x08006a11
 800697c:	08006a11 	.word	0x08006a11
 8006980:	080069fb 	.word	0x080069fb
 8006984:	08006a11 	.word	0x08006a11
 8006988:	08006a11 	.word	0x08006a11
 800698c:	08006a11 	.word	0x08006a11
 8006990:	08006a11 	.word	0x08006a11
 8006994:	08006a11 	.word	0x08006a11
 8006998:	08006a11 	.word	0x08006a11
 800699c:	08006a11 	.word	0x08006a11
 80069a0:	08006a19 	.word	0x08006a19
 80069a4:	08006a11 	.word	0x08006a11
 80069a8:	08006a11 	.word	0x08006a11
 80069ac:	08006a11 	.word	0x08006a11
 80069b0:	08006a11 	.word	0x08006a11
 80069b4:	08006a11 	.word	0x08006a11
 80069b8:	08006a11 	.word	0x08006a11
 80069bc:	08006a11 	.word	0x08006a11
 80069c0:	08006a19 	.word	0x08006a19
 80069c4:	08006a11 	.word	0x08006a11
 80069c8:	08006a11 	.word	0x08006a11
 80069cc:	08006a11 	.word	0x08006a11
 80069d0:	08006a11 	.word	0x08006a11
 80069d4:	08006a11 	.word	0x08006a11
 80069d8:	08006a11 	.word	0x08006a11
 80069dc:	08006a11 	.word	0x08006a11
 80069e0:	08006a19 	.word	0x08006a19
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069e8:	3308      	adds	r3, #8
 80069ea:	2101      	movs	r1, #1
 80069ec:	4618      	mov	r0, r3
 80069ee:	f001 fe95 	bl	800871c <RCCEx_PLL2_Config>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069f8:	e00f      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069fe:	3328      	adds	r3, #40	; 0x28
 8006a00:	2101      	movs	r1, #1
 8006a02:	4618      	mov	r0, r3
 8006a04:	f001 ff3c 	bl	8008880 <RCCEx_PLL3_Config>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a0e:	e004      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a16:	e000      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a22:	4bbf      	ldr	r3, [pc, #764]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a26:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a30:	4abb      	ldr	r2, [pc, #748]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a32:	430b      	orrs	r3, r1
 8006a34:	6553      	str	r3, [r2, #84]	; 0x54
 8006a36:	e003      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f002 0302 	and.w	r3, r2, #2
 8006a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a50:	2300      	movs	r3, #0
 8006a52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a56:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	d041      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a66:	2b05      	cmp	r3, #5
 8006a68:	d824      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006a6a:	a201      	add	r2, pc, #4	; (adr r2, 8006a70 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a70:	08006abd 	.word	0x08006abd
 8006a74:	08006a89 	.word	0x08006a89
 8006a78:	08006a9f 	.word	0x08006a9f
 8006a7c:	08006abd 	.word	0x08006abd
 8006a80:	08006abd 	.word	0x08006abd
 8006a84:	08006abd 	.word	0x08006abd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	2101      	movs	r1, #1
 8006a90:	4618      	mov	r0, r3
 8006a92:	f001 fe43 	bl	800871c <RCCEx_PLL2_Config>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a9c:	e00f      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa2:	3328      	adds	r3, #40	; 0x28
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 feea 	bl	8008880 <RCCEx_PLL3_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ab2:	e004      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006aba:	e000      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ac6:	4b96      	ldr	r3, [pc, #600]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aca:	f023 0107 	bic.w	r1, r3, #7
 8006ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ad2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ad4:	4a92      	ldr	r2, [pc, #584]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	6553      	str	r3, [r2, #84]	; 0x54
 8006ada:	e003      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006adc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ae0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	f002 0304 	and.w	r3, r2, #4
 8006af0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006af4:	2300      	movs	r3, #0
 8006af6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006afa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4313      	orrs	r3, r2
 8006b02:	d044      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b0c:	2b05      	cmp	r3, #5
 8006b0e:	d825      	bhi.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006b10:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006b65 	.word	0x08006b65
 8006b1c:	08006b31 	.word	0x08006b31
 8006b20:	08006b47 	.word	0x08006b47
 8006b24:	08006b65 	.word	0x08006b65
 8006b28:	08006b65 	.word	0x08006b65
 8006b2c:	08006b65 	.word	0x08006b65
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b34:	3308      	adds	r3, #8
 8006b36:	2101      	movs	r1, #1
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f001 fdef 	bl	800871c <RCCEx_PLL2_Config>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b44:	e00f      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b4a:	3328      	adds	r3, #40	; 0x28
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f001 fe96 	bl	8008880 <RCCEx_PLL3_Config>
 8006b54:	4603      	mov	r3, r0
 8006b56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b5a:	e004      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b62:	e000      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10b      	bne.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b6e:	4b6c      	ldr	r3, [pc, #432]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b72:	f023 0107 	bic.w	r1, r3, #7
 8006b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b7e:	4a68      	ldr	r2, [pc, #416]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b80:	430b      	orrs	r3, r1
 8006b82:	6593      	str	r3, [r2, #88]	; 0x58
 8006b84:	e003      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f002 0320 	and.w	r3, r2, #32
 8006b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ba4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4313      	orrs	r3, r2
 8006bac:	d055      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bba:	d033      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bc0:	d82c      	bhi.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc6:	d02f      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bcc:	d826      	bhi.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bd2:	d02b      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006bd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bd8:	d820      	bhi.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bde:	d012      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be4:	d81a      	bhi.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d022      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bee:	d115      	bne.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f001 fd8f 	bl	800871c <RCCEx_PLL2_Config>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c04:	e015      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c0a:	3328      	adds	r3, #40	; 0x28
 8006c0c:	2102      	movs	r1, #2
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f001 fe36 	bl	8008880 <RCCEx_PLL3_Config>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c1a:	e00a      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c22:	e006      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c24:	bf00      	nop
 8006c26:	e004      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c28:	bf00      	nop
 8006c2a:	e002      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c2c:	bf00      	nop
 8006c2e:	e000      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10b      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c3a:	4b39      	ldr	r3, [pc, #228]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4a:	4a35      	ldr	r2, [pc, #212]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	6553      	str	r3, [r2, #84]	; 0x54
 8006c50:	e003      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006c66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c70:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006c74:	460b      	mov	r3, r1
 8006c76:	4313      	orrs	r3, r2
 8006c78:	d058      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c86:	d033      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006c88:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c8c:	d82c      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c92:	d02f      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c98:	d826      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c9e:	d02b      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006ca0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ca4:	d820      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006caa:	d012      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb0:	d81a      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d022      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cba:	d115      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f001 fd29 	bl	800871c <RCCEx_PLL2_Config>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cd0:	e015      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cd6:	3328      	adds	r3, #40	; 0x28
 8006cd8:	2102      	movs	r1, #2
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 fdd0 	bl	8008880 <RCCEx_PLL3_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ce6:	e00a      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006cee:	e006      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cf0:	bf00      	nop
 8006cf2:	e004      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cf4:	bf00      	nop
 8006cf6:	e002      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cf8:	bf00      	nop
 8006cfa:	e000      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10e      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d06:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d16:	4a02      	ldr	r2, [pc, #8]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8006d1c:	e006      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006d1e:	bf00      	nop
 8006d20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006d46:	460b      	mov	r3, r1
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	d055      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d54:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d58:	d033      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006d5a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d5e:	d82c      	bhi.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d64:	d02f      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d6a:	d826      	bhi.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d6c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d70:	d02b      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006d72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d76:	d820      	bhi.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d7c:	d012      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d82:	d81a      	bhi.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d022      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d8c:	d115      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d92:	3308      	adds	r3, #8
 8006d94:	2100      	movs	r1, #0
 8006d96:	4618      	mov	r0, r3
 8006d98:	f001 fcc0 	bl	800871c <RCCEx_PLL2_Config>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006da2:	e015      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da8:	3328      	adds	r3, #40	; 0x28
 8006daa:	2102      	movs	r1, #2
 8006dac:	4618      	mov	r0, r3
 8006dae:	f001 fd67 	bl	8008880 <RCCEx_PLL3_Config>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006db8:	e00a      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006dc0:	e006      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006dc2:	bf00      	nop
 8006dc4:	e004      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006dc6:	bf00      	nop
 8006dc8:	e002      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006dca:	bf00      	nop
 8006dcc:	e000      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10b      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dd8:	4ba1      	ldr	r3, [pc, #644]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ddc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006de4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006de8:	4a9d      	ldr	r2, [pc, #628]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dea:	430b      	orrs	r3, r1
 8006dec:	6593      	str	r3, [r2, #88]	; 0x58
 8006dee:	e003      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006df4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f002 0308 	and.w	r3, r2, #8
 8006e04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e0e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006e12:	460b      	mov	r3, r1
 8006e14:	4313      	orrs	r3, r2
 8006e16:	d01e      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e24:	d10c      	bne.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e2a:	3328      	adds	r3, #40	; 0x28
 8006e2c:	2102      	movs	r1, #2
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f001 fd26 	bl	8008880 <RCCEx_PLL3_Config>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e40:	4b87      	ldr	r3, [pc, #540]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e50:	4a83      	ldr	r2, [pc, #524]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e52:	430b      	orrs	r3, r1
 8006e54:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5e:	f002 0310 	and.w	r3, r2, #16
 8006e62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e66:	2300      	movs	r3, #0
 8006e68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006e6c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006e70:	460b      	mov	r3, r1
 8006e72:	4313      	orrs	r3, r2
 8006e74:	d01e      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e82:	d10c      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e88:	3328      	adds	r3, #40	; 0x28
 8006e8a:	2102      	movs	r1, #2
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f001 fcf7 	bl	8008880 <RCCEx_PLL3_Config>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e9e:	4b70      	ldr	r3, [pc, #448]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006eae:	4a6c      	ldr	r2, [pc, #432]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006ec0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006eca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	d03e      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ed8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee0:	d022      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006ee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee6:	d81b      	bhi.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef0:	d00b      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006ef2:	e015      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ef8:	3308      	adds	r3, #8
 8006efa:	2100      	movs	r1, #0
 8006efc:	4618      	mov	r0, r3
 8006efe:	f001 fc0d 	bl	800871c <RCCEx_PLL2_Config>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f08:	e00f      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f0e:	3328      	adds	r3, #40	; 0x28
 8006f10:	2102      	movs	r1, #2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f001 fcb4 	bl	8008880 <RCCEx_PLL3_Config>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f1e:	e004      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f26:	e000      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10b      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f32:	4b4b      	ldr	r3, [pc, #300]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f36:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f42:	4a47      	ldr	r2, [pc, #284]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f44:	430b      	orrs	r3, r1
 8006f46:	6593      	str	r3, [r2, #88]	; 0x58
 8006f48:	e003      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006f5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f60:	2300      	movs	r3, #0
 8006f62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f64:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	d03b      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f7a:	d01f      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006f7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f80:	d818      	bhi.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f86:	d003      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006f88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f8c:	d007      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006f8e:	e011      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f90:	4b33      	ldr	r3, [pc, #204]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	4a32      	ldr	r2, [pc, #200]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f9c:	e00f      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa2:	3328      	adds	r3, #40	; 0x28
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 fc6a 	bl	8008880 <RCCEx_PLL3_Config>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006fb2:	e004      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006fba:	e000      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10b      	bne.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fc6:	4b26      	ldr	r3, [pc, #152]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd6:	4a22      	ldr	r2, [pc, #136]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fd8:	430b      	orrs	r3, r1
 8006fda:	6553      	str	r3, [r2, #84]	; 0x54
 8006fdc:	e003      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fe2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006ff2:	673b      	str	r3, [r7, #112]	; 0x70
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	677b      	str	r3, [r7, #116]	; 0x74
 8006ff8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4313      	orrs	r3, r2
 8007000:	d034      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800700c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007010:	d007      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007012:	e011      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007014:	4b12      	ldr	r3, [pc, #72]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	4a11      	ldr	r2, [pc, #68]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800701a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800701e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007020:	e00e      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007026:	3308      	adds	r3, #8
 8007028:	2102      	movs	r1, #2
 800702a:	4618      	mov	r0, r3
 800702c:	f001 fb76 	bl	800871c <RCCEx_PLL2_Config>
 8007030:	4603      	mov	r3, r0
 8007032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007036:	e003      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800703e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007040:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10d      	bne.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007048:	4b05      	ldr	r3, [pc, #20]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800704a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800704c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007056:	4a02      	ldr	r2, [pc, #8]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007058:	430b      	orrs	r3, r1
 800705a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800705c:	e006      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800705e:	bf00      	nop
 8007060:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007064:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007068:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800706c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007078:	66bb      	str	r3, [r7, #104]	; 0x68
 800707a:	2300      	movs	r3, #0
 800707c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800707e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007082:	460b      	mov	r3, r1
 8007084:	4313      	orrs	r3, r2
 8007086:	d00c      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800708c:	3328      	adds	r3, #40	; 0x28
 800708e:	2102      	movs	r1, #2
 8007090:	4618      	mov	r0, r3
 8007092:	f001 fbf5 	bl	8008880 <RCCEx_PLL3_Config>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80070a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070aa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80070ae:	663b      	str	r3, [r7, #96]	; 0x60
 80070b0:	2300      	movs	r3, #0
 80070b2:	667b      	str	r3, [r7, #100]	; 0x64
 80070b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80070b8:	460b      	mov	r3, r1
 80070ba:	4313      	orrs	r3, r2
 80070bc:	d038      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80070be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070ca:	d018      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80070cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070d0:	d811      	bhi.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80070d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070d6:	d014      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80070d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070dc:	d80b      	bhi.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d011      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80070e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e6:	d106      	bne.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e8:	4bc3      	ldr	r3, [pc, #780]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ec:	4ac2      	ldr	r2, [pc, #776]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80070f4:	e008      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070fc:	e004      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070fe:	bf00      	nop
 8007100:	e002      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007102:	bf00      	nop
 8007104:	e000      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007108:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10b      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007110:	4bb9      	ldr	r3, [pc, #740]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007114:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800711c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007120:	4ab5      	ldr	r2, [pc, #724]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007122:	430b      	orrs	r3, r1
 8007124:	6553      	str	r3, [r2, #84]	; 0x54
 8007126:	e003      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007128:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800712c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800713c:	65bb      	str	r3, [r7, #88]	; 0x58
 800713e:	2300      	movs	r3, #0
 8007140:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007142:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007146:	460b      	mov	r3, r1
 8007148:	4313      	orrs	r3, r2
 800714a:	d009      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800714c:	4baa      	ldr	r3, [pc, #680]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800714e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007150:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715a:	4aa7      	ldr	r2, [pc, #668]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800715c:	430b      	orrs	r3, r1
 800715e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800716c:	653b      	str	r3, [r7, #80]	; 0x50
 800716e:	2300      	movs	r3, #0
 8007170:	657b      	str	r3, [r7, #84]	; 0x54
 8007172:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007176:	460b      	mov	r3, r1
 8007178:	4313      	orrs	r3, r2
 800717a:	d00a      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800717c:	4b9e      	ldr	r3, [pc, #632]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007188:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800718c:	4a9a      	ldr	r2, [pc, #616]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800718e:	430b      	orrs	r3, r1
 8007190:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800719e:	64bb      	str	r3, [r7, #72]	; 0x48
 80071a0:	2300      	movs	r3, #0
 80071a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80071a8:	460b      	mov	r3, r1
 80071aa:	4313      	orrs	r3, r2
 80071ac:	d009      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80071ae:	4b92      	ldr	r3, [pc, #584]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80071b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071bc:	4a8e      	ldr	r2, [pc, #568]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071be:	430b      	orrs	r3, r1
 80071c0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80071c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ca:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80071ce:	643b      	str	r3, [r7, #64]	; 0x40
 80071d0:	2300      	movs	r3, #0
 80071d2:	647b      	str	r3, [r7, #68]	; 0x44
 80071d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80071d8:	460b      	mov	r3, r1
 80071da:	4313      	orrs	r3, r2
 80071dc:	d00e      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071de:	4b86      	ldr	r3, [pc, #536]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	4a85      	ldr	r2, [pc, #532]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071e8:	6113      	str	r3, [r2, #16]
 80071ea:	4b83      	ldr	r3, [pc, #524]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071ec:	6919      	ldr	r1, [r3, #16]
 80071ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80071f6:	4a80      	ldr	r2, [pc, #512]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071f8:	430b      	orrs	r3, r1
 80071fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007208:	63bb      	str	r3, [r7, #56]	; 0x38
 800720a:	2300      	movs	r3, #0
 800720c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800720e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007212:	460b      	mov	r3, r1
 8007214:	4313      	orrs	r3, r2
 8007216:	d009      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007218:	4b77      	ldr	r3, [pc, #476]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800721a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800721c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007226:	4a74      	ldr	r2, [pc, #464]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007228:	430b      	orrs	r3, r1
 800722a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800722c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007238:	633b      	str	r3, [r7, #48]	; 0x30
 800723a:	2300      	movs	r3, #0
 800723c:	637b      	str	r3, [r7, #52]	; 0x34
 800723e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007242:	460b      	mov	r3, r1
 8007244:	4313      	orrs	r3, r2
 8007246:	d00a      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007248:	4b6b      	ldr	r3, [pc, #428]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800724a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007258:	4a67      	ldr	r2, [pc, #412]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800725a:	430b      	orrs	r3, r1
 800725c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800725e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007266:	2100      	movs	r1, #0
 8007268:	62b9      	str	r1, [r7, #40]	; 0x28
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007270:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007274:	460b      	mov	r3, r1
 8007276:	4313      	orrs	r3, r2
 8007278:	d011      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800727a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800727e:	3308      	adds	r3, #8
 8007280:	2100      	movs	r1, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f001 fa4a 	bl	800871c <RCCEx_PLL2_Config>
 8007288:	4603      	mov	r3, r0
 800728a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800728e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800729a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800729e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	2100      	movs	r1, #0
 80072a8:	6239      	str	r1, [r7, #32]
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	627b      	str	r3, [r7, #36]	; 0x24
 80072b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80072b4:	460b      	mov	r3, r1
 80072b6:	4313      	orrs	r3, r2
 80072b8:	d011      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072be:	3308      	adds	r3, #8
 80072c0:	2101      	movs	r1, #1
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 fa2a 	bl	800871c <RCCEx_PLL2_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80072ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80072de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	2100      	movs	r1, #0
 80072e8:	61b9      	str	r1, [r7, #24]
 80072ea:	f003 0304 	and.w	r3, r3, #4
 80072ee:	61fb      	str	r3, [r7, #28]
 80072f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80072f4:	460b      	mov	r3, r1
 80072f6:	4313      	orrs	r3, r2
 80072f8:	d011      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072fe:	3308      	adds	r3, #8
 8007300:	2102      	movs	r1, #2
 8007302:	4618      	mov	r0, r3
 8007304:	f001 fa0a 	bl	800871c <RCCEx_PLL2_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800730e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800731a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800731e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	2100      	movs	r1, #0
 8007328:	6139      	str	r1, [r7, #16]
 800732a:	f003 0308 	and.w	r3, r3, #8
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007334:	460b      	mov	r3, r1
 8007336:	4313      	orrs	r3, r2
 8007338:	d011      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800733a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800733e:	3328      	adds	r3, #40	; 0x28
 8007340:	2100      	movs	r1, #0
 8007342:	4618      	mov	r0, r3
 8007344:	f001 fa9c 	bl	8008880 <RCCEx_PLL3_Config>
 8007348:	4603      	mov	r3, r0
 800734a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800734e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800735a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800735e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	2100      	movs	r1, #0
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	f003 0310 	and.w	r3, r3, #16
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007374:	460b      	mov	r3, r1
 8007376:	4313      	orrs	r3, r2
 8007378:	d011      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800737a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800737e:	3328      	adds	r3, #40	; 0x28
 8007380:	2101      	movs	r1, #1
 8007382:	4618      	mov	r0, r3
 8007384:	f001 fa7c 	bl	8008880 <RCCEx_PLL3_Config>
 8007388:	4603      	mov	r3, r0
 800738a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800738e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800739a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800739e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	2100      	movs	r1, #0
 80073a8:	6039      	str	r1, [r7, #0]
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	607b      	str	r3, [r7, #4]
 80073b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80073b4:	460b      	mov	r3, r1
 80073b6:	4313      	orrs	r3, r2
 80073b8:	d011      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073be:	3328      	adds	r3, #40	; 0x28
 80073c0:	2102      	movs	r1, #2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f001 fa5c 	bl	8008880 <RCCEx_PLL3_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80073ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80073de:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	e000      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80073f2:	46bd      	mov	sp, r7
 80073f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073f8:	58024400 	.word	0x58024400

080073fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b090      	sub	sp, #64	; 0x40
 8007400:	af00      	add	r7, sp, #0
 8007402:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800740a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800740e:	430b      	orrs	r3, r1
 8007410:	f040 8094 	bne.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007414:	4b9e      	ldr	r3, [pc, #632]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	2b04      	cmp	r3, #4
 8007422:	f200 8087 	bhi.w	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007426:	a201      	add	r2, pc, #4	; (adr r2, 800742c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	08007441 	.word	0x08007441
 8007430:	08007469 	.word	0x08007469
 8007434:	08007491 	.word	0x08007491
 8007438:	0800752d 	.word	0x0800752d
 800743c:	080074b9 	.word	0x080074b9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007440:	4b93      	ldr	r3, [pc, #588]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007448:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800744c:	d108      	bne.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800744e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007452:	4618      	mov	r0, r3
 8007454:	f001 f810 	bl	8008478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800745c:	f000 bd45 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007464:	f000 bd41 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007468:	4b89      	ldr	r3, [pc, #548]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007474:	d108      	bne.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007476:	f107 0318 	add.w	r3, r7, #24
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fd54 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007484:	f000 bd31 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007488:	2300      	movs	r3, #0
 800748a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800748c:	f000 bd2d 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007490:	4b7f      	ldr	r3, [pc, #508]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800749c:	d108      	bne.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800749e:	f107 030c 	add.w	r3, r7, #12
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 fe94 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ac:	f000 bd1d 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074b0:	2300      	movs	r3, #0
 80074b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074b4:	f000 bd19 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074b8:	4b75      	ldr	r3, [pc, #468]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074c0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074c2:	4b73      	ldr	r3, [pc, #460]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	2b04      	cmp	r3, #4
 80074cc:	d10c      	bne.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80074ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d109      	bne.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074d4:	4b6e      	ldr	r3, [pc, #440]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	08db      	lsrs	r3, r3, #3
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	4a6d      	ldr	r2, [pc, #436]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80074e0:	fa22 f303 	lsr.w	r3, r2, r3
 80074e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074e6:	e01f      	b.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074e8:	4b69      	ldr	r3, [pc, #420]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f4:	d106      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80074f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074fc:	d102      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80074fe:	4b66      	ldr	r3, [pc, #408]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007502:	e011      	b.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007504:	4b62      	ldr	r3, [pc, #392]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800750c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007510:	d106      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007518:	d102      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800751a:	4b60      	ldr	r3, [pc, #384]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800751c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800751e:	e003      	b.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007524:	f000 bce1 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007528:	f000 bcdf 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800752c:	4b5c      	ldr	r3, [pc, #368]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800752e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007530:	f000 bcdb 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007538:	f000 bcd7 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800753c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007540:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007544:	430b      	orrs	r3, r1
 8007546:	f040 80ad 	bne.w	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800754a:	4b51      	ldr	r3, [pc, #324]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800754c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800754e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007552:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800755a:	d056      	beq.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007562:	f200 8090 	bhi.w	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	2bc0      	cmp	r3, #192	; 0xc0
 800756a:	f000 8088 	beq.w	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	2bc0      	cmp	r3, #192	; 0xc0
 8007572:	f200 8088 	bhi.w	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	2b80      	cmp	r3, #128	; 0x80
 800757a:	d032      	beq.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757e:	2b80      	cmp	r3, #128	; 0x80
 8007580:	f200 8081 	bhi.w	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	2b40      	cmp	r3, #64	; 0x40
 800758e:	d014      	beq.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007590:	e079      	b.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007592:	4b3f      	ldr	r3, [pc, #252]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800759a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800759e:	d108      	bne.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075a4:	4618      	mov	r0, r3
 80075a6:	f000 ff67 	bl	8008478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ae:	f000 bc9c 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075b6:	f000 bc98 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075ba:	4b35      	ldr	r3, [pc, #212]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075c6:	d108      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075c8:	f107 0318 	add.w	r3, r7, #24
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 fcab 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075d6:	f000 bc88 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075de:	f000 bc84 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075e2:	4b2b      	ldr	r3, [pc, #172]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ee:	d108      	bne.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075f0:	f107 030c 	add.w	r3, r7, #12
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 fdeb 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075fe:	f000 bc74 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007606:	f000 bc70 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800760a:	4b21      	ldr	r3, [pc, #132]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800760c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800760e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007612:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007614:	4b1e      	ldr	r3, [pc, #120]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b04      	cmp	r3, #4
 800761e:	d10c      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007622:	2b00      	cmp	r3, #0
 8007624:	d109      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007626:	4b1a      	ldr	r3, [pc, #104]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	08db      	lsrs	r3, r3, #3
 800762c:	f003 0303 	and.w	r3, r3, #3
 8007630:	4a18      	ldr	r2, [pc, #96]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007632:	fa22 f303 	lsr.w	r3, r2, r3
 8007636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007638:	e01f      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800763a:	4b15      	ldr	r3, [pc, #84]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007646:	d106      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800764a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800764e:	d102      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007650:	4b11      	ldr	r3, [pc, #68]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007654:	e011      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007656:	4b0e      	ldr	r3, [pc, #56]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007662:	d106      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800766a:	d102      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800766c:	4b0b      	ldr	r3, [pc, #44]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800766e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007670:	e003      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007672:	2300      	movs	r3, #0
 8007674:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007676:	f000 bc38 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800767a:	f000 bc36 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800767e:	4b08      	ldr	r3, [pc, #32]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007680:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007682:	f000 bc32 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800768a:	f000 bc2e 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800768e:	bf00      	nop
 8007690:	58024400 	.word	0x58024400
 8007694:	03d09000 	.word	0x03d09000
 8007698:	003d0900 	.word	0x003d0900
 800769c:	007a1200 	.word	0x007a1200
 80076a0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80076a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076a8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80076ac:	430b      	orrs	r3, r1
 80076ae:	f040 809c 	bne.w	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80076b2:	4b9e      	ldr	r3, [pc, #632]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80076ba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80076bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076c2:	d054      	beq.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80076c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076ca:	f200 808b 	bhi.w	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076d4:	f000 8083 	beq.w	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076de:	f200 8081 	bhi.w	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076e8:	d02f      	beq.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076f0:	d878      	bhi.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d004      	beq.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076fe:	d012      	beq.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007700:	e070      	b.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007702:	4b8a      	ldr	r3, [pc, #552]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800770e:	d107      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007714:	4618      	mov	r0, r3
 8007716:	f000 feaf 	bl	8008478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800771e:	e3e4      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007724:	e3e1      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007726:	4b81      	ldr	r3, [pc, #516]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800772e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007732:	d107      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007734:	f107 0318 	add.w	r3, r7, #24
 8007738:	4618      	mov	r0, r3
 800773a:	f000 fbf5 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007742:	e3d2      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007748:	e3cf      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800774a:	4b78      	ldr	r3, [pc, #480]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007756:	d107      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007758:	f107 030c 	add.w	r3, r7, #12
 800775c:	4618      	mov	r0, r3
 800775e:	f000 fd37 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007766:	e3c0      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800776c:	e3bd      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800776e:	4b6f      	ldr	r3, [pc, #444]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007772:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007776:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007778:	4b6c      	ldr	r3, [pc, #432]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b04      	cmp	r3, #4
 8007782:	d10c      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007786:	2b00      	cmp	r3, #0
 8007788:	d109      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800778a:	4b68      	ldr	r3, [pc, #416]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	08db      	lsrs	r3, r3, #3
 8007790:	f003 0303 	and.w	r3, r3, #3
 8007794:	4a66      	ldr	r2, [pc, #408]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007796:	fa22 f303 	lsr.w	r3, r2, r3
 800779a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800779c:	e01e      	b.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800779e:	4b63      	ldr	r3, [pc, #396]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077aa:	d106      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80077ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077b2:	d102      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80077b4:	4b5f      	ldr	r3, [pc, #380]	; (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80077b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077b8:	e010      	b.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077ba:	4b5c      	ldr	r3, [pc, #368]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077c6:	d106      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80077c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077ce:	d102      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077d0:	4b59      	ldr	r3, [pc, #356]	; (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80077d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077d4:	e002      	b.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80077da:	e386      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077dc:	e385      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077de:	4b57      	ldr	r3, [pc, #348]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80077e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077e2:	e382      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077e8:	e37f      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80077ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ee:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80077f2:	430b      	orrs	r3, r1
 80077f4:	f040 80a7 	bne.w	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80077f8:	4b4c      	ldr	r3, [pc, #304]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007800:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007808:	d055      	beq.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007810:	f200 8096 	bhi.w	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800781a:	f000 8084 	beq.w	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007820:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007824:	f200 808c 	bhi.w	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800782e:	d030      	beq.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007836:	f200 8083 	bhi.w	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007842:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007846:	d012      	beq.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007848:	e07a      	b.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800784a:	4b38      	ldr	r3, [pc, #224]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007856:	d107      	bne.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800785c:	4618      	mov	r0, r3
 800785e:	f000 fe0b 	bl	8008478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007866:	e340      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800786c:	e33d      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800786e:	4b2f      	ldr	r3, [pc, #188]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007876:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800787a:	d107      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800787c:	f107 0318 	add.w	r3, r7, #24
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fb51 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800788a:	e32e      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800788c:	2300      	movs	r3, #0
 800788e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007890:	e32b      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007892:	4b26      	ldr	r3, [pc, #152]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800789a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800789e:	d107      	bne.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078a0:	f107 030c 	add.w	r3, r7, #12
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fc93 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078ae:	e31c      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078b0:	2300      	movs	r3, #0
 80078b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078b4:	e319      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078b6:	4b1d      	ldr	r3, [pc, #116]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078c0:	4b1a      	ldr	r3, [pc, #104]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d10c      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80078cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078d2:	4b16      	ldr	r3, [pc, #88]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	08db      	lsrs	r3, r3, #3
 80078d8:	f003 0303 	and.w	r3, r3, #3
 80078dc:	4a14      	ldr	r2, [pc, #80]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80078de:	fa22 f303 	lsr.w	r3, r2, r3
 80078e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078e4:	e01e      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078e6:	4b11      	ldr	r3, [pc, #68]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f2:	d106      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80078f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078fa:	d102      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078fc:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80078fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007900:	e010      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007902:	4b0a      	ldr	r3, [pc, #40]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800790a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800790e:	d106      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007916:	d102      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007918:	4b07      	ldr	r3, [pc, #28]	; (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800791a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800791c:	e002      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007922:	e2e2      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007924:	e2e1      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007926:	4b05      	ldr	r3, [pc, #20]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007928:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800792a:	e2de      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800792c:	58024400 	.word	0x58024400
 8007930:	03d09000 	.word	0x03d09000
 8007934:	003d0900 	.word	0x003d0900
 8007938:	007a1200 	.word	0x007a1200
 800793c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007944:	e2d1      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800794a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800794e:	430b      	orrs	r3, r1
 8007950:	f040 809c 	bne.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007954:	4b93      	ldr	r3, [pc, #588]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007958:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800795c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800795e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007964:	d054      	beq.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007968:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800796c:	f200 808b 	bhi.w	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007976:	f000 8083 	beq.w	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800797a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007980:	f200 8081 	bhi.w	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800798a:	d02f      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007992:	d878      	bhi.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007996:	2b00      	cmp	r3, #0
 8007998:	d004      	beq.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800799a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a0:	d012      	beq.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80079a2:	e070      	b.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079a4:	4b7f      	ldr	r3, [pc, #508]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079b0:	d107      	bne.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fd5e 	bl	8008478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079c0:	e293      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079c6:	e290      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079c8:	4b76      	ldr	r3, [pc, #472]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079d4:	d107      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079d6:	f107 0318 	add.w	r3, r7, #24
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 faa4 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079e4:	e281      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079ea:	e27e      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079ec:	4b6d      	ldr	r3, [pc, #436]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079f8:	d107      	bne.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079fa:	f107 030c 	add.w	r3, r7, #12
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 fbe6 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a08:	e26f      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a0e:	e26c      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a10:	4b64      	ldr	r3, [pc, #400]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a18:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a1a:	4b62      	ldr	r3, [pc, #392]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0304 	and.w	r3, r3, #4
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d10c      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d109      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a2c:	4b5d      	ldr	r3, [pc, #372]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	08db      	lsrs	r3, r3, #3
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	4a5c      	ldr	r2, [pc, #368]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007a38:	fa22 f303 	lsr.w	r3, r2, r3
 8007a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a3e:	e01e      	b.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a40:	4b58      	ldr	r3, [pc, #352]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a4c:	d106      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a54:	d102      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a56:	4b55      	ldr	r3, [pc, #340]	; (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a5a:	e010      	b.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a5c:	4b51      	ldr	r3, [pc, #324]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a68:	d106      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a70:	d102      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a72:	4b4f      	ldr	r3, [pc, #316]	; (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a76:	e002      	b.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007a7c:	e235      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a7e:	e234      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a80:	4b4c      	ldr	r3, [pc, #304]	; (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a84:	e231      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a8a:	e22e      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a90:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007a94:	430b      	orrs	r3, r1
 8007a96:	f040 808f 	bne.w	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007a9a:	4b42      	ldr	r3, [pc, #264]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a9e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007aa2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007aaa:	d06b      	beq.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ab2:	d874      	bhi.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007aba:	d056      	beq.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ac2:	d86c      	bhi.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007aca:	d03b      	beq.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ace:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ad2:	d864      	bhi.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ada:	d021      	beq.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ade:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ae2:	d85c      	bhi.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d004      	beq.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007af0:	d004      	beq.n	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007af2:	e054      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007af4:	f7fe fa20 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8007af8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007afa:	e1f6      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007afc:	4b29      	ldr	r3, [pc, #164]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b08:	d107      	bne.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b0a:	f107 0318 	add.w	r3, r7, #24
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fa0a 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b18:	e1e7      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b1e:	e1e4      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b20:	4b20      	ldr	r3, [pc, #128]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b2c:	d107      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b2e:	f107 030c 	add.w	r3, r7, #12
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 fb4c 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b3c:	e1d5      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b42:	e1d2      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b44:	4b17      	ldr	r3, [pc, #92]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d109      	bne.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b50:	4b14      	ldr	r3, [pc, #80]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	08db      	lsrs	r3, r3, #3
 8007b56:	f003 0303 	and.w	r3, r3, #3
 8007b5a:	4a13      	ldr	r2, [pc, #76]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b62:	e1c2      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b68:	e1bf      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007b6a:	4b0e      	ldr	r3, [pc, #56]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b76:	d102      	bne.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007b78:	4b0c      	ldr	r3, [pc, #48]	; (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b7c:	e1b5      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b82:	e1b2      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007b84:	4b07      	ldr	r3, [pc, #28]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b90:	d102      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007b92:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b96:	e1a8      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b9c:	e1a5      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ba2:	e1a2      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ba4:	58024400 	.word	0x58024400
 8007ba8:	03d09000 	.word	0x03d09000
 8007bac:	003d0900 	.word	0x003d0900
 8007bb0:	007a1200 	.word	0x007a1200
 8007bb4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bbc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007bc0:	430b      	orrs	r3, r1
 8007bc2:	d173      	bne.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007bc4:	4b9c      	ldr	r3, [pc, #624]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007bcc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bd4:	d02f      	beq.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bdc:	d863      	bhi.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bea:	d012      	beq.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007bec:	e05b      	b.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bee:	4b92      	ldr	r3, [pc, #584]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bfa:	d107      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bfc:	f107 0318 	add.w	r3, r7, #24
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 f991 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c0a:	e16e      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c10:	e16b      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c12:	4b89      	ldr	r3, [pc, #548]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c1e:	d107      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c20:	f107 030c 	add.w	r3, r7, #12
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 fad3 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c2e:	e15c      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c34:	e159      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c36:	4b80      	ldr	r3, [pc, #512]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c3e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c40:	4b7d      	ldr	r3, [pc, #500]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0304 	and.w	r3, r3, #4
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	d10c      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d109      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c52:	4b79      	ldr	r3, [pc, #484]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	08db      	lsrs	r3, r3, #3
 8007c58:	f003 0303 	and.w	r3, r3, #3
 8007c5c:	4a77      	ldr	r2, [pc, #476]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c64:	e01e      	b.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c66:	4b74      	ldr	r3, [pc, #464]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c72:	d106      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c7a:	d102      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c7c:	4b70      	ldr	r3, [pc, #448]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c80:	e010      	b.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c82:	4b6d      	ldr	r3, [pc, #436]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c8e:	d106      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c96:	d102      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c98:	4b6a      	ldr	r3, [pc, #424]	; (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c9c:	e002      	b.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007ca2:	e122      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ca4:	e121      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007caa:	e11e      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	d133      	bne.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007cb8:	4b5f      	ldr	r3, [pc, #380]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cc0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d004      	beq.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cce:	d012      	beq.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007cd0:	e023      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cd2:	4b59      	ldr	r3, [pc, #356]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cde:	d107      	bne.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 fbc7 	bl	8008478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cee:	e0fc      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cf4:	e0f9      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cf6:	4b50      	ldr	r3, [pc, #320]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d02:	d107      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d04:	f107 0318 	add.w	r3, r7, #24
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 f90d 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007d0e:	6a3b      	ldr	r3, [r7, #32]
 8007d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d12:	e0ea      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d18:	e0e7      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d1e:	e0e4      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d24:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	f040 808d 	bne.w	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007d2e:	4b42      	ldr	r3, [pc, #264]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d32:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007d36:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d3e:	d06b      	beq.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d46:	d874      	bhi.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d4e:	d056      	beq.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d56:	d86c      	bhi.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d5e:	d03b      	beq.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d66:	d864      	bhi.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d6e:	d021      	beq.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d76:	d85c      	bhi.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d84:	d004      	beq.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007d86:	e054      	b.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007d88:	f000 f8b8 	bl	8007efc <HAL_RCCEx_GetD3PCLK1Freq>
 8007d8c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d8e:	e0ac      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d90:	4b29      	ldr	r3, [pc, #164]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d9c:	d107      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d9e:	f107 0318 	add.w	r3, r7, #24
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 f8c0 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dac:	e09d      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007db2:	e09a      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007db4:	4b20      	ldr	r3, [pc, #128]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dc0:	d107      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dc2:	f107 030c 	add.w	r3, r7, #12
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 fa02 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dd0:	e08b      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dd6:	e088      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007dd8:	4b17      	ldr	r3, [pc, #92]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0304 	and.w	r3, r3, #4
 8007de0:	2b04      	cmp	r3, #4
 8007de2:	d109      	bne.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007de4:	4b14      	ldr	r3, [pc, #80]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	08db      	lsrs	r3, r3, #3
 8007dea:	f003 0303 	and.w	r3, r3, #3
 8007dee:	4a13      	ldr	r2, [pc, #76]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007df0:	fa22 f303 	lsr.w	r3, r2, r3
 8007df4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007df6:	e078      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dfc:	e075      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007dfe:	4b0e      	ldr	r3, [pc, #56]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e0a:	d102      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007e0c:	4b0c      	ldr	r3, [pc, #48]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e10:	e06b      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e16:	e068      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e18:	4b07      	ldr	r3, [pc, #28]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e24:	d102      	bne.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007e26:	4b07      	ldr	r3, [pc, #28]	; (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e2a:	e05e      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e30:	e05b      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e36:	e058      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e38:	58024400 	.word	0x58024400
 8007e3c:	03d09000 	.word	0x03d09000
 8007e40:	003d0900 	.word	0x003d0900
 8007e44:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e4c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007e50:	430b      	orrs	r3, r1
 8007e52:	d148      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007e54:	4b27      	ldr	r3, [pc, #156]	; (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e5c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e64:	d02a      	beq.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e6c:	d838      	bhi.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d004      	beq.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e7a:	d00d      	beq.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007e7c:	e030      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e7e:	4b1d      	ldr	r3, [pc, #116]	; (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e8a:	d102      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007e8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e90:	e02b      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e96:	e028      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e98:	4b16      	ldr	r3, [pc, #88]	; (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ea4:	d107      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 fae4 	bl	8008478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eb4:	e019      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eba:	e016      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ebc:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ec8:	d107      	bne.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eca:	f107 0318 	add.w	r3, r7, #24
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 f82a 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ed8:	e007      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ede:	e004      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ee4:	e001      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3740      	adds	r7, #64	; 0x40
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	58024400 	.word	0x58024400
 8007ef8:	007a1200 	.word	0x007a1200

08007efc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f00:	f7fd ffea 	bl	8005ed8 <HAL_RCC_GetHCLKFreq>
 8007f04:	4602      	mov	r2, r0
 8007f06:	4b06      	ldr	r3, [pc, #24]	; (8007f20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	091b      	lsrs	r3, r3, #4
 8007f0c:	f003 0307 	and.w	r3, r3, #7
 8007f10:	4904      	ldr	r1, [pc, #16]	; (8007f24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f12:	5ccb      	ldrb	r3, [r1, r3]
 8007f14:	f003 031f 	and.w	r3, r3, #31
 8007f18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	58024400 	.word	0x58024400
 8007f24:	0800cdc8 	.word	0x0800cdc8

08007f28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b089      	sub	sp, #36	; 0x24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f30:	4ba1      	ldr	r3, [pc, #644]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f34:	f003 0303 	and.w	r3, r3, #3
 8007f38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007f3a:	4b9f      	ldr	r3, [pc, #636]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3e:	0b1b      	lsrs	r3, r3, #12
 8007f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f46:	4b9c      	ldr	r3, [pc, #624]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4a:	091b      	lsrs	r3, r3, #4
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f52:	4b99      	ldr	r3, [pc, #612]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f56:	08db      	lsrs	r3, r3, #3
 8007f58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	fb02 f303 	mul.w	r3, r2, r3
 8007f62:	ee07 3a90 	vmov	s15, r3
 8007f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8111 	beq.w	8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	f000 8083 	beq.w	8008084 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	f200 80a1 	bhi.w	80080c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d056      	beq.n	8008040 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f92:	e099      	b.n	80080c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f94:	4b88      	ldr	r3, [pc, #544]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0320 	and.w	r3, r3, #32
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d02d      	beq.n	8007ffc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fa0:	4b85      	ldr	r3, [pc, #532]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	08db      	lsrs	r3, r3, #3
 8007fa6:	f003 0303 	and.w	r3, r3, #3
 8007faa:	4a84      	ldr	r2, [pc, #528]	; (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007fac:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	ee07 3a90 	vmov	s15, r3
 8007fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	ee07 3a90 	vmov	s15, r3
 8007fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fca:	4b7b      	ldr	r3, [pc, #492]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fde:	eddf 5a78 	vldr	s11, [pc, #480]	; 80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ffa:	e087      	b.n	800810c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008006:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800800a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800800e:	4b6a      	ldr	r3, [pc, #424]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008016:	ee07 3a90 	vmov	s15, r3
 800801a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800801e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008022:	eddf 5a67 	vldr	s11, [pc, #412]	; 80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800802a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800802e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800803a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800803e:	e065      	b.n	800810c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	ee07 3a90 	vmov	s15, r3
 8008046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800804a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800804e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008052:	4b59      	ldr	r3, [pc, #356]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008062:	ed97 6a03 	vldr	s12, [r7, #12]
 8008066:	eddf 5a56 	vldr	s11, [pc, #344]	; 80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800806a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800806e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800807a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800807e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008082:	e043      	b.n	800810c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	ee07 3a90 	vmov	s15, r3
 800808a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800808e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008096:	4b48      	ldr	r3, [pc, #288]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080c6:	e021      	b.n	800810c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080da:	4b37      	ldr	r3, [pc, #220]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800810a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800810c:	4b2a      	ldr	r3, [pc, #168]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008110:	0a5b      	lsrs	r3, r3, #9
 8008112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008122:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008126:	edd7 6a07 	vldr	s13, [r7, #28]
 800812a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800812e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008132:	ee17 2a90 	vmov	r2, s15
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800813a:	4b1f      	ldr	r3, [pc, #124]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	0c1b      	lsrs	r3, r3, #16
 8008140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008144:	ee07 3a90 	vmov	s15, r3
 8008148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008150:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008154:	edd7 6a07 	vldr	s13, [r7, #28]
 8008158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800815c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008160:	ee17 2a90 	vmov	r2, s15
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008168:	4b13      	ldr	r3, [pc, #76]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800816a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816c:	0e1b      	lsrs	r3, r3, #24
 800816e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800817e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008182:	edd7 6a07 	vldr	s13, [r7, #28]
 8008186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800818a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800818e:	ee17 2a90 	vmov	r2, s15
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008196:	e008      	b.n	80081aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	609a      	str	r2, [r3, #8]
}
 80081aa:	bf00      	nop
 80081ac:	3724      	adds	r7, #36	; 0x24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	58024400 	.word	0x58024400
 80081bc:	03d09000 	.word	0x03d09000
 80081c0:	46000000 	.word	0x46000000
 80081c4:	4c742400 	.word	0x4c742400
 80081c8:	4a742400 	.word	0x4a742400
 80081cc:	4af42400 	.word	0x4af42400

080081d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b089      	sub	sp, #36	; 0x24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081d8:	4ba1      	ldr	r3, [pc, #644]	; (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	f003 0303 	and.w	r3, r3, #3
 80081e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80081e2:	4b9f      	ldr	r3, [pc, #636]	; (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	0d1b      	lsrs	r3, r3, #20
 80081e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081ee:	4b9c      	ldr	r3, [pc, #624]	; (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f2:	0a1b      	lsrs	r3, r3, #8
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80081fa:	4b99      	ldr	r3, [pc, #612]	; (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fe:	08db      	lsrs	r3, r3, #3
 8008200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	fb02 f303 	mul.w	r3, r2, r3
 800820a:	ee07 3a90 	vmov	s15, r3
 800820e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008212:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 8111 	beq.w	8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	2b02      	cmp	r3, #2
 8008222:	f000 8083 	beq.w	800832c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	2b02      	cmp	r3, #2
 800822a:	f200 80a1 	bhi.w	8008370 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d003      	beq.n	800823c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d056      	beq.n	80082e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800823a:	e099      	b.n	8008370 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800823c:	4b88      	ldr	r3, [pc, #544]	; (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0320 	and.w	r3, r3, #32
 8008244:	2b00      	cmp	r3, #0
 8008246:	d02d      	beq.n	80082a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008248:	4b85      	ldr	r3, [pc, #532]	; (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	08db      	lsrs	r3, r3, #3
 800824e:	f003 0303 	and.w	r3, r3, #3
 8008252:	4a84      	ldr	r2, [pc, #528]	; (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008254:	fa22 f303 	lsr.w	r3, r2, r3
 8008258:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	ee07 3a90 	vmov	s15, r3
 8008260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	ee07 3a90 	vmov	s15, r3
 800826a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008272:	4b7b      	ldr	r3, [pc, #492]	; (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008282:	ed97 6a03 	vldr	s12, [r7, #12]
 8008286:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800828a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800828e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800829a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800829e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80082a2:	e087      	b.n	80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800846c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80082b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082b6:	4b6a      	ldr	r3, [pc, #424]	; (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082e6:	e065      	b.n	80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	ee07 3a90 	vmov	s15, r3
 80082ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008470 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082fa:	4b59      	ldr	r3, [pc, #356]	; (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008302:	ee07 3a90 	vmov	s15, r3
 8008306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830a:	ed97 6a03 	vldr	s12, [r7, #12]
 800830e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800831a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800831e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800832a:	e043      	b.n	80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008336:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800833a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800833e:	4b48      	ldr	r3, [pc, #288]	; (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800834e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008352:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800835e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800836e:	e021      	b.n	80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008470 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800837e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008382:	4b37      	ldr	r3, [pc, #220]	; (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008392:	ed97 6a03 	vldr	s12, [r7, #12]
 8008396:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800839a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800839e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80083b4:	4b2a      	ldr	r3, [pc, #168]	; (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b8:	0a5b      	lsrs	r3, r3, #9
 80083ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80083d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083da:	ee17 2a90 	vmov	r2, s15
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80083e2:	4b1f      	ldr	r3, [pc, #124]	; (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e6:	0c1b      	lsrs	r3, r3, #16
 80083e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ec:	ee07 3a90 	vmov	s15, r3
 80083f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008408:	ee17 2a90 	vmov	r2, s15
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008410:	4b13      	ldr	r3, [pc, #76]	; (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008414:	0e1b      	lsrs	r3, r3, #24
 8008416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800841a:	ee07 3a90 	vmov	s15, r3
 800841e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008422:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008426:	ee37 7a87 	vadd.f32	s14, s15, s14
 800842a:	edd7 6a07 	vldr	s13, [r7, #28]
 800842e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008436:	ee17 2a90 	vmov	r2, s15
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800843e:	e008      	b.n	8008452 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	609a      	str	r2, [r3, #8]
}
 8008452:	bf00      	nop
 8008454:	3724      	adds	r7, #36	; 0x24
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	58024400 	.word	0x58024400
 8008464:	03d09000 	.word	0x03d09000
 8008468:	46000000 	.word	0x46000000
 800846c:	4c742400 	.word	0x4c742400
 8008470:	4a742400 	.word	0x4a742400
 8008474:	4af42400 	.word	0x4af42400

08008478 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008478:	b480      	push	{r7}
 800847a:	b089      	sub	sp, #36	; 0x24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008480:	4ba0      	ldr	r3, [pc, #640]	; (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008484:	f003 0303 	and.w	r3, r3, #3
 8008488:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800848a:	4b9e      	ldr	r3, [pc, #632]	; (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800848c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848e:	091b      	lsrs	r3, r3, #4
 8008490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008494:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008496:	4b9b      	ldr	r3, [pc, #620]	; (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80084a0:	4b98      	ldr	r3, [pc, #608]	; (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a4:	08db      	lsrs	r3, r3, #3
 80084a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	fb02 f303 	mul.w	r3, r2, r3
 80084b0:	ee07 3a90 	vmov	s15, r3
 80084b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 8111 	beq.w	80086e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	f000 8083 	beq.w	80085d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	f200 80a1 	bhi.w	8008616 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d056      	beq.n	800858e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80084e0:	e099      	b.n	8008616 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084e2:	4b88      	ldr	r3, [pc, #544]	; (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0320 	and.w	r3, r3, #32
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d02d      	beq.n	800854a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084ee:	4b85      	ldr	r3, [pc, #532]	; (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	08db      	lsrs	r3, r3, #3
 80084f4:	f003 0303 	and.w	r3, r3, #3
 80084f8:	4a83      	ldr	r2, [pc, #524]	; (8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80084fa:	fa22 f303 	lsr.w	r3, r2, r3
 80084fe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	ee07 3a90 	vmov	s15, r3
 8008510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008518:	4b7a      	ldr	r3, [pc, #488]	; (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800851a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008520:	ee07 3a90 	vmov	s15, r3
 8008524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008528:	ed97 6a03 	vldr	s12, [r7, #12]
 800852c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800870c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800853c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008544:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008548:	e087      	b.n	800865a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	ee07 3a90 	vmov	s15, r3
 8008550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008554:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800855c:	4b69      	ldr	r3, [pc, #420]	; (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800855e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008564:	ee07 3a90 	vmov	s15, r3
 8008568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800856c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008570:	eddf 5a66 	vldr	s11, [pc, #408]	; 800870c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800857c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008588:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800858c:	e065      	b.n	800865a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	ee07 3a90 	vmov	s15, r3
 8008594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008598:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008714 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800859c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a0:	4b58      	ldr	r3, [pc, #352]	; (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a8:	ee07 3a90 	vmov	s15, r3
 80085ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80085b4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800870c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085d0:	e043      	b.n	800865a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	ee07 3a90 	vmov	s15, r3
 80085d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008718 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80085e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e4:	4b47      	ldr	r3, [pc, #284]	; (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ec:	ee07 3a90 	vmov	s15, r3
 80085f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80085f8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800870c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800860c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008610:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008614:	e021      	b.n	800865a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	ee07 3a90 	vmov	s15, r3
 800861c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008620:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008628:	4b36      	ldr	r3, [pc, #216]	; (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800862a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008630:	ee07 3a90 	vmov	s15, r3
 8008634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008638:	ed97 6a03 	vldr	s12, [r7, #12]
 800863c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800870c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008648:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800864c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008654:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008658:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800865a:	4b2a      	ldr	r3, [pc, #168]	; (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800865c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865e:	0a5b      	lsrs	r3, r3, #9
 8008660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008664:	ee07 3a90 	vmov	s15, r3
 8008668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800866c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008670:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008674:	edd7 6a07 	vldr	s13, [r7, #28]
 8008678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800867c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008680:	ee17 2a90 	vmov	r2, s15
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008688:	4b1e      	ldr	r3, [pc, #120]	; (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800868a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868c:	0c1b      	lsrs	r3, r3, #16
 800868e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800869e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80086a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ae:	ee17 2a90 	vmov	r2, s15
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80086b6:	4b13      	ldr	r3, [pc, #76]	; (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ba:	0e1b      	lsrs	r3, r3, #24
 80086bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c0:	ee07 3a90 	vmov	s15, r3
 80086c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80086d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086dc:	ee17 2a90 	vmov	r2, s15
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80086e4:	e008      	b.n	80086f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	609a      	str	r2, [r3, #8]
}
 80086f8:	bf00      	nop
 80086fa:	3724      	adds	r7, #36	; 0x24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr
 8008704:	58024400 	.word	0x58024400
 8008708:	03d09000 	.word	0x03d09000
 800870c:	46000000 	.word	0x46000000
 8008710:	4c742400 	.word	0x4c742400
 8008714:	4a742400 	.word	0x4a742400
 8008718:	4af42400 	.word	0x4af42400

0800871c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800872a:	4b53      	ldr	r3, [pc, #332]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 800872c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872e:	f003 0303 	and.w	r3, r3, #3
 8008732:	2b03      	cmp	r3, #3
 8008734:	d101      	bne.n	800873a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e099      	b.n	800886e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800873a:	4b4f      	ldr	r3, [pc, #316]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a4e      	ldr	r2, [pc, #312]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008740:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008746:	f7f8 fd51 	bl	80011ec <HAL_GetTick>
 800874a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800874c:	e008      	b.n	8008760 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800874e:	f7f8 fd4d 	bl	80011ec <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	2b02      	cmp	r3, #2
 800875a:	d901      	bls.n	8008760 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e086      	b.n	800886e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008760:	4b45      	ldr	r3, [pc, #276]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1f0      	bne.n	800874e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800876c:	4b42      	ldr	r3, [pc, #264]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 800876e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008770:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	031b      	lsls	r3, r3, #12
 800877a:	493f      	ldr	r1, [pc, #252]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 800877c:	4313      	orrs	r3, r2
 800877e:	628b      	str	r3, [r1, #40]	; 0x28
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	3b01      	subs	r3, #1
 8008786:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	3b01      	subs	r3, #1
 8008790:	025b      	lsls	r3, r3, #9
 8008792:	b29b      	uxth	r3, r3
 8008794:	431a      	orrs	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	3b01      	subs	r3, #1
 800879c:	041b      	lsls	r3, r3, #16
 800879e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80087a2:	431a      	orrs	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	061b      	lsls	r3, r3, #24
 80087ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80087b0:	4931      	ldr	r1, [pc, #196]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087b2:	4313      	orrs	r3, r2
 80087b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80087b6:	4b30      	ldr	r3, [pc, #192]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	492d      	ldr	r1, [pc, #180]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087c4:	4313      	orrs	r3, r2
 80087c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087c8:	4b2b      	ldr	r3, [pc, #172]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087cc:	f023 0220 	bic.w	r2, r3, #32
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	4928      	ldr	r1, [pc, #160]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087da:	4b27      	ldr	r3, [pc, #156]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087de:	4a26      	ldr	r2, [pc, #152]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087e0:	f023 0310 	bic.w	r3, r3, #16
 80087e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087e6:	4b24      	ldr	r3, [pc, #144]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087ea:	4b24      	ldr	r3, [pc, #144]	; (800887c <RCCEx_PLL2_Config+0x160>)
 80087ec:	4013      	ands	r3, r2
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	69d2      	ldr	r2, [r2, #28]
 80087f2:	00d2      	lsls	r2, r2, #3
 80087f4:	4920      	ldr	r1, [pc, #128]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087fa:	4b1f      	ldr	r3, [pc, #124]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	4a1e      	ldr	r2, [pc, #120]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008800:	f043 0310 	orr.w	r3, r3, #16
 8008804:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d106      	bne.n	800881a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800880c:	4b1a      	ldr	r3, [pc, #104]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 800880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008810:	4a19      	ldr	r2, [pc, #100]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008812:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008816:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008818:	e00f      	b.n	800883a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d106      	bne.n	800882e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008820:	4b15      	ldr	r3, [pc, #84]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008824:	4a14      	ldr	r2, [pc, #80]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800882a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800882c:	e005      	b.n	800883a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800882e:	4b12      	ldr	r3, [pc, #72]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008832:	4a11      	ldr	r2, [pc, #68]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008834:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008838:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800883a:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a0e      	ldr	r2, [pc, #56]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008840:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008846:	f7f8 fcd1 	bl	80011ec <HAL_GetTick>
 800884a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800884c:	e008      	b.n	8008860 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800884e:	f7f8 fccd 	bl	80011ec <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	2b02      	cmp	r3, #2
 800885a:	d901      	bls.n	8008860 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e006      	b.n	800886e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008860:	4b05      	ldr	r3, [pc, #20]	; (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d0f0      	beq.n	800884e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800886c:	7bfb      	ldrb	r3, [r7, #15]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	58024400 	.word	0x58024400
 800887c:	ffff0007 	.word	0xffff0007

08008880 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800888e:	4b53      	ldr	r3, [pc, #332]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	2b03      	cmp	r3, #3
 8008898:	d101      	bne.n	800889e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e099      	b.n	80089d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800889e:	4b4f      	ldr	r3, [pc, #316]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a4e      	ldr	r2, [pc, #312]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 80088a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088aa:	f7f8 fc9f 	bl	80011ec <HAL_GetTick>
 80088ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088b0:	e008      	b.n	80088c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80088b2:	f7f8 fc9b 	bl	80011ec <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d901      	bls.n	80088c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e086      	b.n	80089d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088c4:	4b45      	ldr	r3, [pc, #276]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1f0      	bne.n	80088b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088d0:	4b42      	ldr	r3, [pc, #264]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 80088d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	051b      	lsls	r3, r3, #20
 80088de:	493f      	ldr	r1, [pc, #252]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 80088e0:	4313      	orrs	r3, r2
 80088e2:	628b      	str	r3, [r1, #40]	; 0x28
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	3b01      	subs	r3, #1
 80088ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	025b      	lsls	r3, r3, #9
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	431a      	orrs	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	3b01      	subs	r3, #1
 8008900:	041b      	lsls	r3, r3, #16
 8008902:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008906:	431a      	orrs	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	3b01      	subs	r3, #1
 800890e:	061b      	lsls	r3, r3, #24
 8008910:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008914:	4931      	ldr	r1, [pc, #196]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008916:	4313      	orrs	r3, r2
 8008918:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800891a:	4b30      	ldr	r3, [pc, #192]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 800891c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	492d      	ldr	r1, [pc, #180]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008928:	4313      	orrs	r3, r2
 800892a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800892c:	4b2b      	ldr	r3, [pc, #172]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 800892e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008930:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	4928      	ldr	r1, [pc, #160]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 800893a:	4313      	orrs	r3, r2
 800893c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800893e:	4b27      	ldr	r3, [pc, #156]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008942:	4a26      	ldr	r2, [pc, #152]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008948:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800894a:	4b24      	ldr	r3, [pc, #144]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 800894c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800894e:	4b24      	ldr	r3, [pc, #144]	; (80089e0 <RCCEx_PLL3_Config+0x160>)
 8008950:	4013      	ands	r3, r2
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	69d2      	ldr	r2, [r2, #28]
 8008956:	00d2      	lsls	r2, r2, #3
 8008958:	4920      	ldr	r1, [pc, #128]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 800895a:	4313      	orrs	r3, r2
 800895c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800895e:	4b1f      	ldr	r3, [pc, #124]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008962:	4a1e      	ldr	r2, [pc, #120]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008968:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d106      	bne.n	800897e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008970:	4b1a      	ldr	r3, [pc, #104]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008974:	4a19      	ldr	r2, [pc, #100]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008976:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800897a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800897c:	e00f      	b.n	800899e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d106      	bne.n	8008992 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008984:	4b15      	ldr	r3, [pc, #84]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	4a14      	ldr	r2, [pc, #80]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 800898a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800898e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008990:	e005      	b.n	800899e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008992:	4b12      	ldr	r3, [pc, #72]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008996:	4a11      	ldr	r2, [pc, #68]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008998:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800899c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800899e:	4b0f      	ldr	r3, [pc, #60]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a0e      	ldr	r2, [pc, #56]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 80089a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089aa:	f7f8 fc1f 	bl	80011ec <HAL_GetTick>
 80089ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089b0:	e008      	b.n	80089c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089b2:	f7f8 fc1b 	bl	80011ec <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d901      	bls.n	80089c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e006      	b.n	80089d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089c4:	4b05      	ldr	r3, [pc, #20]	; (80089dc <RCCEx_PLL3_Config+0x15c>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d0f0      	beq.n	80089b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	58024400 	.word	0x58024400
 80089e0:	ffff0007 	.word	0xffff0007

080089e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e049      	b.n	8008a8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d106      	bne.n	8008a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7f8 fb08 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2202      	movs	r2, #2
 8008a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3304      	adds	r3, #4
 8008a20:	4619      	mov	r1, r3
 8008a22:	4610      	mov	r0, r2
 8008a24:	f000 fc62 	bl	80092ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
	...

08008a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d001      	beq.n	8008aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e054      	b.n	8008b56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0201 	orr.w	r2, r2, #1
 8008ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a26      	ldr	r2, [pc, #152]	; (8008b64 <HAL_TIM_Base_Start_IT+0xd0>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d022      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x80>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ad6:	d01d      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x80>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a22      	ldr	r2, [pc, #136]	; (8008b68 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d018      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x80>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a21      	ldr	r2, [pc, #132]	; (8008b6c <HAL_TIM_Base_Start_IT+0xd8>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d013      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x80>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a1f      	ldr	r2, [pc, #124]	; (8008b70 <HAL_TIM_Base_Start_IT+0xdc>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d00e      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x80>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a1e      	ldr	r2, [pc, #120]	; (8008b74 <HAL_TIM_Base_Start_IT+0xe0>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d009      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x80>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a1c      	ldr	r2, [pc, #112]	; (8008b78 <HAL_TIM_Base_Start_IT+0xe4>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d004      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x80>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a1b      	ldr	r2, [pc, #108]	; (8008b7c <HAL_TIM_Base_Start_IT+0xe8>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d115      	bne.n	8008b40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689a      	ldr	r2, [r3, #8]
 8008b1a:	4b19      	ldr	r3, [pc, #100]	; (8008b80 <HAL_TIM_Base_Start_IT+0xec>)
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b06      	cmp	r3, #6
 8008b24:	d015      	beq.n	8008b52 <HAL_TIM_Base_Start_IT+0xbe>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b2c:	d011      	beq.n	8008b52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f042 0201 	orr.w	r2, r2, #1
 8008b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b3e:	e008      	b.n	8008b52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f042 0201 	orr.w	r2, r2, #1
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	e000      	b.n	8008b54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	40010000 	.word	0x40010000
 8008b68:	40000400 	.word	0x40000400
 8008b6c:	40000800 	.word	0x40000800
 8008b70:	40000c00 	.word	0x40000c00
 8008b74:	40010400 	.word	0x40010400
 8008b78:	40001800 	.word	0x40001800
 8008b7c:	40014000 	.word	0x40014000
 8008b80:	00010007 	.word	0x00010007

08008b84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e049      	b.n	8008c2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d106      	bne.n	8008bb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f841 	bl	8008c32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4610      	mov	r0, r2
 8008bc4:	f000 fb92 	bl	80092ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c3a:	bf00      	nop
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b082      	sub	sp, #8
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d122      	bne.n	8008ca2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d11b      	bne.n	8008ca2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f06f 0202 	mvn.w	r2, #2
 8008c72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	f003 0303 	and.w	r3, r3, #3
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d003      	beq.n	8008c90 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fb11 	bl	80092b0 <HAL_TIM_IC_CaptureCallback>
 8008c8e:	e005      	b.n	8008c9c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fb03 	bl	800929c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fb14 	bl	80092c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	f003 0304 	and.w	r3, r3, #4
 8008cac:	2b04      	cmp	r3, #4
 8008cae:	d122      	bne.n	8008cf6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	f003 0304 	and.w	r3, r3, #4
 8008cba:	2b04      	cmp	r3, #4
 8008cbc:	d11b      	bne.n	8008cf6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f06f 0204 	mvn.w	r2, #4
 8008cc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d003      	beq.n	8008ce4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fae7 	bl	80092b0 <HAL_TIM_IC_CaptureCallback>
 8008ce2:	e005      	b.n	8008cf0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fad9 	bl	800929c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 faea 	bl	80092c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	f003 0308 	and.w	r3, r3, #8
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d122      	bne.n	8008d4a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	f003 0308 	and.w	r3, r3, #8
 8008d0e:	2b08      	cmp	r3, #8
 8008d10:	d11b      	bne.n	8008d4a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f06f 0208 	mvn.w	r2, #8
 8008d1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2204      	movs	r2, #4
 8008d20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	f003 0303 	and.w	r3, r3, #3
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d003      	beq.n	8008d38 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fabd 	bl	80092b0 <HAL_TIM_IC_CaptureCallback>
 8008d36:	e005      	b.n	8008d44 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 faaf 	bl	800929c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fac0 	bl	80092c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	f003 0310 	and.w	r3, r3, #16
 8008d54:	2b10      	cmp	r3, #16
 8008d56:	d122      	bne.n	8008d9e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	f003 0310 	and.w	r3, r3, #16
 8008d62:	2b10      	cmp	r3, #16
 8008d64:	d11b      	bne.n	8008d9e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f06f 0210 	mvn.w	r2, #16
 8008d6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2208      	movs	r2, #8
 8008d74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d003      	beq.n	8008d8c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fa93 	bl	80092b0 <HAL_TIM_IC_CaptureCallback>
 8008d8a:	e005      	b.n	8008d98 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fa85 	bl	800929c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa96 	bl	80092c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	f003 0301 	and.w	r3, r3, #1
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d10e      	bne.n	8008dca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d107      	bne.n	8008dca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f06f 0201 	mvn.w	r2, #1
 8008dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7f7 fe75 	bl	8000ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd4:	2b80      	cmp	r3, #128	; 0x80
 8008dd6:	d10e      	bne.n	8008df6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de2:	2b80      	cmp	r3, #128	; 0x80
 8008de4:	d107      	bne.n	8008df6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 ff9f 	bl	8009d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e04:	d10e      	bne.n	8008e24 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e10:	2b80      	cmp	r3, #128	; 0x80
 8008e12:	d107      	bne.n	8008e24 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 ff92 	bl	8009d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2e:	2b40      	cmp	r3, #64	; 0x40
 8008e30:	d10e      	bne.n	8008e50 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3c:	2b40      	cmp	r3, #64	; 0x40
 8008e3e:	d107      	bne.n	8008e50 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fa44 	bl	80092d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	f003 0320 	and.w	r3, r3, #32
 8008e5a:	2b20      	cmp	r3, #32
 8008e5c:	d10e      	bne.n	8008e7c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	f003 0320 	and.w	r3, r3, #32
 8008e68:	2b20      	cmp	r3, #32
 8008e6a:	d107      	bne.n	8008e7c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f06f 0220 	mvn.w	r2, #32
 8008e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 ff52 	bl	8009d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e7c:	bf00      	nop
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d101      	bne.n	8008ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	e0ff      	b.n	80090a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b14      	cmp	r3, #20
 8008eae:	f200 80f0 	bhi.w	8009092 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008eb2:	a201      	add	r2, pc, #4	; (adr r2, 8008eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb8:	08008f0d 	.word	0x08008f0d
 8008ebc:	08009093 	.word	0x08009093
 8008ec0:	08009093 	.word	0x08009093
 8008ec4:	08009093 	.word	0x08009093
 8008ec8:	08008f4d 	.word	0x08008f4d
 8008ecc:	08009093 	.word	0x08009093
 8008ed0:	08009093 	.word	0x08009093
 8008ed4:	08009093 	.word	0x08009093
 8008ed8:	08008f8f 	.word	0x08008f8f
 8008edc:	08009093 	.word	0x08009093
 8008ee0:	08009093 	.word	0x08009093
 8008ee4:	08009093 	.word	0x08009093
 8008ee8:	08008fcf 	.word	0x08008fcf
 8008eec:	08009093 	.word	0x08009093
 8008ef0:	08009093 	.word	0x08009093
 8008ef4:	08009093 	.word	0x08009093
 8008ef8:	08009011 	.word	0x08009011
 8008efc:	08009093 	.word	0x08009093
 8008f00:	08009093 	.word	0x08009093
 8008f04:	08009093 	.word	0x08009093
 8008f08:	08009051 	.word	0x08009051
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68b9      	ldr	r1, [r7, #8]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 fa84 	bl	8009420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	699a      	ldr	r2, [r3, #24]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f042 0208 	orr.w	r2, r2, #8
 8008f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	699a      	ldr	r2, [r3, #24]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f022 0204 	bic.w	r2, r2, #4
 8008f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6999      	ldr	r1, [r3, #24]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	691a      	ldr	r2, [r3, #16]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	430a      	orrs	r2, r1
 8008f48:	619a      	str	r2, [r3, #24]
      break;
 8008f4a:	e0a5      	b.n	8009098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68b9      	ldr	r1, [r7, #8]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 faf4 	bl	8009540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	699a      	ldr	r2, [r3, #24]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699a      	ldr	r2, [r3, #24]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6999      	ldr	r1, [r3, #24]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	021a      	lsls	r2, r3, #8
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	619a      	str	r2, [r3, #24]
      break;
 8008f8c:	e084      	b.n	8009098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68b9      	ldr	r1, [r7, #8]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f000 fb5d 	bl	8009654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	69da      	ldr	r2, [r3, #28]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f042 0208 	orr.w	r2, r2, #8
 8008fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	69da      	ldr	r2, [r3, #28]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 0204 	bic.w	r2, r2, #4
 8008fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	69d9      	ldr	r1, [r3, #28]
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	691a      	ldr	r2, [r3, #16]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	430a      	orrs	r2, r1
 8008fca:	61da      	str	r2, [r3, #28]
      break;
 8008fcc:	e064      	b.n	8009098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68b9      	ldr	r1, [r7, #8]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 fbc5 	bl	8009764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	69da      	ldr	r2, [r3, #28]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	69da      	ldr	r2, [r3, #28]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	69d9      	ldr	r1, [r3, #28]
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	021a      	lsls	r2, r3, #8
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	430a      	orrs	r2, r1
 800900c:	61da      	str	r2, [r3, #28]
      break;
 800900e:	e043      	b.n	8009098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68b9      	ldr	r1, [r7, #8]
 8009016:	4618      	mov	r0, r3
 8009018:	f000 fc0e 	bl	8009838 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f042 0208 	orr.w	r2, r2, #8
 800902a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f022 0204 	bic.w	r2, r2, #4
 800903a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	691a      	ldr	r2, [r3, #16]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	430a      	orrs	r2, r1
 800904c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800904e:	e023      	b.n	8009098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68b9      	ldr	r1, [r7, #8]
 8009056:	4618      	mov	r0, r3
 8009058:	f000 fc52 	bl	8009900 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800906a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800907a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	021a      	lsls	r2, r3, #8
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	430a      	orrs	r2, r1
 800908e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009090:	e002      	b.n	8009098 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	75fb      	strb	r3, [r7, #23]
      break;
 8009096:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop

080090ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d101      	bne.n	80090c8 <HAL_TIM_ConfigClockSource+0x1c>
 80090c4:	2302      	movs	r3, #2
 80090c6:	e0dc      	b.n	8009282 <HAL_TIM_ConfigClockSource+0x1d6>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2202      	movs	r2, #2
 80090d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	4b6a      	ldr	r3, [pc, #424]	; (800928c <HAL_TIM_ConfigClockSource+0x1e0>)
 80090e4:	4013      	ands	r3, r2
 80090e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a64      	ldr	r2, [pc, #400]	; (8009290 <HAL_TIM_ConfigClockSource+0x1e4>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	f000 80a9 	beq.w	8009256 <HAL_TIM_ConfigClockSource+0x1aa>
 8009104:	4a62      	ldr	r2, [pc, #392]	; (8009290 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009106:	4293      	cmp	r3, r2
 8009108:	f200 80ae 	bhi.w	8009268 <HAL_TIM_ConfigClockSource+0x1bc>
 800910c:	4a61      	ldr	r2, [pc, #388]	; (8009294 <HAL_TIM_ConfigClockSource+0x1e8>)
 800910e:	4293      	cmp	r3, r2
 8009110:	f000 80a1 	beq.w	8009256 <HAL_TIM_ConfigClockSource+0x1aa>
 8009114:	4a5f      	ldr	r2, [pc, #380]	; (8009294 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009116:	4293      	cmp	r3, r2
 8009118:	f200 80a6 	bhi.w	8009268 <HAL_TIM_ConfigClockSource+0x1bc>
 800911c:	4a5e      	ldr	r2, [pc, #376]	; (8009298 <HAL_TIM_ConfigClockSource+0x1ec>)
 800911e:	4293      	cmp	r3, r2
 8009120:	f000 8099 	beq.w	8009256 <HAL_TIM_ConfigClockSource+0x1aa>
 8009124:	4a5c      	ldr	r2, [pc, #368]	; (8009298 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009126:	4293      	cmp	r3, r2
 8009128:	f200 809e 	bhi.w	8009268 <HAL_TIM_ConfigClockSource+0x1bc>
 800912c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009130:	f000 8091 	beq.w	8009256 <HAL_TIM_ConfigClockSource+0x1aa>
 8009134:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009138:	f200 8096 	bhi.w	8009268 <HAL_TIM_ConfigClockSource+0x1bc>
 800913c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009140:	f000 8089 	beq.w	8009256 <HAL_TIM_ConfigClockSource+0x1aa>
 8009144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009148:	f200 808e 	bhi.w	8009268 <HAL_TIM_ConfigClockSource+0x1bc>
 800914c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009150:	d03e      	beq.n	80091d0 <HAL_TIM_ConfigClockSource+0x124>
 8009152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009156:	f200 8087 	bhi.w	8009268 <HAL_TIM_ConfigClockSource+0x1bc>
 800915a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800915e:	f000 8086 	beq.w	800926e <HAL_TIM_ConfigClockSource+0x1c2>
 8009162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009166:	d87f      	bhi.n	8009268 <HAL_TIM_ConfigClockSource+0x1bc>
 8009168:	2b70      	cmp	r3, #112	; 0x70
 800916a:	d01a      	beq.n	80091a2 <HAL_TIM_ConfigClockSource+0xf6>
 800916c:	2b70      	cmp	r3, #112	; 0x70
 800916e:	d87b      	bhi.n	8009268 <HAL_TIM_ConfigClockSource+0x1bc>
 8009170:	2b60      	cmp	r3, #96	; 0x60
 8009172:	d050      	beq.n	8009216 <HAL_TIM_ConfigClockSource+0x16a>
 8009174:	2b60      	cmp	r3, #96	; 0x60
 8009176:	d877      	bhi.n	8009268 <HAL_TIM_ConfigClockSource+0x1bc>
 8009178:	2b50      	cmp	r3, #80	; 0x50
 800917a:	d03c      	beq.n	80091f6 <HAL_TIM_ConfigClockSource+0x14a>
 800917c:	2b50      	cmp	r3, #80	; 0x50
 800917e:	d873      	bhi.n	8009268 <HAL_TIM_ConfigClockSource+0x1bc>
 8009180:	2b40      	cmp	r3, #64	; 0x40
 8009182:	d058      	beq.n	8009236 <HAL_TIM_ConfigClockSource+0x18a>
 8009184:	2b40      	cmp	r3, #64	; 0x40
 8009186:	d86f      	bhi.n	8009268 <HAL_TIM_ConfigClockSource+0x1bc>
 8009188:	2b30      	cmp	r3, #48	; 0x30
 800918a:	d064      	beq.n	8009256 <HAL_TIM_ConfigClockSource+0x1aa>
 800918c:	2b30      	cmp	r3, #48	; 0x30
 800918e:	d86b      	bhi.n	8009268 <HAL_TIM_ConfigClockSource+0x1bc>
 8009190:	2b20      	cmp	r3, #32
 8009192:	d060      	beq.n	8009256 <HAL_TIM_ConfigClockSource+0x1aa>
 8009194:	2b20      	cmp	r3, #32
 8009196:	d867      	bhi.n	8009268 <HAL_TIM_ConfigClockSource+0x1bc>
 8009198:	2b00      	cmp	r3, #0
 800919a:	d05c      	beq.n	8009256 <HAL_TIM_ConfigClockSource+0x1aa>
 800919c:	2b10      	cmp	r3, #16
 800919e:	d05a      	beq.n	8009256 <HAL_TIM_ConfigClockSource+0x1aa>
 80091a0:	e062      	b.n	8009268 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091b2:	f000 fc89 	bl	8009ac8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80091c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	609a      	str	r2, [r3, #8]
      break;
 80091ce:	e04f      	b.n	8009270 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091e0:	f000 fc72 	bl	8009ac8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	689a      	ldr	r2, [r3, #8]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091f2:	609a      	str	r2, [r3, #8]
      break;
 80091f4:	e03c      	b.n	8009270 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009202:	461a      	mov	r2, r3
 8009204:	f000 fbe2 	bl	80099cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2150      	movs	r1, #80	; 0x50
 800920e:	4618      	mov	r0, r3
 8009210:	f000 fc3c 	bl	8009a8c <TIM_ITRx_SetConfig>
      break;
 8009214:	e02c      	b.n	8009270 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009222:	461a      	mov	r2, r3
 8009224:	f000 fc01 	bl	8009a2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2160      	movs	r1, #96	; 0x60
 800922e:	4618      	mov	r0, r3
 8009230:	f000 fc2c 	bl	8009a8c <TIM_ITRx_SetConfig>
      break;
 8009234:	e01c      	b.n	8009270 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009242:	461a      	mov	r2, r3
 8009244:	f000 fbc2 	bl	80099cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2140      	movs	r1, #64	; 0x40
 800924e:	4618      	mov	r0, r3
 8009250:	f000 fc1c 	bl	8009a8c <TIM_ITRx_SetConfig>
      break;
 8009254:	e00c      	b.n	8009270 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4619      	mov	r1, r3
 8009260:	4610      	mov	r0, r2
 8009262:	f000 fc13 	bl	8009a8c <TIM_ITRx_SetConfig>
      break;
 8009266:	e003      	b.n	8009270 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	73fb      	strb	r3, [r7, #15]
      break;
 800926c:	e000      	b.n	8009270 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800926e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009280:	7bfb      	ldrb	r3, [r7, #15]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	ffceff88 	.word	0xffceff88
 8009290:	00100040 	.word	0x00100040
 8009294:	00100030 	.word	0x00100030
 8009298:	00100020 	.word	0x00100020

0800929c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092cc:	bf00      	nop
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a40      	ldr	r2, [pc, #256]	; (8009400 <TIM_Base_SetConfig+0x114>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d013      	beq.n	800932c <TIM_Base_SetConfig+0x40>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800930a:	d00f      	beq.n	800932c <TIM_Base_SetConfig+0x40>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a3d      	ldr	r2, [pc, #244]	; (8009404 <TIM_Base_SetConfig+0x118>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d00b      	beq.n	800932c <TIM_Base_SetConfig+0x40>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a3c      	ldr	r2, [pc, #240]	; (8009408 <TIM_Base_SetConfig+0x11c>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d007      	beq.n	800932c <TIM_Base_SetConfig+0x40>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a3b      	ldr	r2, [pc, #236]	; (800940c <TIM_Base_SetConfig+0x120>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d003      	beq.n	800932c <TIM_Base_SetConfig+0x40>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a3a      	ldr	r2, [pc, #232]	; (8009410 <TIM_Base_SetConfig+0x124>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d108      	bne.n	800933e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	4313      	orrs	r3, r2
 800933c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a2f      	ldr	r2, [pc, #188]	; (8009400 <TIM_Base_SetConfig+0x114>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d01f      	beq.n	8009386 <TIM_Base_SetConfig+0x9a>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800934c:	d01b      	beq.n	8009386 <TIM_Base_SetConfig+0x9a>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a2c      	ldr	r2, [pc, #176]	; (8009404 <TIM_Base_SetConfig+0x118>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d017      	beq.n	8009386 <TIM_Base_SetConfig+0x9a>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a2b      	ldr	r2, [pc, #172]	; (8009408 <TIM_Base_SetConfig+0x11c>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d013      	beq.n	8009386 <TIM_Base_SetConfig+0x9a>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a2a      	ldr	r2, [pc, #168]	; (800940c <TIM_Base_SetConfig+0x120>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d00f      	beq.n	8009386 <TIM_Base_SetConfig+0x9a>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a29      	ldr	r2, [pc, #164]	; (8009410 <TIM_Base_SetConfig+0x124>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d00b      	beq.n	8009386 <TIM_Base_SetConfig+0x9a>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a28      	ldr	r2, [pc, #160]	; (8009414 <TIM_Base_SetConfig+0x128>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d007      	beq.n	8009386 <TIM_Base_SetConfig+0x9a>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a27      	ldr	r2, [pc, #156]	; (8009418 <TIM_Base_SetConfig+0x12c>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d003      	beq.n	8009386 <TIM_Base_SetConfig+0x9a>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a26      	ldr	r2, [pc, #152]	; (800941c <TIM_Base_SetConfig+0x130>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d108      	bne.n	8009398 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800938c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	4313      	orrs	r3, r2
 8009396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	689a      	ldr	r2, [r3, #8]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a10      	ldr	r2, [pc, #64]	; (8009400 <TIM_Base_SetConfig+0x114>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d00f      	beq.n	80093e4 <TIM_Base_SetConfig+0xf8>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a12      	ldr	r2, [pc, #72]	; (8009410 <TIM_Base_SetConfig+0x124>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d00b      	beq.n	80093e4 <TIM_Base_SetConfig+0xf8>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a11      	ldr	r2, [pc, #68]	; (8009414 <TIM_Base_SetConfig+0x128>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d007      	beq.n	80093e4 <TIM_Base_SetConfig+0xf8>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a10      	ldr	r2, [pc, #64]	; (8009418 <TIM_Base_SetConfig+0x12c>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d003      	beq.n	80093e4 <TIM_Base_SetConfig+0xf8>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a0f      	ldr	r2, [pc, #60]	; (800941c <TIM_Base_SetConfig+0x130>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d103      	bne.n	80093ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	691a      	ldr	r2, [r3, #16]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	615a      	str	r2, [r3, #20]
}
 80093f2:	bf00      	nop
 80093f4:	3714      	adds	r7, #20
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	40010000 	.word	0x40010000
 8009404:	40000400 	.word	0x40000400
 8009408:	40000800 	.word	0x40000800
 800940c:	40000c00 	.word	0x40000c00
 8009410:	40010400 	.word	0x40010400
 8009414:	40014000 	.word	0x40014000
 8009418:	40014400 	.word	0x40014400
 800941c:	40014800 	.word	0x40014800

08009420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009420:	b480      	push	{r7}
 8009422:	b087      	sub	sp, #28
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a1b      	ldr	r3, [r3, #32]
 800942e:	f023 0201 	bic.w	r2, r3, #1
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a1b      	ldr	r3, [r3, #32]
 800943a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	4b37      	ldr	r3, [pc, #220]	; (8009528 <TIM_OC1_SetConfig+0x108>)
 800944c:	4013      	ands	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f023 0303 	bic.w	r3, r3, #3
 8009456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	4313      	orrs	r3, r2
 8009460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	f023 0302 	bic.w	r3, r3, #2
 8009468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	4313      	orrs	r3, r2
 8009472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a2d      	ldr	r2, [pc, #180]	; (800952c <TIM_OC1_SetConfig+0x10c>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d00f      	beq.n	800949c <TIM_OC1_SetConfig+0x7c>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a2c      	ldr	r2, [pc, #176]	; (8009530 <TIM_OC1_SetConfig+0x110>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d00b      	beq.n	800949c <TIM_OC1_SetConfig+0x7c>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a2b      	ldr	r2, [pc, #172]	; (8009534 <TIM_OC1_SetConfig+0x114>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d007      	beq.n	800949c <TIM_OC1_SetConfig+0x7c>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a2a      	ldr	r2, [pc, #168]	; (8009538 <TIM_OC1_SetConfig+0x118>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d003      	beq.n	800949c <TIM_OC1_SetConfig+0x7c>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a29      	ldr	r2, [pc, #164]	; (800953c <TIM_OC1_SetConfig+0x11c>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d10c      	bne.n	80094b6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	f023 0308 	bic.w	r3, r3, #8
 80094a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	f023 0304 	bic.w	r3, r3, #4
 80094b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a1c      	ldr	r2, [pc, #112]	; (800952c <TIM_OC1_SetConfig+0x10c>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d00f      	beq.n	80094de <TIM_OC1_SetConfig+0xbe>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a1b      	ldr	r2, [pc, #108]	; (8009530 <TIM_OC1_SetConfig+0x110>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d00b      	beq.n	80094de <TIM_OC1_SetConfig+0xbe>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a1a      	ldr	r2, [pc, #104]	; (8009534 <TIM_OC1_SetConfig+0x114>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d007      	beq.n	80094de <TIM_OC1_SetConfig+0xbe>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a19      	ldr	r2, [pc, #100]	; (8009538 <TIM_OC1_SetConfig+0x118>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d003      	beq.n	80094de <TIM_OC1_SetConfig+0xbe>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a18      	ldr	r2, [pc, #96]	; (800953c <TIM_OC1_SetConfig+0x11c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d111      	bne.n	8009502 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	4313      	orrs	r3, r2
 8009500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	621a      	str	r2, [r3, #32]
}
 800951c:	bf00      	nop
 800951e:	371c      	adds	r7, #28
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	fffeff8f 	.word	0xfffeff8f
 800952c:	40010000 	.word	0x40010000
 8009530:	40010400 	.word	0x40010400
 8009534:	40014000 	.word	0x40014000
 8009538:	40014400 	.word	0x40014400
 800953c:	40014800 	.word	0x40014800

08009540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	f023 0210 	bic.w	r2, r3, #16
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	4b34      	ldr	r3, [pc, #208]	; (800963c <TIM_OC2_SetConfig+0xfc>)
 800956c:	4013      	ands	r3, r2
 800956e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	021b      	lsls	r3, r3, #8
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	4313      	orrs	r3, r2
 8009582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f023 0320 	bic.w	r3, r3, #32
 800958a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	011b      	lsls	r3, r3, #4
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	4313      	orrs	r3, r2
 8009596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a29      	ldr	r2, [pc, #164]	; (8009640 <TIM_OC2_SetConfig+0x100>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d003      	beq.n	80095a8 <TIM_OC2_SetConfig+0x68>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a28      	ldr	r2, [pc, #160]	; (8009644 <TIM_OC2_SetConfig+0x104>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d10d      	bne.n	80095c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	011b      	lsls	r3, r3, #4
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a1e      	ldr	r2, [pc, #120]	; (8009640 <TIM_OC2_SetConfig+0x100>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d00f      	beq.n	80095ec <TIM_OC2_SetConfig+0xac>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a1d      	ldr	r2, [pc, #116]	; (8009644 <TIM_OC2_SetConfig+0x104>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d00b      	beq.n	80095ec <TIM_OC2_SetConfig+0xac>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a1c      	ldr	r2, [pc, #112]	; (8009648 <TIM_OC2_SetConfig+0x108>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d007      	beq.n	80095ec <TIM_OC2_SetConfig+0xac>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a1b      	ldr	r2, [pc, #108]	; (800964c <TIM_OC2_SetConfig+0x10c>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d003      	beq.n	80095ec <TIM_OC2_SetConfig+0xac>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a1a      	ldr	r2, [pc, #104]	; (8009650 <TIM_OC2_SetConfig+0x110>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d113      	bne.n	8009614 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	695b      	ldr	r3, [r3, #20]
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	4313      	orrs	r3, r2
 8009606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	4313      	orrs	r3, r2
 8009612:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	621a      	str	r2, [r3, #32]
}
 800962e:	bf00      	nop
 8009630:	371c      	adds	r7, #28
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	feff8fff 	.word	0xfeff8fff
 8009640:	40010000 	.word	0x40010000
 8009644:	40010400 	.word	0x40010400
 8009648:	40014000 	.word	0x40014000
 800964c:	40014400 	.word	0x40014400
 8009650:	40014800 	.word	0x40014800

08009654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009654:	b480      	push	{r7}
 8009656:	b087      	sub	sp, #28
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	4b33      	ldr	r3, [pc, #204]	; (800974c <TIM_OC3_SetConfig+0xf8>)
 8009680:	4013      	ands	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f023 0303 	bic.w	r3, r3, #3
 800968a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	4313      	orrs	r3, r2
 8009694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800969c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	021b      	lsls	r3, r3, #8
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a28      	ldr	r2, [pc, #160]	; (8009750 <TIM_OC3_SetConfig+0xfc>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d003      	beq.n	80096ba <TIM_OC3_SetConfig+0x66>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a27      	ldr	r2, [pc, #156]	; (8009754 <TIM_OC3_SetConfig+0x100>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d10d      	bne.n	80096d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	021b      	lsls	r3, r3, #8
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a1d      	ldr	r2, [pc, #116]	; (8009750 <TIM_OC3_SetConfig+0xfc>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d00f      	beq.n	80096fe <TIM_OC3_SetConfig+0xaa>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a1c      	ldr	r2, [pc, #112]	; (8009754 <TIM_OC3_SetConfig+0x100>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d00b      	beq.n	80096fe <TIM_OC3_SetConfig+0xaa>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a1b      	ldr	r2, [pc, #108]	; (8009758 <TIM_OC3_SetConfig+0x104>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d007      	beq.n	80096fe <TIM_OC3_SetConfig+0xaa>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a1a      	ldr	r2, [pc, #104]	; (800975c <TIM_OC3_SetConfig+0x108>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d003      	beq.n	80096fe <TIM_OC3_SetConfig+0xaa>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a19      	ldr	r2, [pc, #100]	; (8009760 <TIM_OC3_SetConfig+0x10c>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d113      	bne.n	8009726 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800970c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	011b      	lsls	r3, r3, #4
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	4313      	orrs	r3, r2
 8009718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	699b      	ldr	r3, [r3, #24]
 800971e:	011b      	lsls	r3, r3, #4
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	4313      	orrs	r3, r2
 8009724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	621a      	str	r2, [r3, #32]
}
 8009740:	bf00      	nop
 8009742:	371c      	adds	r7, #28
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	fffeff8f 	.word	0xfffeff8f
 8009750:	40010000 	.word	0x40010000
 8009754:	40010400 	.word	0x40010400
 8009758:	40014000 	.word	0x40014000
 800975c:	40014400 	.word	0x40014400
 8009760:	40014800 	.word	0x40014800

08009764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a1b      	ldr	r3, [r3, #32]
 8009772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a1b      	ldr	r3, [r3, #32]
 800977e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	69db      	ldr	r3, [r3, #28]
 800978a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	4b24      	ldr	r3, [pc, #144]	; (8009820 <TIM_OC4_SetConfig+0xbc>)
 8009790:	4013      	ands	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800979a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	021b      	lsls	r3, r3, #8
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	031b      	lsls	r3, r3, #12
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a19      	ldr	r2, [pc, #100]	; (8009824 <TIM_OC4_SetConfig+0xc0>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d00f      	beq.n	80097e4 <TIM_OC4_SetConfig+0x80>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a18      	ldr	r2, [pc, #96]	; (8009828 <TIM_OC4_SetConfig+0xc4>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d00b      	beq.n	80097e4 <TIM_OC4_SetConfig+0x80>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a17      	ldr	r2, [pc, #92]	; (800982c <TIM_OC4_SetConfig+0xc8>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d007      	beq.n	80097e4 <TIM_OC4_SetConfig+0x80>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a16      	ldr	r2, [pc, #88]	; (8009830 <TIM_OC4_SetConfig+0xcc>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d003      	beq.n	80097e4 <TIM_OC4_SetConfig+0x80>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a15      	ldr	r2, [pc, #84]	; (8009834 <TIM_OC4_SetConfig+0xd0>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d109      	bne.n	80097f8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	019b      	lsls	r3, r3, #6
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	621a      	str	r2, [r3, #32]
}
 8009812:	bf00      	nop
 8009814:	371c      	adds	r7, #28
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	feff8fff 	.word	0xfeff8fff
 8009824:	40010000 	.word	0x40010000
 8009828:	40010400 	.word	0x40010400
 800982c:	40014000 	.word	0x40014000
 8009830:	40014400 	.word	0x40014400
 8009834:	40014800 	.word	0x40014800

08009838 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009838:	b480      	push	{r7}
 800983a:	b087      	sub	sp, #28
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800985e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	4b21      	ldr	r3, [pc, #132]	; (80098e8 <TIM_OC5_SetConfig+0xb0>)
 8009864:	4013      	ands	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	4313      	orrs	r3, r2
 8009870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009878:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	041b      	lsls	r3, r3, #16
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	4313      	orrs	r3, r2
 8009884:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a18      	ldr	r2, [pc, #96]	; (80098ec <TIM_OC5_SetConfig+0xb4>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d00f      	beq.n	80098ae <TIM_OC5_SetConfig+0x76>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a17      	ldr	r2, [pc, #92]	; (80098f0 <TIM_OC5_SetConfig+0xb8>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d00b      	beq.n	80098ae <TIM_OC5_SetConfig+0x76>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a16      	ldr	r2, [pc, #88]	; (80098f4 <TIM_OC5_SetConfig+0xbc>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d007      	beq.n	80098ae <TIM_OC5_SetConfig+0x76>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a15      	ldr	r2, [pc, #84]	; (80098f8 <TIM_OC5_SetConfig+0xc0>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d003      	beq.n	80098ae <TIM_OC5_SetConfig+0x76>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a14      	ldr	r2, [pc, #80]	; (80098fc <TIM_OC5_SetConfig+0xc4>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d109      	bne.n	80098c2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	021b      	lsls	r3, r3, #8
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	4313      	orrs	r3, r2
 80098c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	621a      	str	r2, [r3, #32]
}
 80098dc:	bf00      	nop
 80098de:	371c      	adds	r7, #28
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	fffeff8f 	.word	0xfffeff8f
 80098ec:	40010000 	.word	0x40010000
 80098f0:	40010400 	.word	0x40010400
 80098f4:	40014000 	.word	0x40014000
 80098f8:	40014400 	.word	0x40014400
 80098fc:	40014800 	.word	0x40014800

08009900 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009900:	b480      	push	{r7}
 8009902:	b087      	sub	sp, #28
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a1b      	ldr	r3, [r3, #32]
 800990e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a1b      	ldr	r3, [r3, #32]
 800991a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	4b22      	ldr	r3, [pc, #136]	; (80099b4 <TIM_OC6_SetConfig+0xb4>)
 800992c:	4013      	ands	r3, r2
 800992e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	021b      	lsls	r3, r3, #8
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	4313      	orrs	r3, r2
 800993a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	051b      	lsls	r3, r3, #20
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	4313      	orrs	r3, r2
 800994e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a19      	ldr	r2, [pc, #100]	; (80099b8 <TIM_OC6_SetConfig+0xb8>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d00f      	beq.n	8009978 <TIM_OC6_SetConfig+0x78>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a18      	ldr	r2, [pc, #96]	; (80099bc <TIM_OC6_SetConfig+0xbc>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d00b      	beq.n	8009978 <TIM_OC6_SetConfig+0x78>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a17      	ldr	r2, [pc, #92]	; (80099c0 <TIM_OC6_SetConfig+0xc0>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d007      	beq.n	8009978 <TIM_OC6_SetConfig+0x78>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a16      	ldr	r2, [pc, #88]	; (80099c4 <TIM_OC6_SetConfig+0xc4>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d003      	beq.n	8009978 <TIM_OC6_SetConfig+0x78>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a15      	ldr	r2, [pc, #84]	; (80099c8 <TIM_OC6_SetConfig+0xc8>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d109      	bne.n	800998c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800997e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	695b      	ldr	r3, [r3, #20]
 8009984:	029b      	lsls	r3, r3, #10
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	4313      	orrs	r3, r2
 800998a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	693a      	ldr	r2, [r7, #16]
 80099a4:	621a      	str	r2, [r3, #32]
}
 80099a6:	bf00      	nop
 80099a8:	371c      	adds	r7, #28
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	feff8fff 	.word	0xfeff8fff
 80099b8:	40010000 	.word	0x40010000
 80099bc:	40010400 	.word	0x40010400
 80099c0:	40014000 	.word	0x40014000
 80099c4:	40014400 	.word	0x40014400
 80099c8:	40014800 	.word	0x40014800

080099cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6a1b      	ldr	r3, [r3, #32]
 80099dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	f023 0201 	bic.w	r2, r3, #1
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	011b      	lsls	r3, r3, #4
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f023 030a 	bic.w	r3, r3, #10
 8009a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	621a      	str	r2, [r3, #32]
}
 8009a1e:	bf00      	nop
 8009a20:	371c      	adds	r7, #28
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr

08009a2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a2a:	b480      	push	{r7}
 8009a2c:	b087      	sub	sp, #28
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	60f8      	str	r0, [r7, #12]
 8009a32:	60b9      	str	r1, [r7, #8]
 8009a34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	f023 0210 	bic.w	r2, r3, #16
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6a1b      	ldr	r3, [r3, #32]
 8009a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	031b      	lsls	r3, r3, #12
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	011b      	lsls	r3, r3, #4
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	621a      	str	r2, [r3, #32]
}
 8009a7e:	bf00      	nop
 8009a80:	371c      	adds	r7, #28
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
	...

08009a8c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	4b09      	ldr	r3, [pc, #36]	; (8009ac4 <TIM_ITRx_SetConfig+0x38>)
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009aa4:	683a      	ldr	r2, [r7, #0]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	f043 0307 	orr.w	r3, r3, #7
 8009aae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	609a      	str	r2, [r3, #8]
}
 8009ab6:	bf00      	nop
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	ffcfff8f 	.word	0xffcfff8f

08009ac8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b087      	sub	sp, #28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
 8009ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ae2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	021a      	lsls	r2, r3, #8
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	431a      	orrs	r2, r3
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	697a      	ldr	r2, [r7, #20]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	609a      	str	r2, [r3, #8]
}
 8009afc:	bf00      	nop
 8009afe:	371c      	adds	r7, #28
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d101      	bne.n	8009b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	e06d      	b.n	8009bfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a30      	ldr	r2, [pc, #192]	; (8009c08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d004      	beq.n	8009b54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a2f      	ldr	r2, [pc, #188]	; (8009c0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d108      	bne.n	8009b66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a20      	ldr	r2, [pc, #128]	; (8009c08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d022      	beq.n	8009bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b92:	d01d      	beq.n	8009bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a1d      	ldr	r2, [pc, #116]	; (8009c10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d018      	beq.n	8009bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a1c      	ldr	r2, [pc, #112]	; (8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d013      	beq.n	8009bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a1a      	ldr	r2, [pc, #104]	; (8009c18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d00e      	beq.n	8009bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a15      	ldr	r2, [pc, #84]	; (8009c0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d009      	beq.n	8009bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a16      	ldr	r2, [pc, #88]	; (8009c1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d004      	beq.n	8009bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a15      	ldr	r2, [pc, #84]	; (8009c20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d10c      	bne.n	8009bea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	40010000 	.word	0x40010000
 8009c0c:	40010400 	.word	0x40010400
 8009c10:	40000400 	.word	0x40000400
 8009c14:	40000800 	.word	0x40000800
 8009c18:	40000c00 	.word	0x40000c00
 8009c1c:	40001800 	.word	0x40001800
 8009c20:	40014000 	.word	0x40014000

08009c24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d101      	bne.n	8009c40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	e065      	b.n	8009d0c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	4313      	orrs	r3, r2
 8009c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	695b      	ldr	r3, [r3, #20]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	041b      	lsls	r3, r3, #16
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a16      	ldr	r2, [pc, #88]	; (8009d18 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d004      	beq.n	8009cce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a14      	ldr	r2, [pc, #80]	; (8009d1c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d115      	bne.n	8009cfa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd8:	051b      	lsls	r3, r3, #20
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	40010000 	.word	0x40010000
 8009d1c:	40010400 	.word	0x40010400

08009d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <__NVIC_SetPriority>:
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	4603      	mov	r3, r0
 8009d64:	6039      	str	r1, [r7, #0]
 8009d66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009d68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	db0a      	blt.n	8009d86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	b2da      	uxtb	r2, r3
 8009d74:	490c      	ldr	r1, [pc, #48]	; (8009da8 <__NVIC_SetPriority+0x4c>)
 8009d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d7a:	0112      	lsls	r2, r2, #4
 8009d7c:	b2d2      	uxtb	r2, r2
 8009d7e:	440b      	add	r3, r1
 8009d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009d84:	e00a      	b.n	8009d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	4908      	ldr	r1, [pc, #32]	; (8009dac <__NVIC_SetPriority+0x50>)
 8009d8c:	88fb      	ldrh	r3, [r7, #6]
 8009d8e:	f003 030f 	and.w	r3, r3, #15
 8009d92:	3b04      	subs	r3, #4
 8009d94:	0112      	lsls	r2, r2, #4
 8009d96:	b2d2      	uxtb	r2, r2
 8009d98:	440b      	add	r3, r1
 8009d9a:	761a      	strb	r2, [r3, #24]
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr
 8009da8:	e000e100 	.word	0xe000e100
 8009dac:	e000ed00 	.word	0xe000ed00

08009db0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009db0:	b580      	push	{r7, lr}
 8009db2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009db4:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <SysTick_Handler+0x1c>)
 8009db6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009db8:	f001 fde6 	bl	800b988 <xTaskGetSchedulerState>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d001      	beq.n	8009dc6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009dc2:	f002 fc19 	bl	800c5f8 <xPortSysTickHandler>
  }
}
 8009dc6:	bf00      	nop
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	e000e010 	.word	0xe000e010

08009dd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	f06f 0004 	mvn.w	r0, #4
 8009dda:	f7ff ffbf 	bl	8009d5c <__NVIC_SetPriority>
#endif
}
 8009dde:	bf00      	nop
 8009de0:	bd80      	pop	{r7, pc}
	...

08009de4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dea:	f3ef 8305 	mrs	r3, IPSR
 8009dee:	603b      	str	r3, [r7, #0]
  return(result);
 8009df0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d003      	beq.n	8009dfe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009df6:	f06f 0305 	mvn.w	r3, #5
 8009dfa:	607b      	str	r3, [r7, #4]
 8009dfc:	e00c      	b.n	8009e18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009dfe:	4b0a      	ldr	r3, [pc, #40]	; (8009e28 <osKernelInitialize+0x44>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d105      	bne.n	8009e12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009e06:	4b08      	ldr	r3, [pc, #32]	; (8009e28 <osKernelInitialize+0x44>)
 8009e08:	2201      	movs	r2, #1
 8009e0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	607b      	str	r3, [r7, #4]
 8009e10:	e002      	b.n	8009e18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009e12:	f04f 33ff 	mov.w	r3, #4294967295
 8009e16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e18:	687b      	ldr	r3, [r7, #4]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	370c      	adds	r7, #12
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	2400020c 	.word	0x2400020c

08009e2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e32:	f3ef 8305 	mrs	r3, IPSR
 8009e36:	603b      	str	r3, [r7, #0]
  return(result);
 8009e38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009e3e:	f06f 0305 	mvn.w	r3, #5
 8009e42:	607b      	str	r3, [r7, #4]
 8009e44:	e010      	b.n	8009e68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009e46:	4b0b      	ldr	r3, [pc, #44]	; (8009e74 <osKernelStart+0x48>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d109      	bne.n	8009e62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009e4e:	f7ff ffbf 	bl	8009dd0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009e52:	4b08      	ldr	r3, [pc, #32]	; (8009e74 <osKernelStart+0x48>)
 8009e54:	2202      	movs	r2, #2
 8009e56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009e58:	f001 f93a 	bl	800b0d0 <vTaskStartScheduler>
      stat = osOK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	607b      	str	r3, [r7, #4]
 8009e60:	e002      	b.n	8009e68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009e62:	f04f 33ff 	mov.w	r3, #4294967295
 8009e66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e68:	687b      	ldr	r3, [r7, #4]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	2400020c 	.word	0x2400020c

08009e78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b08e      	sub	sp, #56	; 0x38
 8009e7c:	af04      	add	r7, sp, #16
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e84:	2300      	movs	r3, #0
 8009e86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e88:	f3ef 8305 	mrs	r3, IPSR
 8009e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8009e8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d17e      	bne.n	8009f92 <osThreadNew+0x11a>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d07b      	beq.n	8009f92 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009e9a:	2380      	movs	r3, #128	; 0x80
 8009e9c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009e9e:	2318      	movs	r3, #24
 8009ea0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eaa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d045      	beq.n	8009f3e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d002      	beq.n	8009ec0 <osThreadNew+0x48>
        name = attr->name;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d008      	beq.n	8009ee6 <osThreadNew+0x6e>
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	2b38      	cmp	r3, #56	; 0x38
 8009ed8:	d805      	bhi.n	8009ee6 <osThreadNew+0x6e>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <osThreadNew+0x72>
        return (NULL);
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	e054      	b.n	8009f94 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d003      	beq.n	8009efa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	089b      	lsrs	r3, r3, #2
 8009ef8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00e      	beq.n	8009f20 <osThreadNew+0xa8>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	2ba7      	cmp	r3, #167	; 0xa7
 8009f08:	d90a      	bls.n	8009f20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d006      	beq.n	8009f20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d002      	beq.n	8009f20 <osThreadNew+0xa8>
        mem = 1;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	61bb      	str	r3, [r7, #24]
 8009f1e:	e010      	b.n	8009f42 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10c      	bne.n	8009f42 <osThreadNew+0xca>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d108      	bne.n	8009f42 <osThreadNew+0xca>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d104      	bne.n	8009f42 <osThreadNew+0xca>
          mem = 0;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	61bb      	str	r3, [r7, #24]
 8009f3c:	e001      	b.n	8009f42 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d110      	bne.n	8009f6a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f50:	9202      	str	r2, [sp, #8]
 8009f52:	9301      	str	r3, [sp, #4]
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	6a3a      	ldr	r2, [r7, #32]
 8009f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f000 fefe 	bl	800ad60 <xTaskCreateStatic>
 8009f64:	4603      	mov	r3, r0
 8009f66:	613b      	str	r3, [r7, #16]
 8009f68:	e013      	b.n	8009f92 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d110      	bne.n	8009f92 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009f70:	6a3b      	ldr	r3, [r7, #32]
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	f107 0310 	add.w	r3, r7, #16
 8009f78:	9301      	str	r3, [sp, #4]
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f000 ff49 	bl	800ae1a <xTaskCreate>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d001      	beq.n	8009f92 <osThreadNew+0x11a>
            hTask = NULL;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009f92:	693b      	ldr	r3, [r7, #16]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3728      	adds	r7, #40	; 0x28
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b08a      	sub	sp, #40	; 0x28
 8009fa0:	af02      	add	r7, sp, #8
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fac:	f3ef 8305 	mrs	r3, IPSR
 8009fb0:	613b      	str	r3, [r7, #16]
  return(result);
 8009fb2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d15f      	bne.n	800a078 <osMessageQueueNew+0xdc>
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d05c      	beq.n	800a078 <osMessageQueueNew+0xdc>
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d059      	beq.n	800a078 <osMessageQueueNew+0xdc>
    mem = -1;
 8009fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d029      	beq.n	800a024 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d012      	beq.n	8009ffe <osMessageQueueNew+0x62>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	2b4f      	cmp	r3, #79	; 0x4f
 8009fde:	d90e      	bls.n	8009ffe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00a      	beq.n	8009ffe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	695a      	ldr	r2, [r3, #20]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	68b9      	ldr	r1, [r7, #8]
 8009ff0:	fb01 f303 	mul.w	r3, r1, r3
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d302      	bcc.n	8009ffe <osMessageQueueNew+0x62>
        mem = 1;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	61bb      	str	r3, [r7, #24]
 8009ffc:	e014      	b.n	800a028 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d110      	bne.n	800a028 <osMessageQueueNew+0x8c>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d10c      	bne.n	800a028 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a012:	2b00      	cmp	r3, #0
 800a014:	d108      	bne.n	800a028 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d104      	bne.n	800a028 <osMessageQueueNew+0x8c>
          mem = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	61bb      	str	r3, [r7, #24]
 800a022:	e001      	b.n	800a028 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a024:	2300      	movs	r3, #0
 800a026:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d10b      	bne.n	800a046 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	691a      	ldr	r2, [r3, #16]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	2100      	movs	r1, #0
 800a038:	9100      	str	r1, [sp, #0]
 800a03a:	68b9      	ldr	r1, [r7, #8]
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f000 f9d1 	bl	800a3e4 <xQueueGenericCreateStatic>
 800a042:	61f8      	str	r0, [r7, #28]
 800a044:	e008      	b.n	800a058 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d105      	bne.n	800a058 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a04c:	2200      	movs	r2, #0
 800a04e:	68b9      	ldr	r1, [r7, #8]
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 fa3f 	bl	800a4d4 <xQueueGenericCreate>
 800a056:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00c      	beq.n	800a078 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d003      	beq.n	800a06c <osMessageQueueNew+0xd0>
        name = attr->name;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	617b      	str	r3, [r7, #20]
 800a06a:	e001      	b.n	800a070 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a06c:	2300      	movs	r3, #0
 800a06e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a070:	6979      	ldr	r1, [r7, #20]
 800a072:	69f8      	ldr	r0, [r7, #28]
 800a074:	f000 fe16 	bl	800aca4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a078:	69fb      	ldr	r3, [r7, #28]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3720      	adds	r7, #32
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
	...

0800a084 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	603b      	str	r3, [r7, #0]
 800a090:	4613      	mov	r3, r2
 800a092:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a098:	2300      	movs	r3, #0
 800a09a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a09c:	f3ef 8305 	mrs	r3, IPSR
 800a0a0:	617b      	str	r3, [r7, #20]
  return(result);
 800a0a2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d028      	beq.n	800a0fa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d005      	beq.n	800a0ba <osMessageQueuePut+0x36>
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d002      	beq.n	800a0ba <osMessageQueuePut+0x36>
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a0ba:	f06f 0303 	mvn.w	r3, #3
 800a0be:	61fb      	str	r3, [r7, #28]
 800a0c0:	e038      	b.n	800a134 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a0c6:	f107 0210 	add.w	r2, r7, #16
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	68b9      	ldr	r1, [r7, #8]
 800a0ce:	69b8      	ldr	r0, [r7, #24]
 800a0d0:	f000 fb5c 	bl	800a78c <xQueueGenericSendFromISR>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d003      	beq.n	800a0e2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a0da:	f06f 0302 	mvn.w	r3, #2
 800a0de:	61fb      	str	r3, [r7, #28]
 800a0e0:	e028      	b.n	800a134 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d025      	beq.n	800a134 <osMessageQueuePut+0xb0>
 800a0e8:	4b15      	ldr	r3, [pc, #84]	; (800a140 <osMessageQueuePut+0xbc>)
 800a0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ee:	601a      	str	r2, [r3, #0]
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	e01c      	b.n	800a134 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d002      	beq.n	800a106 <osMessageQueuePut+0x82>
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d103      	bne.n	800a10e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a106:	f06f 0303 	mvn.w	r3, #3
 800a10a:	61fb      	str	r3, [r7, #28]
 800a10c:	e012      	b.n	800a134 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a10e:	2300      	movs	r3, #0
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	68b9      	ldr	r1, [r7, #8]
 800a114:	69b8      	ldr	r0, [r7, #24]
 800a116:	f000 fa3b 	bl	800a590 <xQueueGenericSend>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d009      	beq.n	800a134 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d003      	beq.n	800a12e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a126:	f06f 0301 	mvn.w	r3, #1
 800a12a:	61fb      	str	r3, [r7, #28]
 800a12c:	e002      	b.n	800a134 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a12e:	f06f 0302 	mvn.w	r3, #2
 800a132:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a134:	69fb      	ldr	r3, [r7, #28]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3720      	adds	r7, #32
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	e000ed04 	.word	0xe000ed04

0800a144 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	4a07      	ldr	r2, [pc, #28]	; (800a170 <vApplicationGetIdleTaskMemory+0x2c>)
 800a154:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	4a06      	ldr	r2, [pc, #24]	; (800a174 <vApplicationGetIdleTaskMemory+0x30>)
 800a15a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2280      	movs	r2, #128	; 0x80
 800a160:	601a      	str	r2, [r3, #0]
}
 800a162:	bf00      	nop
 800a164:	3714      	adds	r7, #20
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	24000210 	.word	0x24000210
 800a174:	240002b8 	.word	0x240002b8

0800a178 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	4a07      	ldr	r2, [pc, #28]	; (800a1a4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a188:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	4a06      	ldr	r2, [pc, #24]	; (800a1a8 <vApplicationGetTimerTaskMemory+0x30>)
 800a18e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a196:	601a      	str	r2, [r3, #0]
}
 800a198:	bf00      	nop
 800a19a:	3714      	adds	r7, #20
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	240004b8 	.word	0x240004b8
 800a1a8:	24000560 	.word	0x24000560

0800a1ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f103 0208 	add.w	r2, r3, #8
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f103 0208 	add.w	r2, r3, #8
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f103 0208 	add.w	r2, r3, #8
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1fa:	bf00      	nop
 800a1fc:	370c      	adds	r7, #12
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a206:	b480      	push	{r7}
 800a208:	b085      	sub	sp, #20
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	689a      	ldr	r2, [r3, #8]
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	683a      	ldr	r2, [r7, #0]
 800a22a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	683a      	ldr	r2, [r7, #0]
 800a230:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	1c5a      	adds	r2, r3, #1
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	601a      	str	r2, [r3, #0]
}
 800a242:	bf00      	nop
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a24e:	b480      	push	{r7}
 800a250:	b085      	sub	sp, #20
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a264:	d103      	bne.n	800a26e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	60fb      	str	r3, [r7, #12]
 800a26c:	e00c      	b.n	800a288 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	3308      	adds	r3, #8
 800a272:	60fb      	str	r3, [r7, #12]
 800a274:	e002      	b.n	800a27c <vListInsert+0x2e>
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	429a      	cmp	r2, r3
 800a286:	d2f6      	bcs.n	800a276 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	685a      	ldr	r2, [r3, #4]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	683a      	ldr	r2, [r7, #0]
 800a296:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	683a      	ldr	r2, [r7, #0]
 800a2a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	1c5a      	adds	r2, r3, #1
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	601a      	str	r2, [r3, #0]
}
 800a2b4:	bf00      	nop
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	6892      	ldr	r2, [r2, #8]
 800a2d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	6852      	ldr	r2, [r2, #4]
 800a2e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d103      	bne.n	800a2f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	689a      	ldr	r2, [r3, #8]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	1e5a      	subs	r2, r3, #1
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3714      	adds	r7, #20
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10a      	bne.n	800a33e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a33e:	f002 f8c9 	bl	800c4d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34a:	68f9      	ldr	r1, [r7, #12]
 800a34c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a34e:	fb01 f303 	mul.w	r3, r1, r3
 800a352:	441a      	add	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a36e:	3b01      	subs	r3, #1
 800a370:	68f9      	ldr	r1, [r7, #12]
 800a372:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a374:	fb01 f303 	mul.w	r3, r1, r3
 800a378:	441a      	add	r2, r3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	22ff      	movs	r2, #255	; 0xff
 800a382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	22ff      	movs	r2, #255	; 0xff
 800a38a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d114      	bne.n	800a3be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d01a      	beq.n	800a3d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	3310      	adds	r3, #16
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f001 f92f 	bl	800b604 <xTaskRemoveFromEventList>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d012      	beq.n	800a3d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a3ac:	4b0c      	ldr	r3, [pc, #48]	; (800a3e0 <xQueueGenericReset+0xcc>)
 800a3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	e009      	b.n	800a3d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	3310      	adds	r3, #16
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7ff fef2 	bl	800a1ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	3324      	adds	r3, #36	; 0x24
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7ff feed 	bl	800a1ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3d2:	f002 f8af 	bl	800c534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3d6:	2301      	movs	r3, #1
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	e000ed04 	.word	0xe000ed04

0800a3e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08e      	sub	sp, #56	; 0x38
 800a3e8:	af02      	add	r7, sp, #8
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
 800a3f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10a      	bne.n	800a40e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fc:	f383 8811 	msr	BASEPRI, r3
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a40a:	bf00      	nop
 800a40c:	e7fe      	b.n	800a40c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10a      	bne.n	800a42a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a426:	bf00      	nop
 800a428:	e7fe      	b.n	800a428 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <xQueueGenericCreateStatic+0x52>
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d001      	beq.n	800a43a <xQueueGenericCreateStatic+0x56>
 800a436:	2301      	movs	r3, #1
 800a438:	e000      	b.n	800a43c <xQueueGenericCreateStatic+0x58>
 800a43a:	2300      	movs	r3, #0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d10a      	bne.n	800a456 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	623b      	str	r3, [r7, #32]
}
 800a452:	bf00      	nop
 800a454:	e7fe      	b.n	800a454 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d102      	bne.n	800a462 <xQueueGenericCreateStatic+0x7e>
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <xQueueGenericCreateStatic+0x82>
 800a462:	2301      	movs	r3, #1
 800a464:	e000      	b.n	800a468 <xQueueGenericCreateStatic+0x84>
 800a466:	2300      	movs	r3, #0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10a      	bne.n	800a482 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a470:	f383 8811 	msr	BASEPRI, r3
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	61fb      	str	r3, [r7, #28]
}
 800a47e:	bf00      	nop
 800a480:	e7fe      	b.n	800a480 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a482:	2350      	movs	r3, #80	; 0x50
 800a484:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	2b50      	cmp	r3, #80	; 0x50
 800a48a:	d00a      	beq.n	800a4a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	61bb      	str	r3, [r7, #24]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a4a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00d      	beq.n	800a4ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	68b9      	ldr	r1, [r7, #8]
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 f83f 	bl	800a548 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3730      	adds	r7, #48	; 0x30
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b08a      	sub	sp, #40	; 0x28
 800a4d8:	af02      	add	r7, sp, #8
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10a      	bne.n	800a4fe <xQueueGenericCreate+0x2a>
	__asm volatile
 800a4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	613b      	str	r3, [r7, #16]
}
 800a4fa:	bf00      	nop
 800a4fc:	e7fe      	b.n	800a4fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	68ba      	ldr	r2, [r7, #8]
 800a502:	fb02 f303 	mul.w	r3, r2, r3
 800a506:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	3350      	adds	r3, #80	; 0x50
 800a50c:	4618      	mov	r0, r3
 800a50e:	f002 f903 	bl	800c718 <pvPortMalloc>
 800a512:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d011      	beq.n	800a53e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	3350      	adds	r3, #80	; 0x50
 800a522:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	2200      	movs	r2, #0
 800a528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a52c:	79fa      	ldrb	r2, [r7, #7]
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	4613      	mov	r3, r2
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	68b9      	ldr	r1, [r7, #8]
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f000 f805 	bl	800a548 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a53e:	69bb      	ldr	r3, [r7, #24]
	}
 800a540:	4618      	mov	r0, r3
 800a542:	3720      	adds	r7, #32
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
 800a554:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d103      	bne.n	800a564 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	69ba      	ldr	r2, [r7, #24]
 800a560:	601a      	str	r2, [r3, #0]
 800a562:	e002      	b.n	800a56a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a576:	2101      	movs	r1, #1
 800a578:	69b8      	ldr	r0, [r7, #24]
 800a57a:	f7ff fecb 	bl	800a314 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	78fa      	ldrb	r2, [r7, #3]
 800a582:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a586:	bf00      	nop
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
	...

0800a590 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b08e      	sub	sp, #56	; 0x38
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
 800a59c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10a      	bne.n	800a5c2 <xQueueGenericSend+0x32>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5be:	bf00      	nop
 800a5c0:	e7fe      	b.n	800a5c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d103      	bne.n	800a5d0 <xQueueGenericSend+0x40>
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <xQueueGenericSend+0x44>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e000      	b.n	800a5d6 <xQueueGenericSend+0x46>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10a      	bne.n	800a5f0 <xQueueGenericSend+0x60>
	__asm volatile
 800a5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5de:	f383 8811 	msr	BASEPRI, r3
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5ec:	bf00      	nop
 800a5ee:	e7fe      	b.n	800a5ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d103      	bne.n	800a5fe <xQueueGenericSend+0x6e>
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d101      	bne.n	800a602 <xQueueGenericSend+0x72>
 800a5fe:	2301      	movs	r3, #1
 800a600:	e000      	b.n	800a604 <xQueueGenericSend+0x74>
 800a602:	2300      	movs	r3, #0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10a      	bne.n	800a61e <xQueueGenericSend+0x8e>
	__asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	623b      	str	r3, [r7, #32]
}
 800a61a:	bf00      	nop
 800a61c:	e7fe      	b.n	800a61c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a61e:	f001 f9b3 	bl	800b988 <xTaskGetSchedulerState>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d102      	bne.n	800a62e <xQueueGenericSend+0x9e>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <xQueueGenericSend+0xa2>
 800a62e:	2301      	movs	r3, #1
 800a630:	e000      	b.n	800a634 <xQueueGenericSend+0xa4>
 800a632:	2300      	movs	r3, #0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10a      	bne.n	800a64e <xQueueGenericSend+0xbe>
	__asm volatile
 800a638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63c:	f383 8811 	msr	BASEPRI, r3
 800a640:	f3bf 8f6f 	isb	sy
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	61fb      	str	r3, [r7, #28]
}
 800a64a:	bf00      	nop
 800a64c:	e7fe      	b.n	800a64c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a64e:	f001 ff41 	bl	800c4d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d302      	bcc.n	800a664 <xQueueGenericSend+0xd4>
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	2b02      	cmp	r3, #2
 800a662:	d129      	bne.n	800a6b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	68b9      	ldr	r1, [r7, #8]
 800a668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a66a:	f000 fa0b 	bl	800aa84 <prvCopyDataToQueue>
 800a66e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	2b00      	cmp	r3, #0
 800a676:	d010      	beq.n	800a69a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67a:	3324      	adds	r3, #36	; 0x24
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 ffc1 	bl	800b604 <xTaskRemoveFromEventList>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d013      	beq.n	800a6b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a688:	4b3f      	ldr	r3, [pc, #252]	; (800a788 <xQueueGenericSend+0x1f8>)
 800a68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a68e:	601a      	str	r2, [r3, #0]
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	e00a      	b.n	800a6b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d007      	beq.n	800a6b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6a0:	4b39      	ldr	r3, [pc, #228]	; (800a788 <xQueueGenericSend+0x1f8>)
 800a6a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6a6:	601a      	str	r2, [r3, #0]
 800a6a8:	f3bf 8f4f 	dsb	sy
 800a6ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6b0:	f001 ff40 	bl	800c534 <vPortExitCritical>
				return pdPASS;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e063      	b.n	800a780 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d103      	bne.n	800a6c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6be:	f001 ff39 	bl	800c534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	e05c      	b.n	800a780 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d106      	bne.n	800a6da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6cc:	f107 0314 	add.w	r3, r7, #20
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f000 fffb 	bl	800b6cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6da:	f001 ff2b 	bl	800c534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6de:	f000 fd67 	bl	800b1b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6e2:	f001 fef7 	bl	800c4d4 <vPortEnterCritical>
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6ec:	b25b      	sxtb	r3, r3
 800a6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f2:	d103      	bne.n	800a6fc <xQueueGenericSend+0x16c>
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a702:	b25b      	sxtb	r3, r3
 800a704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a708:	d103      	bne.n	800a712 <xQueueGenericSend+0x182>
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a712:	f001 ff0f 	bl	800c534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a716:	1d3a      	adds	r2, r7, #4
 800a718:	f107 0314 	add.w	r3, r7, #20
 800a71c:	4611      	mov	r1, r2
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 ffea 	bl	800b6f8 <xTaskCheckForTimeOut>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d124      	bne.n	800a774 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a72a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a72c:	f000 faa2 	bl	800ac74 <prvIsQueueFull>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d018      	beq.n	800a768 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a738:	3310      	adds	r3, #16
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	4611      	mov	r1, r2
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 ff10 	bl	800b564 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a746:	f000 fa2d 	bl	800aba4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a74a:	f000 fd3f 	bl	800b1cc <xTaskResumeAll>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	f47f af7c 	bne.w	800a64e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a756:	4b0c      	ldr	r3, [pc, #48]	; (800a788 <xQueueGenericSend+0x1f8>)
 800a758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a75c:	601a      	str	r2, [r3, #0]
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	e772      	b.n	800a64e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a76a:	f000 fa1b 	bl	800aba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a76e:	f000 fd2d 	bl	800b1cc <xTaskResumeAll>
 800a772:	e76c      	b.n	800a64e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a776:	f000 fa15 	bl	800aba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a77a:	f000 fd27 	bl	800b1cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a77e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a780:	4618      	mov	r0, r3
 800a782:	3738      	adds	r7, #56	; 0x38
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	e000ed04 	.word	0xe000ed04

0800a78c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b090      	sub	sp, #64	; 0x40
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	607a      	str	r2, [r7, #4]
 800a798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10a      	bne.n	800a7ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a7b6:	bf00      	nop
 800a7b8:	e7fe      	b.n	800a7b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d103      	bne.n	800a7c8 <xQueueGenericSendFromISR+0x3c>
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d101      	bne.n	800a7cc <xQueueGenericSendFromISR+0x40>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e000      	b.n	800a7ce <xQueueGenericSendFromISR+0x42>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10a      	bne.n	800a7e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d6:	f383 8811 	msr	BASEPRI, r3
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a7e4:	bf00      	nop
 800a7e6:	e7fe      	b.n	800a7e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d103      	bne.n	800a7f6 <xQueueGenericSendFromISR+0x6a>
 800a7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d101      	bne.n	800a7fa <xQueueGenericSendFromISR+0x6e>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e000      	b.n	800a7fc <xQueueGenericSendFromISR+0x70>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d10a      	bne.n	800a816 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	623b      	str	r3, [r7, #32]
}
 800a812:	bf00      	nop
 800a814:	e7fe      	b.n	800a814 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a816:	f001 ff3f 	bl	800c698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a81a:	f3ef 8211 	mrs	r2, BASEPRI
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	61fa      	str	r2, [r7, #28]
 800a830:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a832:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a834:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a83e:	429a      	cmp	r2, r3
 800a840:	d302      	bcc.n	800a848 <xQueueGenericSendFromISR+0xbc>
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	2b02      	cmp	r3, #2
 800a846:	d12f      	bne.n	800a8a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a856:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a858:	683a      	ldr	r2, [r7, #0]
 800a85a:	68b9      	ldr	r1, [r7, #8]
 800a85c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a85e:	f000 f911 	bl	800aa84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a862:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86a:	d112      	bne.n	800a892 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a870:	2b00      	cmp	r3, #0
 800a872:	d016      	beq.n	800a8a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a876:	3324      	adds	r3, #36	; 0x24
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 fec3 	bl	800b604 <xTaskRemoveFromEventList>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d00e      	beq.n	800a8a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00b      	beq.n	800a8a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	e007      	b.n	800a8a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a892:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a896:	3301      	adds	r3, #1
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	b25a      	sxtb	r2, r3
 800a89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a8a6:	e001      	b.n	800a8ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a8b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3740      	adds	r7, #64	; 0x40
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
	...

0800a8c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b08c      	sub	sp, #48	; 0x30
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10a      	bne.n	800a8f4 <xQueueReceive+0x30>
	__asm volatile
 800a8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	623b      	str	r3, [r7, #32]
}
 800a8f0:	bf00      	nop
 800a8f2:	e7fe      	b.n	800a8f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d103      	bne.n	800a902 <xQueueReceive+0x3e>
 800a8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d101      	bne.n	800a906 <xQueueReceive+0x42>
 800a902:	2301      	movs	r3, #1
 800a904:	e000      	b.n	800a908 <xQueueReceive+0x44>
 800a906:	2300      	movs	r3, #0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10a      	bne.n	800a922 <xQueueReceive+0x5e>
	__asm volatile
 800a90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a910:	f383 8811 	msr	BASEPRI, r3
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	61fb      	str	r3, [r7, #28]
}
 800a91e:	bf00      	nop
 800a920:	e7fe      	b.n	800a920 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a922:	f001 f831 	bl	800b988 <xTaskGetSchedulerState>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d102      	bne.n	800a932 <xQueueReceive+0x6e>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d101      	bne.n	800a936 <xQueueReceive+0x72>
 800a932:	2301      	movs	r3, #1
 800a934:	e000      	b.n	800a938 <xQueueReceive+0x74>
 800a936:	2300      	movs	r3, #0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10a      	bne.n	800a952 <xQueueReceive+0x8e>
	__asm volatile
 800a93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	61bb      	str	r3, [r7, #24]
}
 800a94e:	bf00      	nop
 800a950:	e7fe      	b.n	800a950 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a952:	f001 fdbf 	bl	800c4d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d01f      	beq.n	800a9a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a962:	68b9      	ldr	r1, [r7, #8]
 800a964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a966:	f000 f8f7 	bl	800ab58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96c:	1e5a      	subs	r2, r3, #1
 800a96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a970:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00f      	beq.n	800a99a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97c:	3310      	adds	r3, #16
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 fe40 	bl	800b604 <xTaskRemoveFromEventList>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d007      	beq.n	800a99a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a98a:	4b3d      	ldr	r3, [pc, #244]	; (800aa80 <xQueueReceive+0x1bc>)
 800a98c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a990:	601a      	str	r2, [r3, #0]
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a99a:	f001 fdcb 	bl	800c534 <vPortExitCritical>
				return pdPASS;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e069      	b.n	800aa76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d103      	bne.n	800a9b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9a8:	f001 fdc4 	bl	800c534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	e062      	b.n	800aa76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d106      	bne.n	800a9c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9b6:	f107 0310 	add.w	r3, r7, #16
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f000 fe86 	bl	800b6cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9c4:	f001 fdb6 	bl	800c534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9c8:	f000 fbf2 	bl	800b1b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9cc:	f001 fd82 	bl	800c4d4 <vPortEnterCritical>
 800a9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9d6:	b25b      	sxtb	r3, r3
 800a9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9dc:	d103      	bne.n	800a9e6 <xQueueReceive+0x122>
 800a9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9ec:	b25b      	sxtb	r3, r3
 800a9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f2:	d103      	bne.n	800a9fc <xQueueReceive+0x138>
 800a9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9fc:	f001 fd9a 	bl	800c534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa00:	1d3a      	adds	r2, r7, #4
 800aa02:	f107 0310 	add.w	r3, r7, #16
 800aa06:	4611      	mov	r1, r2
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f000 fe75 	bl	800b6f8 <xTaskCheckForTimeOut>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d123      	bne.n	800aa5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa16:	f000 f917 	bl	800ac48 <prvIsQueueEmpty>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d017      	beq.n	800aa50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa22:	3324      	adds	r3, #36	; 0x24
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	4611      	mov	r1, r2
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f000 fd9b 	bl	800b564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa30:	f000 f8b8 	bl	800aba4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa34:	f000 fbca 	bl	800b1cc <xTaskResumeAll>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d189      	bne.n	800a952 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aa3e:	4b10      	ldr	r3, [pc, #64]	; (800aa80 <xQueueReceive+0x1bc>)
 800aa40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa44:	601a      	str	r2, [r3, #0]
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	f3bf 8f6f 	isb	sy
 800aa4e:	e780      	b.n	800a952 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa52:	f000 f8a7 	bl	800aba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa56:	f000 fbb9 	bl	800b1cc <xTaskResumeAll>
 800aa5a:	e77a      	b.n	800a952 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa5e:	f000 f8a1 	bl	800aba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa62:	f000 fbb3 	bl	800b1cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa68:	f000 f8ee 	bl	800ac48 <prvIsQueueEmpty>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f43f af6f 	beq.w	800a952 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3730      	adds	r7, #48	; 0x30
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	e000ed04 	.word	0xe000ed04

0800aa84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa90:	2300      	movs	r3, #0
 800aa92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10d      	bne.n	800aabe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d14d      	bne.n	800ab46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 ff88 	bl	800b9c4 <xTaskPriorityDisinherit>
 800aab4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	609a      	str	r2, [r3, #8]
 800aabc:	e043      	b.n	800ab46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d119      	bne.n	800aaf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6858      	ldr	r0, [r3, #4]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aacc:	461a      	mov	r2, r3
 800aace:	68b9      	ldr	r1, [r7, #8]
 800aad0:	f002 f890 	bl	800cbf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	685a      	ldr	r2, [r3, #4]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aadc:	441a      	add	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d32b      	bcc.n	800ab46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	605a      	str	r2, [r3, #4]
 800aaf6:	e026      	b.n	800ab46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	68d8      	ldr	r0, [r3, #12]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab00:	461a      	mov	r2, r3
 800ab02:	68b9      	ldr	r1, [r7, #8]
 800ab04:	f002 f876 	bl	800cbf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	68da      	ldr	r2, [r3, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab10:	425b      	negs	r3, r3
 800ab12:	441a      	add	r2, r3
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	68da      	ldr	r2, [r3, #12]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d207      	bcs.n	800ab34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	689a      	ldr	r2, [r3, #8]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2c:	425b      	negs	r3, r3
 800ab2e:	441a      	add	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d105      	bne.n	800ab46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	3b01      	subs	r3, #1
 800ab44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	1c5a      	adds	r2, r3, #1
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab4e:	697b      	ldr	r3, [r7, #20]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d018      	beq.n	800ab9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	68da      	ldr	r2, [r3, #12]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab72:	441a      	add	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	68da      	ldr	r2, [r3, #12]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d303      	bcc.n	800ab8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	68d9      	ldr	r1, [r3, #12]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab94:	461a      	mov	r2, r3
 800ab96:	6838      	ldr	r0, [r7, #0]
 800ab98:	f002 f82c 	bl	800cbf4 <memcpy>
	}
}
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800abac:	f001 fc92 	bl	800c4d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abb8:	e011      	b.n	800abde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d012      	beq.n	800abe8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	3324      	adds	r3, #36	; 0x24
 800abc6:	4618      	mov	r0, r3
 800abc8:	f000 fd1c 	bl	800b604 <xTaskRemoveFromEventList>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abd2:	f000 fdf3 	bl	800b7bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800abd6:	7bfb      	ldrb	r3, [r7, #15]
 800abd8:	3b01      	subs	r3, #1
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	dce9      	bgt.n	800abba <prvUnlockQueue+0x16>
 800abe6:	e000      	b.n	800abea <prvUnlockQueue+0x46>
					break;
 800abe8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	22ff      	movs	r2, #255	; 0xff
 800abee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800abf2:	f001 fc9f 	bl	800c534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abf6:	f001 fc6d 	bl	800c4d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac02:	e011      	b.n	800ac28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d012      	beq.n	800ac32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	3310      	adds	r3, #16
 800ac10:	4618      	mov	r0, r3
 800ac12:	f000 fcf7 	bl	800b604 <xTaskRemoveFromEventList>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d001      	beq.n	800ac20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac1c:	f000 fdce 	bl	800b7bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac20:	7bbb      	ldrb	r3, [r7, #14]
 800ac22:	3b01      	subs	r3, #1
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	dce9      	bgt.n	800ac04 <prvUnlockQueue+0x60>
 800ac30:	e000      	b.n	800ac34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	22ff      	movs	r2, #255	; 0xff
 800ac38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ac3c:	f001 fc7a 	bl	800c534 <vPortExitCritical>
}
 800ac40:	bf00      	nop
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac50:	f001 fc40 	bl	800c4d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d102      	bne.n	800ac62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	60fb      	str	r3, [r7, #12]
 800ac60:	e001      	b.n	800ac66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac62:	2300      	movs	r3, #0
 800ac64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac66:	f001 fc65 	bl	800c534 <vPortExitCritical>

	return xReturn;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3710      	adds	r7, #16
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac7c:	f001 fc2a 	bl	800c4d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d102      	bne.n	800ac92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	60fb      	str	r3, [r7, #12]
 800ac90:	e001      	b.n	800ac96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac92:	2300      	movs	r3, #0
 800ac94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac96:	f001 fc4d 	bl	800c534 <vPortExitCritical>

	return xReturn;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acae:	2300      	movs	r3, #0
 800acb0:	60fb      	str	r3, [r7, #12]
 800acb2:	e014      	b.n	800acde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800acb4:	4a0f      	ldr	r2, [pc, #60]	; (800acf4 <vQueueAddToRegistry+0x50>)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10b      	bne.n	800acd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800acc0:	490c      	ldr	r1, [pc, #48]	; (800acf4 <vQueueAddToRegistry+0x50>)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	683a      	ldr	r2, [r7, #0]
 800acc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800acca:	4a0a      	ldr	r2, [pc, #40]	; (800acf4 <vQueueAddToRegistry+0x50>)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	00db      	lsls	r3, r3, #3
 800acd0:	4413      	add	r3, r2
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800acd6:	e006      	b.n	800ace6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	3301      	adds	r3, #1
 800acdc:	60fb      	str	r3, [r7, #12]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2b07      	cmp	r3, #7
 800ace2:	d9e7      	bls.n	800acb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	24000960 	.word	0x24000960

0800acf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad08:	f001 fbe4 	bl	800c4d4 <vPortEnterCritical>
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad12:	b25b      	sxtb	r3, r3
 800ad14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad18:	d103      	bne.n	800ad22 <vQueueWaitForMessageRestricted+0x2a>
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad28:	b25b      	sxtb	r3, r3
 800ad2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad2e:	d103      	bne.n	800ad38 <vQueueWaitForMessageRestricted+0x40>
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad38:	f001 fbfc 	bl	800c534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d106      	bne.n	800ad52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	3324      	adds	r3, #36	; 0x24
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	68b9      	ldr	r1, [r7, #8]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 fc2d 	bl	800b5ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad52:	6978      	ldr	r0, [r7, #20]
 800ad54:	f7ff ff26 	bl	800aba4 <prvUnlockQueue>
	}
 800ad58:	bf00      	nop
 800ad5a:	3718      	adds	r7, #24
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08e      	sub	sp, #56	; 0x38
 800ad64:	af04      	add	r7, sp, #16
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
 800ad6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10a      	bne.n	800ad8a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ad74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	623b      	str	r3, [r7, #32]
}
 800ad86:	bf00      	nop
 800ad88:	e7fe      	b.n	800ad88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10a      	bne.n	800ada6 <xTaskCreateStatic+0x46>
	__asm volatile
 800ad90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad94:	f383 8811 	msr	BASEPRI, r3
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	61fb      	str	r3, [r7, #28]
}
 800ada2:	bf00      	nop
 800ada4:	e7fe      	b.n	800ada4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ada6:	23a8      	movs	r3, #168	; 0xa8
 800ada8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	2ba8      	cmp	r3, #168	; 0xa8
 800adae:	d00a      	beq.n	800adc6 <xTaskCreateStatic+0x66>
	__asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	61bb      	str	r3, [r7, #24]
}
 800adc2:	bf00      	nop
 800adc4:	e7fe      	b.n	800adc4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800adc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800adc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d01e      	beq.n	800ae0c <xTaskCreateStatic+0xac>
 800adce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add0:	2b00      	cmp	r3, #0
 800add2:	d01b      	beq.n	800ae0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800add4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800add8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800addc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	2202      	movs	r2, #2
 800ade2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ade6:	2300      	movs	r3, #0
 800ade8:	9303      	str	r3, [sp, #12]
 800adea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adec:	9302      	str	r3, [sp, #8]
 800adee:	f107 0314 	add.w	r3, r7, #20
 800adf2:	9301      	str	r3, [sp, #4]
 800adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	68b9      	ldr	r1, [r7, #8]
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f000 f850 	bl	800aea4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae06:	f000 f8f3 	bl	800aff0 <prvAddNewTaskToReadyList>
 800ae0a:	e001      	b.n	800ae10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae10:	697b      	ldr	r3, [r7, #20]
	}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3728      	adds	r7, #40	; 0x28
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b08c      	sub	sp, #48	; 0x30
 800ae1e:	af04      	add	r7, sp, #16
 800ae20:	60f8      	str	r0, [r7, #12]
 800ae22:	60b9      	str	r1, [r7, #8]
 800ae24:	603b      	str	r3, [r7, #0]
 800ae26:	4613      	mov	r3, r2
 800ae28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae2a:	88fb      	ldrh	r3, [r7, #6]
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f001 fc72 	bl	800c718 <pvPortMalloc>
 800ae34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00e      	beq.n	800ae5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae3c:	20a8      	movs	r0, #168	; 0xa8
 800ae3e:	f001 fc6b 	bl	800c718 <pvPortMalloc>
 800ae42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	631a      	str	r2, [r3, #48]	; 0x30
 800ae50:	e005      	b.n	800ae5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae52:	6978      	ldr	r0, [r7, #20]
 800ae54:	f001 fd2c 	bl	800c8b0 <vPortFree>
 800ae58:	e001      	b.n	800ae5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d017      	beq.n	800ae94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae6c:	88fa      	ldrh	r2, [r7, #6]
 800ae6e:	2300      	movs	r3, #0
 800ae70:	9303      	str	r3, [sp, #12]
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	9302      	str	r3, [sp, #8]
 800ae76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae78:	9301      	str	r3, [sp, #4]
 800ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7c:	9300      	str	r3, [sp, #0]
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	68b9      	ldr	r1, [r7, #8]
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f000 f80e 	bl	800aea4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae88:	69f8      	ldr	r0, [r7, #28]
 800ae8a:	f000 f8b1 	bl	800aff0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	61bb      	str	r3, [r7, #24]
 800ae92:	e002      	b.n	800ae9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae94:	f04f 33ff 	mov.w	r3, #4294967295
 800ae98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae9a:	69bb      	ldr	r3, [r7, #24]
	}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3720      	adds	r7, #32
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b088      	sub	sp, #32
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
 800aeb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	461a      	mov	r2, r3
 800aebc:	21a5      	movs	r1, #165	; 0xa5
 800aebe:	f001 fe15 	bl	800caec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aec6:	6879      	ldr	r1, [r7, #4]
 800aec8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800aecc:	440b      	add	r3, r1
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	f023 0307 	bic.w	r3, r3, #7
 800aeda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	f003 0307 	and.w	r3, r3, #7
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00a      	beq.n	800aefc <prvInitialiseNewTask+0x58>
	__asm volatile
 800aee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	617b      	str	r3, [r7, #20]
}
 800aef8:	bf00      	nop
 800aefa:	e7fe      	b.n	800aefa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d01f      	beq.n	800af42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af02:	2300      	movs	r3, #0
 800af04:	61fb      	str	r3, [r7, #28]
 800af06:	e012      	b.n	800af2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af08:	68ba      	ldr	r2, [r7, #8]
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	4413      	add	r3, r2
 800af0e:	7819      	ldrb	r1, [r3, #0]
 800af10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	4413      	add	r3, r2
 800af16:	3334      	adds	r3, #52	; 0x34
 800af18:	460a      	mov	r2, r1
 800af1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	4413      	add	r3, r2
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d006      	beq.n	800af36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	3301      	adds	r3, #1
 800af2c:	61fb      	str	r3, [r7, #28]
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	2b0f      	cmp	r3, #15
 800af32:	d9e9      	bls.n	800af08 <prvInitialiseNewTask+0x64>
 800af34:	e000      	b.n	800af38 <prvInitialiseNewTask+0x94>
			{
				break;
 800af36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3a:	2200      	movs	r2, #0
 800af3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af40:	e003      	b.n	800af4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	2200      	movs	r2, #0
 800af46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4c:	2b37      	cmp	r3, #55	; 0x37
 800af4e:	d901      	bls.n	800af54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af50:	2337      	movs	r3, #55	; 0x37
 800af52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af62:	2200      	movs	r2, #0
 800af64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	3304      	adds	r3, #4
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7ff f93e 	bl	800a1ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af72:	3318      	adds	r3, #24
 800af74:	4618      	mov	r0, r3
 800af76:	f7ff f939 	bl	800a1ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af92:	2200      	movs	r2, #0
 800af94:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800afa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa2:	3354      	adds	r3, #84	; 0x54
 800afa4:	224c      	movs	r2, #76	; 0x4c
 800afa6:	2100      	movs	r1, #0
 800afa8:	4618      	mov	r0, r3
 800afaa:	f001 fd9f 	bl	800caec <memset>
 800afae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb0:	4a0c      	ldr	r2, [pc, #48]	; (800afe4 <prvInitialiseNewTask+0x140>)
 800afb2:	659a      	str	r2, [r3, #88]	; 0x58
 800afb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb6:	4a0c      	ldr	r2, [pc, #48]	; (800afe8 <prvInitialiseNewTask+0x144>)
 800afb8:	65da      	str	r2, [r3, #92]	; 0x5c
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	4a0b      	ldr	r2, [pc, #44]	; (800afec <prvInitialiseNewTask+0x148>)
 800afbe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	68f9      	ldr	r1, [r7, #12]
 800afc4:	69b8      	ldr	r0, [r7, #24]
 800afc6:	f001 f959 	bl	800c27c <pxPortInitialiseStack>
 800afca:	4602      	mov	r2, r0
 800afcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800afd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d002      	beq.n	800afdc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afdc:	bf00      	nop
 800afde:	3720      	adds	r7, #32
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	24004bf4 	.word	0x24004bf4
 800afe8:	24004c5c 	.word	0x24004c5c
 800afec:	24004cc4 	.word	0x24004cc4

0800aff0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aff8:	f001 fa6c 	bl	800c4d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800affc:	4b2d      	ldr	r3, [pc, #180]	; (800b0b4 <prvAddNewTaskToReadyList+0xc4>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3301      	adds	r3, #1
 800b002:	4a2c      	ldr	r2, [pc, #176]	; (800b0b4 <prvAddNewTaskToReadyList+0xc4>)
 800b004:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b006:	4b2c      	ldr	r3, [pc, #176]	; (800b0b8 <prvAddNewTaskToReadyList+0xc8>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d109      	bne.n	800b022 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b00e:	4a2a      	ldr	r2, [pc, #168]	; (800b0b8 <prvAddNewTaskToReadyList+0xc8>)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b014:	4b27      	ldr	r3, [pc, #156]	; (800b0b4 <prvAddNewTaskToReadyList+0xc4>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d110      	bne.n	800b03e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b01c:	f000 fbf2 	bl	800b804 <prvInitialiseTaskLists>
 800b020:	e00d      	b.n	800b03e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b022:	4b26      	ldr	r3, [pc, #152]	; (800b0bc <prvAddNewTaskToReadyList+0xcc>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d109      	bne.n	800b03e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b02a:	4b23      	ldr	r3, [pc, #140]	; (800b0b8 <prvAddNewTaskToReadyList+0xc8>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b034:	429a      	cmp	r2, r3
 800b036:	d802      	bhi.n	800b03e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b038:	4a1f      	ldr	r2, [pc, #124]	; (800b0b8 <prvAddNewTaskToReadyList+0xc8>)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b03e:	4b20      	ldr	r3, [pc, #128]	; (800b0c0 <prvAddNewTaskToReadyList+0xd0>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3301      	adds	r3, #1
 800b044:	4a1e      	ldr	r2, [pc, #120]	; (800b0c0 <prvAddNewTaskToReadyList+0xd0>)
 800b046:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b048:	4b1d      	ldr	r3, [pc, #116]	; (800b0c0 <prvAddNewTaskToReadyList+0xd0>)
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b054:	4b1b      	ldr	r3, [pc, #108]	; (800b0c4 <prvAddNewTaskToReadyList+0xd4>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d903      	bls.n	800b064 <prvAddNewTaskToReadyList+0x74>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b060:	4a18      	ldr	r2, [pc, #96]	; (800b0c4 <prvAddNewTaskToReadyList+0xd4>)
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b068:	4613      	mov	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4a15      	ldr	r2, [pc, #84]	; (800b0c8 <prvAddNewTaskToReadyList+0xd8>)
 800b072:	441a      	add	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3304      	adds	r3, #4
 800b078:	4619      	mov	r1, r3
 800b07a:	4610      	mov	r0, r2
 800b07c:	f7ff f8c3 	bl	800a206 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b080:	f001 fa58 	bl	800c534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b084:	4b0d      	ldr	r3, [pc, #52]	; (800b0bc <prvAddNewTaskToReadyList+0xcc>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d00e      	beq.n	800b0aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b08c:	4b0a      	ldr	r3, [pc, #40]	; (800b0b8 <prvAddNewTaskToReadyList+0xc8>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	429a      	cmp	r2, r3
 800b098:	d207      	bcs.n	800b0aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b09a:	4b0c      	ldr	r3, [pc, #48]	; (800b0cc <prvAddNewTaskToReadyList+0xdc>)
 800b09c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0a0:	601a      	str	r2, [r3, #0]
 800b0a2:	f3bf 8f4f 	dsb	sy
 800b0a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0aa:	bf00      	nop
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	24000e74 	.word	0x24000e74
 800b0b8:	240009a0 	.word	0x240009a0
 800b0bc:	24000e80 	.word	0x24000e80
 800b0c0:	24000e90 	.word	0x24000e90
 800b0c4:	24000e7c 	.word	0x24000e7c
 800b0c8:	240009a4 	.word	0x240009a4
 800b0cc:	e000ed04 	.word	0xe000ed04

0800b0d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b08a      	sub	sp, #40	; 0x28
 800b0d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b0de:	463a      	mov	r2, r7
 800b0e0:	1d39      	adds	r1, r7, #4
 800b0e2:	f107 0308 	add.w	r3, r7, #8
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7ff f82c 	bl	800a144 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b0ec:	6839      	ldr	r1, [r7, #0]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	9202      	str	r2, [sp, #8]
 800b0f4:	9301      	str	r3, [sp, #4]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	460a      	mov	r2, r1
 800b0fe:	4924      	ldr	r1, [pc, #144]	; (800b190 <vTaskStartScheduler+0xc0>)
 800b100:	4824      	ldr	r0, [pc, #144]	; (800b194 <vTaskStartScheduler+0xc4>)
 800b102:	f7ff fe2d 	bl	800ad60 <xTaskCreateStatic>
 800b106:	4603      	mov	r3, r0
 800b108:	4a23      	ldr	r2, [pc, #140]	; (800b198 <vTaskStartScheduler+0xc8>)
 800b10a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b10c:	4b22      	ldr	r3, [pc, #136]	; (800b198 <vTaskStartScheduler+0xc8>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d002      	beq.n	800b11a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b114:	2301      	movs	r3, #1
 800b116:	617b      	str	r3, [r7, #20]
 800b118:	e001      	b.n	800b11e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b11a:	2300      	movs	r3, #0
 800b11c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d102      	bne.n	800b12a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b124:	f000 fd5c 	bl	800bbe0 <xTimerCreateTimerTask>
 800b128:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d11b      	bne.n	800b168 <vTaskStartScheduler+0x98>
	__asm volatile
 800b130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b134:	f383 8811 	msr	BASEPRI, r3
 800b138:	f3bf 8f6f 	isb	sy
 800b13c:	f3bf 8f4f 	dsb	sy
 800b140:	613b      	str	r3, [r7, #16]
}
 800b142:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b144:	4b15      	ldr	r3, [pc, #84]	; (800b19c <vTaskStartScheduler+0xcc>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	3354      	adds	r3, #84	; 0x54
 800b14a:	4a15      	ldr	r2, [pc, #84]	; (800b1a0 <vTaskStartScheduler+0xd0>)
 800b14c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b14e:	4b15      	ldr	r3, [pc, #84]	; (800b1a4 <vTaskStartScheduler+0xd4>)
 800b150:	f04f 32ff 	mov.w	r2, #4294967295
 800b154:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b156:	4b14      	ldr	r3, [pc, #80]	; (800b1a8 <vTaskStartScheduler+0xd8>)
 800b158:	2201      	movs	r2, #1
 800b15a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b15c:	4b13      	ldr	r3, [pc, #76]	; (800b1ac <vTaskStartScheduler+0xdc>)
 800b15e:	2200      	movs	r2, #0
 800b160:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b162:	f001 f915 	bl	800c390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b166:	e00e      	b.n	800b186 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b16e:	d10a      	bne.n	800b186 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b174:	f383 8811 	msr	BASEPRI, r3
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	60fb      	str	r3, [r7, #12]
}
 800b182:	bf00      	nop
 800b184:	e7fe      	b.n	800b184 <vTaskStartScheduler+0xb4>
}
 800b186:	bf00      	nop
 800b188:	3718      	adds	r7, #24
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	0800ccf8 	.word	0x0800ccf8
 800b194:	0800b7d5 	.word	0x0800b7d5
 800b198:	24000e98 	.word	0x24000e98
 800b19c:	240009a0 	.word	0x240009a0
 800b1a0:	24000060 	.word	0x24000060
 800b1a4:	24000e94 	.word	0x24000e94
 800b1a8:	24000e80 	.word	0x24000e80
 800b1ac:	24000e78 	.word	0x24000e78

0800b1b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b1b4:	4b04      	ldr	r3, [pc, #16]	; (800b1c8 <vTaskSuspendAll+0x18>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	4a03      	ldr	r2, [pc, #12]	; (800b1c8 <vTaskSuspendAll+0x18>)
 800b1bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b1be:	bf00      	nop
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr
 800b1c8:	24000e9c 	.word	0x24000e9c

0800b1cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b1da:	4b42      	ldr	r3, [pc, #264]	; (800b2e4 <xTaskResumeAll+0x118>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d10a      	bne.n	800b1f8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e6:	f383 8811 	msr	BASEPRI, r3
 800b1ea:	f3bf 8f6f 	isb	sy
 800b1ee:	f3bf 8f4f 	dsb	sy
 800b1f2:	603b      	str	r3, [r7, #0]
}
 800b1f4:	bf00      	nop
 800b1f6:	e7fe      	b.n	800b1f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b1f8:	f001 f96c 	bl	800c4d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b1fc:	4b39      	ldr	r3, [pc, #228]	; (800b2e4 <xTaskResumeAll+0x118>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	3b01      	subs	r3, #1
 800b202:	4a38      	ldr	r2, [pc, #224]	; (800b2e4 <xTaskResumeAll+0x118>)
 800b204:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b206:	4b37      	ldr	r3, [pc, #220]	; (800b2e4 <xTaskResumeAll+0x118>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d162      	bne.n	800b2d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b20e:	4b36      	ldr	r3, [pc, #216]	; (800b2e8 <xTaskResumeAll+0x11c>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d05e      	beq.n	800b2d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b216:	e02f      	b.n	800b278 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b218:	4b34      	ldr	r3, [pc, #208]	; (800b2ec <xTaskResumeAll+0x120>)
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	3318      	adds	r3, #24
 800b224:	4618      	mov	r0, r3
 800b226:	f7ff f84b 	bl	800a2c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	3304      	adds	r3, #4
 800b22e:	4618      	mov	r0, r3
 800b230:	f7ff f846 	bl	800a2c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b238:	4b2d      	ldr	r3, [pc, #180]	; (800b2f0 <xTaskResumeAll+0x124>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d903      	bls.n	800b248 <xTaskResumeAll+0x7c>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b244:	4a2a      	ldr	r2, [pc, #168]	; (800b2f0 <xTaskResumeAll+0x124>)
 800b246:	6013      	str	r3, [r2, #0]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b24c:	4613      	mov	r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	4413      	add	r3, r2
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	4a27      	ldr	r2, [pc, #156]	; (800b2f4 <xTaskResumeAll+0x128>)
 800b256:	441a      	add	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	3304      	adds	r3, #4
 800b25c:	4619      	mov	r1, r3
 800b25e:	4610      	mov	r0, r2
 800b260:	f7fe ffd1 	bl	800a206 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b268:	4b23      	ldr	r3, [pc, #140]	; (800b2f8 <xTaskResumeAll+0x12c>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26e:	429a      	cmp	r2, r3
 800b270:	d302      	bcc.n	800b278 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b272:	4b22      	ldr	r3, [pc, #136]	; (800b2fc <xTaskResumeAll+0x130>)
 800b274:	2201      	movs	r2, #1
 800b276:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b278:	4b1c      	ldr	r3, [pc, #112]	; (800b2ec <xTaskResumeAll+0x120>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d1cb      	bne.n	800b218 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d001      	beq.n	800b28a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b286:	f000 fb5f 	bl	800b948 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b28a:	4b1d      	ldr	r3, [pc, #116]	; (800b300 <xTaskResumeAll+0x134>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d010      	beq.n	800b2b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b296:	f000 f847 	bl	800b328 <xTaskIncrementTick>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b2a0:	4b16      	ldr	r3, [pc, #88]	; (800b2fc <xTaskResumeAll+0x130>)
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d1f1      	bne.n	800b296 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b2b2:	4b13      	ldr	r3, [pc, #76]	; (800b300 <xTaskResumeAll+0x134>)
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b2b8:	4b10      	ldr	r3, [pc, #64]	; (800b2fc <xTaskResumeAll+0x130>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d009      	beq.n	800b2d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b2c4:	4b0f      	ldr	r3, [pc, #60]	; (800b304 <xTaskResumeAll+0x138>)
 800b2c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2ca:	601a      	str	r2, [r3, #0]
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2d4:	f001 f92e 	bl	800c534 <vPortExitCritical>

	return xAlreadyYielded;
 800b2d8:	68bb      	ldr	r3, [r7, #8]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	24000e9c 	.word	0x24000e9c
 800b2e8:	24000e74 	.word	0x24000e74
 800b2ec:	24000e34 	.word	0x24000e34
 800b2f0:	24000e7c 	.word	0x24000e7c
 800b2f4:	240009a4 	.word	0x240009a4
 800b2f8:	240009a0 	.word	0x240009a0
 800b2fc:	24000e88 	.word	0x24000e88
 800b300:	24000e84 	.word	0x24000e84
 800b304:	e000ed04 	.word	0xe000ed04

0800b308 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b30e:	4b05      	ldr	r3, [pc, #20]	; (800b324 <xTaskGetTickCount+0x1c>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b314:	687b      	ldr	r3, [r7, #4]
}
 800b316:	4618      	mov	r0, r3
 800b318:	370c      	adds	r7, #12
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop
 800b324:	24000e78 	.word	0x24000e78

0800b328 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b32e:	2300      	movs	r3, #0
 800b330:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b332:	4b4f      	ldr	r3, [pc, #316]	; (800b470 <xTaskIncrementTick+0x148>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	f040 808f 	bne.w	800b45a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b33c:	4b4d      	ldr	r3, [pc, #308]	; (800b474 <xTaskIncrementTick+0x14c>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3301      	adds	r3, #1
 800b342:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b344:	4a4b      	ldr	r2, [pc, #300]	; (800b474 <xTaskIncrementTick+0x14c>)
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d120      	bne.n	800b392 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b350:	4b49      	ldr	r3, [pc, #292]	; (800b478 <xTaskIncrementTick+0x150>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00a      	beq.n	800b370 <xTaskIncrementTick+0x48>
	__asm volatile
 800b35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35e:	f383 8811 	msr	BASEPRI, r3
 800b362:	f3bf 8f6f 	isb	sy
 800b366:	f3bf 8f4f 	dsb	sy
 800b36a:	603b      	str	r3, [r7, #0]
}
 800b36c:	bf00      	nop
 800b36e:	e7fe      	b.n	800b36e <xTaskIncrementTick+0x46>
 800b370:	4b41      	ldr	r3, [pc, #260]	; (800b478 <xTaskIncrementTick+0x150>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	60fb      	str	r3, [r7, #12]
 800b376:	4b41      	ldr	r3, [pc, #260]	; (800b47c <xTaskIncrementTick+0x154>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a3f      	ldr	r2, [pc, #252]	; (800b478 <xTaskIncrementTick+0x150>)
 800b37c:	6013      	str	r3, [r2, #0]
 800b37e:	4a3f      	ldr	r2, [pc, #252]	; (800b47c <xTaskIncrementTick+0x154>)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6013      	str	r3, [r2, #0]
 800b384:	4b3e      	ldr	r3, [pc, #248]	; (800b480 <xTaskIncrementTick+0x158>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3301      	adds	r3, #1
 800b38a:	4a3d      	ldr	r2, [pc, #244]	; (800b480 <xTaskIncrementTick+0x158>)
 800b38c:	6013      	str	r3, [r2, #0]
 800b38e:	f000 fadb 	bl	800b948 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b392:	4b3c      	ldr	r3, [pc, #240]	; (800b484 <xTaskIncrementTick+0x15c>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	693a      	ldr	r2, [r7, #16]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d349      	bcc.n	800b430 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b39c:	4b36      	ldr	r3, [pc, #216]	; (800b478 <xTaskIncrementTick+0x150>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d104      	bne.n	800b3b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3a6:	4b37      	ldr	r3, [pc, #220]	; (800b484 <xTaskIncrementTick+0x15c>)
 800b3a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ac:	601a      	str	r2, [r3, #0]
					break;
 800b3ae:	e03f      	b.n	800b430 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3b0:	4b31      	ldr	r3, [pc, #196]	; (800b478 <xTaskIncrementTick+0x150>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b3c0:	693a      	ldr	r2, [r7, #16]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d203      	bcs.n	800b3d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b3c8:	4a2e      	ldr	r2, [pc, #184]	; (800b484 <xTaskIncrementTick+0x15c>)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b3ce:	e02f      	b.n	800b430 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	3304      	adds	r3, #4
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7fe ff73 	bl	800a2c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d004      	beq.n	800b3ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	3318      	adds	r3, #24
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fe ff6a 	bl	800a2c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f0:	4b25      	ldr	r3, [pc, #148]	; (800b488 <xTaskIncrementTick+0x160>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d903      	bls.n	800b400 <xTaskIncrementTick+0xd8>
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fc:	4a22      	ldr	r2, [pc, #136]	; (800b488 <xTaskIncrementTick+0x160>)
 800b3fe:	6013      	str	r3, [r2, #0]
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b404:	4613      	mov	r3, r2
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	4a1f      	ldr	r2, [pc, #124]	; (800b48c <xTaskIncrementTick+0x164>)
 800b40e:	441a      	add	r2, r3
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	3304      	adds	r3, #4
 800b414:	4619      	mov	r1, r3
 800b416:	4610      	mov	r0, r2
 800b418:	f7fe fef5 	bl	800a206 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b420:	4b1b      	ldr	r3, [pc, #108]	; (800b490 <xTaskIncrementTick+0x168>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b426:	429a      	cmp	r2, r3
 800b428:	d3b8      	bcc.n	800b39c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b42a:	2301      	movs	r3, #1
 800b42c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b42e:	e7b5      	b.n	800b39c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b430:	4b17      	ldr	r3, [pc, #92]	; (800b490 <xTaskIncrementTick+0x168>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b436:	4915      	ldr	r1, [pc, #84]	; (800b48c <xTaskIncrementTick+0x164>)
 800b438:	4613      	mov	r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	440b      	add	r3, r1
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b01      	cmp	r3, #1
 800b446:	d901      	bls.n	800b44c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b448:	2301      	movs	r3, #1
 800b44a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b44c:	4b11      	ldr	r3, [pc, #68]	; (800b494 <xTaskIncrementTick+0x16c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d007      	beq.n	800b464 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b454:	2301      	movs	r3, #1
 800b456:	617b      	str	r3, [r7, #20]
 800b458:	e004      	b.n	800b464 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b45a:	4b0f      	ldr	r3, [pc, #60]	; (800b498 <xTaskIncrementTick+0x170>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	3301      	adds	r3, #1
 800b460:	4a0d      	ldr	r2, [pc, #52]	; (800b498 <xTaskIncrementTick+0x170>)
 800b462:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b464:	697b      	ldr	r3, [r7, #20]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3718      	adds	r7, #24
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	24000e9c 	.word	0x24000e9c
 800b474:	24000e78 	.word	0x24000e78
 800b478:	24000e2c 	.word	0x24000e2c
 800b47c:	24000e30 	.word	0x24000e30
 800b480:	24000e8c 	.word	0x24000e8c
 800b484:	24000e94 	.word	0x24000e94
 800b488:	24000e7c 	.word	0x24000e7c
 800b48c:	240009a4 	.word	0x240009a4
 800b490:	240009a0 	.word	0x240009a0
 800b494:	24000e88 	.word	0x24000e88
 800b498:	24000e84 	.word	0x24000e84

0800b49c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b4a2:	4b2a      	ldr	r3, [pc, #168]	; (800b54c <vTaskSwitchContext+0xb0>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d003      	beq.n	800b4b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b4aa:	4b29      	ldr	r3, [pc, #164]	; (800b550 <vTaskSwitchContext+0xb4>)
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b4b0:	e046      	b.n	800b540 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b4b2:	4b27      	ldr	r3, [pc, #156]	; (800b550 <vTaskSwitchContext+0xb4>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4b8:	4b26      	ldr	r3, [pc, #152]	; (800b554 <vTaskSwitchContext+0xb8>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	60fb      	str	r3, [r7, #12]
 800b4be:	e010      	b.n	800b4e2 <vTaskSwitchContext+0x46>
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10a      	bne.n	800b4dc <vTaskSwitchContext+0x40>
	__asm volatile
 800b4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ca:	f383 8811 	msr	BASEPRI, r3
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	607b      	str	r3, [r7, #4]
}
 800b4d8:	bf00      	nop
 800b4da:	e7fe      	b.n	800b4da <vTaskSwitchContext+0x3e>
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	60fb      	str	r3, [r7, #12]
 800b4e2:	491d      	ldr	r1, [pc, #116]	; (800b558 <vTaskSwitchContext+0xbc>)
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	4413      	add	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	440b      	add	r3, r1
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d0e4      	beq.n	800b4c0 <vTaskSwitchContext+0x24>
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	4413      	add	r3, r2
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	4a15      	ldr	r2, [pc, #84]	; (800b558 <vTaskSwitchContext+0xbc>)
 800b502:	4413      	add	r3, r2
 800b504:	60bb      	str	r3, [r7, #8]
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	685a      	ldr	r2, [r3, #4]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	605a      	str	r2, [r3, #4]
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	685a      	ldr	r2, [r3, #4]
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	3308      	adds	r3, #8
 800b518:	429a      	cmp	r2, r3
 800b51a:	d104      	bne.n	800b526 <vTaskSwitchContext+0x8a>
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	685a      	ldr	r2, [r3, #4]
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	605a      	str	r2, [r3, #4]
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	4a0b      	ldr	r2, [pc, #44]	; (800b55c <vTaskSwitchContext+0xc0>)
 800b52e:	6013      	str	r3, [r2, #0]
 800b530:	4a08      	ldr	r2, [pc, #32]	; (800b554 <vTaskSwitchContext+0xb8>)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b536:	4b09      	ldr	r3, [pc, #36]	; (800b55c <vTaskSwitchContext+0xc0>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3354      	adds	r3, #84	; 0x54
 800b53c:	4a08      	ldr	r2, [pc, #32]	; (800b560 <vTaskSwitchContext+0xc4>)
 800b53e:	6013      	str	r3, [r2, #0]
}
 800b540:	bf00      	nop
 800b542:	3714      	adds	r7, #20
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	24000e9c 	.word	0x24000e9c
 800b550:	24000e88 	.word	0x24000e88
 800b554:	24000e7c 	.word	0x24000e7c
 800b558:	240009a4 	.word	0x240009a4
 800b55c:	240009a0 	.word	0x240009a0
 800b560:	24000060 	.word	0x24000060

0800b564 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d10a      	bne.n	800b58a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b578:	f383 8811 	msr	BASEPRI, r3
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	60fb      	str	r3, [r7, #12]
}
 800b586:	bf00      	nop
 800b588:	e7fe      	b.n	800b588 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b58a:	4b07      	ldr	r3, [pc, #28]	; (800b5a8 <vTaskPlaceOnEventList+0x44>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	3318      	adds	r3, #24
 800b590:	4619      	mov	r1, r3
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7fe fe5b 	bl	800a24e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b598:	2101      	movs	r1, #1
 800b59a:	6838      	ldr	r0, [r7, #0]
 800b59c:	f000 facc 	bl	800bb38 <prvAddCurrentTaskToDelayedList>
}
 800b5a0:	bf00      	nop
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	240009a0 	.word	0x240009a0

0800b5ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b086      	sub	sp, #24
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10a      	bne.n	800b5d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	617b      	str	r3, [r7, #20]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5d4:	4b0a      	ldr	r3, [pc, #40]	; (800b600 <vTaskPlaceOnEventListRestricted+0x54>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	3318      	adds	r3, #24
 800b5da:	4619      	mov	r1, r3
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f7fe fe12 	bl	800a206 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d002      	beq.n	800b5ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5ee:	6879      	ldr	r1, [r7, #4]
 800b5f0:	68b8      	ldr	r0, [r7, #8]
 800b5f2:	f000 faa1 	bl	800bb38 <prvAddCurrentTaskToDelayedList>
	}
 800b5f6:	bf00      	nop
 800b5f8:	3718      	adds	r7, #24
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	240009a0 	.word	0x240009a0

0800b604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b086      	sub	sp, #24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d10a      	bne.n	800b630 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	60fb      	str	r3, [r7, #12]
}
 800b62c:	bf00      	nop
 800b62e:	e7fe      	b.n	800b62e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	3318      	adds	r3, #24
 800b634:	4618      	mov	r0, r3
 800b636:	f7fe fe43 	bl	800a2c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b63a:	4b1e      	ldr	r3, [pc, #120]	; (800b6b4 <xTaskRemoveFromEventList+0xb0>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d11d      	bne.n	800b67e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	3304      	adds	r3, #4
 800b646:	4618      	mov	r0, r3
 800b648:	f7fe fe3a 	bl	800a2c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b650:	4b19      	ldr	r3, [pc, #100]	; (800b6b8 <xTaskRemoveFromEventList+0xb4>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	429a      	cmp	r2, r3
 800b656:	d903      	bls.n	800b660 <xTaskRemoveFromEventList+0x5c>
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65c:	4a16      	ldr	r2, [pc, #88]	; (800b6b8 <xTaskRemoveFromEventList+0xb4>)
 800b65e:	6013      	str	r3, [r2, #0]
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b664:	4613      	mov	r3, r2
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	4413      	add	r3, r2
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	4a13      	ldr	r2, [pc, #76]	; (800b6bc <xTaskRemoveFromEventList+0xb8>)
 800b66e:	441a      	add	r2, r3
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	3304      	adds	r3, #4
 800b674:	4619      	mov	r1, r3
 800b676:	4610      	mov	r0, r2
 800b678:	f7fe fdc5 	bl	800a206 <vListInsertEnd>
 800b67c:	e005      	b.n	800b68a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	3318      	adds	r3, #24
 800b682:	4619      	mov	r1, r3
 800b684:	480e      	ldr	r0, [pc, #56]	; (800b6c0 <xTaskRemoveFromEventList+0xbc>)
 800b686:	f7fe fdbe 	bl	800a206 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b68e:	4b0d      	ldr	r3, [pc, #52]	; (800b6c4 <xTaskRemoveFromEventList+0xc0>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b694:	429a      	cmp	r2, r3
 800b696:	d905      	bls.n	800b6a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b698:	2301      	movs	r3, #1
 800b69a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b69c:	4b0a      	ldr	r3, [pc, #40]	; (800b6c8 <xTaskRemoveFromEventList+0xc4>)
 800b69e:	2201      	movs	r2, #1
 800b6a0:	601a      	str	r2, [r3, #0]
 800b6a2:	e001      	b.n	800b6a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b6a8:	697b      	ldr	r3, [r7, #20]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3718      	adds	r7, #24
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	24000e9c 	.word	0x24000e9c
 800b6b8:	24000e7c 	.word	0x24000e7c
 800b6bc:	240009a4 	.word	0x240009a4
 800b6c0:	24000e34 	.word	0x24000e34
 800b6c4:	240009a0 	.word	0x240009a0
 800b6c8:	24000e88 	.word	0x24000e88

0800b6cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6d4:	4b06      	ldr	r3, [pc, #24]	; (800b6f0 <vTaskInternalSetTimeOutState+0x24>)
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b6dc:	4b05      	ldr	r3, [pc, #20]	; (800b6f4 <vTaskInternalSetTimeOutState+0x28>)
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	605a      	str	r2, [r3, #4]
}
 800b6e4:	bf00      	nop
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr
 800b6f0:	24000e8c 	.word	0x24000e8c
 800b6f4:	24000e78 	.word	0x24000e78

0800b6f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b088      	sub	sp, #32
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d10a      	bne.n	800b71e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70c:	f383 8811 	msr	BASEPRI, r3
 800b710:	f3bf 8f6f 	isb	sy
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	613b      	str	r3, [r7, #16]
}
 800b71a:	bf00      	nop
 800b71c:	e7fe      	b.n	800b71c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10a      	bne.n	800b73a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b728:	f383 8811 	msr	BASEPRI, r3
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	60fb      	str	r3, [r7, #12]
}
 800b736:	bf00      	nop
 800b738:	e7fe      	b.n	800b738 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b73a:	f000 fecb 	bl	800c4d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b73e:	4b1d      	ldr	r3, [pc, #116]	; (800b7b4 <xTaskCheckForTimeOut+0xbc>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	69ba      	ldr	r2, [r7, #24]
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b756:	d102      	bne.n	800b75e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b758:	2300      	movs	r3, #0
 800b75a:	61fb      	str	r3, [r7, #28]
 800b75c:	e023      	b.n	800b7a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	4b15      	ldr	r3, [pc, #84]	; (800b7b8 <xTaskCheckForTimeOut+0xc0>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	429a      	cmp	r2, r3
 800b768:	d007      	beq.n	800b77a <xTaskCheckForTimeOut+0x82>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	69ba      	ldr	r2, [r7, #24]
 800b770:	429a      	cmp	r2, r3
 800b772:	d302      	bcc.n	800b77a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b774:	2301      	movs	r3, #1
 800b776:	61fb      	str	r3, [r7, #28]
 800b778:	e015      	b.n	800b7a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	697a      	ldr	r2, [r7, #20]
 800b780:	429a      	cmp	r2, r3
 800b782:	d20b      	bcs.n	800b79c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	1ad2      	subs	r2, r2, r3
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f7ff ff9b 	bl	800b6cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b796:	2300      	movs	r3, #0
 800b798:	61fb      	str	r3, [r7, #28]
 800b79a:	e004      	b.n	800b7a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b7a6:	f000 fec5 	bl	800c534 <vPortExitCritical>

	return xReturn;
 800b7aa:	69fb      	ldr	r3, [r7, #28]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3720      	adds	r7, #32
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	24000e78 	.word	0x24000e78
 800b7b8:	24000e8c 	.word	0x24000e8c

0800b7bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b7bc:	b480      	push	{r7}
 800b7be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b7c0:	4b03      	ldr	r3, [pc, #12]	; (800b7d0 <vTaskMissedYield+0x14>)
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	601a      	str	r2, [r3, #0]
}
 800b7c6:	bf00      	nop
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr
 800b7d0:	24000e88 	.word	0x24000e88

0800b7d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b7dc:	f000 f852 	bl	800b884 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b7e0:	4b06      	ldr	r3, [pc, #24]	; (800b7fc <prvIdleTask+0x28>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d9f9      	bls.n	800b7dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b7e8:	4b05      	ldr	r3, [pc, #20]	; (800b800 <prvIdleTask+0x2c>)
 800b7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ee:	601a      	str	r2, [r3, #0]
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b7f8:	e7f0      	b.n	800b7dc <prvIdleTask+0x8>
 800b7fa:	bf00      	nop
 800b7fc:	240009a4 	.word	0x240009a4
 800b800:	e000ed04 	.word	0xe000ed04

0800b804 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b80a:	2300      	movs	r3, #0
 800b80c:	607b      	str	r3, [r7, #4]
 800b80e:	e00c      	b.n	800b82a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	4613      	mov	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	4413      	add	r3, r2
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	4a12      	ldr	r2, [pc, #72]	; (800b864 <prvInitialiseTaskLists+0x60>)
 800b81c:	4413      	add	r3, r2
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fe fcc4 	bl	800a1ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	3301      	adds	r3, #1
 800b828:	607b      	str	r3, [r7, #4]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2b37      	cmp	r3, #55	; 0x37
 800b82e:	d9ef      	bls.n	800b810 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b830:	480d      	ldr	r0, [pc, #52]	; (800b868 <prvInitialiseTaskLists+0x64>)
 800b832:	f7fe fcbb 	bl	800a1ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b836:	480d      	ldr	r0, [pc, #52]	; (800b86c <prvInitialiseTaskLists+0x68>)
 800b838:	f7fe fcb8 	bl	800a1ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b83c:	480c      	ldr	r0, [pc, #48]	; (800b870 <prvInitialiseTaskLists+0x6c>)
 800b83e:	f7fe fcb5 	bl	800a1ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b842:	480c      	ldr	r0, [pc, #48]	; (800b874 <prvInitialiseTaskLists+0x70>)
 800b844:	f7fe fcb2 	bl	800a1ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b848:	480b      	ldr	r0, [pc, #44]	; (800b878 <prvInitialiseTaskLists+0x74>)
 800b84a:	f7fe fcaf 	bl	800a1ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b84e:	4b0b      	ldr	r3, [pc, #44]	; (800b87c <prvInitialiseTaskLists+0x78>)
 800b850:	4a05      	ldr	r2, [pc, #20]	; (800b868 <prvInitialiseTaskLists+0x64>)
 800b852:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b854:	4b0a      	ldr	r3, [pc, #40]	; (800b880 <prvInitialiseTaskLists+0x7c>)
 800b856:	4a05      	ldr	r2, [pc, #20]	; (800b86c <prvInitialiseTaskLists+0x68>)
 800b858:	601a      	str	r2, [r3, #0]
}
 800b85a:	bf00      	nop
 800b85c:	3708      	adds	r7, #8
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	240009a4 	.word	0x240009a4
 800b868:	24000e04 	.word	0x24000e04
 800b86c:	24000e18 	.word	0x24000e18
 800b870:	24000e34 	.word	0x24000e34
 800b874:	24000e48 	.word	0x24000e48
 800b878:	24000e60 	.word	0x24000e60
 800b87c:	24000e2c 	.word	0x24000e2c
 800b880:	24000e30 	.word	0x24000e30

0800b884 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b88a:	e019      	b.n	800b8c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b88c:	f000 fe22 	bl	800c4d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b890:	4b10      	ldr	r3, [pc, #64]	; (800b8d4 <prvCheckTasksWaitingTermination+0x50>)
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	3304      	adds	r3, #4
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fe fd0f 	bl	800a2c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b8a2:	4b0d      	ldr	r3, [pc, #52]	; (800b8d8 <prvCheckTasksWaitingTermination+0x54>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	3b01      	subs	r3, #1
 800b8a8:	4a0b      	ldr	r2, [pc, #44]	; (800b8d8 <prvCheckTasksWaitingTermination+0x54>)
 800b8aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b8ac:	4b0b      	ldr	r3, [pc, #44]	; (800b8dc <prvCheckTasksWaitingTermination+0x58>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	4a0a      	ldr	r2, [pc, #40]	; (800b8dc <prvCheckTasksWaitingTermination+0x58>)
 800b8b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b8b6:	f000 fe3d 	bl	800c534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f810 	bl	800b8e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8c0:	4b06      	ldr	r3, [pc, #24]	; (800b8dc <prvCheckTasksWaitingTermination+0x58>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1e1      	bne.n	800b88c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b8c8:	bf00      	nop
 800b8ca:	bf00      	nop
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	24000e48 	.word	0x24000e48
 800b8d8:	24000e74 	.word	0x24000e74
 800b8dc:	24000e5c 	.word	0x24000e5c

0800b8e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	3354      	adds	r3, #84	; 0x54
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f001 f905 	bl	800cafc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d108      	bne.n	800b90e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b900:	4618      	mov	r0, r3
 800b902:	f000 ffd5 	bl	800c8b0 <vPortFree>
				vPortFree( pxTCB );
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 ffd2 	bl	800c8b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b90c:	e018      	b.n	800b940 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b914:	2b01      	cmp	r3, #1
 800b916:	d103      	bne.n	800b920 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 ffc9 	bl	800c8b0 <vPortFree>
	}
 800b91e:	e00f      	b.n	800b940 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b926:	2b02      	cmp	r3, #2
 800b928:	d00a      	beq.n	800b940 <prvDeleteTCB+0x60>
	__asm volatile
 800b92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92e:	f383 8811 	msr	BASEPRI, r3
 800b932:	f3bf 8f6f 	isb	sy
 800b936:	f3bf 8f4f 	dsb	sy
 800b93a:	60fb      	str	r3, [r7, #12]
}
 800b93c:	bf00      	nop
 800b93e:	e7fe      	b.n	800b93e <prvDeleteTCB+0x5e>
	}
 800b940:	bf00      	nop
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b94e:	4b0c      	ldr	r3, [pc, #48]	; (800b980 <prvResetNextTaskUnblockTime+0x38>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d104      	bne.n	800b962 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b958:	4b0a      	ldr	r3, [pc, #40]	; (800b984 <prvResetNextTaskUnblockTime+0x3c>)
 800b95a:	f04f 32ff 	mov.w	r2, #4294967295
 800b95e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b960:	e008      	b.n	800b974 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b962:	4b07      	ldr	r3, [pc, #28]	; (800b980 <prvResetNextTaskUnblockTime+0x38>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	4a04      	ldr	r2, [pc, #16]	; (800b984 <prvResetNextTaskUnblockTime+0x3c>)
 800b972:	6013      	str	r3, [r2, #0]
}
 800b974:	bf00      	nop
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr
 800b980:	24000e2c 	.word	0x24000e2c
 800b984:	24000e94 	.word	0x24000e94

0800b988 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b98e:	4b0b      	ldr	r3, [pc, #44]	; (800b9bc <xTaskGetSchedulerState+0x34>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d102      	bne.n	800b99c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b996:	2301      	movs	r3, #1
 800b998:	607b      	str	r3, [r7, #4]
 800b99a:	e008      	b.n	800b9ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b99c:	4b08      	ldr	r3, [pc, #32]	; (800b9c0 <xTaskGetSchedulerState+0x38>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d102      	bne.n	800b9aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b9a4:	2302      	movs	r3, #2
 800b9a6:	607b      	str	r3, [r7, #4]
 800b9a8:	e001      	b.n	800b9ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b9ae:	687b      	ldr	r3, [r7, #4]
	}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	370c      	adds	r7, #12
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr
 800b9bc:	24000e80 	.word	0x24000e80
 800b9c0:	24000e9c 	.word	0x24000e9c

0800b9c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d056      	beq.n	800ba88 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9da:	4b2e      	ldr	r3, [pc, #184]	; (800ba94 <xTaskPriorityDisinherit+0xd0>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	693a      	ldr	r2, [r7, #16]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d00a      	beq.n	800b9fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	60fb      	str	r3, [r7, #12]
}
 800b9f6:	bf00      	nop
 800b9f8:	e7fe      	b.n	800b9f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d10a      	bne.n	800ba18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ba02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba06:	f383 8811 	msr	BASEPRI, r3
 800ba0a:	f3bf 8f6f 	isb	sy
 800ba0e:	f3bf 8f4f 	dsb	sy
 800ba12:	60bb      	str	r3, [r7, #8]
}
 800ba14:	bf00      	nop
 800ba16:	e7fe      	b.n	800ba16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba1c:	1e5a      	subs	r2, r3, #1
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d02c      	beq.n	800ba88 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d128      	bne.n	800ba88 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	3304      	adds	r3, #4
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fe fc40 	bl	800a2c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba58:	4b0f      	ldr	r3, [pc, #60]	; (800ba98 <xTaskPriorityDisinherit+0xd4>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d903      	bls.n	800ba68 <xTaskPriorityDisinherit+0xa4>
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba64:	4a0c      	ldr	r2, [pc, #48]	; (800ba98 <xTaskPriorityDisinherit+0xd4>)
 800ba66:	6013      	str	r3, [r2, #0]
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	4413      	add	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4a09      	ldr	r2, [pc, #36]	; (800ba9c <xTaskPriorityDisinherit+0xd8>)
 800ba76:	441a      	add	r2, r3
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4610      	mov	r0, r2
 800ba80:	f7fe fbc1 	bl	800a206 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba84:	2301      	movs	r3, #1
 800ba86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba88:	697b      	ldr	r3, [r7, #20]
	}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3718      	adds	r7, #24
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	240009a0 	.word	0x240009a0
 800ba98:	24000e7c 	.word	0x24000e7c
 800ba9c:	240009a4 	.word	0x240009a4

0800baa0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800baaa:	f000 fd13 	bl	800c4d4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800baae:	4b20      	ldr	r3, [pc, #128]	; (800bb30 <ulTaskNotifyTake+0x90>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d113      	bne.n	800bae2 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800baba:	4b1d      	ldr	r3, [pc, #116]	; (800bb30 <ulTaskNotifyTake+0x90>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00b      	beq.n	800bae2 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800baca:	2101      	movs	r1, #1
 800bacc:	6838      	ldr	r0, [r7, #0]
 800bace:	f000 f833 	bl	800bb38 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bad2:	4b18      	ldr	r3, [pc, #96]	; (800bb34 <ulTaskNotifyTake+0x94>)
 800bad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bad8:	601a      	str	r2, [r3, #0]
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bae2:	f000 fd27 	bl	800c534 <vPortExitCritical>

		taskENTER_CRITICAL();
 800bae6:	f000 fcf5 	bl	800c4d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800baea:	4b11      	ldr	r3, [pc, #68]	; (800bb30 <ulTaskNotifyTake+0x90>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800baf2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00e      	beq.n	800bb18 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d005      	beq.n	800bb0c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800bb00:	4b0b      	ldr	r3, [pc, #44]	; (800bb30 <ulTaskNotifyTake+0x90>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2200      	movs	r2, #0
 800bb06:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800bb0a:	e005      	b.n	800bb18 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800bb0c:	4b08      	ldr	r3, [pc, #32]	; (800bb30 <ulTaskNotifyTake+0x90>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	3a01      	subs	r2, #1
 800bb14:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb18:	4b05      	ldr	r3, [pc, #20]	; (800bb30 <ulTaskNotifyTake+0x90>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 800bb22:	f000 fd07 	bl	800c534 <vPortExitCritical>

		return ulReturn;
 800bb26:	68fb      	ldr	r3, [r7, #12]
	}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	240009a0 	.word	0x240009a0
 800bb34:	e000ed04 	.word	0xe000ed04

0800bb38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb42:	4b21      	ldr	r3, [pc, #132]	; (800bbc8 <prvAddCurrentTaskToDelayedList+0x90>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb48:	4b20      	ldr	r3, [pc, #128]	; (800bbcc <prvAddCurrentTaskToDelayedList+0x94>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	3304      	adds	r3, #4
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7fe fbb6 	bl	800a2c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb5a:	d10a      	bne.n	800bb72 <prvAddCurrentTaskToDelayedList+0x3a>
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d007      	beq.n	800bb72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb62:	4b1a      	ldr	r3, [pc, #104]	; (800bbcc <prvAddCurrentTaskToDelayedList+0x94>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	3304      	adds	r3, #4
 800bb68:	4619      	mov	r1, r3
 800bb6a:	4819      	ldr	r0, [pc, #100]	; (800bbd0 <prvAddCurrentTaskToDelayedList+0x98>)
 800bb6c:	f7fe fb4b 	bl	800a206 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb70:	e026      	b.n	800bbc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4413      	add	r3, r2
 800bb78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb7a:	4b14      	ldr	r3, [pc, #80]	; (800bbcc <prvAddCurrentTaskToDelayedList+0x94>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	68ba      	ldr	r2, [r7, #8]
 800bb80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d209      	bcs.n	800bb9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb8a:	4b12      	ldr	r3, [pc, #72]	; (800bbd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	4b0f      	ldr	r3, [pc, #60]	; (800bbcc <prvAddCurrentTaskToDelayedList+0x94>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3304      	adds	r3, #4
 800bb94:	4619      	mov	r1, r3
 800bb96:	4610      	mov	r0, r2
 800bb98:	f7fe fb59 	bl	800a24e <vListInsert>
}
 800bb9c:	e010      	b.n	800bbc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb9e:	4b0e      	ldr	r3, [pc, #56]	; (800bbd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	4b0a      	ldr	r3, [pc, #40]	; (800bbcc <prvAddCurrentTaskToDelayedList+0x94>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	3304      	adds	r3, #4
 800bba8:	4619      	mov	r1, r3
 800bbaa:	4610      	mov	r0, r2
 800bbac:	f7fe fb4f 	bl	800a24e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bbb0:	4b0a      	ldr	r3, [pc, #40]	; (800bbdc <prvAddCurrentTaskToDelayedList+0xa4>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68ba      	ldr	r2, [r7, #8]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d202      	bcs.n	800bbc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bbba:	4a08      	ldr	r2, [pc, #32]	; (800bbdc <prvAddCurrentTaskToDelayedList+0xa4>)
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	6013      	str	r3, [r2, #0]
}
 800bbc0:	bf00      	nop
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	24000e78 	.word	0x24000e78
 800bbcc:	240009a0 	.word	0x240009a0
 800bbd0:	24000e60 	.word	0x24000e60
 800bbd4:	24000e30 	.word	0x24000e30
 800bbd8:	24000e2c 	.word	0x24000e2c
 800bbdc:	24000e94 	.word	0x24000e94

0800bbe0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b08a      	sub	sp, #40	; 0x28
 800bbe4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bbea:	f000 fb07 	bl	800c1fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bbee:	4b1c      	ldr	r3, [pc, #112]	; (800bc60 <xTimerCreateTimerTask+0x80>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d021      	beq.n	800bc3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bbfe:	1d3a      	adds	r2, r7, #4
 800bc00:	f107 0108 	add.w	r1, r7, #8
 800bc04:	f107 030c 	add.w	r3, r7, #12
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7fe fab5 	bl	800a178 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc0e:	6879      	ldr	r1, [r7, #4]
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	68fa      	ldr	r2, [r7, #12]
 800bc14:	9202      	str	r2, [sp, #8]
 800bc16:	9301      	str	r3, [sp, #4]
 800bc18:	2302      	movs	r3, #2
 800bc1a:	9300      	str	r3, [sp, #0]
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	460a      	mov	r2, r1
 800bc20:	4910      	ldr	r1, [pc, #64]	; (800bc64 <xTimerCreateTimerTask+0x84>)
 800bc22:	4811      	ldr	r0, [pc, #68]	; (800bc68 <xTimerCreateTimerTask+0x88>)
 800bc24:	f7ff f89c 	bl	800ad60 <xTaskCreateStatic>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	4a10      	ldr	r2, [pc, #64]	; (800bc6c <xTimerCreateTimerTask+0x8c>)
 800bc2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc2e:	4b0f      	ldr	r3, [pc, #60]	; (800bc6c <xTimerCreateTimerTask+0x8c>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d001      	beq.n	800bc3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc36:	2301      	movs	r3, #1
 800bc38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d10a      	bne.n	800bc56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	613b      	str	r3, [r7, #16]
}
 800bc52:	bf00      	nop
 800bc54:	e7fe      	b.n	800bc54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bc56:	697b      	ldr	r3, [r7, #20]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	24000ed0 	.word	0x24000ed0
 800bc64:	0800cd00 	.word	0x0800cd00
 800bc68:	0800bda5 	.word	0x0800bda5
 800bc6c:	24000ed4 	.word	0x24000ed4

0800bc70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b08a      	sub	sp, #40	; 0x28
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
 800bc7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10a      	bne.n	800bc9e <xTimerGenericCommand+0x2e>
	__asm volatile
 800bc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8c:	f383 8811 	msr	BASEPRI, r3
 800bc90:	f3bf 8f6f 	isb	sy
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	623b      	str	r3, [r7, #32]
}
 800bc9a:	bf00      	nop
 800bc9c:	e7fe      	b.n	800bc9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bc9e:	4b1a      	ldr	r3, [pc, #104]	; (800bd08 <xTimerGenericCommand+0x98>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d02a      	beq.n	800bcfc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	2b05      	cmp	r3, #5
 800bcb6:	dc18      	bgt.n	800bcea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bcb8:	f7ff fe66 	bl	800b988 <xTaskGetSchedulerState>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b02      	cmp	r3, #2
 800bcc0:	d109      	bne.n	800bcd6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bcc2:	4b11      	ldr	r3, [pc, #68]	; (800bd08 <xTimerGenericCommand+0x98>)
 800bcc4:	6818      	ldr	r0, [r3, #0]
 800bcc6:	f107 0110 	add.w	r1, r7, #16
 800bcca:	2300      	movs	r3, #0
 800bccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcce:	f7fe fc5f 	bl	800a590 <xQueueGenericSend>
 800bcd2:	6278      	str	r0, [r7, #36]	; 0x24
 800bcd4:	e012      	b.n	800bcfc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bcd6:	4b0c      	ldr	r3, [pc, #48]	; (800bd08 <xTimerGenericCommand+0x98>)
 800bcd8:	6818      	ldr	r0, [r3, #0]
 800bcda:	f107 0110 	add.w	r1, r7, #16
 800bcde:	2300      	movs	r3, #0
 800bce0:	2200      	movs	r2, #0
 800bce2:	f7fe fc55 	bl	800a590 <xQueueGenericSend>
 800bce6:	6278      	str	r0, [r7, #36]	; 0x24
 800bce8:	e008      	b.n	800bcfc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bcea:	4b07      	ldr	r3, [pc, #28]	; (800bd08 <xTimerGenericCommand+0x98>)
 800bcec:	6818      	ldr	r0, [r3, #0]
 800bcee:	f107 0110 	add.w	r1, r7, #16
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	683a      	ldr	r2, [r7, #0]
 800bcf6:	f7fe fd49 	bl	800a78c <xQueueGenericSendFromISR>
 800bcfa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3728      	adds	r7, #40	; 0x28
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	24000ed0 	.word	0x24000ed0

0800bd0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b088      	sub	sp, #32
 800bd10:	af02      	add	r7, sp, #8
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd16:	4b22      	ldr	r3, [pc, #136]	; (800bda0 <prvProcessExpiredTimer+0x94>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	3304      	adds	r3, #4
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7fe facb 	bl	800a2c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd30:	f003 0304 	and.w	r3, r3, #4
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d022      	beq.n	800bd7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	699a      	ldr	r2, [r3, #24]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	18d1      	adds	r1, r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	6978      	ldr	r0, [r7, #20]
 800bd46:	f000 f8d1 	bl	800beec <prvInsertTimerInActiveList>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d01f      	beq.n	800bd90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd50:	2300      	movs	r3, #0
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	2300      	movs	r3, #0
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	2100      	movs	r1, #0
 800bd5a:	6978      	ldr	r0, [r7, #20]
 800bd5c:	f7ff ff88 	bl	800bc70 <xTimerGenericCommand>
 800bd60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d113      	bne.n	800bd90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6c:	f383 8811 	msr	BASEPRI, r3
 800bd70:	f3bf 8f6f 	isb	sy
 800bd74:	f3bf 8f4f 	dsb	sy
 800bd78:	60fb      	str	r3, [r7, #12]
}
 800bd7a:	bf00      	nop
 800bd7c:	e7fe      	b.n	800bd7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd84:	f023 0301 	bic.w	r3, r3, #1
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	6a1b      	ldr	r3, [r3, #32]
 800bd94:	6978      	ldr	r0, [r7, #20]
 800bd96:	4798      	blx	r3
}
 800bd98:	bf00      	nop
 800bd9a:	3718      	adds	r7, #24
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	24000ec8 	.word	0x24000ec8

0800bda4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bdac:	f107 0308 	add.w	r3, r7, #8
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f000 f857 	bl	800be64 <prvGetNextExpireTime>
 800bdb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	4619      	mov	r1, r3
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	f000 f803 	bl	800bdc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bdc2:	f000 f8d5 	bl	800bf70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bdc6:	e7f1      	b.n	800bdac <prvTimerTask+0x8>

0800bdc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bdd2:	f7ff f9ed 	bl	800b1b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdd6:	f107 0308 	add.w	r3, r7, #8
 800bdda:	4618      	mov	r0, r3
 800bddc:	f000 f866 	bl	800beac <prvSampleTimeNow>
 800bde0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d130      	bne.n	800be4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10a      	bne.n	800be04 <prvProcessTimerOrBlockTask+0x3c>
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d806      	bhi.n	800be04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bdf6:	f7ff f9e9 	bl	800b1cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bdfa:	68f9      	ldr	r1, [r7, #12]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f7ff ff85 	bl	800bd0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be02:	e024      	b.n	800be4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d008      	beq.n	800be1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be0a:	4b13      	ldr	r3, [pc, #76]	; (800be58 <prvProcessTimerOrBlockTask+0x90>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <prvProcessTimerOrBlockTask+0x50>
 800be14:	2301      	movs	r3, #1
 800be16:	e000      	b.n	800be1a <prvProcessTimerOrBlockTask+0x52>
 800be18:	2300      	movs	r3, #0
 800be1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be1c:	4b0f      	ldr	r3, [pc, #60]	; (800be5c <prvProcessTimerOrBlockTask+0x94>)
 800be1e:	6818      	ldr	r0, [r3, #0]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	1ad3      	subs	r3, r2, r3
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	4619      	mov	r1, r3
 800be2a:	f7fe ff65 	bl	800acf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be2e:	f7ff f9cd 	bl	800b1cc <xTaskResumeAll>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d10a      	bne.n	800be4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be38:	4b09      	ldr	r3, [pc, #36]	; (800be60 <prvProcessTimerOrBlockTask+0x98>)
 800be3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	f3bf 8f6f 	isb	sy
}
 800be48:	e001      	b.n	800be4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800be4a:	f7ff f9bf 	bl	800b1cc <xTaskResumeAll>
}
 800be4e:	bf00      	nop
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	24000ecc 	.word	0x24000ecc
 800be5c:	24000ed0 	.word	0x24000ed0
 800be60:	e000ed04 	.word	0xe000ed04

0800be64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800be64:	b480      	push	{r7}
 800be66:	b085      	sub	sp, #20
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800be6c:	4b0e      	ldr	r3, [pc, #56]	; (800bea8 <prvGetNextExpireTime+0x44>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d101      	bne.n	800be7a <prvGetNextExpireTime+0x16>
 800be76:	2201      	movs	r2, #1
 800be78:	e000      	b.n	800be7c <prvGetNextExpireTime+0x18>
 800be7a:	2200      	movs	r2, #0
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d105      	bne.n	800be94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be88:	4b07      	ldr	r3, [pc, #28]	; (800bea8 <prvGetNextExpireTime+0x44>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	60fb      	str	r3, [r7, #12]
 800be92:	e001      	b.n	800be98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800be94:	2300      	movs	r3, #0
 800be96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800be98:	68fb      	ldr	r3, [r7, #12]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3714      	adds	r7, #20
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	24000ec8 	.word	0x24000ec8

0800beac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800beb4:	f7ff fa28 	bl	800b308 <xTaskGetTickCount>
 800beb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800beba:	4b0b      	ldr	r3, [pc, #44]	; (800bee8 <prvSampleTimeNow+0x3c>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d205      	bcs.n	800bed0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bec4:	f000 f936 	bl	800c134 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2201      	movs	r2, #1
 800becc:	601a      	str	r2, [r3, #0]
 800bece:	e002      	b.n	800bed6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bed6:	4a04      	ldr	r2, [pc, #16]	; (800bee8 <prvSampleTimeNow+0x3c>)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bedc:	68fb      	ldr	r3, [r7, #12]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	24000ed8 	.word	0x24000ed8

0800beec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
 800bef8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800befa:	2300      	movs	r3, #0
 800befc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d812      	bhi.n	800bf38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	1ad2      	subs	r2, r2, r3
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d302      	bcc.n	800bf26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf20:	2301      	movs	r3, #1
 800bf22:	617b      	str	r3, [r7, #20]
 800bf24:	e01b      	b.n	800bf5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf26:	4b10      	ldr	r3, [pc, #64]	; (800bf68 <prvInsertTimerInActiveList+0x7c>)
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	4619      	mov	r1, r3
 800bf30:	4610      	mov	r0, r2
 800bf32:	f7fe f98c 	bl	800a24e <vListInsert>
 800bf36:	e012      	b.n	800bf5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d206      	bcs.n	800bf4e <prvInsertTimerInActiveList+0x62>
 800bf40:	68ba      	ldr	r2, [r7, #8]
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d302      	bcc.n	800bf4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	617b      	str	r3, [r7, #20]
 800bf4c:	e007      	b.n	800bf5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf4e:	4b07      	ldr	r3, [pc, #28]	; (800bf6c <prvInsertTimerInActiveList+0x80>)
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	3304      	adds	r3, #4
 800bf56:	4619      	mov	r1, r3
 800bf58:	4610      	mov	r0, r2
 800bf5a:	f7fe f978 	bl	800a24e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bf5e:	697b      	ldr	r3, [r7, #20]
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3718      	adds	r7, #24
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	24000ecc 	.word	0x24000ecc
 800bf6c:	24000ec8 	.word	0x24000ec8

0800bf70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b08e      	sub	sp, #56	; 0x38
 800bf74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf76:	e0ca      	b.n	800c10e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	da18      	bge.n	800bfb0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bf7e:	1d3b      	adds	r3, r7, #4
 800bf80:	3304      	adds	r3, #4
 800bf82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d10a      	bne.n	800bfa0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8e:	f383 8811 	msr	BASEPRI, r3
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	f3bf 8f4f 	dsb	sy
 800bf9a:	61fb      	str	r3, [r7, #28]
}
 800bf9c:	bf00      	nop
 800bf9e:	e7fe      	b.n	800bf9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfa6:	6850      	ldr	r0, [r2, #4]
 800bfa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfaa:	6892      	ldr	r2, [r2, #8]
 800bfac:	4611      	mov	r1, r2
 800bfae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f2c0 80ab 	blt.w	800c10e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbe:	695b      	ldr	r3, [r3, #20]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d004      	beq.n	800bfce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7fe f979 	bl	800a2c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bfce:	463b      	mov	r3, r7
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7ff ff6b 	bl	800beac <prvSampleTimeNow>
 800bfd6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2b09      	cmp	r3, #9
 800bfdc:	f200 8096 	bhi.w	800c10c <prvProcessReceivedCommands+0x19c>
 800bfe0:	a201      	add	r2, pc, #4	; (adr r2, 800bfe8 <prvProcessReceivedCommands+0x78>)
 800bfe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe6:	bf00      	nop
 800bfe8:	0800c011 	.word	0x0800c011
 800bfec:	0800c011 	.word	0x0800c011
 800bff0:	0800c011 	.word	0x0800c011
 800bff4:	0800c085 	.word	0x0800c085
 800bff8:	0800c099 	.word	0x0800c099
 800bffc:	0800c0e3 	.word	0x0800c0e3
 800c000:	0800c011 	.word	0x0800c011
 800c004:	0800c011 	.word	0x0800c011
 800c008:	0800c085 	.word	0x0800c085
 800c00c:	0800c099 	.word	0x0800c099
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c016:	f043 0301 	orr.w	r3, r3, #1
 800c01a:	b2da      	uxtb	r2, r3
 800c01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c026:	699b      	ldr	r3, [r3, #24]
 800c028:	18d1      	adds	r1, r2, r3
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c02e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c030:	f7ff ff5c 	bl	800beec <prvInsertTimerInActiveList>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d069      	beq.n	800c10e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03c:	6a1b      	ldr	r3, [r3, #32]
 800c03e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c040:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c048:	f003 0304 	and.w	r3, r3, #4
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d05e      	beq.n	800c10e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c054:	699b      	ldr	r3, [r3, #24]
 800c056:	441a      	add	r2, r3
 800c058:	2300      	movs	r3, #0
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	2300      	movs	r3, #0
 800c05e:	2100      	movs	r1, #0
 800c060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c062:	f7ff fe05 	bl	800bc70 <xTimerGenericCommand>
 800c066:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c068:	6a3b      	ldr	r3, [r7, #32]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d14f      	bne.n	800c10e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	61bb      	str	r3, [r7, #24]
}
 800c080:	bf00      	nop
 800c082:	e7fe      	b.n	800c082 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c086:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c08a:	f023 0301 	bic.w	r3, r3, #1
 800c08e:	b2da      	uxtb	r2, r3
 800c090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c092:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c096:	e03a      	b.n	800c10e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c09e:	f043 0301 	orr.w	r3, r3, #1
 800c0a2:	b2da      	uxtb	r2, r3
 800c0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b2:	699b      	ldr	r3, [r3, #24]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d10a      	bne.n	800c0ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0bc:	f383 8811 	msr	BASEPRI, r3
 800c0c0:	f3bf 8f6f 	isb	sy
 800c0c4:	f3bf 8f4f 	dsb	sy
 800c0c8:	617b      	str	r3, [r7, #20]
}
 800c0ca:	bf00      	nop
 800c0cc:	e7fe      	b.n	800c0cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d0:	699a      	ldr	r2, [r3, #24]
 800c0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d4:	18d1      	adds	r1, r2, r3
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0dc:	f7ff ff06 	bl	800beec <prvInsertTimerInActiveList>
					break;
 800c0e0:	e015      	b.n	800c10e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0e8:	f003 0302 	and.w	r3, r3, #2
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d103      	bne.n	800c0f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c0f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0f2:	f000 fbdd 	bl	800c8b0 <vPortFree>
 800c0f6:	e00a      	b.n	800c10e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0fe:	f023 0301 	bic.w	r3, r3, #1
 800c102:	b2da      	uxtb	r2, r3
 800c104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c10a:	e000      	b.n	800c10e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c10c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c10e:	4b08      	ldr	r3, [pc, #32]	; (800c130 <prvProcessReceivedCommands+0x1c0>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	1d39      	adds	r1, r7, #4
 800c114:	2200      	movs	r2, #0
 800c116:	4618      	mov	r0, r3
 800c118:	f7fe fbd4 	bl	800a8c4 <xQueueReceive>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	f47f af2a 	bne.w	800bf78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c124:	bf00      	nop
 800c126:	bf00      	nop
 800c128:	3730      	adds	r7, #48	; 0x30
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	24000ed0 	.word	0x24000ed0

0800c134 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b088      	sub	sp, #32
 800c138:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c13a:	e048      	b.n	800c1ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c13c:	4b2d      	ldr	r3, [pc, #180]	; (800c1f4 <prvSwitchTimerLists+0xc0>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c146:	4b2b      	ldr	r3, [pc, #172]	; (800c1f4 <prvSwitchTimerLists+0xc0>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	68db      	ldr	r3, [r3, #12]
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	3304      	adds	r3, #4
 800c154:	4618      	mov	r0, r3
 800c156:	f7fe f8b3 	bl	800a2c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6a1b      	ldr	r3, [r3, #32]
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c168:	f003 0304 	and.w	r3, r3, #4
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d02e      	beq.n	800c1ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	699b      	ldr	r3, [r3, #24]
 800c174:	693a      	ldr	r2, [r7, #16]
 800c176:	4413      	add	r3, r2
 800c178:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c17a:	68ba      	ldr	r2, [r7, #8]
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d90e      	bls.n	800c1a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	68ba      	ldr	r2, [r7, #8]
 800c186:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c18e:	4b19      	ldr	r3, [pc, #100]	; (800c1f4 <prvSwitchTimerLists+0xc0>)
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	3304      	adds	r3, #4
 800c196:	4619      	mov	r1, r3
 800c198:	4610      	mov	r0, r2
 800c19a:	f7fe f858 	bl	800a24e <vListInsert>
 800c19e:	e016      	b.n	800c1ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	693a      	ldr	r2, [r7, #16]
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f7ff fd60 	bl	800bc70 <xTimerGenericCommand>
 800c1b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d10a      	bne.n	800c1ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1bc:	f383 8811 	msr	BASEPRI, r3
 800c1c0:	f3bf 8f6f 	isb	sy
 800c1c4:	f3bf 8f4f 	dsb	sy
 800c1c8:	603b      	str	r3, [r7, #0]
}
 800c1ca:	bf00      	nop
 800c1cc:	e7fe      	b.n	800c1cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1ce:	4b09      	ldr	r3, [pc, #36]	; (800c1f4 <prvSwitchTimerLists+0xc0>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d1b1      	bne.n	800c13c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c1d8:	4b06      	ldr	r3, [pc, #24]	; (800c1f4 <prvSwitchTimerLists+0xc0>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c1de:	4b06      	ldr	r3, [pc, #24]	; (800c1f8 <prvSwitchTimerLists+0xc4>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a04      	ldr	r2, [pc, #16]	; (800c1f4 <prvSwitchTimerLists+0xc0>)
 800c1e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c1e6:	4a04      	ldr	r2, [pc, #16]	; (800c1f8 <prvSwitchTimerLists+0xc4>)
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	6013      	str	r3, [r2, #0]
}
 800c1ec:	bf00      	nop
 800c1ee:	3718      	adds	r7, #24
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	24000ec8 	.word	0x24000ec8
 800c1f8:	24000ecc 	.word	0x24000ecc

0800c1fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c202:	f000 f967 	bl	800c4d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c206:	4b15      	ldr	r3, [pc, #84]	; (800c25c <prvCheckForValidListAndQueue+0x60>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d120      	bne.n	800c250 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c20e:	4814      	ldr	r0, [pc, #80]	; (800c260 <prvCheckForValidListAndQueue+0x64>)
 800c210:	f7fd ffcc 	bl	800a1ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c214:	4813      	ldr	r0, [pc, #76]	; (800c264 <prvCheckForValidListAndQueue+0x68>)
 800c216:	f7fd ffc9 	bl	800a1ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c21a:	4b13      	ldr	r3, [pc, #76]	; (800c268 <prvCheckForValidListAndQueue+0x6c>)
 800c21c:	4a10      	ldr	r2, [pc, #64]	; (800c260 <prvCheckForValidListAndQueue+0x64>)
 800c21e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c220:	4b12      	ldr	r3, [pc, #72]	; (800c26c <prvCheckForValidListAndQueue+0x70>)
 800c222:	4a10      	ldr	r2, [pc, #64]	; (800c264 <prvCheckForValidListAndQueue+0x68>)
 800c224:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c226:	2300      	movs	r3, #0
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	4b11      	ldr	r3, [pc, #68]	; (800c270 <prvCheckForValidListAndQueue+0x74>)
 800c22c:	4a11      	ldr	r2, [pc, #68]	; (800c274 <prvCheckForValidListAndQueue+0x78>)
 800c22e:	2110      	movs	r1, #16
 800c230:	200a      	movs	r0, #10
 800c232:	f7fe f8d7 	bl	800a3e4 <xQueueGenericCreateStatic>
 800c236:	4603      	mov	r3, r0
 800c238:	4a08      	ldr	r2, [pc, #32]	; (800c25c <prvCheckForValidListAndQueue+0x60>)
 800c23a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c23c:	4b07      	ldr	r3, [pc, #28]	; (800c25c <prvCheckForValidListAndQueue+0x60>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d005      	beq.n	800c250 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c244:	4b05      	ldr	r3, [pc, #20]	; (800c25c <prvCheckForValidListAndQueue+0x60>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	490b      	ldr	r1, [pc, #44]	; (800c278 <prvCheckForValidListAndQueue+0x7c>)
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7fe fd2a 	bl	800aca4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c250:	f000 f970 	bl	800c534 <vPortExitCritical>
}
 800c254:	bf00      	nop
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	24000ed0 	.word	0x24000ed0
 800c260:	24000ea0 	.word	0x24000ea0
 800c264:	24000eb4 	.word	0x24000eb4
 800c268:	24000ec8 	.word	0x24000ec8
 800c26c:	24000ecc 	.word	0x24000ecc
 800c270:	24000f7c 	.word	0x24000f7c
 800c274:	24000edc 	.word	0x24000edc
 800c278:	0800cd08 	.word	0x0800cd08

0800c27c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c27c:	b480      	push	{r7}
 800c27e:	b085      	sub	sp, #20
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	3b04      	subs	r3, #4
 800c28c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c294:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	3b04      	subs	r3, #4
 800c29a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	f023 0201 	bic.w	r2, r3, #1
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	3b04      	subs	r3, #4
 800c2aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c2ac:	4a0c      	ldr	r2, [pc, #48]	; (800c2e0 <pxPortInitialiseStack+0x64>)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	3b14      	subs	r3, #20
 800c2b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	3b04      	subs	r3, #4
 800c2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f06f 0202 	mvn.w	r2, #2
 800c2ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	3b20      	subs	r3, #32
 800c2d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3714      	adds	r7, #20
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr
 800c2e0:	0800c2e5 	.word	0x0800c2e5

0800c2e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c2ee:	4b12      	ldr	r3, [pc, #72]	; (800c338 <prvTaskExitError+0x54>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f6:	d00a      	beq.n	800c30e <prvTaskExitError+0x2a>
	__asm volatile
 800c2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fc:	f383 8811 	msr	BASEPRI, r3
 800c300:	f3bf 8f6f 	isb	sy
 800c304:	f3bf 8f4f 	dsb	sy
 800c308:	60fb      	str	r3, [r7, #12]
}
 800c30a:	bf00      	nop
 800c30c:	e7fe      	b.n	800c30c <prvTaskExitError+0x28>
	__asm volatile
 800c30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c312:	f383 8811 	msr	BASEPRI, r3
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	f3bf 8f4f 	dsb	sy
 800c31e:	60bb      	str	r3, [r7, #8]
}
 800c320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c322:	bf00      	nop
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d0fc      	beq.n	800c324 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c32a:	bf00      	nop
 800c32c:	bf00      	nop
 800c32e:	3714      	adds	r7, #20
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr
 800c338:	24000010 	.word	0x24000010
 800c33c:	00000000 	.word	0x00000000

0800c340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c340:	4b07      	ldr	r3, [pc, #28]	; (800c360 <pxCurrentTCBConst2>)
 800c342:	6819      	ldr	r1, [r3, #0]
 800c344:	6808      	ldr	r0, [r1, #0]
 800c346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34a:	f380 8809 	msr	PSP, r0
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f04f 0000 	mov.w	r0, #0
 800c356:	f380 8811 	msr	BASEPRI, r0
 800c35a:	4770      	bx	lr
 800c35c:	f3af 8000 	nop.w

0800c360 <pxCurrentTCBConst2>:
 800c360:	240009a0 	.word	0x240009a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c364:	bf00      	nop
 800c366:	bf00      	nop

0800c368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c368:	4808      	ldr	r0, [pc, #32]	; (800c38c <prvPortStartFirstTask+0x24>)
 800c36a:	6800      	ldr	r0, [r0, #0]
 800c36c:	6800      	ldr	r0, [r0, #0]
 800c36e:	f380 8808 	msr	MSP, r0
 800c372:	f04f 0000 	mov.w	r0, #0
 800c376:	f380 8814 	msr	CONTROL, r0
 800c37a:	b662      	cpsie	i
 800c37c:	b661      	cpsie	f
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	df00      	svc	0
 800c388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c38a:	bf00      	nop
 800c38c:	e000ed08 	.word	0xe000ed08

0800c390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b086      	sub	sp, #24
 800c394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c396:	4b46      	ldr	r3, [pc, #280]	; (800c4b0 <xPortStartScheduler+0x120>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a46      	ldr	r2, [pc, #280]	; (800c4b4 <xPortStartScheduler+0x124>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d10a      	bne.n	800c3b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	613b      	str	r3, [r7, #16]
}
 800c3b2:	bf00      	nop
 800c3b4:	e7fe      	b.n	800c3b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c3b6:	4b3e      	ldr	r3, [pc, #248]	; (800c4b0 <xPortStartScheduler+0x120>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a3f      	ldr	r2, [pc, #252]	; (800c4b8 <xPortStartScheduler+0x128>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d10a      	bne.n	800c3d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c4:	f383 8811 	msr	BASEPRI, r3
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	60fb      	str	r3, [r7, #12]
}
 800c3d2:	bf00      	nop
 800c3d4:	e7fe      	b.n	800c3d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c3d6:	4b39      	ldr	r3, [pc, #228]	; (800c4bc <xPortStartScheduler+0x12c>)
 800c3d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	22ff      	movs	r2, #255	; 0xff
 800c3e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c3f0:	78fb      	ldrb	r3, [r7, #3]
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c3f8:	b2da      	uxtb	r2, r3
 800c3fa:	4b31      	ldr	r3, [pc, #196]	; (800c4c0 <xPortStartScheduler+0x130>)
 800c3fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c3fe:	4b31      	ldr	r3, [pc, #196]	; (800c4c4 <xPortStartScheduler+0x134>)
 800c400:	2207      	movs	r2, #7
 800c402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c404:	e009      	b.n	800c41a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c406:	4b2f      	ldr	r3, [pc, #188]	; (800c4c4 <xPortStartScheduler+0x134>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	3b01      	subs	r3, #1
 800c40c:	4a2d      	ldr	r2, [pc, #180]	; (800c4c4 <xPortStartScheduler+0x134>)
 800c40e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c410:	78fb      	ldrb	r3, [r7, #3]
 800c412:	b2db      	uxtb	r3, r3
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	b2db      	uxtb	r3, r3
 800c418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c41a:	78fb      	ldrb	r3, [r7, #3]
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c422:	2b80      	cmp	r3, #128	; 0x80
 800c424:	d0ef      	beq.n	800c406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c426:	4b27      	ldr	r3, [pc, #156]	; (800c4c4 <xPortStartScheduler+0x134>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f1c3 0307 	rsb	r3, r3, #7
 800c42e:	2b04      	cmp	r3, #4
 800c430:	d00a      	beq.n	800c448 <xPortStartScheduler+0xb8>
	__asm volatile
 800c432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	60bb      	str	r3, [r7, #8]
}
 800c444:	bf00      	nop
 800c446:	e7fe      	b.n	800c446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c448:	4b1e      	ldr	r3, [pc, #120]	; (800c4c4 <xPortStartScheduler+0x134>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	021b      	lsls	r3, r3, #8
 800c44e:	4a1d      	ldr	r2, [pc, #116]	; (800c4c4 <xPortStartScheduler+0x134>)
 800c450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c452:	4b1c      	ldr	r3, [pc, #112]	; (800c4c4 <xPortStartScheduler+0x134>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c45a:	4a1a      	ldr	r2, [pc, #104]	; (800c4c4 <xPortStartScheduler+0x134>)
 800c45c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	b2da      	uxtb	r2, r3
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c466:	4b18      	ldr	r3, [pc, #96]	; (800c4c8 <xPortStartScheduler+0x138>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a17      	ldr	r2, [pc, #92]	; (800c4c8 <xPortStartScheduler+0x138>)
 800c46c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c472:	4b15      	ldr	r3, [pc, #84]	; (800c4c8 <xPortStartScheduler+0x138>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a14      	ldr	r2, [pc, #80]	; (800c4c8 <xPortStartScheduler+0x138>)
 800c478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c47c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c47e:	f000 f8dd 	bl	800c63c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c482:	4b12      	ldr	r3, [pc, #72]	; (800c4cc <xPortStartScheduler+0x13c>)
 800c484:	2200      	movs	r2, #0
 800c486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c488:	f000 f8fc 	bl	800c684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c48c:	4b10      	ldr	r3, [pc, #64]	; (800c4d0 <xPortStartScheduler+0x140>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a0f      	ldr	r2, [pc, #60]	; (800c4d0 <xPortStartScheduler+0x140>)
 800c492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c498:	f7ff ff66 	bl	800c368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c49c:	f7fe fffe 	bl	800b49c <vTaskSwitchContext>
	prvTaskExitError();
 800c4a0:	f7ff ff20 	bl	800c2e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	e000ed00 	.word	0xe000ed00
 800c4b4:	410fc271 	.word	0x410fc271
 800c4b8:	410fc270 	.word	0x410fc270
 800c4bc:	e000e400 	.word	0xe000e400
 800c4c0:	24000fcc 	.word	0x24000fcc
 800c4c4:	24000fd0 	.word	0x24000fd0
 800c4c8:	e000ed20 	.word	0xe000ed20
 800c4cc:	24000010 	.word	0x24000010
 800c4d0:	e000ef34 	.word	0xe000ef34

0800c4d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4de:	f383 8811 	msr	BASEPRI, r3
 800c4e2:	f3bf 8f6f 	isb	sy
 800c4e6:	f3bf 8f4f 	dsb	sy
 800c4ea:	607b      	str	r3, [r7, #4]
}
 800c4ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c4ee:	4b0f      	ldr	r3, [pc, #60]	; (800c52c <vPortEnterCritical+0x58>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	4a0d      	ldr	r2, [pc, #52]	; (800c52c <vPortEnterCritical+0x58>)
 800c4f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c4f8:	4b0c      	ldr	r3, [pc, #48]	; (800c52c <vPortEnterCritical+0x58>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d10f      	bne.n	800c520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c500:	4b0b      	ldr	r3, [pc, #44]	; (800c530 <vPortEnterCritical+0x5c>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	b2db      	uxtb	r3, r3
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00a      	beq.n	800c520 <vPortEnterCritical+0x4c>
	__asm volatile
 800c50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50e:	f383 8811 	msr	BASEPRI, r3
 800c512:	f3bf 8f6f 	isb	sy
 800c516:	f3bf 8f4f 	dsb	sy
 800c51a:	603b      	str	r3, [r7, #0]
}
 800c51c:	bf00      	nop
 800c51e:	e7fe      	b.n	800c51e <vPortEnterCritical+0x4a>
	}
}
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	24000010 	.word	0x24000010
 800c530:	e000ed04 	.word	0xe000ed04

0800c534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c53a:	4b12      	ldr	r3, [pc, #72]	; (800c584 <vPortExitCritical+0x50>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10a      	bne.n	800c558 <vPortExitCritical+0x24>
	__asm volatile
 800c542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	607b      	str	r3, [r7, #4]
}
 800c554:	bf00      	nop
 800c556:	e7fe      	b.n	800c556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c558:	4b0a      	ldr	r3, [pc, #40]	; (800c584 <vPortExitCritical+0x50>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	3b01      	subs	r3, #1
 800c55e:	4a09      	ldr	r2, [pc, #36]	; (800c584 <vPortExitCritical+0x50>)
 800c560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c562:	4b08      	ldr	r3, [pc, #32]	; (800c584 <vPortExitCritical+0x50>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d105      	bne.n	800c576 <vPortExitCritical+0x42>
 800c56a:	2300      	movs	r3, #0
 800c56c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	f383 8811 	msr	BASEPRI, r3
}
 800c574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c576:	bf00      	nop
 800c578:	370c      	adds	r7, #12
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	24000010 	.word	0x24000010
	...

0800c590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c590:	f3ef 8009 	mrs	r0, PSP
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	4b15      	ldr	r3, [pc, #84]	; (800c5f0 <pxCurrentTCBConst>)
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	f01e 0f10 	tst.w	lr, #16
 800c5a0:	bf08      	it	eq
 800c5a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c5a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5aa:	6010      	str	r0, [r2, #0]
 800c5ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c5b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c5b4:	f380 8811 	msr	BASEPRI, r0
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f7fe ff6c 	bl	800b49c <vTaskSwitchContext>
 800c5c4:	f04f 0000 	mov.w	r0, #0
 800c5c8:	f380 8811 	msr	BASEPRI, r0
 800c5cc:	bc09      	pop	{r0, r3}
 800c5ce:	6819      	ldr	r1, [r3, #0]
 800c5d0:	6808      	ldr	r0, [r1, #0]
 800c5d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d6:	f01e 0f10 	tst.w	lr, #16
 800c5da:	bf08      	it	eq
 800c5dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c5e0:	f380 8809 	msr	PSP, r0
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop
 800c5ec:	f3af 8000 	nop.w

0800c5f0 <pxCurrentTCBConst>:
 800c5f0:	240009a0 	.word	0x240009a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c5f4:	bf00      	nop
 800c5f6:	bf00      	nop

0800c5f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c602:	f383 8811 	msr	BASEPRI, r3
 800c606:	f3bf 8f6f 	isb	sy
 800c60a:	f3bf 8f4f 	dsb	sy
 800c60e:	607b      	str	r3, [r7, #4]
}
 800c610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c612:	f7fe fe89 	bl	800b328 <xTaskIncrementTick>
 800c616:	4603      	mov	r3, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d003      	beq.n	800c624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c61c:	4b06      	ldr	r3, [pc, #24]	; (800c638 <xPortSysTickHandler+0x40>)
 800c61e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c622:	601a      	str	r2, [r3, #0]
 800c624:	2300      	movs	r3, #0
 800c626:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	f383 8811 	msr	BASEPRI, r3
}
 800c62e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c630:	bf00      	nop
 800c632:	3708      	adds	r7, #8
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	e000ed04 	.word	0xe000ed04

0800c63c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c63c:	b480      	push	{r7}
 800c63e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c640:	4b0b      	ldr	r3, [pc, #44]	; (800c670 <vPortSetupTimerInterrupt+0x34>)
 800c642:	2200      	movs	r2, #0
 800c644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c646:	4b0b      	ldr	r3, [pc, #44]	; (800c674 <vPortSetupTimerInterrupt+0x38>)
 800c648:	2200      	movs	r2, #0
 800c64a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c64c:	4b0a      	ldr	r3, [pc, #40]	; (800c678 <vPortSetupTimerInterrupt+0x3c>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a0a      	ldr	r2, [pc, #40]	; (800c67c <vPortSetupTimerInterrupt+0x40>)
 800c652:	fba2 2303 	umull	r2, r3, r2, r3
 800c656:	099b      	lsrs	r3, r3, #6
 800c658:	4a09      	ldr	r2, [pc, #36]	; (800c680 <vPortSetupTimerInterrupt+0x44>)
 800c65a:	3b01      	subs	r3, #1
 800c65c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c65e:	4b04      	ldr	r3, [pc, #16]	; (800c670 <vPortSetupTimerInterrupt+0x34>)
 800c660:	2207      	movs	r2, #7
 800c662:	601a      	str	r2, [r3, #0]
}
 800c664:	bf00      	nop
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop
 800c670:	e000e010 	.word	0xe000e010
 800c674:	e000e018 	.word	0xe000e018
 800c678:	24000000 	.word	0x24000000
 800c67c:	10624dd3 	.word	0x10624dd3
 800c680:	e000e014 	.word	0xe000e014

0800c684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c694 <vPortEnableVFP+0x10>
 800c688:	6801      	ldr	r1, [r0, #0]
 800c68a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c68e:	6001      	str	r1, [r0, #0]
 800c690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c692:	bf00      	nop
 800c694:	e000ed88 	.word	0xe000ed88

0800c698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c698:	b480      	push	{r7}
 800c69a:	b085      	sub	sp, #20
 800c69c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c69e:	f3ef 8305 	mrs	r3, IPSR
 800c6a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2b0f      	cmp	r3, #15
 800c6a8:	d914      	bls.n	800c6d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c6aa:	4a17      	ldr	r2, [pc, #92]	; (800c708 <vPortValidateInterruptPriority+0x70>)
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c6b4:	4b15      	ldr	r3, [pc, #84]	; (800c70c <vPortValidateInterruptPriority+0x74>)
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	7afa      	ldrb	r2, [r7, #11]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d20a      	bcs.n	800c6d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	607b      	str	r3, [r7, #4]
}
 800c6d0:	bf00      	nop
 800c6d2:	e7fe      	b.n	800c6d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c6d4:	4b0e      	ldr	r3, [pc, #56]	; (800c710 <vPortValidateInterruptPriority+0x78>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c6dc:	4b0d      	ldr	r3, [pc, #52]	; (800c714 <vPortValidateInterruptPriority+0x7c>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d90a      	bls.n	800c6fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e8:	f383 8811 	msr	BASEPRI, r3
 800c6ec:	f3bf 8f6f 	isb	sy
 800c6f0:	f3bf 8f4f 	dsb	sy
 800c6f4:	603b      	str	r3, [r7, #0]
}
 800c6f6:	bf00      	nop
 800c6f8:	e7fe      	b.n	800c6f8 <vPortValidateInterruptPriority+0x60>
	}
 800c6fa:	bf00      	nop
 800c6fc:	3714      	adds	r7, #20
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr
 800c706:	bf00      	nop
 800c708:	e000e3f0 	.word	0xe000e3f0
 800c70c:	24000fcc 	.word	0x24000fcc
 800c710:	e000ed0c 	.word	0xe000ed0c
 800c714:	24000fd0 	.word	0x24000fd0

0800c718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b08a      	sub	sp, #40	; 0x28
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c720:	2300      	movs	r3, #0
 800c722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c724:	f7fe fd44 	bl	800b1b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c728:	4b5b      	ldr	r3, [pc, #364]	; (800c898 <pvPortMalloc+0x180>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d101      	bne.n	800c734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c730:	f000 f920 	bl	800c974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c734:	4b59      	ldr	r3, [pc, #356]	; (800c89c <pvPortMalloc+0x184>)
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4013      	ands	r3, r2
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f040 8093 	bne.w	800c868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d01d      	beq.n	800c784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c748:	2208      	movs	r2, #8
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	4413      	add	r3, r2
 800c74e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f003 0307 	and.w	r3, r3, #7
 800c756:	2b00      	cmp	r3, #0
 800c758:	d014      	beq.n	800c784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f023 0307 	bic.w	r3, r3, #7
 800c760:	3308      	adds	r3, #8
 800c762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f003 0307 	and.w	r3, r3, #7
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00a      	beq.n	800c784 <pvPortMalloc+0x6c>
	__asm volatile
 800c76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c772:	f383 8811 	msr	BASEPRI, r3
 800c776:	f3bf 8f6f 	isb	sy
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	617b      	str	r3, [r7, #20]
}
 800c780:	bf00      	nop
 800c782:	e7fe      	b.n	800c782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d06e      	beq.n	800c868 <pvPortMalloc+0x150>
 800c78a:	4b45      	ldr	r3, [pc, #276]	; (800c8a0 <pvPortMalloc+0x188>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	429a      	cmp	r2, r3
 800c792:	d869      	bhi.n	800c868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c794:	4b43      	ldr	r3, [pc, #268]	; (800c8a4 <pvPortMalloc+0x18c>)
 800c796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c798:	4b42      	ldr	r3, [pc, #264]	; (800c8a4 <pvPortMalloc+0x18c>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c79e:	e004      	b.n	800c7aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d903      	bls.n	800c7bc <pvPortMalloc+0xa4>
 800c7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1f1      	bne.n	800c7a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c7bc:	4b36      	ldr	r3, [pc, #216]	; (800c898 <pvPortMalloc+0x180>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d050      	beq.n	800c868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c7c6:	6a3b      	ldr	r3, [r7, #32]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	2208      	movs	r2, #8
 800c7cc:	4413      	add	r3, r2
 800c7ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	6a3b      	ldr	r3, [r7, #32]
 800c7d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7da:	685a      	ldr	r2, [r3, #4]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	1ad2      	subs	r2, r2, r3
 800c7e0:	2308      	movs	r3, #8
 800c7e2:	005b      	lsls	r3, r3, #1
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d91f      	bls.n	800c828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	f003 0307 	and.w	r3, r3, #7
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d00a      	beq.n	800c810 <pvPortMalloc+0xf8>
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	613b      	str	r3, [r7, #16]
}
 800c80c:	bf00      	nop
 800c80e:	e7fe      	b.n	800c80e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c812:	685a      	ldr	r2, [r3, #4]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	1ad2      	subs	r2, r2, r3
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c822:	69b8      	ldr	r0, [r7, #24]
 800c824:	f000 f908 	bl	800ca38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c828:	4b1d      	ldr	r3, [pc, #116]	; (800c8a0 <pvPortMalloc+0x188>)
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	1ad3      	subs	r3, r2, r3
 800c832:	4a1b      	ldr	r2, [pc, #108]	; (800c8a0 <pvPortMalloc+0x188>)
 800c834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c836:	4b1a      	ldr	r3, [pc, #104]	; (800c8a0 <pvPortMalloc+0x188>)
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	4b1b      	ldr	r3, [pc, #108]	; (800c8a8 <pvPortMalloc+0x190>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d203      	bcs.n	800c84a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c842:	4b17      	ldr	r3, [pc, #92]	; (800c8a0 <pvPortMalloc+0x188>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4a18      	ldr	r2, [pc, #96]	; (800c8a8 <pvPortMalloc+0x190>)
 800c848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84c:	685a      	ldr	r2, [r3, #4]
 800c84e:	4b13      	ldr	r3, [pc, #76]	; (800c89c <pvPortMalloc+0x184>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	431a      	orrs	r2, r3
 800c854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85a:	2200      	movs	r2, #0
 800c85c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c85e:	4b13      	ldr	r3, [pc, #76]	; (800c8ac <pvPortMalloc+0x194>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	3301      	adds	r3, #1
 800c864:	4a11      	ldr	r2, [pc, #68]	; (800c8ac <pvPortMalloc+0x194>)
 800c866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c868:	f7fe fcb0 	bl	800b1cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	f003 0307 	and.w	r3, r3, #7
 800c872:	2b00      	cmp	r3, #0
 800c874:	d00a      	beq.n	800c88c <pvPortMalloc+0x174>
	__asm volatile
 800c876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87a:	f383 8811 	msr	BASEPRI, r3
 800c87e:	f3bf 8f6f 	isb	sy
 800c882:	f3bf 8f4f 	dsb	sy
 800c886:	60fb      	str	r3, [r7, #12]
}
 800c888:	bf00      	nop
 800c88a:	e7fe      	b.n	800c88a <pvPortMalloc+0x172>
	return pvReturn;
 800c88c:	69fb      	ldr	r3, [r7, #28]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3728      	adds	r7, #40	; 0x28
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	24004bdc 	.word	0x24004bdc
 800c89c:	24004bf0 	.word	0x24004bf0
 800c8a0:	24004be0 	.word	0x24004be0
 800c8a4:	24004bd4 	.word	0x24004bd4
 800c8a8:	24004be4 	.word	0x24004be4
 800c8ac:	24004be8 	.word	0x24004be8

0800c8b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d04d      	beq.n	800c95e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c8c2:	2308      	movs	r3, #8
 800c8c4:	425b      	negs	r3, r3
 800c8c6:	697a      	ldr	r2, [r7, #20]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	685a      	ldr	r2, [r3, #4]
 800c8d4:	4b24      	ldr	r3, [pc, #144]	; (800c968 <vPortFree+0xb8>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4013      	ands	r3, r2
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d10a      	bne.n	800c8f4 <vPortFree+0x44>
	__asm volatile
 800c8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	60fb      	str	r3, [r7, #12]
}
 800c8f0:	bf00      	nop
 800c8f2:	e7fe      	b.n	800c8f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00a      	beq.n	800c912 <vPortFree+0x62>
	__asm volatile
 800c8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	60bb      	str	r3, [r7, #8]
}
 800c90e:	bf00      	nop
 800c910:	e7fe      	b.n	800c910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	685a      	ldr	r2, [r3, #4]
 800c916:	4b14      	ldr	r3, [pc, #80]	; (800c968 <vPortFree+0xb8>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4013      	ands	r3, r2
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d01e      	beq.n	800c95e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d11a      	bne.n	800c95e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	685a      	ldr	r2, [r3, #4]
 800c92c:	4b0e      	ldr	r3, [pc, #56]	; (800c968 <vPortFree+0xb8>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	43db      	mvns	r3, r3
 800c932:	401a      	ands	r2, r3
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c938:	f7fe fc3a 	bl	800b1b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	685a      	ldr	r2, [r3, #4]
 800c940:	4b0a      	ldr	r3, [pc, #40]	; (800c96c <vPortFree+0xbc>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4413      	add	r3, r2
 800c946:	4a09      	ldr	r2, [pc, #36]	; (800c96c <vPortFree+0xbc>)
 800c948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c94a:	6938      	ldr	r0, [r7, #16]
 800c94c:	f000 f874 	bl	800ca38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c950:	4b07      	ldr	r3, [pc, #28]	; (800c970 <vPortFree+0xc0>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	3301      	adds	r3, #1
 800c956:	4a06      	ldr	r2, [pc, #24]	; (800c970 <vPortFree+0xc0>)
 800c958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c95a:	f7fe fc37 	bl	800b1cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c95e:	bf00      	nop
 800c960:	3718      	adds	r7, #24
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	24004bf0 	.word	0x24004bf0
 800c96c:	24004be0 	.word	0x24004be0
 800c970:	24004bec 	.word	0x24004bec

0800c974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c974:	b480      	push	{r7}
 800c976:	b085      	sub	sp, #20
 800c978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c97a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c97e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c980:	4b27      	ldr	r3, [pc, #156]	; (800ca20 <prvHeapInit+0xac>)
 800c982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f003 0307 	and.w	r3, r3, #7
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00c      	beq.n	800c9a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	3307      	adds	r3, #7
 800c992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f023 0307 	bic.w	r3, r3, #7
 800c99a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c99c:	68ba      	ldr	r2, [r7, #8]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	4a1f      	ldr	r2, [pc, #124]	; (800ca20 <prvHeapInit+0xac>)
 800c9a4:	4413      	add	r3, r2
 800c9a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c9ac:	4a1d      	ldr	r2, [pc, #116]	; (800ca24 <prvHeapInit+0xb0>)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c9b2:	4b1c      	ldr	r3, [pc, #112]	; (800ca24 <prvHeapInit+0xb0>)
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	68ba      	ldr	r2, [r7, #8]
 800c9bc:	4413      	add	r3, r2
 800c9be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c9c0:	2208      	movs	r2, #8
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	1a9b      	subs	r3, r3, r2
 800c9c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f023 0307 	bic.w	r3, r3, #7
 800c9ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	4a15      	ldr	r2, [pc, #84]	; (800ca28 <prvHeapInit+0xb4>)
 800c9d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c9d6:	4b14      	ldr	r3, [pc, #80]	; (800ca28 <prvHeapInit+0xb4>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c9de:	4b12      	ldr	r3, [pc, #72]	; (800ca28 <prvHeapInit+0xb4>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	68fa      	ldr	r2, [r7, #12]
 800c9ee:	1ad2      	subs	r2, r2, r3
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c9f4:	4b0c      	ldr	r3, [pc, #48]	; (800ca28 <prvHeapInit+0xb4>)
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	4a0a      	ldr	r2, [pc, #40]	; (800ca2c <prvHeapInit+0xb8>)
 800ca02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	4a09      	ldr	r2, [pc, #36]	; (800ca30 <prvHeapInit+0xbc>)
 800ca0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca0c:	4b09      	ldr	r3, [pc, #36]	; (800ca34 <prvHeapInit+0xc0>)
 800ca0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ca12:	601a      	str	r2, [r3, #0]
}
 800ca14:	bf00      	nop
 800ca16:	3714      	adds	r7, #20
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr
 800ca20:	24000fd4 	.word	0x24000fd4
 800ca24:	24004bd4 	.word	0x24004bd4
 800ca28:	24004bdc 	.word	0x24004bdc
 800ca2c:	24004be4 	.word	0x24004be4
 800ca30:	24004be0 	.word	0x24004be0
 800ca34:	24004bf0 	.word	0x24004bf0

0800ca38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca40:	4b28      	ldr	r3, [pc, #160]	; (800cae4 <prvInsertBlockIntoFreeList+0xac>)
 800ca42:	60fb      	str	r3, [r7, #12]
 800ca44:	e002      	b.n	800ca4c <prvInsertBlockIntoFreeList+0x14>
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	60fb      	str	r3, [r7, #12]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d8f7      	bhi.n	800ca46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	68ba      	ldr	r2, [r7, #8]
 800ca60:	4413      	add	r3, r2
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d108      	bne.n	800ca7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	685a      	ldr	r2, [r3, #4]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	441a      	add	r2, r3
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	68ba      	ldr	r2, [r7, #8]
 800ca84:	441a      	add	r2, r3
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d118      	bne.n	800cac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	4b15      	ldr	r3, [pc, #84]	; (800cae8 <prvInsertBlockIntoFreeList+0xb0>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d00d      	beq.n	800cab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	685a      	ldr	r2, [r3, #4]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	441a      	add	r2, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	601a      	str	r2, [r3, #0]
 800cab4:	e008      	b.n	800cac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cab6:	4b0c      	ldr	r3, [pc, #48]	; (800cae8 <prvInsertBlockIntoFreeList+0xb0>)
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	601a      	str	r2, [r3, #0]
 800cabe:	e003      	b.n	800cac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cac8:	68fa      	ldr	r2, [r7, #12]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d002      	beq.n	800cad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cad6:	bf00      	nop
 800cad8:	3714      	adds	r7, #20
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	24004bd4 	.word	0x24004bd4
 800cae8:	24004bdc 	.word	0x24004bdc

0800caec <memset>:
 800caec:	4402      	add	r2, r0
 800caee:	4603      	mov	r3, r0
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d100      	bne.n	800caf6 <memset+0xa>
 800caf4:	4770      	bx	lr
 800caf6:	f803 1b01 	strb.w	r1, [r3], #1
 800cafa:	e7f9      	b.n	800caf0 <memset+0x4>

0800cafc <_reclaim_reent>:
 800cafc:	4b29      	ldr	r3, [pc, #164]	; (800cba4 <_reclaim_reent+0xa8>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4283      	cmp	r3, r0
 800cb02:	b570      	push	{r4, r5, r6, lr}
 800cb04:	4604      	mov	r4, r0
 800cb06:	d04b      	beq.n	800cba0 <_reclaim_reent+0xa4>
 800cb08:	69c3      	ldr	r3, [r0, #28]
 800cb0a:	b143      	cbz	r3, 800cb1e <_reclaim_reent+0x22>
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d144      	bne.n	800cb9c <_reclaim_reent+0xa0>
 800cb12:	69e3      	ldr	r3, [r4, #28]
 800cb14:	6819      	ldr	r1, [r3, #0]
 800cb16:	b111      	cbz	r1, 800cb1e <_reclaim_reent+0x22>
 800cb18:	4620      	mov	r0, r4
 800cb1a:	f000 f879 	bl	800cc10 <_free_r>
 800cb1e:	6961      	ldr	r1, [r4, #20]
 800cb20:	b111      	cbz	r1, 800cb28 <_reclaim_reent+0x2c>
 800cb22:	4620      	mov	r0, r4
 800cb24:	f000 f874 	bl	800cc10 <_free_r>
 800cb28:	69e1      	ldr	r1, [r4, #28]
 800cb2a:	b111      	cbz	r1, 800cb32 <_reclaim_reent+0x36>
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f000 f86f 	bl	800cc10 <_free_r>
 800cb32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cb34:	b111      	cbz	r1, 800cb3c <_reclaim_reent+0x40>
 800cb36:	4620      	mov	r0, r4
 800cb38:	f000 f86a 	bl	800cc10 <_free_r>
 800cb3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb3e:	b111      	cbz	r1, 800cb46 <_reclaim_reent+0x4a>
 800cb40:	4620      	mov	r0, r4
 800cb42:	f000 f865 	bl	800cc10 <_free_r>
 800cb46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cb48:	b111      	cbz	r1, 800cb50 <_reclaim_reent+0x54>
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f000 f860 	bl	800cc10 <_free_r>
 800cb50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cb52:	b111      	cbz	r1, 800cb5a <_reclaim_reent+0x5e>
 800cb54:	4620      	mov	r0, r4
 800cb56:	f000 f85b 	bl	800cc10 <_free_r>
 800cb5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cb5c:	b111      	cbz	r1, 800cb64 <_reclaim_reent+0x68>
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f000 f856 	bl	800cc10 <_free_r>
 800cb64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cb66:	b111      	cbz	r1, 800cb6e <_reclaim_reent+0x72>
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f000 f851 	bl	800cc10 <_free_r>
 800cb6e:	6a23      	ldr	r3, [r4, #32]
 800cb70:	b1b3      	cbz	r3, 800cba0 <_reclaim_reent+0xa4>
 800cb72:	4620      	mov	r0, r4
 800cb74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb78:	4718      	bx	r3
 800cb7a:	5949      	ldr	r1, [r1, r5]
 800cb7c:	b941      	cbnz	r1, 800cb90 <_reclaim_reent+0x94>
 800cb7e:	3504      	adds	r5, #4
 800cb80:	69e3      	ldr	r3, [r4, #28]
 800cb82:	2d80      	cmp	r5, #128	; 0x80
 800cb84:	68d9      	ldr	r1, [r3, #12]
 800cb86:	d1f8      	bne.n	800cb7a <_reclaim_reent+0x7e>
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f000 f841 	bl	800cc10 <_free_r>
 800cb8e:	e7c0      	b.n	800cb12 <_reclaim_reent+0x16>
 800cb90:	680e      	ldr	r6, [r1, #0]
 800cb92:	4620      	mov	r0, r4
 800cb94:	f000 f83c 	bl	800cc10 <_free_r>
 800cb98:	4631      	mov	r1, r6
 800cb9a:	e7ef      	b.n	800cb7c <_reclaim_reent+0x80>
 800cb9c:	2500      	movs	r5, #0
 800cb9e:	e7ef      	b.n	800cb80 <_reclaim_reent+0x84>
 800cba0:	bd70      	pop	{r4, r5, r6, pc}
 800cba2:	bf00      	nop
 800cba4:	24000060 	.word	0x24000060

0800cba8 <__libc_init_array>:
 800cba8:	b570      	push	{r4, r5, r6, lr}
 800cbaa:	4d0d      	ldr	r5, [pc, #52]	; (800cbe0 <__libc_init_array+0x38>)
 800cbac:	4c0d      	ldr	r4, [pc, #52]	; (800cbe4 <__libc_init_array+0x3c>)
 800cbae:	1b64      	subs	r4, r4, r5
 800cbb0:	10a4      	asrs	r4, r4, #2
 800cbb2:	2600      	movs	r6, #0
 800cbb4:	42a6      	cmp	r6, r4
 800cbb6:	d109      	bne.n	800cbcc <__libc_init_array+0x24>
 800cbb8:	4d0b      	ldr	r5, [pc, #44]	; (800cbe8 <__libc_init_array+0x40>)
 800cbba:	4c0c      	ldr	r4, [pc, #48]	; (800cbec <__libc_init_array+0x44>)
 800cbbc:	f000 f880 	bl	800ccc0 <_init>
 800cbc0:	1b64      	subs	r4, r4, r5
 800cbc2:	10a4      	asrs	r4, r4, #2
 800cbc4:	2600      	movs	r6, #0
 800cbc6:	42a6      	cmp	r6, r4
 800cbc8:	d105      	bne.n	800cbd6 <__libc_init_array+0x2e>
 800cbca:	bd70      	pop	{r4, r5, r6, pc}
 800cbcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbd0:	4798      	blx	r3
 800cbd2:	3601      	adds	r6, #1
 800cbd4:	e7ee      	b.n	800cbb4 <__libc_init_array+0xc>
 800cbd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbda:	4798      	blx	r3
 800cbdc:	3601      	adds	r6, #1
 800cbde:	e7f2      	b.n	800cbc6 <__libc_init_array+0x1e>
 800cbe0:	0800cde0 	.word	0x0800cde0
 800cbe4:	0800cde0 	.word	0x0800cde0
 800cbe8:	0800cde0 	.word	0x0800cde0
 800cbec:	0800cde4 	.word	0x0800cde4

0800cbf0 <__retarget_lock_acquire_recursive>:
 800cbf0:	4770      	bx	lr

0800cbf2 <__retarget_lock_release_recursive>:
 800cbf2:	4770      	bx	lr

0800cbf4 <memcpy>:
 800cbf4:	440a      	add	r2, r1
 800cbf6:	4291      	cmp	r1, r2
 800cbf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbfc:	d100      	bne.n	800cc00 <memcpy+0xc>
 800cbfe:	4770      	bx	lr
 800cc00:	b510      	push	{r4, lr}
 800cc02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc0a:	4291      	cmp	r1, r2
 800cc0c:	d1f9      	bne.n	800cc02 <memcpy+0xe>
 800cc0e:	bd10      	pop	{r4, pc}

0800cc10 <_free_r>:
 800cc10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc12:	2900      	cmp	r1, #0
 800cc14:	d044      	beq.n	800cca0 <_free_r+0x90>
 800cc16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc1a:	9001      	str	r0, [sp, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f1a1 0404 	sub.w	r4, r1, #4
 800cc22:	bfb8      	it	lt
 800cc24:	18e4      	addlt	r4, r4, r3
 800cc26:	f000 f83f 	bl	800cca8 <__malloc_lock>
 800cc2a:	4a1e      	ldr	r2, [pc, #120]	; (800cca4 <_free_r+0x94>)
 800cc2c:	9801      	ldr	r0, [sp, #4]
 800cc2e:	6813      	ldr	r3, [r2, #0]
 800cc30:	b933      	cbnz	r3, 800cc40 <_free_r+0x30>
 800cc32:	6063      	str	r3, [r4, #4]
 800cc34:	6014      	str	r4, [r2, #0]
 800cc36:	b003      	add	sp, #12
 800cc38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc3c:	f000 b83a 	b.w	800ccb4 <__malloc_unlock>
 800cc40:	42a3      	cmp	r3, r4
 800cc42:	d908      	bls.n	800cc56 <_free_r+0x46>
 800cc44:	6825      	ldr	r5, [r4, #0]
 800cc46:	1961      	adds	r1, r4, r5
 800cc48:	428b      	cmp	r3, r1
 800cc4a:	bf01      	itttt	eq
 800cc4c:	6819      	ldreq	r1, [r3, #0]
 800cc4e:	685b      	ldreq	r3, [r3, #4]
 800cc50:	1949      	addeq	r1, r1, r5
 800cc52:	6021      	streq	r1, [r4, #0]
 800cc54:	e7ed      	b.n	800cc32 <_free_r+0x22>
 800cc56:	461a      	mov	r2, r3
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	b10b      	cbz	r3, 800cc60 <_free_r+0x50>
 800cc5c:	42a3      	cmp	r3, r4
 800cc5e:	d9fa      	bls.n	800cc56 <_free_r+0x46>
 800cc60:	6811      	ldr	r1, [r2, #0]
 800cc62:	1855      	adds	r5, r2, r1
 800cc64:	42a5      	cmp	r5, r4
 800cc66:	d10b      	bne.n	800cc80 <_free_r+0x70>
 800cc68:	6824      	ldr	r4, [r4, #0]
 800cc6a:	4421      	add	r1, r4
 800cc6c:	1854      	adds	r4, r2, r1
 800cc6e:	42a3      	cmp	r3, r4
 800cc70:	6011      	str	r1, [r2, #0]
 800cc72:	d1e0      	bne.n	800cc36 <_free_r+0x26>
 800cc74:	681c      	ldr	r4, [r3, #0]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	6053      	str	r3, [r2, #4]
 800cc7a:	440c      	add	r4, r1
 800cc7c:	6014      	str	r4, [r2, #0]
 800cc7e:	e7da      	b.n	800cc36 <_free_r+0x26>
 800cc80:	d902      	bls.n	800cc88 <_free_r+0x78>
 800cc82:	230c      	movs	r3, #12
 800cc84:	6003      	str	r3, [r0, #0]
 800cc86:	e7d6      	b.n	800cc36 <_free_r+0x26>
 800cc88:	6825      	ldr	r5, [r4, #0]
 800cc8a:	1961      	adds	r1, r4, r5
 800cc8c:	428b      	cmp	r3, r1
 800cc8e:	bf04      	itt	eq
 800cc90:	6819      	ldreq	r1, [r3, #0]
 800cc92:	685b      	ldreq	r3, [r3, #4]
 800cc94:	6063      	str	r3, [r4, #4]
 800cc96:	bf04      	itt	eq
 800cc98:	1949      	addeq	r1, r1, r5
 800cc9a:	6021      	streq	r1, [r4, #0]
 800cc9c:	6054      	str	r4, [r2, #4]
 800cc9e:	e7ca      	b.n	800cc36 <_free_r+0x26>
 800cca0:	b003      	add	sp, #12
 800cca2:	bd30      	pop	{r4, r5, pc}
 800cca4:	24004d30 	.word	0x24004d30

0800cca8 <__malloc_lock>:
 800cca8:	4801      	ldr	r0, [pc, #4]	; (800ccb0 <__malloc_lock+0x8>)
 800ccaa:	f7ff bfa1 	b.w	800cbf0 <__retarget_lock_acquire_recursive>
 800ccae:	bf00      	nop
 800ccb0:	24004d2c 	.word	0x24004d2c

0800ccb4 <__malloc_unlock>:
 800ccb4:	4801      	ldr	r0, [pc, #4]	; (800ccbc <__malloc_unlock+0x8>)
 800ccb6:	f7ff bf9c 	b.w	800cbf2 <__retarget_lock_release_recursive>
 800ccba:	bf00      	nop
 800ccbc:	24004d2c 	.word	0x24004d2c

0800ccc0 <_init>:
 800ccc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccc2:	bf00      	nop
 800ccc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccc6:	bc08      	pop	{r3}
 800ccc8:	469e      	mov	lr, r3
 800ccca:	4770      	bx	lr

0800cccc <_fini>:
 800cccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccce:	bf00      	nop
 800ccd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccd2:	bc08      	pop	{r3}
 800ccd4:	469e      	mov	lr, r3
 800ccd6:	4770      	bx	lr
