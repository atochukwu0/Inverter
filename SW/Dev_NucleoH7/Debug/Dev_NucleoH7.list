
Dev_NucleoH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c938  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040ec  0800cbd8  0800cbd8  0001cbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08010cc4  08010cc4  00020cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08010cc8  08010cc8  00020cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  24000000  08010ccc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004cf8  24000064  08010d30  00030064  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24004d5c  08010d30  00034d5c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030064  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00030092  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023ae3  00000000  00000000  000300d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046a6  00000000  00000000  00053bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a80  00000000  00000000  00058260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001441  00000000  00000000  00059ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b72b  00000000  00000000  0005b121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000229b3  00000000  00000000  0009684c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017a5c0  00000000  00000000  000b91ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000071c8  00000000  00000000  002337c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005e  00000000  00000000  0023a988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cbc0 	.word	0x0800cbc0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	0800cbc0 	.word	0x0800cbc0

080002e0 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b088      	sub	sp, #32
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
 80002f4:	615a      	str	r2, [r3, #20]
 80002f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <MX_ADC3_Init+0xf8>)
 80002fa:	4a38      	ldr	r2, [pc, #224]	; (80003dc <MX_ADC3_Init+0xfc>)
 80002fc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80002fe:	4b36      	ldr	r3, [pc, #216]	; (80003d8 <MX_ADC3_Init+0xf8>)
 8000300:	2208      	movs	r2, #8
 8000302:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <MX_ADC3_Init+0xf8>)
 8000306:	2201      	movs	r2, #1
 8000308:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800030a:	4b33      	ldr	r3, [pc, #204]	; (80003d8 <MX_ADC3_Init+0xf8>)
 800030c:	2208      	movs	r2, #8
 800030e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000310:	4b31      	ldr	r3, [pc, #196]	; (80003d8 <MX_ADC3_Init+0xf8>)
 8000312:	2200      	movs	r2, #0
 8000314:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000316:	4b30      	ldr	r3, [pc, #192]	; (80003d8 <MX_ADC3_Init+0xf8>)
 8000318:	2201      	movs	r2, #1
 800031a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 800031c:	4b2e      	ldr	r3, [pc, #184]	; (80003d8 <MX_ADC3_Init+0xf8>)
 800031e:	2203      	movs	r2, #3
 8000320:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000322:	4b2d      	ldr	r3, [pc, #180]	; (80003d8 <MX_ADC3_Init+0xf8>)
 8000324:	2200      	movs	r2, #0
 8000326:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000328:	4b2b      	ldr	r3, [pc, #172]	; (80003d8 <MX_ADC3_Init+0xf8>)
 800032a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800032e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000330:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <MX_ADC3_Init+0xf8>)
 8000332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000336:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000338:	4b27      	ldr	r3, [pc, #156]	; (80003d8 <MX_ADC3_Init+0xf8>)
 800033a:	2203      	movs	r2, #3
 800033c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <MX_ADC3_Init+0xf8>)
 8000340:	2200      	movs	r2, #0
 8000342:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000344:	4b24      	ldr	r3, [pc, #144]	; (80003d8 <MX_ADC3_Init+0xf8>)
 8000346:	2200      	movs	r2, #0
 8000348:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800034a:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <MX_ADC3_Init+0xf8>)
 800034c:	2200      	movs	r2, #0
 800034e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000352:	4821      	ldr	r0, [pc, #132]	; (80003d8 <MX_ADC3_Init+0xf8>)
 8000354:	f001 fa1e 	bl	8001794 <HAL_ADC_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 800035e:	f000 fc7f 	bl	8000c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000362:	4b1f      	ldr	r3, [pc, #124]	; (80003e0 <MX_ADC3_Init+0x100>)
 8000364:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000366:	2306      	movs	r3, #6
 8000368:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 800036a:	2303      	movs	r3, #3
 800036c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800036e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000372:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000374:	2304      	movs	r3, #4
 8000376:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800037c:	2300      	movs	r3, #0
 800037e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	4619      	mov	r1, r3
 8000384:	4814      	ldr	r0, [pc, #80]	; (80003d8 <MX_ADC3_Init+0xf8>)
 8000386:	f001 fdff 	bl	8001f88 <HAL_ADC_ConfigChannel>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000390:	f000 fc66 	bl	8000c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <MX_ADC3_Init+0x104>)
 8000396:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000398:	230c      	movs	r3, #12
 800039a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	4619      	mov	r1, r3
 80003a0:	480d      	ldr	r0, [pc, #52]	; (80003d8 <MX_ADC3_Init+0xf8>)
 80003a2:	f001 fdf1 	bl	8001f88 <HAL_ADC_ConfigChannel>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80003ac:	f000 fc58 	bl	8000c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003b0:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <MX_ADC3_Init+0x108>)
 80003b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003b4:	2312      	movs	r3, #18
 80003b6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_ADC3_Init+0x10c>)
 80003ba:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	4619      	mov	r1, r3
 80003c0:	4805      	ldr	r0, [pc, #20]	; (80003d8 <MX_ADC3_Init+0xf8>)
 80003c2:	f001 fde1 	bl	8001f88 <HAL_ADC_ConfigChannel>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_ADC3_Init+0xf0>
  {
    Error_Handler();
 80003cc:	f000 fc48 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	3720      	adds	r7, #32
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	24000080 	.word	0x24000080
 80003dc:	58026000 	.word	0x58026000
 80003e0:	04300002 	.word	0x04300002
 80003e4:	08600004 	.word	0x08600004
 80003e8:	0c900008 	.word	0x0c900008
 80003ec:	47ff0000 	.word	0x47ff0000

080003f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b0bc      	sub	sp, #240	; 0xf0
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000408:	f107 0318 	add.w	r3, r7, #24
 800040c:	22c0      	movs	r2, #192	; 0xc0
 800040e:	2100      	movs	r1, #0
 8000410:	4618      	mov	r0, r3
 8000412:	f00c faeb 	bl	800c9ec <memset>
  if(adcHandle->Instance==ADC3)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a53      	ldr	r2, [pc, #332]	; (8000568 <HAL_ADC_MspInit+0x178>)
 800041c:	4293      	cmp	r3, r2
 800041e:	f040 809e 	bne.w	800055e <HAL_ADC_MspInit+0x16e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000422:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000426:	f04f 0300 	mov.w	r3, #0
 800042a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800042e:	2301      	movs	r3, #1
 8000430:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000432:	2313      	movs	r3, #19
 8000434:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000436:	2302      	movs	r3, #2
 8000438:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800043a:	2302      	movs	r3, #2
 800043c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800043e:	2302      	movs	r3, #2
 8000440:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000442:	23c0      	movs	r3, #192	; 0xc0
 8000444:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000446:	2320      	movs	r3, #32
 8000448:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800044e:	2300      	movs	r3, #0
 8000450:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000454:	f107 0318 	add.w	r3, r7, #24
 8000458:	4618      	mov	r0, r3
 800045a:	f005 fad1 	bl	8005a00 <HAL_RCCEx_PeriphCLKConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000464:	f000 fbfc 	bl	8000c60 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000468:	4b40      	ldr	r3, [pc, #256]	; (800056c <HAL_ADC_MspInit+0x17c>)
 800046a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800046e:	4a3f      	ldr	r2, [pc, #252]	; (800056c <HAL_ADC_MspInit+0x17c>)
 8000470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000478:	4b3c      	ldr	r3, [pc, #240]	; (800056c <HAL_ADC_MspInit+0x17c>)
 800047a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800047e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000486:	4b39      	ldr	r3, [pc, #228]	; (800056c <HAL_ADC_MspInit+0x17c>)
 8000488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800048c:	4a37      	ldr	r2, [pc, #220]	; (800056c <HAL_ADC_MspInit+0x17c>)
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000496:	4b35      	ldr	r3, [pc, #212]	; (800056c <HAL_ADC_MspInit+0x17c>)
 8000498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800049c:	f003 0320 	and.w	r3, r3, #32
 80004a0:	613b      	str	r3, [r7, #16]
 80004a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a4:	4b31      	ldr	r3, [pc, #196]	; (800056c <HAL_ADC_MspInit+0x17c>)
 80004a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004aa:	4a30      	ldr	r2, [pc, #192]	; (800056c <HAL_ADC_MspInit+0x17c>)
 80004ac:	f043 0304 	orr.w	r3, r3, #4
 80004b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004b4:	4b2d      	ldr	r3, [pc, #180]	; (800056c <HAL_ADC_MspInit+0x17c>)
 80004b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ba:	f003 0304 	and.w	r3, r3, #4
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
    PF7     ------> ADC3_INP3
    PF8     ------> ADC3_INN3
    PF9     ------> ADC3_INP2
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80004c2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80004c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ca:	2303      	movs	r3, #3
 80004cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80004da:	4619      	mov	r1, r3
 80004dc:	4824      	ldr	r0, [pc, #144]	; (8000570 <HAL_ADC_MspInit+0x180>)
 80004de:	f004 f879 	bl	80045d4 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80004e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80004e6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80004ea:	f000 ff49 	bl	8001380 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 80004ee:	4b21      	ldr	r3, [pc, #132]	; (8000574 <HAL_ADC_MspInit+0x184>)
 80004f0:	4a21      	ldr	r2, [pc, #132]	; (8000578 <HAL_ADC_MspInit+0x188>)
 80004f2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80004f4:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <HAL_ADC_MspInit+0x184>)
 80004f6:	2273      	movs	r2, #115	; 0x73
 80004f8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004fa:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <HAL_ADC_MspInit+0x184>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <HAL_ADC_MspInit+0x184>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000506:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <HAL_ADC_MspInit+0x184>)
 8000508:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800050c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800050e:	4b19      	ldr	r3, [pc, #100]	; (8000574 <HAL_ADC_MspInit+0x184>)
 8000510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000514:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <HAL_ADC_MspInit+0x184>)
 8000518:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800051c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800051e:	4b15      	ldr	r3, [pc, #84]	; (8000574 <HAL_ADC_MspInit+0x184>)
 8000520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000524:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <HAL_ADC_MspInit+0x184>)
 8000528:	2200      	movs	r2, #0
 800052a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <HAL_ADC_MspInit+0x184>)
 800052e:	2200      	movs	r2, #0
 8000530:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000532:	4810      	ldr	r0, [pc, #64]	; (8000574 <HAL_ADC_MspInit+0x184>)
 8000534:	f002 fb8c 	bl	8002c50 <HAL_DMA_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <HAL_ADC_MspInit+0x152>
    {
      Error_Handler();
 800053e:	f000 fb8f 	bl	8000c60 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <HAL_ADC_MspInit+0x184>)
 8000546:	64da      	str	r2, [r3, #76]	; 0x4c
 8000548:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <HAL_ADC_MspInit+0x184>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2105      	movs	r1, #5
 8000552:	207f      	movs	r0, #127	; 0x7f
 8000554:	f002 fb54 	bl	8002c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000558:	207f      	movs	r0, #127	; 0x7f
 800055a:	f002 fb6b 	bl	8002c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800055e:	bf00      	nop
 8000560:	37f0      	adds	r7, #240	; 0xf0
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	58026000 	.word	0x58026000
 800056c:	58024400 	.word	0x58024400
 8000570:	58021400 	.word	0x58021400
 8000574:	240000e4 	.word	0x240000e4
 8000578:	40020010 	.word	0x40020010

0800057c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <MX_DMA_Init+0x3c>)
 8000584:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000588:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <MX_DMA_Init+0x3c>)
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_DMA_Init+0x3c>)
 8000594:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2105      	movs	r1, #5
 80005a4:	200b      	movs	r0, #11
 80005a6:	f002 fb2b 	bl	8002c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005aa:	200b      	movs	r0, #11
 80005ac:	f002 fb42 	bl	8002c34 <HAL_NVIC_EnableIRQ>

}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	58024400 	.word	0x58024400

080005bc <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
return 0;
 80005ce:	2300      	movs	r3, #0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qMeasurements */
  qMeasurementsHandle = osMessageQueueNew (16, sizeof(float), &qMeasurements_attributes);
 80005e0:	4a10      	ldr	r2, [pc, #64]	; (8000624 <MX_FREERTOS_Init+0x48>)
 80005e2:	2104      	movs	r1, #4
 80005e4:	2010      	movs	r0, #16
 80005e6:	f009 fa55 	bl	8009a94 <osMessageQueueNew>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <MX_FREERTOS_Init+0x4c>)
 80005ee:	6013      	str	r3, [r2, #0]

  /* creation of qControl */
  qControlHandle = osMessageQueueNew (16, sizeof(float), &qControl_attributes);
 80005f0:	4a0e      	ldr	r2, [pc, #56]	; (800062c <MX_FREERTOS_Init+0x50>)
 80005f2:	2104      	movs	r1, #4
 80005f4:	2010      	movs	r0, #16
 80005f6:	f009 fa4d 	bl	8009a94 <osMessageQueueNew>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a0c      	ldr	r2, [pc, #48]	; (8000630 <MX_FREERTOS_Init+0x54>)
 80005fe:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Measurements */
  MeasurementsHandle = osThreadNew(initMeasurements, NULL, &Measurements_attributes);
 8000600:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <MX_FREERTOS_Init+0x58>)
 8000602:	2100      	movs	r1, #0
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <MX_FREERTOS_Init+0x5c>)
 8000606:	f009 f9b3 	bl	8009970 <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a0b      	ldr	r2, [pc, #44]	; (800063c <MX_FREERTOS_Init+0x60>)
 800060e:	6013      	str	r3, [r2, #0]

  /* creation of Control */
  ControlHandle = osThreadNew(initControl, NULL, &Control_attributes);
 8000610:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <MX_FREERTOS_Init+0x64>)
 8000612:	2100      	movs	r1, #0
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <MX_FREERTOS_Init+0x68>)
 8000616:	f009 f9ab 	bl	8009970 <osThreadNew>
 800061a:	4603      	mov	r3, r0
 800061c:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <MX_FREERTOS_Init+0x6c>)
 800061e:	6013      	str	r3, [r2, #0]
  /* add events, ... */


  /* USER CODE END RTOS_EVENTS */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	08010c7c 	.word	0x08010c7c
 8000628:	2400016c 	.word	0x2400016c
 800062c:	08010c94 	.word	0x08010c94
 8000630:	24000170 	.word	0x24000170
 8000634:	08010c34 	.word	0x08010c34
 8000638:	0800064d 	.word	0x0800064d
 800063c:	24000164 	.word	0x24000164
 8000640:	08010c58 	.word	0x08010c58
 8000644:	08000725 	.word	0x08000725
 8000648:	24000168 	.word	0x24000168

0800064c <initMeasurements>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_initMeasurements */
void initMeasurements(void *argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	/* USER CODE BEGIN Measurements task */

	// Wait for notification from Control task
	ulTaskNotifyTake(pdTRUE, 1);
 8000654:	2101      	movs	r1, #1
 8000656:	2001      	movs	r0, #1
 8000658:	f00b f9a4 	bl	800b9a4 <ulTaskNotifyTake>

    // Read ADC3 and use getLinear and getTemperature results
    float current = getLinear(ADC3_raw[0], currentSlope, currentOffset);
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <initMeasurements+0xb4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a28      	ldr	r2, [pc, #160]	; (8000704 <initMeasurements+0xb8>)
 8000662:	6812      	ldr	r2, [r2, #0]
 8000664:	ee07 2a90 	vmov	s15, r2
 8000668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800066c:	4a26      	ldr	r2, [pc, #152]	; (8000708 <initMeasurements+0xbc>)
 800066e:	6812      	ldr	r2, [r2, #0]
 8000670:	ee07 2a10 	vmov	s14, r2
 8000674:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000678:	eef0 0a47 	vmov.f32	s1, s14
 800067c:	eeb0 0a67 	vmov.f32	s0, s15
 8000680:	4618      	mov	r0, r3
 8000682:	f000 faf3 	bl	8000c6c <getLinear>
 8000686:	ed87 0a07 	vstr	s0, [r7, #28]
    float voltage = getLinear(ADC3_raw[2], voltageSlope, voltageOffset);
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <initMeasurements+0xb4>)
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	4a1f      	ldr	r2, [pc, #124]	; (800070c <initMeasurements+0xc0>)
 8000690:	6812      	ldr	r2, [r2, #0]
 8000692:	ee07 2a90 	vmov	s15, r2
 8000696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800069a:	4a1d      	ldr	r2, [pc, #116]	; (8000710 <initMeasurements+0xc4>)
 800069c:	6812      	ldr	r2, [r2, #0]
 800069e:	ee07 2a10 	vmov	s14, r2
 80006a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80006a6:	eef0 0a47 	vmov.f32	s1, s14
 80006aa:	eeb0 0a67 	vmov.f32	s0, s15
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fadc 	bl	8000c6c <getLinear>
 80006b4:	ed87 0a06 	vstr	s0, [r7, #24]
    float temp = tempLUT[ADC3_raw[1]]; // LUT array indexing
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <initMeasurements+0xb4>)
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	4a15      	ldr	r2, [pc, #84]	; (8000714 <initMeasurements+0xc8>)
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4413      	add	r3, r2
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	617b      	str	r3, [r7, #20]
      float current;
      float voltage;
      float temp;
    } measurements;

    measurements.current = current;
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	60bb      	str	r3, [r7, #8]
    measurements.voltage = voltage;
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	60fb      	str	r3, [r7, #12]
    measurements.temp = temp;
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	613b      	str	r3, [r7, #16]

    // Send measurements to qMeasurements
    osMessageQueuePut(qMeasurementsHandle, &measurements, 0, 0);
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <initMeasurements+0xcc>)
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	f107 0108 	add.w	r1, r7, #8
 80006da:	2300      	movs	r3, #0
 80006dc:	2200      	movs	r2, #0
 80006de:	f009 fa4d 	bl	8009b7c <osMessageQueuePut>

    measurementsAlive++;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <initMeasurements+0xd0>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	4a0c      	ldr	r2, [pc, #48]	; (800071c <initMeasurements+0xd0>)
 80006ea:	6013      	str	r3, [r2, #0]

    // Resume Control task
    vTaskResume(ControlHandle);
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <initMeasurements+0xd4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f00a fbf3 	bl	800aedc <vTaskResume>

    // Suspend Measurements task
    vTaskSuspend(NULL);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f00a fb48 	bl	800ad8c <vTaskSuspend>
  {
 80006fc:	e7aa      	b.n	8000654 <initMeasurements+0x8>
 80006fe:	bf00      	nop
 8000700:	24000174 	.word	0x24000174
 8000704:	08010c24 	.word	0x08010c24
 8000708:	08010c28 	.word	0x08010c28
 800070c:	08010c2c 	.word	0x08010c2c
 8000710:	08010c30 	.word	0x08010c30
 8000714:	0800cc24 	.word	0x0800cc24
 8000718:	2400016c 	.word	0x2400016c
 800071c:	2400015c 	.word	0x2400015c
 8000720:	24000168 	.word	0x24000168

08000724 <initControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_initControl */
void initControl(void *argument)
{
 8000724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000726:	b097      	sub	sp, #92	; 0x5c
 8000728:	af10      	add	r7, sp, #64	; 0x40
 800072a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	/* USER CODE BEGIN Control task */

	// Wait for notification from Measurements task
	ulTaskNotifyTake(pdTRUE, 1);
 800072c:	2101      	movs	r1, #1
 800072e:	2001      	movs	r0, #1
 8000730:	f00b f938 	bl	800b9a4 <ulTaskNotifyTake>

    // Receive from qMeasurements
    struct Measurement measurements;
    osMessageQueueGet(qMeasurementsHandle, &measurements, 0, 0);
 8000734:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <initControl+0x100>)
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	f107 010c 	add.w	r1, r7, #12
 800073c:	2300      	movs	r3, #0
 800073e:	2200      	movs	r2, #0
 8000740:	f009 fa7c 	bl	8009c3c <osMessageQueueGet>

    // Calculate duty based on received current and setpoint
    currentSetpoint = (currentSetpoint < 0.0f) ? 0.0f : (currentSetpoint > 4.0f) ? 4.0f : currentSetpoint;
 8000744:	4b38      	ldr	r3, [pc, #224]	; (8000828 <initControl+0x104>)
 8000746:	edd3 7a00 	vldr	s15, [r3]
 800074a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800074e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000752:	d502      	bpl.n	800075a <initControl+0x36>
 8000754:	f04f 0300 	mov.w	r3, #0
 8000758:	e00e      	b.n	8000778 <initControl+0x54>
 800075a:	4b33      	ldr	r3, [pc, #204]	; (8000828 <initControl+0x104>)
 800075c:	edd3 7a00 	vldr	s15, [r3]
 8000760:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000764:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076c:	dd02      	ble.n	8000774 <initControl+0x50>
 800076e:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8000772:	e001      	b.n	8000778 <initControl+0x54>
 8000774:	4b2c      	ldr	r3, [pc, #176]	; (8000828 <initControl+0x104>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a2b      	ldr	r2, [pc, #172]	; (8000828 <initControl+0x104>)
 800077a:	6013      	str	r3, [r2, #0]
    float duty = (currentSetpoint - measurements.current) / measurements.voltage;
 800077c:	4b2a      	ldr	r3, [pc, #168]	; (8000828 <initControl+0x104>)
 800077e:	ed93 7a00 	vldr	s14, [r3]
 8000782:	edd7 7a03 	vldr	s15, [r7, #12]
 8000786:	ee77 6a67 	vsub.f32	s13, s14, s15
 800078a:	ed97 7a04 	vldr	s14, [r7, #16]
 800078e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000792:	edc7 7a02 	vstr	s15, [r7, #8]
    duty = 0.5;
 8000796:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800079a:	60bb      	str	r3, [r7, #8]

    if (enable) {
 800079c:	4b23      	ldr	r3, [pc, #140]	; (800082c <initControl+0x108>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d016      	beq.n	80007d4 <initControl+0xb0>
    	enablePWM(htim1, duty);
 80007a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80007aa:	4e21      	ldr	r6, [pc, #132]	; (8000830 <initControl+0x10c>)
 80007ac:	466d      	mov	r5, sp
 80007ae:	f106 0410 	add.w	r4, r6, #16
 80007b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007be:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007c2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80007c6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007ca:	eeb0 0a67 	vmov.f32	s0, s15
 80007ce:	f000 fa79 	bl	8000cc4 <enablePWM>
 80007d2:	e011      	b.n	80007f8 <initControl+0xd4>

    } else {
    	disablePWM(htim1);
 80007d4:	4e16      	ldr	r6, [pc, #88]	; (8000830 <initControl+0x10c>)
 80007d6:	466d      	mov	r5, sp
 80007d8:	f106 0410 	add.w	r4, r6, #16
 80007dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007e8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80007f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007f4:	f000 fa9e 	bl	8000d34 <disablePWM>

    }

    // Send duty to qControl
    osMessageQueuePut(qControlHandle, &duty, 0, 0);
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <initControl+0x110>)
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	f107 0108 	add.w	r1, r7, #8
 8000800:	2300      	movs	r3, #0
 8000802:	2200      	movs	r2, #0
 8000804:	f009 f9ba 	bl	8009b7c <osMessageQueuePut>

    controlAlive++;
 8000808:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <initControl+0x114>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <initControl+0x114>)
 8000810:	6013      	str	r3, [r2, #0]

    // Resume Control task
    vTaskResume(MeasurementsHandle);
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <initControl+0x118>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f00a fb60 	bl	800aedc <vTaskResume>

    // Suspend Measurements task
    vTaskSuspend(NULL);
 800081c:	2000      	movs	r0, #0
 800081e:	f00a fab5 	bl	800ad8c <vTaskSuspend>
  {
 8000822:	e783      	b.n	800072c <initControl+0x8>
 8000824:	2400016c 	.word	0x2400016c
 8000828:	24000180 	.word	0x24000180
 800082c:	24000184 	.word	0x24000184
 8000830:	240001d4 	.word	0x240001d4
 8000834:	24000170 	.word	0x24000170
 8000838:	24000160 	.word	0x24000160
 800083c:	24000164 	.word	0x24000164

08000840 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08e      	sub	sp, #56	; 0x38
 8000844:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b8a      	ldr	r3, [pc, #552]	; (8000a80 <MX_GPIO_Init+0x240>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085c:	4a88      	ldr	r2, [pc, #544]	; (8000a80 <MX_GPIO_Init+0x240>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000866:	4b86      	ldr	r3, [pc, #536]	; (8000a80 <MX_GPIO_Init+0x240>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	623b      	str	r3, [r7, #32]
 8000872:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000874:	4b82      	ldr	r3, [pc, #520]	; (8000a80 <MX_GPIO_Init+0x240>)
 8000876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087a:	4a81      	ldr	r2, [pc, #516]	; (8000a80 <MX_GPIO_Init+0x240>)
 800087c:	f043 0320 	orr.w	r3, r3, #32
 8000880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000884:	4b7e      	ldr	r3, [pc, #504]	; (8000a80 <MX_GPIO_Init+0x240>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088a:	f003 0320 	and.w	r3, r3, #32
 800088e:	61fb      	str	r3, [r7, #28]
 8000890:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	4b7b      	ldr	r3, [pc, #492]	; (8000a80 <MX_GPIO_Init+0x240>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000898:	4a79      	ldr	r2, [pc, #484]	; (8000a80 <MX_GPIO_Init+0x240>)
 800089a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a2:	4b77      	ldr	r3, [pc, #476]	; (8000a80 <MX_GPIO_Init+0x240>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b73      	ldr	r3, [pc, #460]	; (8000a80 <MX_GPIO_Init+0x240>)
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b6:	4a72      	ldr	r2, [pc, #456]	; (8000a80 <MX_GPIO_Init+0x240>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c0:	4b6f      	ldr	r3, [pc, #444]	; (8000a80 <MX_GPIO_Init+0x240>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b6c      	ldr	r3, [pc, #432]	; (8000a80 <MX_GPIO_Init+0x240>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d4:	4a6a      	ldr	r2, [pc, #424]	; (8000a80 <MX_GPIO_Init+0x240>)
 80008d6:	f043 0302 	orr.w	r3, r3, #2
 80008da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008de:	4b68      	ldr	r3, [pc, #416]	; (8000a80 <MX_GPIO_Init+0x240>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	f003 0302 	and.w	r3, r3, #2
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ec:	4b64      	ldr	r3, [pc, #400]	; (8000a80 <MX_GPIO_Init+0x240>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f2:	4a63      	ldr	r2, [pc, #396]	; (8000a80 <MX_GPIO_Init+0x240>)
 80008f4:	f043 0310 	orr.w	r3, r3, #16
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008fc:	4b60      	ldr	r3, [pc, #384]	; (8000a80 <MX_GPIO_Init+0x240>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000902:	f003 0310 	and.w	r3, r3, #16
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	4b5d      	ldr	r3, [pc, #372]	; (8000a80 <MX_GPIO_Init+0x240>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000910:	4a5b      	ldr	r2, [pc, #364]	; (8000a80 <MX_GPIO_Init+0x240>)
 8000912:	f043 0308 	orr.w	r3, r3, #8
 8000916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091a:	4b59      	ldr	r3, [pc, #356]	; (8000a80 <MX_GPIO_Init+0x240>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000928:	4b55      	ldr	r3, [pc, #340]	; (8000a80 <MX_GPIO_Init+0x240>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092e:	4a54      	ldr	r2, [pc, #336]	; (8000a80 <MX_GPIO_Init+0x240>)
 8000930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000938:	4b51      	ldr	r3, [pc, #324]	; (8000a80 <MX_GPIO_Init+0x240>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f244 0101 	movw	r1, #16385	; 0x4001
 800094c:	484d      	ldr	r0, [pc, #308]	; (8000a84 <MX_GPIO_Init+0x244>)
 800094e:	f003 fff1 	bl	8004934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2102      	movs	r1, #2
 8000956:	484c      	ldr	r0, [pc, #304]	; (8000a88 <MX_GPIO_Init+0x248>)
 8000958:	f003 ffec 	bl	8004934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800095c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	4619      	mov	r1, r3
 8000970:	4846      	ldr	r0, [pc, #280]	; (8000a8c <MX_GPIO_Init+0x24c>)
 8000972:	f003 fe2f 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000976:	2386      	movs	r3, #134	; 0x86
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000986:	230b      	movs	r3, #11
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	483f      	ldr	r0, [pc, #252]	; (8000a90 <MX_GPIO_Init+0x250>)
 8000992:	f003 fe1f 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000996:	2330      	movs	r3, #48	; 0x30
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a6:	230b      	movs	r3, #11
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4619      	mov	r1, r3
 80009b0:	4836      	ldr	r0, [pc, #216]	; (8000a8c <MX_GPIO_Init+0x24c>)
 80009b2:	f003 fe0f 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009b6:	f244 0301 	movw	r3, #16385	; 0x4001
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009cc:	4619      	mov	r1, r3
 80009ce:	482d      	ldr	r0, [pc, #180]	; (8000a84 <MX_GPIO_Init+0x244>)
 80009d0:	f003 fe00 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009e6:	230b      	movs	r3, #11
 80009e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	4619      	mov	r1, r3
 80009f0:	4824      	ldr	r0, [pc, #144]	; (8000a84 <MX_GPIO_Init+0x244>)
 80009f2:	f003 fdef 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80009f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4820      	ldr	r0, [pc, #128]	; (8000a94 <MX_GPIO_Init+0x254>)
 8000a14:	f003 fdde 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000a18:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000a2a:	230a      	movs	r3, #10
 8000a2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	4619      	mov	r1, r3
 8000a34:	4816      	ldr	r0, [pc, #88]	; (8000a90 <MX_GPIO_Init+0x250>)
 8000a36:	f003 fdcd 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a4c:	230b      	movs	r3, #11
 8000a4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	4810      	ldr	r0, [pc, #64]	; (8000a98 <MX_GPIO_Init+0x258>)
 8000a58:	f003 fdbc 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a70:	4619      	mov	r1, r3
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_GPIO_Init+0x248>)
 8000a74:	f003 fdae 	bl	80045d4 <HAL_GPIO_Init>

}
 8000a78:	bf00      	nop
 8000a7a:	3738      	adds	r7, #56	; 0x38
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	58024400 	.word	0x58024400
 8000a84:	58020400 	.word	0x58020400
 8000a88:	58021000 	.word	0x58021000
 8000a8c:	58020800 	.word	0x58020800
 8000a90:	58020000 	.word	0x58020000
 8000a94:	58020c00 	.word	0x58020c00
 8000a98:	58021800 	.word	0x58021800

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa0:	f000 fc06 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa4:	f000 f81c 	bl	8000ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa8:	f7ff feca 	bl	8000840 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aac:	f7ff fd66 	bl	800057c <MX_DMA_Init>
  MX_ADC3_Init();
 8000ab0:	f7ff fc16 	bl	80002e0 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000ab4:	f000 fab8 	bl	8001028 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_Base_Start(&htim1);
 8000ab8:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <main+0x3c>)
 8000aba:	f007 fcf7 	bl	80084ac <HAL_TIM_Base_Start>

	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000abe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <main+0x40>)
 8000ac6:	f001 ff4d 	bl	8002964 <HAL_ADCEx_Calibration_Start>
//	HAL_ADC_Start_DMA(&hadc3, (uint32_t *) Results_ADC3_buffer,3);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000aca:	f008 ff07 	bl	80098dc <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000ace:	f7ff fd85 	bl	80005dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ad2:	f008 ff27 	bl	8009924 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <main+0x3a>
 8000ad8:	240001d4 	.word	0x240001d4
 8000adc:	24000080 	.word	0x24000080

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b09e      	sub	sp, #120	; 0x78
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aea:	224c      	movs	r2, #76	; 0x4c
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f00b ff7c 	bl	800c9ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2220      	movs	r2, #32
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f00b ff75 	bl	800c9ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b02:	2002      	movs	r0, #2
 8000b04:	f003 ff30 	bl	8004968 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	4b48      	ldr	r3, [pc, #288]	; (8000c30 <SystemClock_Config+0x150>)
 8000b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b10:	4a47      	ldr	r2, [pc, #284]	; (8000c30 <SystemClock_Config+0x150>)
 8000b12:	f023 0301 	bic.w	r3, r3, #1
 8000b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b18:	4b45      	ldr	r3, [pc, #276]	; (8000c30 <SystemClock_Config+0x150>)
 8000b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	4b44      	ldr	r3, [pc, #272]	; (8000c34 <SystemClock_Config+0x154>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a43      	ldr	r2, [pc, #268]	; (8000c34 <SystemClock_Config+0x154>)
 8000b28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b41      	ldr	r3, [pc, #260]	; (8000c34 <SystemClock_Config+0x154>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b3a:	bf00      	nop
 8000b3c:	4b3d      	ldr	r3, [pc, #244]	; (8000c34 <SystemClock_Config+0x154>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b48:	d1f8      	bne.n	8000b3c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b3b      	ldr	r3, [pc, #236]	; (8000c38 <SystemClock_Config+0x158>)
 8000b4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b50:	4a39      	ldr	r2, [pc, #228]	; (8000c38 <SystemClock_Config+0x158>)
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b5a:	4b37      	ldr	r3, [pc, #220]	; (8000c38 <SystemClock_Config+0x158>)
 8000b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b68:	2300      	movs	r3, #0
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <SystemClock_Config+0x154>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a30      	ldr	r2, [pc, #192]	; (8000c34 <SystemClock_Config+0x154>)
 8000b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <SystemClock_Config+0x154>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b2b      	ldr	r3, [pc, #172]	; (8000c30 <SystemClock_Config+0x150>)
 8000b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b86:	4a2a      	ldr	r2, [pc, #168]	; (8000c30 <SystemClock_Config+0x150>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b8e:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <SystemClock_Config+0x150>)
 8000b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b9a:	bf00      	nop
 8000b9c:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <SystemClock_Config+0x154>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ba8:	d1f8      	bne.n	8000b9c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000baa:	2301      	movs	r3, #1
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000bc0:	2378      	movs	r3, #120	; 0x78
 8000bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 fefb 	bl	80049dc <HAL_RCC_OscConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000bec:	f000 f838 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf0:	233f      	movs	r3, #63	; 0x3f
 8000bf2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c00:	2340      	movs	r3, #64	; 0x40
 8000c02:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c04:	2340      	movs	r3, #64	; 0x40
 8000c06:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	2104      	movs	r1, #4
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f004 fb39 	bl	8005290 <HAL_RCC_ClockConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000c24:	f000 f81c 	bl	8000c60 <Error_Handler>
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3778      	adds	r7, #120	; 0x78
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	58000400 	.word	0x58000400
 8000c34:	58024800 	.word	0x58024800
 8000c38:	58024400 	.word	0x58024400

08000c3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d101      	bne.n	8000c52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c4e:	f000 fb6b 	bl	8001328 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40001000 	.word	0x40001000

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <Error_Handler+0x8>
	...

08000c6c <getLinear>:
 * @param bits The ADC reading.
 * @param slope The slope (volts per unit).
 * @param offset The offset (volts at zero).
 * @return The physical measurement.
 */
float getLinear(uint32_t bits, float slope, float offset) {
 8000c6c:	b480      	push	{r7}
 8000c6e:	b087      	sub	sp, #28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	ed87 0a02 	vstr	s0, [r7, #8]
 8000c78:	edc7 0a01 	vstr	s1, [r7, #4]
    // Convert ADC reading to voltage
    float voltage = bits * (3.3f / 4095); // Assuming 12-bit ADC and 3.3V reference
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c86:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000cc0 <getLinear+0x54>
 8000c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c8e:	edc7 7a05 	vstr	s15, [r7, #20]

    // Convert voltage to physical measurement
    float measurement = (voltage - offset) / slope;
 8000c92:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c9a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000c9e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ca6:	edc7 7a04 	vstr	s15, [r7, #16]

    return measurement;
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	ee07 3a90 	vmov	s15, r3
}
 8000cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb4:	371c      	adds	r7, #28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	3a534067 	.word	0x3a534067

08000cc4 <enablePWM>:


void enablePWM(TIM_HandleTypeDef htimX, float duty){
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	f107 0c10 	add.w	ip, r7, #16
 8000cd0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000cd4:	ed87 0a01 	vstr	s0, [r7, #4]

	//Reset the counter
	htimX.Instance->CNT=0;
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24

	//Enable outputs and select the polarity of each output
	htimX.Instance->CCER = 0xDDD;
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	f640 52dd 	movw	r2, #3549	; 0xddd
 8000ce4:	621a      	str	r2, [r3, #32]

	//Enable Main Output
	htimX.Instance->BDTR |=(1<<15);
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cf0:	645a      	str	r2, [r3, #68]	; 0x44

	//Enable Counter
	htimX.Instance->CR1 |=1;
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	f042 0201 	orr.w	r2, r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]

	htimX.Instance->CCR1 = duty;
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d08:	ee17 2a90 	vmov	r2, s15
 8000d0c:	635a      	str	r2, [r3, #52]	; 0x34
	htimX.Instance->CCR2 = 1-duty;
 8000d0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d20:	ee17 2a90 	vmov	r2, s15
 8000d24:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	b004      	add	sp, #16
 8000d32:	4770      	bx	lr

08000d34 <disablePWM>:

void disablePWM(TIM_HandleTypeDef htimX){
 8000d34:	b084      	sub	sp, #16
 8000d36:	b490      	push	{r4, r7}
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	f107 0408 	add.w	r4, r7, #8
 8000d3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//Disable outputs and select the polarity of each output

	htimX.Instance->CNT=0;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	2200      	movs	r2, #0
 8000d46:	625a      	str	r2, [r3, #36]	; 0x24

	//	htim1.Instance->CCER = 0x888;
	htimX.Instance->CCER = 0xCCC;
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	f640 42cc 	movw	r2, #3276	; 0xccc
 8000d4e:	621a      	str	r2, [r3, #32]
	//	htim1.Instance->CCER |= 0x555;

	//Disable Main Output
	htimX.Instance->BDTR &= 0xFFFF7FFF;
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d5a:	645a      	str	r2, [r3, #68]	; 0x44
	//	htim1.Instance->BDTR &=(0<<15);

	//Disable Counter (No se si es necesario)
	htimX.Instance->CR1 |=1;
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	f042 0201 	orr.w	r2, r2, #1
 8000d66:	601a      	str	r2, [r3, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc90      	pop	{r4, r7}
 8000d6e:	b004      	add	sp, #16
 8000d70:	4770      	bx	lr
	...

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_MspInit+0x38>)
 8000d7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_MspInit+0x38>)
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_MspInit+0x38>)
 8000d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f06f 0001 	mvn.w	r0, #1
 8000da0:	f001 ff2e 	bl	8002c00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	58024400 	.word	0x58024400

08000db0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b090      	sub	sp, #64	; 0x40
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b0f      	cmp	r3, #15
 8000dbc:	d827      	bhi.n	8000e0e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	2036      	movs	r0, #54	; 0x36
 8000dc4:	f001 ff1c 	bl	8002c00 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dc8:	2036      	movs	r0, #54	; 0x36
 8000dca:	f001 ff33 	bl	8002c34 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000dce:	4a29      	ldr	r2, [pc, #164]	; (8000e74 <HAL_InitTick+0xc4>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dd4:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <HAL_InitTick+0xc8>)
 8000dd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dda:	4a27      	ldr	r2, [pc, #156]	; (8000e78 <HAL_InitTick+0xc8>)
 8000ddc:	f043 0310 	orr.w	r3, r3, #16
 8000de0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <HAL_InitTick+0xc8>)
 8000de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000df2:	f107 0210 	add.w	r2, r7, #16
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f004 fdbd 	bl	800597c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e04:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d106      	bne.n	8000e1a <HAL_InitTick+0x6a>
 8000e0c:	e001      	b.n	8000e12 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e02b      	b.n	8000e6a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e12:	f004 fd9d 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 8000e16:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000e18:	e004      	b.n	8000e24 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e1a:	f004 fd99 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e26:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <HAL_InitTick+0xcc>)
 8000e28:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2c:	0c9b      	lsrs	r3, r3, #18
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <HAL_InitTick+0xd0>)
 8000e34:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <HAL_InitTick+0xd4>)
 8000e36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_InitTick+0xd0>)
 8000e3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e3e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e40:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <HAL_InitTick+0xd0>)
 8000e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e44:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_InitTick+0xd0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_InitTick+0xd0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e52:	480b      	ldr	r0, [pc, #44]	; (8000e80 <HAL_InitTick+0xd0>)
 8000e54:	f007 fad2 	bl	80083fc <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d104      	bne.n	8000e68 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e5e:	4808      	ldr	r0, [pc, #32]	; (8000e80 <HAL_InitTick+0xd0>)
 8000e60:	f007 fb94 	bl	800858c <HAL_TIM_Base_Start_IT>
 8000e64:	4603      	mov	r3, r0
 8000e66:	e000      	b.n	8000e6a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3740      	adds	r7, #64	; 0x40
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	24000008 	.word	0x24000008
 8000e78:	58024400 	.word	0x58024400
 8000e7c:	431bde83 	.word	0x431bde83
 8000e80:	24000188 	.word	0x24000188
 8000e84:	40001000 	.word	0x40001000

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <DMA1_Stream0_IRQHandler+0x10>)
 8000eba:	f002 fa25 	bl	8003308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	240000e4 	.word	0x240000e4

08000ec8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <TIM1_BRK_IRQHandler+0x10>)
 8000ece:	f007 fc36 	bl	800873e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	240001d4 	.word	0x240001d4

08000edc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <TIM1_UP_IRQHandler+0x10>)
 8000ee2:	f007 fc2c 	bl	800873e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	240001d4 	.word	0x240001d4

08000ef0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <TIM6_DAC_IRQHandler+0x10>)
 8000ef6:	f007 fc22 	bl	800873e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	24000188 	.word	0x24000188

08000f04 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <ADC3_IRQHandler+0x10>)
 8000f0a:	f000 fde5 	bl	8001ad8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	24000080 	.word	0x24000080

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b37      	ldr	r3, [pc, #220]	; (8000ffc <SystemInit+0xe4>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a36      	ldr	r2, [pc, #216]	; (8000ffc <SystemInit+0xe4>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f2c:	4b34      	ldr	r3, [pc, #208]	; (8001000 <SystemInit+0xe8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 030f 	and.w	r3, r3, #15
 8000f34:	2b06      	cmp	r3, #6
 8000f36:	d807      	bhi.n	8000f48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f38:	4b31      	ldr	r3, [pc, #196]	; (8001000 <SystemInit+0xe8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f023 030f 	bic.w	r3, r3, #15
 8000f40:	4a2f      	ldr	r2, [pc, #188]	; (8001000 <SystemInit+0xe8>)
 8000f42:	f043 0307 	orr.w	r3, r3, #7
 8000f46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f48:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <SystemInit+0xec>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a2d      	ldr	r2, [pc, #180]	; (8001004 <SystemInit+0xec>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f54:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <SystemInit+0xec>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <SystemInit+0xec>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4929      	ldr	r1, [pc, #164]	; (8001004 <SystemInit+0xec>)
 8000f60:	4b29      	ldr	r3, [pc, #164]	; (8001008 <SystemInit+0xf0>)
 8000f62:	4013      	ands	r3, r2
 8000f64:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <SystemInit+0xe8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f72:	4b23      	ldr	r3, [pc, #140]	; (8001000 <SystemInit+0xe8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f023 030f 	bic.w	r3, r3, #15
 8000f7a:	4a21      	ldr	r2, [pc, #132]	; (8001000 <SystemInit+0xe8>)
 8000f7c:	f043 0307 	orr.w	r3, r3, #7
 8000f80:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <SystemInit+0xec>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <SystemInit+0xec>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <SystemInit+0xec>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <SystemInit+0xec>)
 8000f96:	4a1d      	ldr	r2, [pc, #116]	; (800100c <SystemInit+0xf4>)
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <SystemInit+0xec>)
 8000f9c:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <SystemInit+0xf8>)
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <SystemInit+0xec>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <SystemInit+0xfc>)
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <SystemInit+0xec>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <SystemInit+0xec>)
 8000fae:	4a19      	ldr	r2, [pc, #100]	; (8001014 <SystemInit+0xfc>)
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <SystemInit+0xec>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <SystemInit+0xec>)
 8000fba:	4a16      	ldr	r2, [pc, #88]	; (8001014 <SystemInit+0xfc>)
 8000fbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <SystemInit+0xec>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <SystemInit+0xec>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <SystemInit+0xec>)
 8000fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <SystemInit+0xec>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <SystemInit+0x100>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <SystemInit+0x104>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fe2:	d202      	bcs.n	8000fea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <SystemInit+0x108>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <SystemInit+0x10c>)
 8000fec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ff0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00
 8001000:	52002000 	.word	0x52002000
 8001004:	58024400 	.word	0x58024400
 8001008:	eaf6ed7f 	.word	0xeaf6ed7f
 800100c:	02020200 	.word	0x02020200
 8001010:	01ff0000 	.word	0x01ff0000
 8001014:	01010280 	.word	0x01010280
 8001018:	5c001000 	.word	0x5c001000
 800101c:	ffff0000 	.word	0xffff0000
 8001020:	51008108 	.word	0x51008108
 8001024:	52004000 	.word	0x52004000

08001028 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b09a      	sub	sp, #104	; 0x68
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001048:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	222c      	movs	r2, #44	; 0x2c
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f00b fcc2 	bl	800c9ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001068:	4b44      	ldr	r3, [pc, #272]	; (800117c <MX_TIM1_Init+0x154>)
 800106a:	4a45      	ldr	r2, [pc, #276]	; (8001180 <MX_TIM1_Init+0x158>)
 800106c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800106e:	4b43      	ldr	r3, [pc, #268]	; (800117c <MX_TIM1_Init+0x154>)
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001074:	4b41      	ldr	r3, [pc, #260]	; (800117c <MX_TIM1_Init+0x154>)
 8001076:	2220      	movs	r2, #32
 8001078:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = FSW;
 800107a:	4b40      	ldr	r3, [pc, #256]	; (800117c <MX_TIM1_Init+0x154>)
 800107c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001080:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001082:	4b3e      	ldr	r3, [pc, #248]	; (800117c <MX_TIM1_Init+0x154>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001088:	4b3c      	ldr	r3, [pc, #240]	; (800117c <MX_TIM1_Init+0x154>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800108e:	4b3b      	ldr	r3, [pc, #236]	; (800117c <MX_TIM1_Init+0x154>)
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001094:	4839      	ldr	r0, [pc, #228]	; (800117c <MX_TIM1_Init+0x154>)
 8001096:	f007 f9b1 	bl	80083fc <HAL_TIM_Base_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010a0:	f7ff fdde 	bl	8000c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010ae:	4619      	mov	r1, r3
 80010b0:	4832      	ldr	r0, [pc, #200]	; (800117c <MX_TIM1_Init+0x154>)
 80010b2:	f007 fd77 	bl	8008ba4 <HAL_TIM_ConfigClockSource>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010bc:	f7ff fdd0 	bl	8000c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010c0:	482e      	ldr	r0, [pc, #184]	; (800117c <MX_TIM1_Init+0x154>)
 80010c2:	f007 fadb 	bl	800867c <HAL_TIM_PWM_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010cc:	f7ff fdc8 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010d0:	2320      	movs	r3, #32
 80010d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010e0:	4619      	mov	r1, r3
 80010e2:	4826      	ldr	r0, [pc, #152]	; (800117c <MX_TIM1_Init+0x154>)
 80010e4:	f008 fa8c 	bl	8009600 <HAL_TIMEx_MasterConfigSynchronization>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010ee:	f7ff fdb7 	bl	8000c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f2:	2360      	movs	r3, #96	; 0x60
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010fa:	2300      	movs	r3, #0
 80010fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80010fe:	2308      	movs	r3, #8
 8001100:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800110a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800110e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001110:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001114:	2200      	movs	r2, #0
 8001116:	4619      	mov	r1, r3
 8001118:	4818      	ldr	r0, [pc, #96]	; (800117c <MX_TIM1_Init+0x154>)
 800111a:	f007 fc2f 	bl	800897c <HAL_TIM_PWM_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001124:	f7ff fd9c 	bl	8000c60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8001130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001134:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = DEAD_TIME;
 8001136:	23f0      	movs	r3, #240	; 0xf0
 8001138:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800113e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001142:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800114c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	4619      	mov	r1, r3
 800115e:	4807      	ldr	r0, [pc, #28]	; (800117c <MX_TIM1_Init+0x154>)
 8001160:	f008 fadc 	bl	800971c <HAL_TIMEx_ConfigBreakDeadTime>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800116a:	f7ff fd79 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <MX_TIM1_Init+0x154>)
 8001170:	f000 f838 	bl	80011e4 <HAL_TIM_MspPostInit>

}
 8001174:	bf00      	nop
 8001176:	3768      	adds	r7, #104	; 0x68
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	240001d4 	.word	0x240001d4
 8001180:	40010000 	.word	0x40010000

08001184 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a12      	ldr	r2, [pc, #72]	; (80011dc <HAL_TIM_Base_MspInit+0x58>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d11e      	bne.n	80011d4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_TIM_Base_MspInit+0x5c>)
 8001198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800119c:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <HAL_TIM_Base_MspInit+0x5c>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_TIM_Base_MspInit+0x5c>)
 80011a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2105      	movs	r1, #5
 80011b8:	2018      	movs	r0, #24
 80011ba:	f001 fd21 	bl	8002c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80011be:	2018      	movs	r0, #24
 80011c0:	f001 fd38 	bl	8002c34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2105      	movs	r1, #5
 80011c8:	2019      	movs	r0, #25
 80011ca:	f001 fd19 	bl	8002c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011ce:	2019      	movs	r0, #25
 80011d0:	f001 fd30 	bl	8002c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40010000 	.word	0x40010000
 80011e0:	58024400 	.word	0x58024400

080011e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a13      	ldr	r2, [pc, #76]	; (8001250 <HAL_TIM_MspPostInit+0x6c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d11f      	bne.n	8001246 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_TIM_MspPostInit+0x70>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120c:	4a11      	ldr	r2, [pc, #68]	; (8001254 <HAL_TIM_MspPostInit+0x70>)
 800120e:	f043 0310 	orr.w	r3, r3, #16
 8001212:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_TIM_MspPostInit+0x70>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001224:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001228:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001236:	2301      	movs	r3, #1
 8001238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <HAL_TIM_MspPostInit+0x74>)
 8001242:	f003 f9c7 	bl	80045d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40010000 	.word	0x40010000
 8001254:	58024400 	.word	0x58024400
 8001258:	58021000 	.word	0x58021000

0800125c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001260:	f7ff fe5a 	bl	8000f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	; (80012a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128a:	f00b fc0d 	bl	800caa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff fc05 	bl	8000a9c <main>
  bx  lr
 8001292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001294:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001298:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800129c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80012a0:	08010ccc 	.word	0x08010ccc
  ldr r2, =_sbss
 80012a4:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 80012a8:	24004d5c 	.word	0x24004d5c

080012ac <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b6:	2003      	movs	r0, #3
 80012b8:	f001 fc97 	bl	8002bea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012bc:	f004 f99e 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 80012c0:	4602      	mov	r2, r0
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_Init+0x68>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	0a1b      	lsrs	r3, r3, #8
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	4913      	ldr	r1, [pc, #76]	; (800131c <HAL_Init+0x6c>)
 80012ce:	5ccb      	ldrb	r3, [r1, r3]
 80012d0:	f003 031f 	and.w	r3, r3, #31
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
 80012d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_Init+0x68>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	4a0e      	ldr	r2, [pc, #56]	; (800131c <HAL_Init+0x6c>)
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
 80012f0:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <HAL_Init+0x70>)
 80012f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012f4:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <HAL_Init+0x74>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fa:	200f      	movs	r0, #15
 80012fc:	f7ff fd58 	bl	8000db0 <HAL_InitTick>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e002      	b.n	8001310 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800130a:	f7ff fd33 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	58024400 	.word	0x58024400
 800131c:	08010cac 	.word	0x08010cac
 8001320:	24000004 	.word	0x24000004
 8001324:	24000000 	.word	0x24000000

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	2400000c 	.word	0x2400000c
 800134c:	24000220 	.word	0x24000220

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	24000220 	.word	0x24000220

08001368 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_GetREVID+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	0c1b      	lsrs	r3, r3, #16
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	5c001000 	.word	0x5c001000

08001380 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	43db      	mvns	r3, r3
 8001392:	401a      	ands	r2, r3
 8001394:	4904      	ldr	r1, [pc, #16]	; (80013a8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	58000400 	.word	0x58000400

080013ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	431a      	orrs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	609a      	str	r2, [r3, #8]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	609a      	str	r2, [r3, #8]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3360      	adds	r3, #96	; 0x60
 8001426:	461a      	mov	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	430b      	orrs	r3, r1
 8001442:	431a      	orrs	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001448:	bf00      	nop
 800144a:	371c      	adds	r7, #28
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	431a      	orrs	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	611a      	str	r2, [r3, #16]
}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001486:	b480      	push	{r7}
 8001488:	b087      	sub	sp, #28
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3360      	adds	r3, #96	; 0x60
 8001496:	461a      	mov	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	431a      	orrs	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	601a      	str	r2, [r3, #0]
  }
}
 80014b0:	bf00      	nop
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b087      	sub	sp, #28
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3330      	adds	r3, #48	; 0x30
 80014f2:	461a      	mov	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	4413      	add	r3, r2
 8001500:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	211f      	movs	r1, #31
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	401a      	ands	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	0e9b      	lsrs	r3, r3, #26
 800151a:	f003 011f 	and.w	r1, r3, #31
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	fa01 f303 	lsl.w	r3, r1, r3
 8001528:	431a      	orrs	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800152e:	bf00      	nop
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3314      	adds	r3, #20
 8001570:	461a      	mov	r2, r3
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	0e5b      	lsrs	r3, r3, #25
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	4413      	add	r3, r2
 800157e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	0d1b      	lsrs	r3, r3, #20
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	2107      	movs	r1, #7
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	401a      	ands	r2, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	0d1b      	lsrs	r3, r3, #20
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	431a      	orrs	r2, r3
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015aa:	bf00      	nop
 80015ac:	371c      	adds	r7, #28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015d0:	43db      	mvns	r3, r3
 80015d2:	401a      	ands	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0318 	and.w	r3, r3, #24
 80015da:	4908      	ldr	r1, [pc, #32]	; (80015fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80015dc:	40d9      	lsrs	r1, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	400b      	ands	r3, r1
 80015e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015e6:	431a      	orrs	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	000fffff 	.word	0x000fffff

08001600 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 031f 	and.w	r3, r3, #31
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001646:	4013      	ands	r3, r2
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6093      	str	r3, [r2, #8]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	5fffffc0 	.word	0x5fffffc0

0800165c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800166c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001670:	d101      	bne.n	8001676 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001692:	4013      	ands	r3, r2
 8001694:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	6fffffc0 	.word	0x6fffffc0

080016ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016c0:	d101      	bne.n	80016c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <LL_ADC_Disable+0x24>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	f043 0202 	orr.w	r2, r3, #2
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	7fffffc0 	.word	0x7fffffc0

080016fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <LL_ADC_IsEnabled+0x18>
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <LL_ADC_IsEnabled+0x1a>
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b02      	cmp	r3, #2
 8001734:	d101      	bne.n	800173a <LL_ADC_IsDisableOngoing+0x18>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <LL_ADC_IsDisableOngoing+0x1a>
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b04      	cmp	r3, #4
 800175a:	d101      	bne.n	8001760 <LL_ADC_REG_IsConversionOngoing+0x18>
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b08      	cmp	r3, #8
 8001780:	d101      	bne.n	8001786 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e18f      	b.n	8001ace <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d109      	bne.n	80017d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7fe fe17 	bl	80003f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff41 	bl	800165c <LL_ADC_IsDeepPowerDownEnabled>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d004      	beq.n	80017ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff27 	bl	8001638 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ff5c 	bl	80016ac <LL_ADC_IsInternalRegulatorEnabled>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d114      	bne.n	8001824 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff40 	bl	8001684 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001804:	4b87      	ldr	r3, [pc, #540]	; (8001a24 <HAL_ADC_Init+0x290>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	099b      	lsrs	r3, r3, #6
 800180a:	4a87      	ldr	r2, [pc, #540]	; (8001a28 <HAL_ADC_Init+0x294>)
 800180c:	fba2 2303 	umull	r2, r3, r2, r3
 8001810:	099b      	lsrs	r3, r3, #6
 8001812:	3301      	adds	r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001816:	e002      	b.n	800181e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	3b01      	subs	r3, #1
 800181c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f9      	bne.n	8001818 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff3f 	bl	80016ac <LL_ADC_IsInternalRegulatorEnabled>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10d      	bne.n	8001850 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001838:	f043 0210 	orr.w	r2, r3, #16
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff77 	bl	8001748 <LL_ADC_REG_IsConversionOngoing>
 800185a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	f040 8129 	bne.w	8001abc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2b00      	cmp	r3, #0
 800186e:	f040 8125 	bne.w	8001abc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001876:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800187a:	f043 0202 	orr.w	r2, r3, #2
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff38 	bl	80016fc <LL_ADC_IsEnabled>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d136      	bne.n	8001900 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a65      	ldr	r2, [pc, #404]	; (8001a2c <HAL_ADC_Init+0x298>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d004      	beq.n	80018a6 <HAL_ADC_Init+0x112>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a63      	ldr	r2, [pc, #396]	; (8001a30 <HAL_ADC_Init+0x29c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d10e      	bne.n	80018c4 <HAL_ADC_Init+0x130>
 80018a6:	4861      	ldr	r0, [pc, #388]	; (8001a2c <HAL_ADC_Init+0x298>)
 80018a8:	f7ff ff28 	bl	80016fc <LL_ADC_IsEnabled>
 80018ac:	4604      	mov	r4, r0
 80018ae:	4860      	ldr	r0, [pc, #384]	; (8001a30 <HAL_ADC_Init+0x29c>)
 80018b0:	f7ff ff24 	bl	80016fc <LL_ADC_IsEnabled>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4323      	orrs	r3, r4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	e008      	b.n	80018d6 <HAL_ADC_Init+0x142>
 80018c4:	485b      	ldr	r0, [pc, #364]	; (8001a34 <HAL_ADC_Init+0x2a0>)
 80018c6:	f7ff ff19 	bl	80016fc <LL_ADC_IsEnabled>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf0c      	ite	eq
 80018d0:	2301      	moveq	r3, #1
 80018d2:	2300      	movne	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d012      	beq.n	8001900 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a53      	ldr	r2, [pc, #332]	; (8001a2c <HAL_ADC_Init+0x298>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d004      	beq.n	80018ee <HAL_ADC_Init+0x15a>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a51      	ldr	r2, [pc, #324]	; (8001a30 <HAL_ADC_Init+0x29c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_Init+0x15e>
 80018ee:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <HAL_ADC_Init+0x2a4>)
 80018f0:	e000      	b.n	80018f4 <HAL_ADC_Init+0x160>
 80018f2:	4a52      	ldr	r2, [pc, #328]	; (8001a3c <HAL_ADC_Init+0x2a8>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f7ff fd56 	bl	80013ac <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001900:	f7ff fd32 	bl	8001368 <HAL_GetREVID>
 8001904:	4603      	mov	r3, r0
 8001906:	f241 0203 	movw	r2, #4099	; 0x1003
 800190a:	4293      	cmp	r3, r2
 800190c:	d914      	bls.n	8001938 <HAL_ADC_Init+0x1a4>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b10      	cmp	r3, #16
 8001914:	d110      	bne.n	8001938 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	7d5b      	ldrb	r3, [r3, #21]
 800191a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001920:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001926:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7f1b      	ldrb	r3, [r3, #28]
 800192c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800192e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001930:	f043 030c 	orr.w	r3, r3, #12
 8001934:	61bb      	str	r3, [r7, #24]
 8001936:	e00d      	b.n	8001954 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7d5b      	ldrb	r3, [r3, #21]
 800193c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001942:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001948:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	7f1b      	ldrb	r3, [r3, #28]
 800194e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7f1b      	ldrb	r3, [r3, #28]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d106      	bne.n	800196a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	3b01      	subs	r3, #1
 8001962:	045b      	lsls	r3, r3, #17
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <HAL_ADC_Init+0x2ac>)
 800198e:	4013      	ands	r3, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	69b9      	ldr	r1, [r7, #24]
 8001996:	430b      	orrs	r3, r1
 8001998:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fed2 	bl	8001748 <LL_ADC_REG_IsConversionOngoing>
 80019a4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fedf 	bl	800176e <LL_ADC_INJ_IsConversionOngoing>
 80019b0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d15f      	bne.n	8001a78 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d15c      	bne.n	8001a78 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7d1b      	ldrb	r3, [r3, #20]
 80019c2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_ADC_Init+0x2b0>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	69b9      	ldr	r1, [r7, #24]
 80019dc:	430b      	orrs	r3, r1
 80019de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d130      	bne.n	8001a4c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_ADC_Init+0x2b4>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019fe:	3a01      	subs	r2, #1
 8001a00:	0411      	lsls	r1, r2, #16
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a06:	4311      	orrs	r1, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a0c:	4311      	orrs	r1, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a12:	430a      	orrs	r2, r1
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	611a      	str	r2, [r3, #16]
 8001a20:	e01c      	b.n	8001a5c <HAL_ADC_Init+0x2c8>
 8001a22:	bf00      	nop
 8001a24:	24000000 	.word	0x24000000
 8001a28:	053e2d63 	.word	0x053e2d63
 8001a2c:	40022000 	.word	0x40022000
 8001a30:	40022100 	.word	0x40022100
 8001a34:	58026000 	.word	0x58026000
 8001a38:	40022300 	.word	0x40022300
 8001a3c:	58026300 	.word	0x58026300
 8001a40:	fff0c003 	.word	0xfff0c003
 8001a44:	ffffbffc 	.word	0xffffbffc
 8001a48:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fe38 	bl	80026e8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d10c      	bne.n	8001a9a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f023 010f 	bic.w	r1, r3, #15
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	1e5a      	subs	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
 8001a98:	e007      	b.n	8001aaa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 020f 	bic.w	r2, r2, #15
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aae:	f023 0303 	bic.w	r3, r3, #3
 8001ab2:	f043 0201 	orr.w	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
 8001aba:	e007      	b.n	8001acc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac0:	f043 0210 	orr.w	r2, r3, #16
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001acc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd90      	pop	{r4, r7, pc}
 8001ad6:	bf00      	nop

08001ad8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a87      	ldr	r2, [pc, #540]	; (8001d18 <HAL_ADC_IRQHandler+0x240>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d004      	beq.n	8001b08 <HAL_ADC_IRQHandler+0x30>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a86      	ldr	r2, [pc, #536]	; (8001d1c <HAL_ADC_IRQHandler+0x244>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_IRQHandler+0x34>
 8001b08:	4b85      	ldr	r3, [pc, #532]	; (8001d20 <HAL_ADC_IRQHandler+0x248>)
 8001b0a:	e000      	b.n	8001b0e <HAL_ADC_IRQHandler+0x36>
 8001b0c:	4b85      	ldr	r3, [pc, #532]	; (8001d24 <HAL_ADC_IRQHandler+0x24c>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fd76 	bl	8001600 <LL_ADC_GetMultimode>
 8001b14:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d017      	beq.n	8001b50 <HAL_ADC_IRQHandler+0x78>
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d012      	beq.n	8001b50 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d105      	bne.n	8001b42 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 ff9a 	bl	8002a7c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <HAL_ADC_IRQHandler+0x8c>
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10a      	bne.n	8001b7a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8083 	beq.w	8001c76 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d07d      	beq.n	8001c76 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d105      	bne.n	8001b92 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fc90 	bl	80014bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d062      	beq.n	8001c68 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a5d      	ldr	r2, [pc, #372]	; (8001d1c <HAL_ADC_IRQHandler+0x244>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d002      	beq.n	8001bb2 <HAL_ADC_IRQHandler+0xda>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	e000      	b.n	8001bb4 <HAL_ADC_IRQHandler+0xdc>
 8001bb2:	4b59      	ldr	r3, [pc, #356]	; (8001d18 <HAL_ADC_IRQHandler+0x240>)
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d008      	beq.n	8001bce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d002      	beq.n	8001bce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b09      	cmp	r3, #9
 8001bcc:	d104      	bne.n	8001bd8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	623b      	str	r3, [r7, #32]
 8001bd6:	e00c      	b.n	8001bf2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a4f      	ldr	r2, [pc, #316]	; (8001d1c <HAL_ADC_IRQHandler+0x244>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d002      	beq.n	8001be8 <HAL_ADC_IRQHandler+0x110>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	e000      	b.n	8001bea <HAL_ADC_IRQHandler+0x112>
 8001be8:	4b4b      	ldr	r3, [pc, #300]	; (8001d18 <HAL_ADC_IRQHandler+0x240>)
 8001bea:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d135      	bne.n	8001c68 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d12e      	bne.n	8001c68 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fd9a 	bl	8001748 <LL_ADC_REG_IsConversionOngoing>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d11a      	bne.n	8001c50 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 020c 	bic.w	r2, r2, #12
 8001c28:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d112      	bne.n	8001c68 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	655a      	str	r2, [r3, #84]	; 0x54
 8001c4e:	e00b      	b.n	8001c68 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c54:	f043 0210 	orr.w	r2, r3, #16
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c60:	f043 0201 	orr.w	r2, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f96f 	bl	8001f4c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	220c      	movs	r2, #12
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_ADC_IRQHandler+0x1b2>
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	f003 0320 	and.w	r3, r3, #32
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10b      	bne.n	8001ca2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a0 	beq.w	8001dd6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 809a 	beq.w	8001dd6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fc3b 	bl	800153a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001cc4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fbf6 	bl	80014bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cd0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a11      	ldr	r2, [pc, #68]	; (8001d1c <HAL_ADC_IRQHandler+0x244>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d002      	beq.n	8001ce2 <HAL_ADC_IRQHandler+0x20a>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	e000      	b.n	8001ce4 <HAL_ADC_IRQHandler+0x20c>
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_ADC_IRQHandler+0x240>)
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d008      	beq.n	8001cfe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b06      	cmp	r3, #6
 8001cf6:	d002      	beq.n	8001cfe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2b07      	cmp	r3, #7
 8001cfc:	d104      	bne.n	8001d08 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	623b      	str	r3, [r7, #32]
 8001d06:	e014      	b.n	8001d32 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a03      	ldr	r2, [pc, #12]	; (8001d1c <HAL_ADC_IRQHandler+0x244>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00a      	beq.n	8001d28 <HAL_ADC_IRQHandler+0x250>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	e008      	b.n	8001d2a <HAL_ADC_IRQHandler+0x252>
 8001d18:	40022000 	.word	0x40022000
 8001d1c:	40022100 	.word	0x40022100
 8001d20:	40022300 	.word	0x40022300
 8001d24:	58026300 	.word	0x58026300
 8001d28:	4b84      	ldr	r3, [pc, #528]	; (8001f3c <HAL_ADC_IRQHandler+0x464>)
 8001d2a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d047      	beq.n	8001dc8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <HAL_ADC_IRQHandler+0x27a>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d03f      	beq.n	8001dc8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d13a      	bne.n	8001dc8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5c:	2b40      	cmp	r3, #64	; 0x40
 8001d5e:	d133      	bne.n	8001dc8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d12e      	bne.n	8001dc8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fcfd 	bl	800176e <LL_ADC_INJ_IsConversionOngoing>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d11a      	bne.n	8001db0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d88:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d112      	bne.n	8001dc8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54
 8001dae:	e00b      	b.n	8001dc8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db4:	f043 0210 	orr.w	r2, r3, #16
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	f043 0201 	orr.w	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 fe2f 	bl	8002a2c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2260      	movs	r2, #96	; 0x60
 8001dd4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d011      	beq.n	8001e04 <HAL_ADC_IRQHandler+0x32c>
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00c      	beq.n	8001e04 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8b2 	bl	8001f60 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2280      	movs	r2, #128	; 0x80
 8001e02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d012      	beq.n	8001e34 <HAL_ADC_IRQHandler+0x35c>
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00d      	beq.n	8001e34 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fe15 	bl	8002a54 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e32:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d012      	beq.n	8001e64 <HAL_ADC_IRQHandler+0x38c>
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00d      	beq.n	8001e64 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fe07 	bl	8002a68 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d043      	beq.n	8001ef6 <HAL_ADC_IRQHandler+0x41e>
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d03e      	beq.n	8001ef6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001e80:	2301      	movs	r3, #1
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
 8001e84:	e021      	b.n	8001eca <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d015      	beq.n	8001eb8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2a      	ldr	r2, [pc, #168]	; (8001f3c <HAL_ADC_IRQHandler+0x464>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d004      	beq.n	8001ea0 <HAL_ADC_IRQHandler+0x3c8>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a29      	ldr	r2, [pc, #164]	; (8001f40 <HAL_ADC_IRQHandler+0x468>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d101      	bne.n	8001ea4 <HAL_ADC_IRQHandler+0x3cc>
 8001ea0:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_ADC_IRQHandler+0x46c>)
 8001ea2:	e000      	b.n	8001ea6 <HAL_ADC_IRQHandler+0x3ce>
 8001ea4:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <HAL_ADC_IRQHandler+0x470>)
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fbb8 	bl	800161c <LL_ADC_GetMultiDMATransfer>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00b      	beq.n	8001eca <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb6:	e008      	b.n	8001eca <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d10e      	bne.n	8001eee <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	f043 0202 	orr.w	r2, r3, #2
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f843 	bl	8001f74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2210      	movs	r2, #16
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d018      	beq.n	8001f32 <HAL_ADC_IRQHandler+0x45a>
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d013      	beq.n	8001f32 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	f043 0208 	orr.w	r2, r3, #8
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f2a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fd87 	bl	8002a40 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001f32:	bf00      	nop
 8001f34:	3728      	adds	r7, #40	; 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	40022100 	.word	0x40022100
 8001f44:	40022300 	.word	0x40022300
 8001f48:	58026300 	.word	0x58026300

08001f4c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b0a1      	sub	sp, #132	; 0x84
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4a9d      	ldr	r2, [pc, #628]	; (8002218 <HAL_ADC_ConfigChannel+0x290>)
 8001fa2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x2a>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e321      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x66e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fbc2 	bl	8001748 <LL_ADC_REG_IsConversionOngoing>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 8306 	bne.w	80025d8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d108      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x62>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0e9b      	lsrs	r3, r3, #26
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	e016      	b.n	8002018 <HAL_ADC_ConfigChannel+0x90>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ffa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002002:	2320      	movs	r3, #32
 8002004:	e003      	b.n	800200e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002006:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	2201      	movs	r2, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	69d1      	ldr	r1, [r2, #28]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	430b      	orrs	r3, r1
 8002024:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6859      	ldr	r1, [r3, #4]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	f7ff fa55 	bl	80014e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fb83 	bl	8001748 <LL_ADC_REG_IsConversionOngoing>
 8002042:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fb90 	bl	800176e <LL_ADC_INJ_IsConversionOngoing>
 800204e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 80b3 	bne.w	80021be <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002058:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 80af 	bne.w	80021be <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6819      	ldr	r1, [r3, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	461a      	mov	r2, r3
 800206e:	f7ff fa77 	bl	8001560 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002072:	4b6a      	ldr	r3, [pc, #424]	; (800221c <HAL_ADC_ConfigChannel+0x294>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800207a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800207e:	d10b      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x110>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	e01d      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x14c>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10b      	bne.n	80020be <HAL_ADC_ConfigChannel+0x136>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	e00a      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x14c>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d027      	beq.n	800212e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6919      	ldr	r1, [r3, #16]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ec:	f7ff f992 	bl	8001414 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	6919      	ldr	r1, [r3, #16]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	7e5b      	ldrb	r3, [r3, #25]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d102      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x17e>
 8002100:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002104:	e000      	b.n	8002108 <HAL_ADC_ConfigChannel+0x180>
 8002106:	2300      	movs	r3, #0
 8002108:	461a      	mov	r2, r3
 800210a:	f7ff f9bc 	bl	8001486 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6919      	ldr	r1, [r3, #16]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	7e1b      	ldrb	r3, [r3, #24]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d102      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x19c>
 800211e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002122:	e000      	b.n	8002126 <HAL_ADC_ConfigChannel+0x19e>
 8002124:	2300      	movs	r3, #0
 8002126:	461a      	mov	r2, r3
 8002128:	f7ff f994 	bl	8001454 <LL_ADC_SetDataRightShift>
 800212c:	e047      	b.n	80021be <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002134:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	069b      	lsls	r3, r3, #26
 800213e:	429a      	cmp	r2, r3
 8002140:	d107      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002150:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002158:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	069b      	lsls	r3, r3, #26
 8002162:	429a      	cmp	r2, r3
 8002164:	d107      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002174:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800217c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	069b      	lsls	r3, r3, #26
 8002186:	429a      	cmp	r2, r3
 8002188:	d107      	bne.n	800219a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002198:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	069b      	lsls	r3, r3, #26
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d107      	bne.n	80021be <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021bc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fa9a 	bl	80016fc <LL_ADC_IsEnabled>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 820d 	bne.w	80025ea <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	6819      	ldr	r1, [r3, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	461a      	mov	r2, r3
 80021de:	f7ff f9eb 	bl	80015b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	4a0c      	ldr	r2, [pc, #48]	; (8002218 <HAL_ADC_ConfigChannel+0x290>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	f040 8133 	bne.w	8002454 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d110      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x298>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	0e9b      	lsrs	r3, r3, #26
 8002204:	3301      	adds	r3, #1
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	2b09      	cmp	r3, #9
 800220c:	bf94      	ite	ls
 800220e:	2301      	movls	r3, #1
 8002210:	2300      	movhi	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	e01e      	b.n	8002254 <HAL_ADC_ConfigChannel+0x2cc>
 8002216:	bf00      	nop
 8002218:	47ff0000 	.word	0x47ff0000
 800221c:	5c001000 	.word	0x5c001000
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800222e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002230:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002238:	2320      	movs	r3, #32
 800223a:	e003      	b.n	8002244 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800223c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	3301      	adds	r3, #1
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	2b09      	cmp	r3, #9
 800224c:	bf94      	ite	ls
 800224e:	2301      	movls	r3, #1
 8002250:	2300      	movhi	r3, #0
 8002252:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002254:	2b00      	cmp	r3, #0
 8002256:	d079      	beq.n	800234c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002260:	2b00      	cmp	r3, #0
 8002262:	d107      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x2ec>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	0e9b      	lsrs	r3, r3, #26
 800226a:	3301      	adds	r3, #1
 800226c:	069b      	lsls	r3, r3, #26
 800226e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002272:	e015      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x318>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002284:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800228c:	2320      	movs	r3, #32
 800228e:	e003      	b.n	8002298 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	3301      	adds	r3, #1
 800229a:	069b      	lsls	r3, r3, #26
 800229c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d109      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x338>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	0e9b      	lsrs	r3, r3, #26
 80022b2:	3301      	adds	r3, #1
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	2101      	movs	r1, #1
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	e017      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x368>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80022ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80022d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80022d8:	2320      	movs	r3, #32
 80022da:	e003      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80022dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f303 	lsl.w	r3, r1, r3
 80022f0:	ea42 0103 	orr.w	r1, r2, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10a      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x38e>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0e9b      	lsrs	r3, r3, #26
 8002306:	3301      	adds	r3, #1
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	051b      	lsls	r3, r3, #20
 8002314:	e018      	b.n	8002348 <HAL_ADC_ConfigChannel+0x3c0>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800232e:	2320      	movs	r3, #32
 8002330:	e003      	b.n	800233a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	3301      	adds	r3, #1
 800233c:	f003 021f 	and.w	r2, r3, #31
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002348:	430b      	orrs	r3, r1
 800234a:	e07e      	b.n	800244a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002354:	2b00      	cmp	r3, #0
 8002356:	d107      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x3e0>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0e9b      	lsrs	r3, r3, #26
 800235e:	3301      	adds	r3, #1
 8002360:	069b      	lsls	r3, r3, #26
 8002362:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002366:	e015      	b.n	8002394 <HAL_ADC_ConfigChannel+0x40c>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002380:	2320      	movs	r3, #32
 8002382:	e003      	b.n	800238c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3301      	adds	r3, #1
 800238e:	069b      	lsls	r3, r3, #26
 8002390:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x42c>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	3301      	adds	r3, #1
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	2101      	movs	r1, #1
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	e017      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x45c>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	61bb      	str	r3, [r7, #24]
  return result;
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80023cc:	2320      	movs	r3, #32
 80023ce:	e003      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	3301      	adds	r3, #1
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	2101      	movs	r1, #1
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	ea42 0103 	orr.w	r1, r2, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10d      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x488>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0e9b      	lsrs	r3, r3, #26
 80023fa:	3301      	adds	r3, #1
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	3b1e      	subs	r3, #30
 8002408:	051b      	lsls	r3, r3, #20
 800240a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800240e:	e01b      	b.n	8002448 <HAL_ADC_ConfigChannel+0x4c0>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	60fb      	str	r3, [r7, #12]
  return result;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002428:	2320      	movs	r3, #32
 800242a:	e003      	b.n	8002434 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	3301      	adds	r3, #1
 8002436:	f003 021f 	and.w	r2, r3, #31
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	3b1e      	subs	r3, #30
 8002442:	051b      	lsls	r3, r3, #20
 8002444:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002448:	430b      	orrs	r3, r1
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	6892      	ldr	r2, [r2, #8]
 800244e:	4619      	mov	r1, r3
 8002450:	f7ff f886 	bl	8001560 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	f280 80c6 	bge.w	80025ea <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a67      	ldr	r2, [pc, #412]	; (8002600 <HAL_ADC_ConfigChannel+0x678>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d004      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x4ea>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a65      	ldr	r2, [pc, #404]	; (8002604 <HAL_ADC_ConfigChannel+0x67c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d101      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x4ee>
 8002472:	4b65      	ldr	r3, [pc, #404]	; (8002608 <HAL_ADC_ConfigChannel+0x680>)
 8002474:	e000      	b.n	8002478 <HAL_ADC_ConfigChannel+0x4f0>
 8002476:	4b65      	ldr	r3, [pc, #404]	; (800260c <HAL_ADC_ConfigChannel+0x684>)
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe ffbd 	bl	80013f8 <LL_ADC_GetCommonPathInternalCh>
 800247e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a5e      	ldr	r2, [pc, #376]	; (8002600 <HAL_ADC_ConfigChannel+0x678>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d004      	beq.n	8002494 <HAL_ADC_ConfigChannel+0x50c>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a5d      	ldr	r2, [pc, #372]	; (8002604 <HAL_ADC_ConfigChannel+0x67c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d10e      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x52a>
 8002494:	485a      	ldr	r0, [pc, #360]	; (8002600 <HAL_ADC_ConfigChannel+0x678>)
 8002496:	f7ff f931 	bl	80016fc <LL_ADC_IsEnabled>
 800249a:	4604      	mov	r4, r0
 800249c:	4859      	ldr	r0, [pc, #356]	; (8002604 <HAL_ADC_ConfigChannel+0x67c>)
 800249e:	f7ff f92d 	bl	80016fc <LL_ADC_IsEnabled>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4323      	orrs	r3, r4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf0c      	ite	eq
 80024aa:	2301      	moveq	r3, #1
 80024ac:	2300      	movne	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	e008      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x53c>
 80024b2:	4857      	ldr	r0, [pc, #348]	; (8002610 <HAL_ADC_ConfigChannel+0x688>)
 80024b4:	f7ff f922 	bl	80016fc <LL_ADC_IsEnabled>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	bf0c      	ite	eq
 80024be:	2301      	moveq	r3, #1
 80024c0:	2300      	movne	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d07d      	beq.n	80025c4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a51      	ldr	r2, [pc, #324]	; (8002614 <HAL_ADC_ConfigChannel+0x68c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d130      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x5ac>
 80024d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d12b      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a4b      	ldr	r2, [pc, #300]	; (8002610 <HAL_ADC_ConfigChannel+0x688>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	f040 8081 	bne.w	80025ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a44      	ldr	r2, [pc, #272]	; (8002600 <HAL_ADC_ConfigChannel+0x678>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d004      	beq.n	80024fc <HAL_ADC_ConfigChannel+0x574>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a43      	ldr	r2, [pc, #268]	; (8002604 <HAL_ADC_ConfigChannel+0x67c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x578>
 80024fc:	4a42      	ldr	r2, [pc, #264]	; (8002608 <HAL_ADC_ConfigChannel+0x680>)
 80024fe:	e000      	b.n	8002502 <HAL_ADC_ConfigChannel+0x57a>
 8002500:	4a42      	ldr	r2, [pc, #264]	; (800260c <HAL_ADC_ConfigChannel+0x684>)
 8002502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002504:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002508:	4619      	mov	r1, r3
 800250a:	4610      	mov	r0, r2
 800250c:	f7fe ff61 	bl	80013d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002510:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_ADC_ConfigChannel+0x690>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	099b      	lsrs	r3, r3, #6
 8002516:	4a41      	ldr	r2, [pc, #260]	; (800261c <HAL_ADC_ConfigChannel+0x694>)
 8002518:	fba2 2303 	umull	r2, r3, r2, r3
 800251c:	099b      	lsrs	r3, r3, #6
 800251e:	3301      	adds	r3, #1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002524:	e002      	b.n	800252c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	3b01      	subs	r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f9      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002532:	e05a      	b.n	80025ea <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a39      	ldr	r2, [pc, #228]	; (8002620 <HAL_ADC_ConfigChannel+0x698>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d11e      	bne.n	800257c <HAL_ADC_ConfigChannel+0x5f4>
 800253e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d119      	bne.n	800257c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a30      	ldr	r2, [pc, #192]	; (8002610 <HAL_ADC_ConfigChannel+0x688>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d14b      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a2a      	ldr	r2, [pc, #168]	; (8002600 <HAL_ADC_ConfigChannel+0x678>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d004      	beq.n	8002566 <HAL_ADC_ConfigChannel+0x5de>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a28      	ldr	r2, [pc, #160]	; (8002604 <HAL_ADC_ConfigChannel+0x67c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x5e2>
 8002566:	4a28      	ldr	r2, [pc, #160]	; (8002608 <HAL_ADC_ConfigChannel+0x680>)
 8002568:	e000      	b.n	800256c <HAL_ADC_ConfigChannel+0x5e4>
 800256a:	4a28      	ldr	r2, [pc, #160]	; (800260c <HAL_ADC_ConfigChannel+0x684>)
 800256c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f7fe ff2c 	bl	80013d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800257a:	e036      	b.n	80025ea <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a28      	ldr	r2, [pc, #160]	; (8002624 <HAL_ADC_ConfigChannel+0x69c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d131      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x662>
 8002586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d12c      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1e      	ldr	r2, [pc, #120]	; (8002610 <HAL_ADC_ConfigChannel+0x688>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d127      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a18      	ldr	r2, [pc, #96]	; (8002600 <HAL_ADC_ConfigChannel+0x678>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d004      	beq.n	80025ae <HAL_ADC_ConfigChannel+0x626>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a16      	ldr	r2, [pc, #88]	; (8002604 <HAL_ADC_ConfigChannel+0x67c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x62a>
 80025ae:	4a16      	ldr	r2, [pc, #88]	; (8002608 <HAL_ADC_ConfigChannel+0x680>)
 80025b0:	e000      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x62c>
 80025b2:	4a16      	ldr	r2, [pc, #88]	; (800260c <HAL_ADC_ConfigChannel+0x684>)
 80025b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025ba:	4619      	mov	r1, r3
 80025bc:	4610      	mov	r0, r2
 80025be:	f7fe ff08 	bl	80013d2 <LL_ADC_SetCommonPathInternalCh>
 80025c2:	e012      	b.n	80025ea <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c8:	f043 0220 	orr.w	r2, r3, #32
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80025d6:	e008      	b.n	80025ea <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025dc:	f043 0220 	orr.w	r2, r3, #32
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3784      	adds	r7, #132	; 0x84
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd90      	pop	{r4, r7, pc}
 80025fe:	bf00      	nop
 8002600:	40022000 	.word	0x40022000
 8002604:	40022100 	.word	0x40022100
 8002608:	40022300 	.word	0x40022300
 800260c:	58026300 	.word	0x58026300
 8002610:	58026000 	.word	0x58026000
 8002614:	cb840000 	.word	0xcb840000
 8002618:	24000000 	.word	0x24000000
 800261c:	053e2d63 	.word	0x053e2d63
 8002620:	c7520000 	.word	0xc7520000
 8002624:	cfb80000 	.word	0xcfb80000

08002628 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff f874 	bl	8001722 <LL_ADC_IsDisableOngoing>
 800263a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff f85b 	bl	80016fc <LL_ADC_IsEnabled>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d047      	beq.n	80026dc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d144      	bne.n	80026dc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 030d 	and.w	r3, r3, #13
 800265c:	2b01      	cmp	r3, #1
 800265e:	d10c      	bne.n	800267a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff f835 	bl	80016d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2203      	movs	r2, #3
 8002670:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002672:	f7fe fe6d 	bl	8001350 <HAL_GetTick>
 8002676:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002678:	e029      	b.n	80026ce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	f043 0210 	orr.w	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	f043 0201 	orr.w	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e023      	b.n	80026de <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002696:	f7fe fe5b 	bl	8001350 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d914      	bls.n	80026ce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	f043 0210 	orr.w	r2, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	f043 0201 	orr.w	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e007      	b.n	80026de <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1dc      	bne.n	8002696 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a7a      	ldr	r2, [pc, #488]	; (80028e0 <ADC_ConfigureBoostMode+0x1f8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d004      	beq.n	8002704 <ADC_ConfigureBoostMode+0x1c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a79      	ldr	r2, [pc, #484]	; (80028e4 <ADC_ConfigureBoostMode+0x1fc>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d109      	bne.n	8002718 <ADC_ConfigureBoostMode+0x30>
 8002704:	4b78      	ldr	r3, [pc, #480]	; (80028e8 <ADC_ConfigureBoostMode+0x200>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf14      	ite	ne
 8002710:	2301      	movne	r3, #1
 8002712:	2300      	moveq	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	e008      	b.n	800272a <ADC_ConfigureBoostMode+0x42>
 8002718:	4b74      	ldr	r3, [pc, #464]	; (80028ec <ADC_ConfigureBoostMode+0x204>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf14      	ite	ne
 8002724:	2301      	movne	r3, #1
 8002726:	2300      	moveq	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d01c      	beq.n	8002768 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800272e:	f003 f8df 	bl	80058f0 <HAL_RCC_GetHCLKFreq>
 8002732:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800273c:	d010      	beq.n	8002760 <ADC_ConfigureBoostMode+0x78>
 800273e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002742:	d873      	bhi.n	800282c <ADC_ConfigureBoostMode+0x144>
 8002744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002748:	d002      	beq.n	8002750 <ADC_ConfigureBoostMode+0x68>
 800274a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800274e:	d16d      	bne.n	800282c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	60fb      	str	r3, [r7, #12]
        break;
 800275e:	e068      	b.n	8002832 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	60fb      	str	r3, [r7, #12]
        break;
 8002766:	e064      	b.n	8002832 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002768:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800276c:	f04f 0100 	mov.w	r1, #0
 8002770:	f004 fb50 	bl	8006e14 <HAL_RCCEx_GetPeriphCLKFreq>
 8002774:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800277e:	d051      	beq.n	8002824 <ADC_ConfigureBoostMode+0x13c>
 8002780:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002784:	d854      	bhi.n	8002830 <ADC_ConfigureBoostMode+0x148>
 8002786:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800278a:	d047      	beq.n	800281c <ADC_ConfigureBoostMode+0x134>
 800278c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002790:	d84e      	bhi.n	8002830 <ADC_ConfigureBoostMode+0x148>
 8002792:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002796:	d03d      	beq.n	8002814 <ADC_ConfigureBoostMode+0x12c>
 8002798:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800279c:	d848      	bhi.n	8002830 <ADC_ConfigureBoostMode+0x148>
 800279e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027a2:	d033      	beq.n	800280c <ADC_ConfigureBoostMode+0x124>
 80027a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027a8:	d842      	bhi.n	8002830 <ADC_ConfigureBoostMode+0x148>
 80027aa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80027ae:	d029      	beq.n	8002804 <ADC_ConfigureBoostMode+0x11c>
 80027b0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80027b4:	d83c      	bhi.n	8002830 <ADC_ConfigureBoostMode+0x148>
 80027b6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80027ba:	d01a      	beq.n	80027f2 <ADC_ConfigureBoostMode+0x10a>
 80027bc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80027c0:	d836      	bhi.n	8002830 <ADC_ConfigureBoostMode+0x148>
 80027c2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80027c6:	d014      	beq.n	80027f2 <ADC_ConfigureBoostMode+0x10a>
 80027c8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80027cc:	d830      	bhi.n	8002830 <ADC_ConfigureBoostMode+0x148>
 80027ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027d2:	d00e      	beq.n	80027f2 <ADC_ConfigureBoostMode+0x10a>
 80027d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027d8:	d82a      	bhi.n	8002830 <ADC_ConfigureBoostMode+0x148>
 80027da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027de:	d008      	beq.n	80027f2 <ADC_ConfigureBoostMode+0x10a>
 80027e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027e4:	d824      	bhi.n	8002830 <ADC_ConfigureBoostMode+0x148>
 80027e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027ea:	d002      	beq.n	80027f2 <ADC_ConfigureBoostMode+0x10a>
 80027ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027f0:	d11e      	bne.n	8002830 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	0c9b      	lsrs	r3, r3, #18
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	60fb      	str	r3, [r7, #12]
        break;
 8002802:	e016      	b.n	8002832 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	60fb      	str	r3, [r7, #12]
        break;
 800280a:	e012      	b.n	8002832 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	60fb      	str	r3, [r7, #12]
        break;
 8002812:	e00e      	b.n	8002832 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	099b      	lsrs	r3, r3, #6
 8002818:	60fb      	str	r3, [r7, #12]
        break;
 800281a:	e00a      	b.n	8002832 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	09db      	lsrs	r3, r3, #7
 8002820:	60fb      	str	r3, [r7, #12]
        break;
 8002822:	e006      	b.n	8002832 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	60fb      	str	r3, [r7, #12]
        break;
 800282a:	e002      	b.n	8002832 <ADC_ConfigureBoostMode+0x14a>
        break;
 800282c:	bf00      	nop
 800282e:	e000      	b.n	8002832 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002830:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002832:	f7fe fd99 	bl	8001368 <HAL_GetREVID>
 8002836:	4603      	mov	r3, r0
 8002838:	f241 0203 	movw	r2, #4099	; 0x1003
 800283c:	4293      	cmp	r3, r2
 800283e:	d815      	bhi.n	800286c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a2b      	ldr	r2, [pc, #172]	; (80028f0 <ADC_ConfigureBoostMode+0x208>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d908      	bls.n	800285a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002856:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002858:	e03e      	b.n	80028d8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002868:	609a      	str	r2, [r3, #8]
}
 800286a:	e035      	b.n	80028d8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	085b      	lsrs	r3, r3, #1
 8002870:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4a1f      	ldr	r2, [pc, #124]	; (80028f4 <ADC_ConfigureBoostMode+0x20c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d808      	bhi.n	800288c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002888:	609a      	str	r2, [r3, #8]
}
 800288a:	e025      	b.n	80028d8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4a1a      	ldr	r2, [pc, #104]	; (80028f8 <ADC_ConfigureBoostMode+0x210>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d80a      	bhi.n	80028aa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a6:	609a      	str	r2, [r3, #8]
}
 80028a8:	e016      	b.n	80028d8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4a13      	ldr	r2, [pc, #76]	; (80028fc <ADC_ConfigureBoostMode+0x214>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d80a      	bhi.n	80028c8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c4:	609a      	str	r2, [r3, #8]
}
 80028c6:	e007      	b.n	80028d8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80028d6:	609a      	str	r2, [r3, #8]
}
 80028d8:	bf00      	nop
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40022000 	.word	0x40022000
 80028e4:	40022100 	.word	0x40022100
 80028e8:	40022300 	.word	0x40022300
 80028ec:	58026300 	.word	0x58026300
 80028f0:	01312d00 	.word	0x01312d00
 80028f4:	005f5e10 	.word	0x005f5e10
 80028f8:	00bebc20 	.word	0x00bebc20
 80028fc:	017d7840 	.word	0x017d7840

08002900 <LL_ADC_StartCalibration>:
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <LL_ADC_StartCalibration+0x38>)
 8002912:	4013      	ands	r3, r2
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002920:	430a      	orrs	r2, r1
 8002922:	4313      	orrs	r3, r2
 8002924:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	609a      	str	r2, [r3, #8]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	3ffeffc0 	.word	0x3ffeffc0

0800293c <LL_ADC_IsCalibrationOnGoing>:
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800294c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002950:	d101      	bne.n	8002956 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002970:	2300      	movs	r3, #0
 8002972:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_ADCEx_Calibration_Start+0x1e>
 800297e:	2302      	movs	r3, #2
 8002980:	e04c      	b.n	8002a1c <HAL_ADCEx_Calibration_Start+0xb8>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f7ff fe4c 	bl	8002628 <ADC_Disable>
 8002990:	4603      	mov	r3, r0
 8002992:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d135      	bne.n	8002a06 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800299e:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <HAL_ADCEx_Calibration_Start+0xc0>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	f043 0202 	orr.w	r2, r3, #2
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ffa4 	bl	8002900 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80029b8:	e014      	b.n	80029e4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	3301      	adds	r3, #1
 80029be:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <HAL_ADCEx_Calibration_Start+0xc4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d30d      	bcc.n	80029e4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029cc:	f023 0312 	bic.w	r3, r3, #18
 80029d0:	f043 0210 	orr.w	r2, r3, #16
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e01b      	b.n	8002a1c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ffa7 	bl	800293c <LL_ADC_IsCalibrationOnGoing>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e2      	bne.n	80029ba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f8:	f023 0303 	bic.w	r3, r3, #3
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54
 8002a04:	e005      	b.n	8002a12 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	f043 0210 	orr.w	r2, r3, #16
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	ffffeefd 	.word	0xffffeefd
 8002a28:	25c3f800 	.word	0x25c3f800

08002a2c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aac:	4013      	ands	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002abe:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	60d3      	str	r3, [r2, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00
 8002ad4:	05fa0000 	.word	0x05fa0000

08002ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	f003 0307 	and.w	r3, r3, #7
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	db0b      	blt.n	8002b1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	4907      	ldr	r1, [pc, #28]	; (8002b2c <__NVIC_EnableIRQ+0x38>)
 8002b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2001      	movs	r0, #1
 8002b16:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000e100 	.word	0xe000e100

08002b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	db0a      	blt.n	8002b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	490c      	ldr	r1, [pc, #48]	; (8002b7c <__NVIC_SetPriority+0x4c>)
 8002b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b4e:	0112      	lsls	r2, r2, #4
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	440b      	add	r3, r1
 8002b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b58:	e00a      	b.n	8002b70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4908      	ldr	r1, [pc, #32]	; (8002b80 <__NVIC_SetPriority+0x50>)
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	3b04      	subs	r3, #4
 8002b68:	0112      	lsls	r2, r2, #4
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	761a      	strb	r2, [r3, #24]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000e100 	.word	0xe000e100
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b089      	sub	sp, #36	; 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f1c3 0307 	rsb	r3, r3, #7
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	bf28      	it	cs
 8002ba2:	2304      	movcs	r3, #4
 8002ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d902      	bls.n	8002bb4 <NVIC_EncodePriority+0x30>
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3b03      	subs	r3, #3
 8002bb2:	e000      	b.n	8002bb6 <NVIC_EncodePriority+0x32>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd6:	43d9      	mvns	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	4313      	orrs	r3, r2
         );
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3724      	adds	r7, #36	; 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff ff4c 	bl	8002a90 <__NVIC_SetPriorityGrouping>
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c0e:	f7ff ff63 	bl	8002ad8 <__NVIC_GetPriorityGrouping>
 8002c12:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	6978      	ldr	r0, [r7, #20]
 8002c1a:	f7ff ffb3 	bl	8002b84 <NVIC_EncodePriority>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff ff82 	bl	8002b30 <__NVIC_SetPriority>
}
 8002c2c:	bf00      	nop
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff ff56 	bl	8002af4 <__NVIC_EnableIRQ>
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002c58:	f7fe fb7a 	bl	8001350 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e316      	b.n	8003296 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a66      	ldr	r2, [pc, #408]	; (8002e08 <HAL_DMA_Init+0x1b8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d04a      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a65      	ldr	r2, [pc, #404]	; (8002e0c <HAL_DMA_Init+0x1bc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d045      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a63      	ldr	r2, [pc, #396]	; (8002e10 <HAL_DMA_Init+0x1c0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d040      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a62      	ldr	r2, [pc, #392]	; (8002e14 <HAL_DMA_Init+0x1c4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d03b      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a60      	ldr	r2, [pc, #384]	; (8002e18 <HAL_DMA_Init+0x1c8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d036      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a5f      	ldr	r2, [pc, #380]	; (8002e1c <HAL_DMA_Init+0x1cc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d031      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a5d      	ldr	r2, [pc, #372]	; (8002e20 <HAL_DMA_Init+0x1d0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d02c      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a5c      	ldr	r2, [pc, #368]	; (8002e24 <HAL_DMA_Init+0x1d4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d027      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a5a      	ldr	r2, [pc, #360]	; (8002e28 <HAL_DMA_Init+0x1d8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d022      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a59      	ldr	r2, [pc, #356]	; (8002e2c <HAL_DMA_Init+0x1dc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d01d      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a57      	ldr	r2, [pc, #348]	; (8002e30 <HAL_DMA_Init+0x1e0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d018      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a56      	ldr	r2, [pc, #344]	; (8002e34 <HAL_DMA_Init+0x1e4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a54      	ldr	r2, [pc, #336]	; (8002e38 <HAL_DMA_Init+0x1e8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00e      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a53      	ldr	r2, [pc, #332]	; (8002e3c <HAL_DMA_Init+0x1ec>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d009      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a51      	ldr	r2, [pc, #324]	; (8002e40 <HAL_DMA_Init+0x1f0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a50      	ldr	r2, [pc, #320]	; (8002e44 <HAL_DMA_Init+0x1f4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d101      	bne.n	8002d0c <HAL_DMA_Init+0xbc>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <HAL_DMA_Init+0xbe>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 813b 	beq.w	8002f8a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a37      	ldr	r2, [pc, #220]	; (8002e08 <HAL_DMA_Init+0x1b8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d04a      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a36      	ldr	r2, [pc, #216]	; (8002e0c <HAL_DMA_Init+0x1bc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d045      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a34      	ldr	r2, [pc, #208]	; (8002e10 <HAL_DMA_Init+0x1c0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d040      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a33      	ldr	r2, [pc, #204]	; (8002e14 <HAL_DMA_Init+0x1c4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d03b      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a31      	ldr	r2, [pc, #196]	; (8002e18 <HAL_DMA_Init+0x1c8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d036      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a30      	ldr	r2, [pc, #192]	; (8002e1c <HAL_DMA_Init+0x1cc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d031      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a2e      	ldr	r2, [pc, #184]	; (8002e20 <HAL_DMA_Init+0x1d0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d02c      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a2d      	ldr	r2, [pc, #180]	; (8002e24 <HAL_DMA_Init+0x1d4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d027      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a2b      	ldr	r2, [pc, #172]	; (8002e28 <HAL_DMA_Init+0x1d8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d022      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a2a      	ldr	r2, [pc, #168]	; (8002e2c <HAL_DMA_Init+0x1dc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d01d      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a28      	ldr	r2, [pc, #160]	; (8002e30 <HAL_DMA_Init+0x1e0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d018      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a27      	ldr	r2, [pc, #156]	; (8002e34 <HAL_DMA_Init+0x1e4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d013      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a25      	ldr	r2, [pc, #148]	; (8002e38 <HAL_DMA_Init+0x1e8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00e      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a24      	ldr	r2, [pc, #144]	; (8002e3c <HAL_DMA_Init+0x1ec>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d009      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a22      	ldr	r2, [pc, #136]	; (8002e40 <HAL_DMA_Init+0x1f0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d004      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a21      	ldr	r2, [pc, #132]	; (8002e44 <HAL_DMA_Init+0x1f4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d108      	bne.n	8002dd6 <HAL_DMA_Init+0x186>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	e007      	b.n	8002de6 <HAL_DMA_Init+0x196>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002de6:	e02f      	b.n	8002e48 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002de8:	f7fe fab2 	bl	8001350 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b05      	cmp	r3, #5
 8002df4:	d928      	bls.n	8002e48 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2203      	movs	r2, #3
 8002e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e246      	b.n	8003296 <HAL_DMA_Init+0x646>
 8002e08:	40020010 	.word	0x40020010
 8002e0c:	40020028 	.word	0x40020028
 8002e10:	40020040 	.word	0x40020040
 8002e14:	40020058 	.word	0x40020058
 8002e18:	40020070 	.word	0x40020070
 8002e1c:	40020088 	.word	0x40020088
 8002e20:	400200a0 	.word	0x400200a0
 8002e24:	400200b8 	.word	0x400200b8
 8002e28:	40020410 	.word	0x40020410
 8002e2c:	40020428 	.word	0x40020428
 8002e30:	40020440 	.word	0x40020440
 8002e34:	40020458 	.word	0x40020458
 8002e38:	40020470 	.word	0x40020470
 8002e3c:	40020488 	.word	0x40020488
 8002e40:	400204a0 	.word	0x400204a0
 8002e44:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1c8      	bne.n	8002de8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4b83      	ldr	r3, [pc, #524]	; (8003070 <HAL_DMA_Init+0x420>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e86:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d107      	bne.n	8002eac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002eac:	4b71      	ldr	r3, [pc, #452]	; (8003074 <HAL_DMA_Init+0x424>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b71      	ldr	r3, [pc, #452]	; (8003078 <HAL_DMA_Init+0x428>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb8:	d328      	bcc.n	8002f0c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b28      	cmp	r3, #40	; 0x28
 8002ec0:	d903      	bls.n	8002eca <HAL_DMA_Init+0x27a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8002ec8:	d917      	bls.n	8002efa <HAL_DMA_Init+0x2aa>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b3e      	cmp	r3, #62	; 0x3e
 8002ed0:	d903      	bls.n	8002eda <HAL_DMA_Init+0x28a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b42      	cmp	r3, #66	; 0x42
 8002ed8:	d90f      	bls.n	8002efa <HAL_DMA_Init+0x2aa>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b46      	cmp	r3, #70	; 0x46
 8002ee0:	d903      	bls.n	8002eea <HAL_DMA_Init+0x29a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b48      	cmp	r3, #72	; 0x48
 8002ee8:	d907      	bls.n	8002efa <HAL_DMA_Init+0x2aa>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b4e      	cmp	r3, #78	; 0x4e
 8002ef0:	d905      	bls.n	8002efe <HAL_DMA_Init+0x2ae>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b52      	cmp	r3, #82	; 0x52
 8002ef8:	d801      	bhi.n	8002efe <HAL_DMA_Init+0x2ae>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <HAL_DMA_Init+0x2b0>
 8002efe:	2300      	movs	r3, #0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f0a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f023 0307 	bic.w	r3, r3, #7
 8002f22:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d117      	bne.n	8002f66 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00e      	beq.n	8002f66 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f001 f9b9 	bl	80042c0 <DMA_CheckFifoParam>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2240      	movs	r2, #64	; 0x40
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e197      	b.n	8003296 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f001 f8f4 	bl	800415c <DMA_CalcBaseAndBitshift>
 8002f74:	4603      	mov	r3, r0
 8002f76:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	223f      	movs	r2, #63	; 0x3f
 8002f82:	409a      	lsls	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	e0cd      	b.n	8003126 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a3b      	ldr	r2, [pc, #236]	; (800307c <HAL_DMA_Init+0x42c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d022      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a39      	ldr	r2, [pc, #228]	; (8003080 <HAL_DMA_Init+0x430>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01d      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a38      	ldr	r2, [pc, #224]	; (8003084 <HAL_DMA_Init+0x434>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d018      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a36      	ldr	r2, [pc, #216]	; (8003088 <HAL_DMA_Init+0x438>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a35      	ldr	r2, [pc, #212]	; (800308c <HAL_DMA_Init+0x43c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00e      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a33      	ldr	r2, [pc, #204]	; (8003090 <HAL_DMA_Init+0x440>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a32      	ldr	r2, [pc, #200]	; (8003094 <HAL_DMA_Init+0x444>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d004      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a30      	ldr	r2, [pc, #192]	; (8003098 <HAL_DMA_Init+0x448>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d101      	bne.n	8002fde <HAL_DMA_Init+0x38e>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_DMA_Init+0x390>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 8097 	beq.w	8003114 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a24      	ldr	r2, [pc, #144]	; (800307c <HAL_DMA_Init+0x42c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d021      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a22      	ldr	r2, [pc, #136]	; (8003080 <HAL_DMA_Init+0x430>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01c      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a21      	ldr	r2, [pc, #132]	; (8003084 <HAL_DMA_Init+0x434>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d017      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <HAL_DMA_Init+0x438>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d012      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1e      	ldr	r2, [pc, #120]	; (800308c <HAL_DMA_Init+0x43c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00d      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1c      	ldr	r2, [pc, #112]	; (8003090 <HAL_DMA_Init+0x440>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d008      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <HAL_DMA_Init+0x444>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d003      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a19      	ldr	r2, [pc, #100]	; (8003098 <HAL_DMA_Init+0x448>)
 8003032:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4b13      	ldr	r3, [pc, #76]	; (800309c <HAL_DMA_Init+0x44c>)
 8003050:	4013      	ands	r3, r2
 8003052:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b40      	cmp	r3, #64	; 0x40
 800305a:	d021      	beq.n	80030a0 <HAL_DMA_Init+0x450>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b80      	cmp	r3, #128	; 0x80
 8003062:	d102      	bne.n	800306a <HAL_DMA_Init+0x41a>
 8003064:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003068:	e01b      	b.n	80030a2 <HAL_DMA_Init+0x452>
 800306a:	2300      	movs	r3, #0
 800306c:	e019      	b.n	80030a2 <HAL_DMA_Init+0x452>
 800306e:	bf00      	nop
 8003070:	fe10803f 	.word	0xfe10803f
 8003074:	5c001000 	.word	0x5c001000
 8003078:	ffff0000 	.word	0xffff0000
 800307c:	58025408 	.word	0x58025408
 8003080:	5802541c 	.word	0x5802541c
 8003084:	58025430 	.word	0x58025430
 8003088:	58025444 	.word	0x58025444
 800308c:	58025458 	.word	0x58025458
 8003090:	5802546c 	.word	0x5802546c
 8003094:	58025480 	.word	0x58025480
 8003098:	58025494 	.word	0x58025494
 800309c:	fffe000f 	.word	0xfffe000f
 80030a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68d2      	ldr	r2, [r2, #12]
 80030a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b6e      	ldr	r3, [pc, #440]	; (80032a0 <HAL_DMA_Init+0x650>)
 80030e8:	4413      	add	r3, r2
 80030ea:	4a6e      	ldr	r2, [pc, #440]	; (80032a4 <HAL_DMA_Init+0x654>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	009a      	lsls	r2, r3, #2
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f001 f82f 	bl	800415c <DMA_CalcBaseAndBitshift>
 80030fe:	4603      	mov	r3, r0
 8003100:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	2201      	movs	r2, #1
 800310c:	409a      	lsls	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	e008      	b.n	8003126 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2240      	movs	r2, #64	; 0x40
 8003118:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2203      	movs	r2, #3
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e0b7      	b.n	8003296 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a5f      	ldr	r2, [pc, #380]	; (80032a8 <HAL_DMA_Init+0x658>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d072      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a5d      	ldr	r2, [pc, #372]	; (80032ac <HAL_DMA_Init+0x65c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d06d      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a5c      	ldr	r2, [pc, #368]	; (80032b0 <HAL_DMA_Init+0x660>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d068      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a5a      	ldr	r2, [pc, #360]	; (80032b4 <HAL_DMA_Init+0x664>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d063      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a59      	ldr	r2, [pc, #356]	; (80032b8 <HAL_DMA_Init+0x668>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d05e      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a57      	ldr	r2, [pc, #348]	; (80032bc <HAL_DMA_Init+0x66c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d059      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a56      	ldr	r2, [pc, #344]	; (80032c0 <HAL_DMA_Init+0x670>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d054      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a54      	ldr	r2, [pc, #336]	; (80032c4 <HAL_DMA_Init+0x674>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d04f      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a53      	ldr	r2, [pc, #332]	; (80032c8 <HAL_DMA_Init+0x678>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d04a      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a51      	ldr	r2, [pc, #324]	; (80032cc <HAL_DMA_Init+0x67c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d045      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a50      	ldr	r2, [pc, #320]	; (80032d0 <HAL_DMA_Init+0x680>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d040      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a4e      	ldr	r2, [pc, #312]	; (80032d4 <HAL_DMA_Init+0x684>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d03b      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a4d      	ldr	r2, [pc, #308]	; (80032d8 <HAL_DMA_Init+0x688>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d036      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a4b      	ldr	r2, [pc, #300]	; (80032dc <HAL_DMA_Init+0x68c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d031      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a4a      	ldr	r2, [pc, #296]	; (80032e0 <HAL_DMA_Init+0x690>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d02c      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a48      	ldr	r2, [pc, #288]	; (80032e4 <HAL_DMA_Init+0x694>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d027      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a47      	ldr	r2, [pc, #284]	; (80032e8 <HAL_DMA_Init+0x698>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d022      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a45      	ldr	r2, [pc, #276]	; (80032ec <HAL_DMA_Init+0x69c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01d      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a44      	ldr	r2, [pc, #272]	; (80032f0 <HAL_DMA_Init+0x6a0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d018      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a42      	ldr	r2, [pc, #264]	; (80032f4 <HAL_DMA_Init+0x6a4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a41      	ldr	r2, [pc, #260]	; (80032f8 <HAL_DMA_Init+0x6a8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a3f      	ldr	r2, [pc, #252]	; (80032fc <HAL_DMA_Init+0x6ac>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d009      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a3e      	ldr	r2, [pc, #248]	; (8003300 <HAL_DMA_Init+0x6b0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d004      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a3c      	ldr	r2, [pc, #240]	; (8003304 <HAL_DMA_Init+0x6b4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_DMA_Init+0x5ca>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_DMA_Init+0x5cc>
 800321a:	2300      	movs	r3, #0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d032      	beq.n	8003286 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f001 f8c9 	bl	80043b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b80      	cmp	r3, #128	; 0x80
 800322c:	d102      	bne.n	8003234 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003248:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d010      	beq.n	8003274 <HAL_DMA_Init+0x624>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b08      	cmp	r3, #8
 8003258:	d80c      	bhi.n	8003274 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f001 f946 	bl	80044ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	e008      	b.n	8003286 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	a7fdabf8 	.word	0xa7fdabf8
 80032a4:	cccccccd 	.word	0xcccccccd
 80032a8:	40020010 	.word	0x40020010
 80032ac:	40020028 	.word	0x40020028
 80032b0:	40020040 	.word	0x40020040
 80032b4:	40020058 	.word	0x40020058
 80032b8:	40020070 	.word	0x40020070
 80032bc:	40020088 	.word	0x40020088
 80032c0:	400200a0 	.word	0x400200a0
 80032c4:	400200b8 	.word	0x400200b8
 80032c8:	40020410 	.word	0x40020410
 80032cc:	40020428 	.word	0x40020428
 80032d0:	40020440 	.word	0x40020440
 80032d4:	40020458 	.word	0x40020458
 80032d8:	40020470 	.word	0x40020470
 80032dc:	40020488 	.word	0x40020488
 80032e0:	400204a0 	.word	0x400204a0
 80032e4:	400204b8 	.word	0x400204b8
 80032e8:	58025408 	.word	0x58025408
 80032ec:	5802541c 	.word	0x5802541c
 80032f0:	58025430 	.word	0x58025430
 80032f4:	58025444 	.word	0x58025444
 80032f8:	58025458 	.word	0x58025458
 80032fc:	5802546c 	.word	0x5802546c
 8003300:	58025480 	.word	0x58025480
 8003304:	58025494 	.word	0x58025494

08003308 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	; 0x28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003314:	4b67      	ldr	r3, [pc, #412]	; (80034b4 <HAL_DMA_IRQHandler+0x1ac>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a67      	ldr	r2, [pc, #412]	; (80034b8 <HAL_DMA_IRQHandler+0x1b0>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	0a9b      	lsrs	r3, r3, #10
 8003320:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a5f      	ldr	r2, [pc, #380]	; (80034bc <HAL_DMA_IRQHandler+0x1b4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d04a      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a5d      	ldr	r2, [pc, #372]	; (80034c0 <HAL_DMA_IRQHandler+0x1b8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d045      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a5c      	ldr	r2, [pc, #368]	; (80034c4 <HAL_DMA_IRQHandler+0x1bc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d040      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a5a      	ldr	r2, [pc, #360]	; (80034c8 <HAL_DMA_IRQHandler+0x1c0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d03b      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a59      	ldr	r2, [pc, #356]	; (80034cc <HAL_DMA_IRQHandler+0x1c4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d036      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a57      	ldr	r2, [pc, #348]	; (80034d0 <HAL_DMA_IRQHandler+0x1c8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d031      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a56      	ldr	r2, [pc, #344]	; (80034d4 <HAL_DMA_IRQHandler+0x1cc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d02c      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a54      	ldr	r2, [pc, #336]	; (80034d8 <HAL_DMA_IRQHandler+0x1d0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d027      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a53      	ldr	r2, [pc, #332]	; (80034dc <HAL_DMA_IRQHandler+0x1d4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d022      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a51      	ldr	r2, [pc, #324]	; (80034e0 <HAL_DMA_IRQHandler+0x1d8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01d      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a50      	ldr	r2, [pc, #320]	; (80034e4 <HAL_DMA_IRQHandler+0x1dc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d018      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a4e      	ldr	r2, [pc, #312]	; (80034e8 <HAL_DMA_IRQHandler+0x1e0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d013      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a4d      	ldr	r2, [pc, #308]	; (80034ec <HAL_DMA_IRQHandler+0x1e4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00e      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a4b      	ldr	r2, [pc, #300]	; (80034f0 <HAL_DMA_IRQHandler+0x1e8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d009      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a4a      	ldr	r2, [pc, #296]	; (80034f4 <HAL_DMA_IRQHandler+0x1ec>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a48      	ldr	r2, [pc, #288]	; (80034f8 <HAL_DMA_IRQHandler+0x1f0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d101      	bne.n	80033de <HAL_DMA_IRQHandler+0xd6>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <HAL_DMA_IRQHandler+0xd8>
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 842b 	beq.w	8003c3c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	2208      	movs	r2, #8
 80033f0:	409a      	lsls	r2, r3
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80a2 	beq.w	8003540 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a2e      	ldr	r2, [pc, #184]	; (80034bc <HAL_DMA_IRQHandler+0x1b4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d04a      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2d      	ldr	r2, [pc, #180]	; (80034c0 <HAL_DMA_IRQHandler+0x1b8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d045      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2b      	ldr	r2, [pc, #172]	; (80034c4 <HAL_DMA_IRQHandler+0x1bc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d040      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2a      	ldr	r2, [pc, #168]	; (80034c8 <HAL_DMA_IRQHandler+0x1c0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d03b      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a28      	ldr	r2, [pc, #160]	; (80034cc <HAL_DMA_IRQHandler+0x1c4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d036      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <HAL_DMA_IRQHandler+0x1c8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d031      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a25      	ldr	r2, [pc, #148]	; (80034d4 <HAL_DMA_IRQHandler+0x1cc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d02c      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a24      	ldr	r2, [pc, #144]	; (80034d8 <HAL_DMA_IRQHandler+0x1d0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d027      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a22      	ldr	r2, [pc, #136]	; (80034dc <HAL_DMA_IRQHandler+0x1d4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d022      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a21      	ldr	r2, [pc, #132]	; (80034e0 <HAL_DMA_IRQHandler+0x1d8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d01d      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1f      	ldr	r2, [pc, #124]	; (80034e4 <HAL_DMA_IRQHandler+0x1dc>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d018      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1e      	ldr	r2, [pc, #120]	; (80034e8 <HAL_DMA_IRQHandler+0x1e0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1c      	ldr	r2, [pc, #112]	; (80034ec <HAL_DMA_IRQHandler+0x1e4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00e      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <HAL_DMA_IRQHandler+0x1e8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a19      	ldr	r2, [pc, #100]	; (80034f4 <HAL_DMA_IRQHandler+0x1ec>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a18      	ldr	r2, [pc, #96]	; (80034f8 <HAL_DMA_IRQHandler+0x1f0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d12f      	bne.n	80034fc <HAL_DMA_IRQHandler+0x1f4>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bf14      	ite	ne
 80034aa:	2301      	movne	r3, #1
 80034ac:	2300      	moveq	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	e02e      	b.n	8003510 <HAL_DMA_IRQHandler+0x208>
 80034b2:	bf00      	nop
 80034b4:	24000000 	.word	0x24000000
 80034b8:	1b4e81b5 	.word	0x1b4e81b5
 80034bc:	40020010 	.word	0x40020010
 80034c0:	40020028 	.word	0x40020028
 80034c4:	40020040 	.word	0x40020040
 80034c8:	40020058 	.word	0x40020058
 80034cc:	40020070 	.word	0x40020070
 80034d0:	40020088 	.word	0x40020088
 80034d4:	400200a0 	.word	0x400200a0
 80034d8:	400200b8 	.word	0x400200b8
 80034dc:	40020410 	.word	0x40020410
 80034e0:	40020428 	.word	0x40020428
 80034e4:	40020440 	.word	0x40020440
 80034e8:	40020458 	.word	0x40020458
 80034ec:	40020470 	.word	0x40020470
 80034f0:	40020488 	.word	0x40020488
 80034f4:	400204a0 	.word	0x400204a0
 80034f8:	400204b8 	.word	0x400204b8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	bf14      	ite	ne
 800350a:	2301      	movne	r3, #1
 800350c:	2300      	moveq	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d015      	beq.n	8003540 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0204 	bic.w	r2, r2, #4
 8003522:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	2208      	movs	r2, #8
 800352e:	409a      	lsls	r2, r3
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	f043 0201 	orr.w	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	fa22 f303 	lsr.w	r3, r2, r3
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d06e      	beq.n	8003634 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a69      	ldr	r2, [pc, #420]	; (8003700 <HAL_DMA_IRQHandler+0x3f8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d04a      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a67      	ldr	r2, [pc, #412]	; (8003704 <HAL_DMA_IRQHandler+0x3fc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d045      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a66      	ldr	r2, [pc, #408]	; (8003708 <HAL_DMA_IRQHandler+0x400>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d040      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a64      	ldr	r2, [pc, #400]	; (800370c <HAL_DMA_IRQHandler+0x404>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d03b      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a63      	ldr	r2, [pc, #396]	; (8003710 <HAL_DMA_IRQHandler+0x408>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d036      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a61      	ldr	r2, [pc, #388]	; (8003714 <HAL_DMA_IRQHandler+0x40c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d031      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a60      	ldr	r2, [pc, #384]	; (8003718 <HAL_DMA_IRQHandler+0x410>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d02c      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a5e      	ldr	r2, [pc, #376]	; (800371c <HAL_DMA_IRQHandler+0x414>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d027      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a5d      	ldr	r2, [pc, #372]	; (8003720 <HAL_DMA_IRQHandler+0x418>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d022      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a5b      	ldr	r2, [pc, #364]	; (8003724 <HAL_DMA_IRQHandler+0x41c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01d      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a5a      	ldr	r2, [pc, #360]	; (8003728 <HAL_DMA_IRQHandler+0x420>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d018      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a58      	ldr	r2, [pc, #352]	; (800372c <HAL_DMA_IRQHandler+0x424>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a57      	ldr	r2, [pc, #348]	; (8003730 <HAL_DMA_IRQHandler+0x428>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00e      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a55      	ldr	r2, [pc, #340]	; (8003734 <HAL_DMA_IRQHandler+0x42c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d009      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a54      	ldr	r2, [pc, #336]	; (8003738 <HAL_DMA_IRQHandler+0x430>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d004      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a52      	ldr	r2, [pc, #328]	; (800373c <HAL_DMA_IRQHandler+0x434>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d10a      	bne.n	800360c <HAL_DMA_IRQHandler+0x304>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e003      	b.n	8003614 <HAL_DMA_IRQHandler+0x30c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2201      	movs	r2, #1
 8003622:	409a      	lsls	r2, r3
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362c:	f043 0202 	orr.w	r2, r3, #2
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2204      	movs	r2, #4
 800363e:	409a      	lsls	r2, r3
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 808f 	beq.w	8003768 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a2c      	ldr	r2, [pc, #176]	; (8003700 <HAL_DMA_IRQHandler+0x3f8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d04a      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2a      	ldr	r2, [pc, #168]	; (8003704 <HAL_DMA_IRQHandler+0x3fc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d045      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a29      	ldr	r2, [pc, #164]	; (8003708 <HAL_DMA_IRQHandler+0x400>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d040      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a27      	ldr	r2, [pc, #156]	; (800370c <HAL_DMA_IRQHandler+0x404>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d03b      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a26      	ldr	r2, [pc, #152]	; (8003710 <HAL_DMA_IRQHandler+0x408>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d036      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a24      	ldr	r2, [pc, #144]	; (8003714 <HAL_DMA_IRQHandler+0x40c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d031      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a23      	ldr	r2, [pc, #140]	; (8003718 <HAL_DMA_IRQHandler+0x410>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d02c      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a21      	ldr	r2, [pc, #132]	; (800371c <HAL_DMA_IRQHandler+0x414>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d027      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a20      	ldr	r2, [pc, #128]	; (8003720 <HAL_DMA_IRQHandler+0x418>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d022      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <HAL_DMA_IRQHandler+0x41c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01d      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1d      	ldr	r2, [pc, #116]	; (8003728 <HAL_DMA_IRQHandler+0x420>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d018      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1b      	ldr	r2, [pc, #108]	; (800372c <HAL_DMA_IRQHandler+0x424>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1a      	ldr	r2, [pc, #104]	; (8003730 <HAL_DMA_IRQHandler+0x428>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00e      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a18      	ldr	r2, [pc, #96]	; (8003734 <HAL_DMA_IRQHandler+0x42c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d009      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a17      	ldr	r2, [pc, #92]	; (8003738 <HAL_DMA_IRQHandler+0x430>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a15      	ldr	r2, [pc, #84]	; (800373c <HAL_DMA_IRQHandler+0x434>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d12a      	bne.n	8003740 <HAL_DMA_IRQHandler+0x438>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e023      	b.n	8003748 <HAL_DMA_IRQHandler+0x440>
 8003700:	40020010 	.word	0x40020010
 8003704:	40020028 	.word	0x40020028
 8003708:	40020040 	.word	0x40020040
 800370c:	40020058 	.word	0x40020058
 8003710:	40020070 	.word	0x40020070
 8003714:	40020088 	.word	0x40020088
 8003718:	400200a0 	.word	0x400200a0
 800371c:	400200b8 	.word	0x400200b8
 8003720:	40020410 	.word	0x40020410
 8003724:	40020428 	.word	0x40020428
 8003728:	40020440 	.word	0x40020440
 800372c:	40020458 	.word	0x40020458
 8003730:	40020470 	.word	0x40020470
 8003734:	40020488 	.word	0x40020488
 8003738:	400204a0 	.word	0x400204a0
 800373c:	400204b8 	.word	0x400204b8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2300      	movs	r3, #0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00d      	beq.n	8003768 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	2204      	movs	r2, #4
 8003756:	409a      	lsls	r2, r3
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003760:	f043 0204 	orr.w	r2, r3, #4
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	2210      	movs	r2, #16
 8003772:	409a      	lsls	r2, r3
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80a6 	beq.w	80038ca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a85      	ldr	r2, [pc, #532]	; (8003998 <HAL_DMA_IRQHandler+0x690>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d04a      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a83      	ldr	r2, [pc, #524]	; (800399c <HAL_DMA_IRQHandler+0x694>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d045      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a82      	ldr	r2, [pc, #520]	; (80039a0 <HAL_DMA_IRQHandler+0x698>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d040      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a80      	ldr	r2, [pc, #512]	; (80039a4 <HAL_DMA_IRQHandler+0x69c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d03b      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a7f      	ldr	r2, [pc, #508]	; (80039a8 <HAL_DMA_IRQHandler+0x6a0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d036      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a7d      	ldr	r2, [pc, #500]	; (80039ac <HAL_DMA_IRQHandler+0x6a4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d031      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7c      	ldr	r2, [pc, #496]	; (80039b0 <HAL_DMA_IRQHandler+0x6a8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d02c      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a7a      	ldr	r2, [pc, #488]	; (80039b4 <HAL_DMA_IRQHandler+0x6ac>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d027      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a79      	ldr	r2, [pc, #484]	; (80039b8 <HAL_DMA_IRQHandler+0x6b0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d022      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a77      	ldr	r2, [pc, #476]	; (80039bc <HAL_DMA_IRQHandler+0x6b4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01d      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a76      	ldr	r2, [pc, #472]	; (80039c0 <HAL_DMA_IRQHandler+0x6b8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d018      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a74      	ldr	r2, [pc, #464]	; (80039c4 <HAL_DMA_IRQHandler+0x6bc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a73      	ldr	r2, [pc, #460]	; (80039c8 <HAL_DMA_IRQHandler+0x6c0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00e      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a71      	ldr	r2, [pc, #452]	; (80039cc <HAL_DMA_IRQHandler+0x6c4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d009      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a70      	ldr	r2, [pc, #448]	; (80039d0 <HAL_DMA_IRQHandler+0x6c8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6e      	ldr	r2, [pc, #440]	; (80039d4 <HAL_DMA_IRQHandler+0x6cc>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d10a      	bne.n	8003834 <HAL_DMA_IRQHandler+0x52c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e009      	b.n	8003848 <HAL_DMA_IRQHandler+0x540>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	bf14      	ite	ne
 8003842:	2301      	movne	r3, #1
 8003844:	2300      	moveq	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d03e      	beq.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	2210      	movs	r2, #16
 8003856:	409a      	lsls	r2, r3
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d018      	beq.n	800389c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d108      	bne.n	800388a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	d024      	beq.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	e01f      	b.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01b      	beq.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
 800389a:	e016      	b.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d107      	bne.n	80038ba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0208 	bic.w	r2, r2, #8
 80038b8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	2220      	movs	r2, #32
 80038d4:	409a      	lsls	r2, r3
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 8110 	beq.w	8003b00 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2c      	ldr	r2, [pc, #176]	; (8003998 <HAL_DMA_IRQHandler+0x690>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d04a      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a2b      	ldr	r2, [pc, #172]	; (800399c <HAL_DMA_IRQHandler+0x694>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d045      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a29      	ldr	r2, [pc, #164]	; (80039a0 <HAL_DMA_IRQHandler+0x698>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d040      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a28      	ldr	r2, [pc, #160]	; (80039a4 <HAL_DMA_IRQHandler+0x69c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d03b      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a26      	ldr	r2, [pc, #152]	; (80039a8 <HAL_DMA_IRQHandler+0x6a0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d036      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a25      	ldr	r2, [pc, #148]	; (80039ac <HAL_DMA_IRQHandler+0x6a4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d031      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a23      	ldr	r2, [pc, #140]	; (80039b0 <HAL_DMA_IRQHandler+0x6a8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d02c      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a22      	ldr	r2, [pc, #136]	; (80039b4 <HAL_DMA_IRQHandler+0x6ac>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d027      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a20      	ldr	r2, [pc, #128]	; (80039b8 <HAL_DMA_IRQHandler+0x6b0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d022      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <HAL_DMA_IRQHandler+0x6b4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d01d      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <HAL_DMA_IRQHandler+0x6b8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d018      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <HAL_DMA_IRQHandler+0x6bc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1a      	ldr	r2, [pc, #104]	; (80039c8 <HAL_DMA_IRQHandler+0x6c0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00e      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a19      	ldr	r2, [pc, #100]	; (80039cc <HAL_DMA_IRQHandler+0x6c4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <HAL_DMA_IRQHandler+0x6c8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <HAL_DMA_IRQHandler+0x6cc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d12b      	bne.n	80039d8 <HAL_DMA_IRQHandler+0x6d0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf14      	ite	ne
 800398e:	2301      	movne	r3, #1
 8003990:	2300      	moveq	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	e02a      	b.n	80039ec <HAL_DMA_IRQHandler+0x6e4>
 8003996:	bf00      	nop
 8003998:	40020010 	.word	0x40020010
 800399c:	40020028 	.word	0x40020028
 80039a0:	40020040 	.word	0x40020040
 80039a4:	40020058 	.word	0x40020058
 80039a8:	40020070 	.word	0x40020070
 80039ac:	40020088 	.word	0x40020088
 80039b0:	400200a0 	.word	0x400200a0
 80039b4:	400200b8 	.word	0x400200b8
 80039b8:	40020410 	.word	0x40020410
 80039bc:	40020428 	.word	0x40020428
 80039c0:	40020440 	.word	0x40020440
 80039c4:	40020458 	.word	0x40020458
 80039c8:	40020470 	.word	0x40020470
 80039cc:	40020488 	.word	0x40020488
 80039d0:	400204a0 	.word	0x400204a0
 80039d4:	400204b8 	.word	0x400204b8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	bf14      	ite	ne
 80039e6:	2301      	movne	r3, #1
 80039e8:	2300      	moveq	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8087 	beq.w	8003b00 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2220      	movs	r2, #32
 80039fc:	409a      	lsls	r2, r3
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d139      	bne.n	8003a82 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0216 	bic.w	r2, r2, #22
 8003a1c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a2c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d103      	bne.n	8003a3e <HAL_DMA_IRQHandler+0x736>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0208 	bic.w	r2, r2, #8
 8003a4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	223f      	movs	r2, #63	; 0x3f
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 834a 	beq.w	800410c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
          }
          return;
 8003a80:	e344      	b.n	800410c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d018      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d108      	bne.n	8003ab0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d02c      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
 8003aae:	e027      	b.n	8003b00 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d023      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
 8003ac0:	e01e      	b.n	8003b00 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10f      	bne.n	8003af0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0210 	bic.w	r2, r2, #16
 8003ade:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8306 	beq.w	8004116 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8088 	beq.w	8003c28 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a7a      	ldr	r2, [pc, #488]	; (8003d10 <HAL_DMA_IRQHandler+0xa08>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d04a      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a79      	ldr	r2, [pc, #484]	; (8003d14 <HAL_DMA_IRQHandler+0xa0c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d045      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a77      	ldr	r2, [pc, #476]	; (8003d18 <HAL_DMA_IRQHandler+0xa10>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d040      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a76      	ldr	r2, [pc, #472]	; (8003d1c <HAL_DMA_IRQHandler+0xa14>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d03b      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a74      	ldr	r2, [pc, #464]	; (8003d20 <HAL_DMA_IRQHandler+0xa18>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d036      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a73      	ldr	r2, [pc, #460]	; (8003d24 <HAL_DMA_IRQHandler+0xa1c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d031      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a71      	ldr	r2, [pc, #452]	; (8003d28 <HAL_DMA_IRQHandler+0xa20>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d02c      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a70      	ldr	r2, [pc, #448]	; (8003d2c <HAL_DMA_IRQHandler+0xa24>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d027      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a6e      	ldr	r2, [pc, #440]	; (8003d30 <HAL_DMA_IRQHandler+0xa28>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d022      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a6d      	ldr	r2, [pc, #436]	; (8003d34 <HAL_DMA_IRQHandler+0xa2c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d01d      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a6b      	ldr	r2, [pc, #428]	; (8003d38 <HAL_DMA_IRQHandler+0xa30>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d018      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a6a      	ldr	r2, [pc, #424]	; (8003d3c <HAL_DMA_IRQHandler+0xa34>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d013      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a68      	ldr	r2, [pc, #416]	; (8003d40 <HAL_DMA_IRQHandler+0xa38>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00e      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a67      	ldr	r2, [pc, #412]	; (8003d44 <HAL_DMA_IRQHandler+0xa3c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d009      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a65      	ldr	r2, [pc, #404]	; (8003d48 <HAL_DMA_IRQHandler+0xa40>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d004      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a64      	ldr	r2, [pc, #400]	; (8003d4c <HAL_DMA_IRQHandler+0xa44>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d108      	bne.n	8003bd2 <HAL_DMA_IRQHandler+0x8ca>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e007      	b.n	8003be2 <HAL_DMA_IRQHandler+0x8da>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3301      	adds	r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d307      	bcc.n	8003bfe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f2      	bne.n	8003be2 <HAL_DMA_IRQHandler+0x8da>
 8003bfc:	e000      	b.n	8003c00 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003bfe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d004      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2203      	movs	r2, #3
 8003c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003c16:	e003      	b.n	8003c20 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8272 	beq.w	8004116 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
 8003c3a:	e26c      	b.n	8004116 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a43      	ldr	r2, [pc, #268]	; (8003d50 <HAL_DMA_IRQHandler+0xa48>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d022      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a42      	ldr	r2, [pc, #264]	; (8003d54 <HAL_DMA_IRQHandler+0xa4c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d01d      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a40      	ldr	r2, [pc, #256]	; (8003d58 <HAL_DMA_IRQHandler+0xa50>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d018      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a3f      	ldr	r2, [pc, #252]	; (8003d5c <HAL_DMA_IRQHandler+0xa54>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d013      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a3d      	ldr	r2, [pc, #244]	; (8003d60 <HAL_DMA_IRQHandler+0xa58>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00e      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a3c      	ldr	r2, [pc, #240]	; (8003d64 <HAL_DMA_IRQHandler+0xa5c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d009      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a3a      	ldr	r2, [pc, #232]	; (8003d68 <HAL_DMA_IRQHandler+0xa60>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a39      	ldr	r2, [pc, #228]	; (8003d6c <HAL_DMA_IRQHandler+0xa64>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d101      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x988>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <HAL_DMA_IRQHandler+0x98a>
 8003c90:	2300      	movs	r3, #0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 823f 	beq.w	8004116 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	2204      	movs	r2, #4
 8003caa:	409a      	lsls	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80cd 	beq.w	8003e50 <HAL_DMA_IRQHandler+0xb48>
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80c7 	beq.w	8003e50 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	2204      	movs	r2, #4
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d049      	beq.n	8003d70 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8210 	beq.w	8004110 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cf8:	e20a      	b.n	8004110 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8206 	beq.w	8004110 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d0c:	e200      	b.n	8004110 <HAL_DMA_IRQHandler+0xe08>
 8003d0e:	bf00      	nop
 8003d10:	40020010 	.word	0x40020010
 8003d14:	40020028 	.word	0x40020028
 8003d18:	40020040 	.word	0x40020040
 8003d1c:	40020058 	.word	0x40020058
 8003d20:	40020070 	.word	0x40020070
 8003d24:	40020088 	.word	0x40020088
 8003d28:	400200a0 	.word	0x400200a0
 8003d2c:	400200b8 	.word	0x400200b8
 8003d30:	40020410 	.word	0x40020410
 8003d34:	40020428 	.word	0x40020428
 8003d38:	40020440 	.word	0x40020440
 8003d3c:	40020458 	.word	0x40020458
 8003d40:	40020470 	.word	0x40020470
 8003d44:	40020488 	.word	0x40020488
 8003d48:	400204a0 	.word	0x400204a0
 8003d4c:	400204b8 	.word	0x400204b8
 8003d50:	58025408 	.word	0x58025408
 8003d54:	5802541c 	.word	0x5802541c
 8003d58:	58025430 	.word	0x58025430
 8003d5c:	58025444 	.word	0x58025444
 8003d60:	58025458 	.word	0x58025458
 8003d64:	5802546c 	.word	0x5802546c
 8003d68:	58025480 	.word	0x58025480
 8003d6c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d160      	bne.n	8003e3c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7f      	ldr	r2, [pc, #508]	; (8003f7c <HAL_DMA_IRQHandler+0xc74>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d04a      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a7d      	ldr	r2, [pc, #500]	; (8003f80 <HAL_DMA_IRQHandler+0xc78>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d045      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a7c      	ldr	r2, [pc, #496]	; (8003f84 <HAL_DMA_IRQHandler+0xc7c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d040      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a7a      	ldr	r2, [pc, #488]	; (8003f88 <HAL_DMA_IRQHandler+0xc80>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d03b      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a79      	ldr	r2, [pc, #484]	; (8003f8c <HAL_DMA_IRQHandler+0xc84>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d036      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a77      	ldr	r2, [pc, #476]	; (8003f90 <HAL_DMA_IRQHandler+0xc88>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d031      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a76      	ldr	r2, [pc, #472]	; (8003f94 <HAL_DMA_IRQHandler+0xc8c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d02c      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a74      	ldr	r2, [pc, #464]	; (8003f98 <HAL_DMA_IRQHandler+0xc90>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d027      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a73      	ldr	r2, [pc, #460]	; (8003f9c <HAL_DMA_IRQHandler+0xc94>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a71      	ldr	r2, [pc, #452]	; (8003fa0 <HAL_DMA_IRQHandler+0xc98>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01d      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a70      	ldr	r2, [pc, #448]	; (8003fa4 <HAL_DMA_IRQHandler+0xc9c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d018      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a6e      	ldr	r2, [pc, #440]	; (8003fa8 <HAL_DMA_IRQHandler+0xca0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a6d      	ldr	r2, [pc, #436]	; (8003fac <HAL_DMA_IRQHandler+0xca4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a6b      	ldr	r2, [pc, #428]	; (8003fb0 <HAL_DMA_IRQHandler+0xca8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6a      	ldr	r2, [pc, #424]	; (8003fb4 <HAL_DMA_IRQHandler+0xcac>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a68      	ldr	r2, [pc, #416]	; (8003fb8 <HAL_DMA_IRQHandler+0xcb0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d108      	bne.n	8003e2c <HAL_DMA_IRQHandler+0xb24>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0208 	bic.w	r2, r2, #8
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e007      	b.n	8003e3c <HAL_DMA_IRQHandler+0xb34>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0204 	bic.w	r2, r2, #4
 8003e3a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8165 	beq.w	8004110 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e4e:	e15f      	b.n	8004110 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	2202      	movs	r2, #2
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 80c5 	beq.w	8003ff0 <HAL_DMA_IRQHandler+0xce8>
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80bf 	beq.w	8003ff0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d018      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 813a 	beq.w	8004114 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ea8:	e134      	b.n	8004114 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 8130 	beq.w	8004114 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ebc:	e12a      	b.n	8004114 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f040 8089 	bne.w	8003fdc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a2b      	ldr	r2, [pc, #172]	; (8003f7c <HAL_DMA_IRQHandler+0xc74>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d04a      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a29      	ldr	r2, [pc, #164]	; (8003f80 <HAL_DMA_IRQHandler+0xc78>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d045      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a28      	ldr	r2, [pc, #160]	; (8003f84 <HAL_DMA_IRQHandler+0xc7c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d040      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a26      	ldr	r2, [pc, #152]	; (8003f88 <HAL_DMA_IRQHandler+0xc80>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d03b      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a25      	ldr	r2, [pc, #148]	; (8003f8c <HAL_DMA_IRQHandler+0xc84>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d036      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a23      	ldr	r2, [pc, #140]	; (8003f90 <HAL_DMA_IRQHandler+0xc88>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d031      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a22      	ldr	r2, [pc, #136]	; (8003f94 <HAL_DMA_IRQHandler+0xc8c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d02c      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a20      	ldr	r2, [pc, #128]	; (8003f98 <HAL_DMA_IRQHandler+0xc90>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d027      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1f      	ldr	r2, [pc, #124]	; (8003f9c <HAL_DMA_IRQHandler+0xc94>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d022      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a1d      	ldr	r2, [pc, #116]	; (8003fa0 <HAL_DMA_IRQHandler+0xc98>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d01d      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1c      	ldr	r2, [pc, #112]	; (8003fa4 <HAL_DMA_IRQHandler+0xc9c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d018      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1a      	ldr	r2, [pc, #104]	; (8003fa8 <HAL_DMA_IRQHandler+0xca0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d013      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a19      	ldr	r2, [pc, #100]	; (8003fac <HAL_DMA_IRQHandler+0xca4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00e      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a17      	ldr	r2, [pc, #92]	; (8003fb0 <HAL_DMA_IRQHandler+0xca8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d009      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a16      	ldr	r2, [pc, #88]	; (8003fb4 <HAL_DMA_IRQHandler+0xcac>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d004      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <HAL_DMA_IRQHandler+0xcb0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d128      	bne.n	8003fbc <HAL_DMA_IRQHandler+0xcb4>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0214 	bic.w	r2, r2, #20
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e027      	b.n	8003fcc <HAL_DMA_IRQHandler+0xcc4>
 8003f7c:	40020010 	.word	0x40020010
 8003f80:	40020028 	.word	0x40020028
 8003f84:	40020040 	.word	0x40020040
 8003f88:	40020058 	.word	0x40020058
 8003f8c:	40020070 	.word	0x40020070
 8003f90:	40020088 	.word	0x40020088
 8003f94:	400200a0 	.word	0x400200a0
 8003f98:	400200b8 	.word	0x400200b8
 8003f9c:	40020410 	.word	0x40020410
 8003fa0:	40020428 	.word	0x40020428
 8003fa4:	40020440 	.word	0x40020440
 8003fa8:	40020458 	.word	0x40020458
 8003fac:	40020470 	.word	0x40020470
 8003fb0:	40020488 	.word	0x40020488
 8003fb4:	400204a0 	.word	0x400204a0
 8003fb8:	400204b8 	.word	0x400204b8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 020a 	bic.w	r2, r2, #10
 8003fca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8097 	beq.w	8004114 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fee:	e091      	b.n	8004114 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	f003 031f 	and.w	r3, r3, #31
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8088 	beq.w	8004116 <HAL_DMA_IRQHandler+0xe0e>
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8082 	beq.w	8004116 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a41      	ldr	r2, [pc, #260]	; (800411c <HAL_DMA_IRQHandler+0xe14>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d04a      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a3f      	ldr	r2, [pc, #252]	; (8004120 <HAL_DMA_IRQHandler+0xe18>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d045      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a3e      	ldr	r2, [pc, #248]	; (8004124 <HAL_DMA_IRQHandler+0xe1c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d040      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a3c      	ldr	r2, [pc, #240]	; (8004128 <HAL_DMA_IRQHandler+0xe20>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d03b      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a3b      	ldr	r2, [pc, #236]	; (800412c <HAL_DMA_IRQHandler+0xe24>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d036      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a39      	ldr	r2, [pc, #228]	; (8004130 <HAL_DMA_IRQHandler+0xe28>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d031      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a38      	ldr	r2, [pc, #224]	; (8004134 <HAL_DMA_IRQHandler+0xe2c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d02c      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a36      	ldr	r2, [pc, #216]	; (8004138 <HAL_DMA_IRQHandler+0xe30>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d027      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a35      	ldr	r2, [pc, #212]	; (800413c <HAL_DMA_IRQHandler+0xe34>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d022      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a33      	ldr	r2, [pc, #204]	; (8004140 <HAL_DMA_IRQHandler+0xe38>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01d      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a32      	ldr	r2, [pc, #200]	; (8004144 <HAL_DMA_IRQHandler+0xe3c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d018      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a30      	ldr	r2, [pc, #192]	; (8004148 <HAL_DMA_IRQHandler+0xe40>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a2f      	ldr	r2, [pc, #188]	; (800414c <HAL_DMA_IRQHandler+0xe44>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a2d      	ldr	r2, [pc, #180]	; (8004150 <HAL_DMA_IRQHandler+0xe48>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2c      	ldr	r2, [pc, #176]	; (8004154 <HAL_DMA_IRQHandler+0xe4c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a2a      	ldr	r2, [pc, #168]	; (8004158 <HAL_DMA_IRQHandler+0xe50>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d108      	bne.n	80040c4 <HAL_DMA_IRQHandler+0xdbc>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 021c 	bic.w	r2, r2, #28
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	e007      	b.n	80040d4 <HAL_DMA_IRQHandler+0xdcc>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 020e 	bic.w	r2, r2, #14
 80040d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	2201      	movs	r2, #1
 80040de:	409a      	lsls	r2, r3
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
 800410a:	e004      	b.n	8004116 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800410c:	bf00      	nop
 800410e:	e002      	b.n	8004116 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004110:	bf00      	nop
 8004112:	e000      	b.n	8004116 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004114:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004116:	3728      	adds	r7, #40	; 0x28
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40020010 	.word	0x40020010
 8004120:	40020028 	.word	0x40020028
 8004124:	40020040 	.word	0x40020040
 8004128:	40020058 	.word	0x40020058
 800412c:	40020070 	.word	0x40020070
 8004130:	40020088 	.word	0x40020088
 8004134:	400200a0 	.word	0x400200a0
 8004138:	400200b8 	.word	0x400200b8
 800413c:	40020410 	.word	0x40020410
 8004140:	40020428 	.word	0x40020428
 8004144:	40020440 	.word	0x40020440
 8004148:	40020458 	.word	0x40020458
 800414c:	40020470 	.word	0x40020470
 8004150:	40020488 	.word	0x40020488
 8004154:	400204a0 	.word	0x400204a0
 8004158:	400204b8 	.word	0x400204b8

0800415c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a42      	ldr	r2, [pc, #264]	; (8004274 <DMA_CalcBaseAndBitshift+0x118>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d04a      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a41      	ldr	r2, [pc, #260]	; (8004278 <DMA_CalcBaseAndBitshift+0x11c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d045      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a3f      	ldr	r2, [pc, #252]	; (800427c <DMA_CalcBaseAndBitshift+0x120>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d040      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a3e      	ldr	r2, [pc, #248]	; (8004280 <DMA_CalcBaseAndBitshift+0x124>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d03b      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a3c      	ldr	r2, [pc, #240]	; (8004284 <DMA_CalcBaseAndBitshift+0x128>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d036      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a3b      	ldr	r2, [pc, #236]	; (8004288 <DMA_CalcBaseAndBitshift+0x12c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d031      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a39      	ldr	r2, [pc, #228]	; (800428c <DMA_CalcBaseAndBitshift+0x130>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d02c      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a38      	ldr	r2, [pc, #224]	; (8004290 <DMA_CalcBaseAndBitshift+0x134>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d027      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a36      	ldr	r2, [pc, #216]	; (8004294 <DMA_CalcBaseAndBitshift+0x138>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d022      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a35      	ldr	r2, [pc, #212]	; (8004298 <DMA_CalcBaseAndBitshift+0x13c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d01d      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a33      	ldr	r2, [pc, #204]	; (800429c <DMA_CalcBaseAndBitshift+0x140>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d018      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a32      	ldr	r2, [pc, #200]	; (80042a0 <DMA_CalcBaseAndBitshift+0x144>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d013      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a30      	ldr	r2, [pc, #192]	; (80042a4 <DMA_CalcBaseAndBitshift+0x148>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00e      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a2f      	ldr	r2, [pc, #188]	; (80042a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d009      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a2d      	ldr	r2, [pc, #180]	; (80042ac <DMA_CalcBaseAndBitshift+0x150>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d004      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a2c      	ldr	r2, [pc, #176]	; (80042b0 <DMA_CalcBaseAndBitshift+0x154>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d101      	bne.n	8004208 <DMA_CalcBaseAndBitshift+0xac>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <DMA_CalcBaseAndBitshift+0xae>
 8004208:	2300      	movs	r3, #0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d024      	beq.n	8004258 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	3b10      	subs	r3, #16
 8004216:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <DMA_CalcBaseAndBitshift+0x158>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	4a24      	ldr	r2, [pc, #144]	; (80042b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004228:	5cd3      	ldrb	r3, [r2, r3]
 800422a:	461a      	mov	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b03      	cmp	r3, #3
 8004234:	d908      	bls.n	8004248 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	4b1f      	ldr	r3, [pc, #124]	; (80042bc <DMA_CalcBaseAndBitshift+0x160>)
 800423e:	4013      	ands	r3, r2
 8004240:	1d1a      	adds	r2, r3, #4
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	659a      	str	r2, [r3, #88]	; 0x58
 8004246:	e00d      	b.n	8004264 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <DMA_CalcBaseAndBitshift+0x160>)
 8004250:	4013      	ands	r3, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6593      	str	r3, [r2, #88]	; 0x58
 8004256:	e005      	b.n	8004264 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	40020010 	.word	0x40020010
 8004278:	40020028 	.word	0x40020028
 800427c:	40020040 	.word	0x40020040
 8004280:	40020058 	.word	0x40020058
 8004284:	40020070 	.word	0x40020070
 8004288:	40020088 	.word	0x40020088
 800428c:	400200a0 	.word	0x400200a0
 8004290:	400200b8 	.word	0x400200b8
 8004294:	40020410 	.word	0x40020410
 8004298:	40020428 	.word	0x40020428
 800429c:	40020440 	.word	0x40020440
 80042a0:	40020458 	.word	0x40020458
 80042a4:	40020470 	.word	0x40020470
 80042a8:	40020488 	.word	0x40020488
 80042ac:	400204a0 	.word	0x400204a0
 80042b0:	400204b8 	.word	0x400204b8
 80042b4:	aaaaaaab 	.word	0xaaaaaaab
 80042b8:	08010cbc 	.word	0x08010cbc
 80042bc:	fffffc00 	.word	0xfffffc00

080042c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d120      	bne.n	8004316 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d858      	bhi.n	800438e <DMA_CheckFifoParam+0xce>
 80042dc:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <DMA_CheckFifoParam+0x24>)
 80042de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e2:	bf00      	nop
 80042e4:	080042f5 	.word	0x080042f5
 80042e8:	08004307 	.word	0x08004307
 80042ec:	080042f5 	.word	0x080042f5
 80042f0:	0800438f 	.word	0x0800438f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d048      	beq.n	8004392 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004304:	e045      	b.n	8004392 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800430e:	d142      	bne.n	8004396 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004314:	e03f      	b.n	8004396 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431e:	d123      	bne.n	8004368 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	2b03      	cmp	r3, #3
 8004326:	d838      	bhi.n	800439a <DMA_CheckFifoParam+0xda>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <DMA_CheckFifoParam+0x70>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004341 	.word	0x08004341
 8004334:	08004347 	.word	0x08004347
 8004338:	08004341 	.word	0x08004341
 800433c:	08004359 	.word	0x08004359
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
        break;
 8004344:	e030      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d025      	beq.n	800439e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004356:	e022      	b.n	800439e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004360:	d11f      	bne.n	80043a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004366:	e01c      	b.n	80043a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	2b02      	cmp	r3, #2
 800436e:	d902      	bls.n	8004376 <DMA_CheckFifoParam+0xb6>
 8004370:	2b03      	cmp	r3, #3
 8004372:	d003      	beq.n	800437c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004374:	e018      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
        break;
 800437a:	e015      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00e      	beq.n	80043a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
    break;
 800438c:	e00b      	b.n	80043a6 <DMA_CheckFifoParam+0xe6>
        break;
 800438e:	bf00      	nop
 8004390:	e00a      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        break;
 8004392:	bf00      	nop
 8004394:	e008      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        break;
 8004396:	bf00      	nop
 8004398:	e006      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        break;
 800439a:	bf00      	nop
 800439c:	e004      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        break;
 800439e:	bf00      	nop
 80043a0:	e002      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        break;
 80043a2:	bf00      	nop
 80043a4:	e000      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
    break;
 80043a6:	bf00      	nop
    }
  }

  return status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop

080043b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a38      	ldr	r2, [pc, #224]	; (80044ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d022      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a36      	ldr	r2, [pc, #216]	; (80044b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01d      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a35      	ldr	r2, [pc, #212]	; (80044b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d018      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a33      	ldr	r2, [pc, #204]	; (80044b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a32      	ldr	r2, [pc, #200]	; (80044bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00e      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a30      	ldr	r2, [pc, #192]	; (80044c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d009      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2d      	ldr	r2, [pc, #180]	; (80044c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01a      	beq.n	8004456 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	3b08      	subs	r3, #8
 8004428:	4a28      	ldr	r2, [pc, #160]	; (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	091b      	lsrs	r3, r3, #4
 8004430:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4b26      	ldr	r3, [pc, #152]	; (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	461a      	mov	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a24      	ldr	r2, [pc, #144]	; (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004444:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	2201      	movs	r2, #1
 800444e:	409a      	lsls	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004454:	e024      	b.n	80044a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	3b10      	subs	r3, #16
 800445e:	4a1e      	ldr	r2, [pc, #120]	; (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4a1c      	ldr	r2, [pc, #112]	; (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d806      	bhi.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4a1b      	ldr	r2, [pc, #108]	; (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d902      	bls.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3308      	adds	r3, #8
 800447c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	461a      	mov	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004490:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	2201      	movs	r2, #1
 800449a:	409a      	lsls	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	58025408 	.word	0x58025408
 80044b0:	5802541c 	.word	0x5802541c
 80044b4:	58025430 	.word	0x58025430
 80044b8:	58025444 	.word	0x58025444
 80044bc:	58025458 	.word	0x58025458
 80044c0:	5802546c 	.word	0x5802546c
 80044c4:	58025480 	.word	0x58025480
 80044c8:	58025494 	.word	0x58025494
 80044cc:	cccccccd 	.word	0xcccccccd
 80044d0:	16009600 	.word	0x16009600
 80044d4:	58025880 	.word	0x58025880
 80044d8:	aaaaaaab 	.word	0xaaaaaaab
 80044dc:	400204b8 	.word	0x400204b8
 80044e0:	4002040f 	.word	0x4002040f
 80044e4:	10008200 	.word	0x10008200
 80044e8:	40020880 	.word	0x40020880

080044ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d04a      	beq.n	8004598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b08      	cmp	r3, #8
 8004506:	d847      	bhi.n	8004598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a25      	ldr	r2, [pc, #148]	; (80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d022      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a24      	ldr	r2, [pc, #144]	; (80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d01d      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a22      	ldr	r2, [pc, #136]	; (80045ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d018      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a21      	ldr	r2, [pc, #132]	; (80045b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d013      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1f      	ldr	r2, [pc, #124]	; (80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00e      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1e      	ldr	r2, [pc, #120]	; (80045b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d009      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1c      	ldr	r2, [pc, #112]	; (80045bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1b      	ldr	r2, [pc, #108]	; (80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d101      	bne.n	800455c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800455c:	2300      	movs	r3, #0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	461a      	mov	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a15      	ldr	r2, [pc, #84]	; (80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004574:	671a      	str	r2, [r3, #112]	; 0x70
 8004576:	e009      	b.n	800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4b14      	ldr	r3, [pc, #80]	; (80045cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800458a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3b01      	subs	r3, #1
 8004590:	2201      	movs	r2, #1
 8004592:	409a      	lsls	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	58025408 	.word	0x58025408
 80045a8:	5802541c 	.word	0x5802541c
 80045ac:	58025430 	.word	0x58025430
 80045b0:	58025444 	.word	0x58025444
 80045b4:	58025458 	.word	0x58025458
 80045b8:	5802546c 	.word	0x5802546c
 80045bc:	58025480 	.word	0x58025480
 80045c0:	58025494 	.word	0x58025494
 80045c4:	1600963f 	.word	0x1600963f
 80045c8:	58025940 	.word	0x58025940
 80045cc:	1000823f 	.word	0x1000823f
 80045d0:	40020940 	.word	0x40020940

080045d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b089      	sub	sp, #36	; 0x24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80045e2:	4b89      	ldr	r3, [pc, #548]	; (8004808 <HAL_GPIO_Init+0x234>)
 80045e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045e6:	e194      	b.n	8004912 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	2101      	movs	r1, #1
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	fa01 f303 	lsl.w	r3, r1, r3
 80045f4:	4013      	ands	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 8186 	beq.w	800490c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	2b01      	cmp	r3, #1
 800460a:	d005      	beq.n	8004618 <HAL_GPIO_Init+0x44>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d130      	bne.n	800467a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	2203      	movs	r2, #3
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4313      	orrs	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800464e:	2201      	movs	r2, #1
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4013      	ands	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	091b      	lsrs	r3, r3, #4
 8004664:	f003 0201 	and.w	r2, r3, #1
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4313      	orrs	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b03      	cmp	r3, #3
 8004684:	d017      	beq.n	80046b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	2203      	movs	r2, #3
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43db      	mvns	r3, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4013      	ands	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d123      	bne.n	800470a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	08da      	lsrs	r2, r3, #3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3208      	adds	r2, #8
 80046ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	220f      	movs	r2, #15
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	08da      	lsrs	r2, r3, #3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3208      	adds	r2, #8
 8004704:	69b9      	ldr	r1, [r7, #24]
 8004706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	2203      	movs	r2, #3
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4013      	ands	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f003 0203 	and.w	r2, r3, #3
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4313      	orrs	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 80e0 	beq.w	800490c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800474c:	4b2f      	ldr	r3, [pc, #188]	; (800480c <HAL_GPIO_Init+0x238>)
 800474e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004752:	4a2e      	ldr	r2, [pc, #184]	; (800480c <HAL_GPIO_Init+0x238>)
 8004754:	f043 0302 	orr.w	r3, r3, #2
 8004758:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800475c:	4b2b      	ldr	r3, [pc, #172]	; (800480c <HAL_GPIO_Init+0x238>)
 800475e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800476a:	4a29      	ldr	r2, [pc, #164]	; (8004810 <HAL_GPIO_Init+0x23c>)
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	089b      	lsrs	r3, r3, #2
 8004770:	3302      	adds	r3, #2
 8004772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	220f      	movs	r2, #15
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	4013      	ands	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a20      	ldr	r2, [pc, #128]	; (8004814 <HAL_GPIO_Init+0x240>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d052      	beq.n	800483c <HAL_GPIO_Init+0x268>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a1f      	ldr	r2, [pc, #124]	; (8004818 <HAL_GPIO_Init+0x244>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d031      	beq.n	8004802 <HAL_GPIO_Init+0x22e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a1e      	ldr	r2, [pc, #120]	; (800481c <HAL_GPIO_Init+0x248>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d02b      	beq.n	80047fe <HAL_GPIO_Init+0x22a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a1d      	ldr	r2, [pc, #116]	; (8004820 <HAL_GPIO_Init+0x24c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d025      	beq.n	80047fa <HAL_GPIO_Init+0x226>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a1c      	ldr	r2, [pc, #112]	; (8004824 <HAL_GPIO_Init+0x250>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d01f      	beq.n	80047f6 <HAL_GPIO_Init+0x222>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1b      	ldr	r2, [pc, #108]	; (8004828 <HAL_GPIO_Init+0x254>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d019      	beq.n	80047f2 <HAL_GPIO_Init+0x21e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a1a      	ldr	r2, [pc, #104]	; (800482c <HAL_GPIO_Init+0x258>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d013      	beq.n	80047ee <HAL_GPIO_Init+0x21a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a19      	ldr	r2, [pc, #100]	; (8004830 <HAL_GPIO_Init+0x25c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00d      	beq.n	80047ea <HAL_GPIO_Init+0x216>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a18      	ldr	r2, [pc, #96]	; (8004834 <HAL_GPIO_Init+0x260>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d007      	beq.n	80047e6 <HAL_GPIO_Init+0x212>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a17      	ldr	r2, [pc, #92]	; (8004838 <HAL_GPIO_Init+0x264>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d101      	bne.n	80047e2 <HAL_GPIO_Init+0x20e>
 80047de:	2309      	movs	r3, #9
 80047e0:	e02d      	b.n	800483e <HAL_GPIO_Init+0x26a>
 80047e2:	230a      	movs	r3, #10
 80047e4:	e02b      	b.n	800483e <HAL_GPIO_Init+0x26a>
 80047e6:	2308      	movs	r3, #8
 80047e8:	e029      	b.n	800483e <HAL_GPIO_Init+0x26a>
 80047ea:	2307      	movs	r3, #7
 80047ec:	e027      	b.n	800483e <HAL_GPIO_Init+0x26a>
 80047ee:	2306      	movs	r3, #6
 80047f0:	e025      	b.n	800483e <HAL_GPIO_Init+0x26a>
 80047f2:	2305      	movs	r3, #5
 80047f4:	e023      	b.n	800483e <HAL_GPIO_Init+0x26a>
 80047f6:	2304      	movs	r3, #4
 80047f8:	e021      	b.n	800483e <HAL_GPIO_Init+0x26a>
 80047fa:	2303      	movs	r3, #3
 80047fc:	e01f      	b.n	800483e <HAL_GPIO_Init+0x26a>
 80047fe:	2302      	movs	r3, #2
 8004800:	e01d      	b.n	800483e <HAL_GPIO_Init+0x26a>
 8004802:	2301      	movs	r3, #1
 8004804:	e01b      	b.n	800483e <HAL_GPIO_Init+0x26a>
 8004806:	bf00      	nop
 8004808:	58000080 	.word	0x58000080
 800480c:	58024400 	.word	0x58024400
 8004810:	58000400 	.word	0x58000400
 8004814:	58020000 	.word	0x58020000
 8004818:	58020400 	.word	0x58020400
 800481c:	58020800 	.word	0x58020800
 8004820:	58020c00 	.word	0x58020c00
 8004824:	58021000 	.word	0x58021000
 8004828:	58021400 	.word	0x58021400
 800482c:	58021800 	.word	0x58021800
 8004830:	58021c00 	.word	0x58021c00
 8004834:	58022000 	.word	0x58022000
 8004838:	58022400 	.word	0x58022400
 800483c:	2300      	movs	r3, #0
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	f002 0203 	and.w	r2, r2, #3
 8004844:	0092      	lsls	r2, r2, #2
 8004846:	4093      	lsls	r3, r2
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4313      	orrs	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800484e:	4938      	ldr	r1, [pc, #224]	; (8004930 <HAL_GPIO_Init+0x35c>)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	3302      	adds	r3, #2
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800485c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800488a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	3301      	adds	r3, #1
 8004910:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	f47f ae63 	bne.w	80045e8 <HAL_GPIO_Init+0x14>
  }
}
 8004922:	bf00      	nop
 8004924:	bf00      	nop
 8004926:	3724      	adds	r7, #36	; 0x24
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	58000400 	.word	0x58000400

08004934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	807b      	strh	r3, [r7, #2]
 8004940:	4613      	mov	r3, r2
 8004942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004944:	787b      	ldrb	r3, [r7, #1]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800494a:	887a      	ldrh	r2, [r7, #2]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004950:	e003      	b.n	800495a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004952:	887b      	ldrh	r3, [r7, #2]
 8004954:	041a      	lsls	r2, r3, #16
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	619a      	str	r2, [r3, #24]
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004970:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <HAL_PWREx_ConfigSupply+0x70>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b04      	cmp	r3, #4
 800497a:	d00a      	beq.n	8004992 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800497c:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <HAL_PWREx_ConfigSupply+0x70>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	429a      	cmp	r2, r3
 8004988:	d001      	beq.n	800498e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e01f      	b.n	80049ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	e01d      	b.n	80049ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004992:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <HAL_PWREx_ConfigSupply+0x70>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f023 0207 	bic.w	r2, r3, #7
 800499a:	490f      	ldr	r1, [pc, #60]	; (80049d8 <HAL_PWREx_ConfigSupply+0x70>)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80049a2:	f7fc fcd5 	bl	8001350 <HAL_GetTick>
 80049a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049a8:	e009      	b.n	80049be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049aa:	f7fc fcd1 	bl	8001350 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049b8:	d901      	bls.n	80049be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e007      	b.n	80049ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <HAL_PWREx_ConfigSupply+0x70>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ca:	d1ee      	bne.n	80049aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	58024800 	.word	0x58024800

080049dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08c      	sub	sp, #48	; 0x30
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f000 bc48 	b.w	8005280 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8088 	beq.w	8004b0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049fe:	4b99      	ldr	r3, [pc, #612]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a08:	4b96      	ldr	r3, [pc, #600]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d007      	beq.n	8004a24 <HAL_RCC_OscConfig+0x48>
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	2b18      	cmp	r3, #24
 8004a18:	d111      	bne.n	8004a3e <HAL_RCC_OscConfig+0x62>
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d10c      	bne.n	8004a3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a24:	4b8f      	ldr	r3, [pc, #572]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d06d      	beq.n	8004b0c <HAL_RCC_OscConfig+0x130>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d169      	bne.n	8004b0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f000 bc21 	b.w	8005280 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a46:	d106      	bne.n	8004a56 <HAL_RCC_OscConfig+0x7a>
 8004a48:	4b86      	ldr	r3, [pc, #536]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a85      	ldr	r2, [pc, #532]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	e02e      	b.n	8004ab4 <HAL_RCC_OscConfig+0xd8>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x9c>
 8004a5e:	4b81      	ldr	r3, [pc, #516]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a80      	ldr	r2, [pc, #512]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	4b7e      	ldr	r3, [pc, #504]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a7d      	ldr	r2, [pc, #500]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e01d      	b.n	8004ab4 <HAL_RCC_OscConfig+0xd8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a80:	d10c      	bne.n	8004a9c <HAL_RCC_OscConfig+0xc0>
 8004a82:	4b78      	ldr	r3, [pc, #480]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a77      	ldr	r2, [pc, #476]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	4b75      	ldr	r3, [pc, #468]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a74      	ldr	r2, [pc, #464]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e00b      	b.n	8004ab4 <HAL_RCC_OscConfig+0xd8>
 8004a9c:	4b71      	ldr	r3, [pc, #452]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a70      	ldr	r2, [pc, #448]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4b6e      	ldr	r3, [pc, #440]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a6d      	ldr	r2, [pc, #436]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d013      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fc fc48 	bl	8001350 <HAL_GetTick>
 8004ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac4:	f7fc fc44 	bl	8001350 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	; 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e3d4      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ad6:	4b63      	ldr	r3, [pc, #396]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0xe8>
 8004ae2:	e014      	b.n	8004b0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7fc fc34 	bl	8001350 <HAL_GetTick>
 8004ae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aec:	f7fc fc30 	bl	8001350 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b64      	cmp	r3, #100	; 0x64
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e3c0      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004afe:	4b59      	ldr	r3, [pc, #356]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x110>
 8004b0a:	e000      	b.n	8004b0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 80ca 	beq.w	8004cb0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b1c:	4b51      	ldr	r3, [pc, #324]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b26:	4b4f      	ldr	r3, [pc, #316]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <HAL_RCC_OscConfig+0x166>
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	2b18      	cmp	r3, #24
 8004b36:	d156      	bne.n	8004be6 <HAL_RCC_OscConfig+0x20a>
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d151      	bne.n	8004be6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b42:	4b48      	ldr	r3, [pc, #288]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d005      	beq.n	8004b5a <HAL_RCC_OscConfig+0x17e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e392      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b5a:	4b42      	ldr	r3, [pc, #264]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f023 0219 	bic.w	r2, r3, #25
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	493f      	ldr	r1, [pc, #252]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6c:	f7fc fbf0 	bl	8001350 <HAL_GetTick>
 8004b70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b74:	f7fc fbec 	bl	8001350 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e37c      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b86:	4b37      	ldr	r3, [pc, #220]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b92:	f7fc fbe9 	bl	8001368 <HAL_GetREVID>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d817      	bhi.n	8004bd0 <HAL_RCC_OscConfig+0x1f4>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d108      	bne.n	8004bba <HAL_RCC_OscConfig+0x1de>
 8004ba8:	4b2e      	ldr	r3, [pc, #184]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004bb0:	4a2c      	ldr	r2, [pc, #176]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bb8:	e07a      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bba:	4b2a      	ldr	r3, [pc, #168]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	031b      	lsls	r3, r3, #12
 8004bc8:	4926      	ldr	r1, [pc, #152]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bce:	e06f      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd0:	4b24      	ldr	r3, [pc, #144]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	061b      	lsls	r3, r3, #24
 8004bde:	4921      	ldr	r1, [pc, #132]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004be4:	e064      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d047      	beq.n	8004c7e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bee:	4b1d      	ldr	r3, [pc, #116]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 0219 	bic.w	r2, r3, #25
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	491a      	ldr	r1, [pc, #104]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7fc fba6 	bl	8001350 <HAL_GetTick>
 8004c04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c08:	f7fc fba2 	bl	8001350 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e332      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c1a:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c26:	f7fc fb9f 	bl	8001368 <HAL_GetREVID>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d819      	bhi.n	8004c68 <HAL_RCC_OscConfig+0x28c>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	2b40      	cmp	r3, #64	; 0x40
 8004c3a:	d108      	bne.n	8004c4e <HAL_RCC_OscConfig+0x272>
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c44:	4a07      	ldr	r2, [pc, #28]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c4a:	6053      	str	r3, [r2, #4]
 8004c4c:	e030      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2d4>
 8004c4e:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	031b      	lsls	r3, r3, #12
 8004c5c:	4901      	ldr	r1, [pc, #4]	; (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
 8004c62:	e025      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2d4>
 8004c64:	58024400 	.word	0x58024400
 8004c68:	4b9a      	ldr	r3, [pc, #616]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	061b      	lsls	r3, r3, #24
 8004c76:	4997      	ldr	r1, [pc, #604]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	604b      	str	r3, [r1, #4]
 8004c7c:	e018      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7e:	4b95      	ldr	r3, [pc, #596]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a94      	ldr	r2, [pc, #592]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8a:	f7fc fb61 	bl	8001350 <HAL_GetTick>
 8004c8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c92:	f7fc fb5d 	bl	8001350 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e2ed      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ca4:	4b8b      	ldr	r3, [pc, #556]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f0      	bne.n	8004c92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80a9 	beq.w	8004e10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cbe:	4b85      	ldr	r3, [pc, #532]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cc8:	4b82      	ldr	r3, [pc, #520]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d007      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x308>
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b18      	cmp	r3, #24
 8004cd8:	d13a      	bne.n	8004d50 <HAL_RCC_OscConfig+0x374>
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d135      	bne.n	8004d50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ce4:	4b7b      	ldr	r3, [pc, #492]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_RCC_OscConfig+0x320>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	2b80      	cmp	r3, #128	; 0x80
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e2c1      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cfc:	f7fc fb34 	bl	8001368 <HAL_GetREVID>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d817      	bhi.n	8004d3a <HAL_RCC_OscConfig+0x35e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	2b20      	cmp	r3, #32
 8004d10:	d108      	bne.n	8004d24 <HAL_RCC_OscConfig+0x348>
 8004d12:	4b70      	ldr	r3, [pc, #448]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004d1a:	4a6e      	ldr	r2, [pc, #440]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d22:	e075      	b.n	8004e10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d24:	4b6b      	ldr	r3, [pc, #428]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	069b      	lsls	r3, r3, #26
 8004d32:	4968      	ldr	r1, [pc, #416]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d38:	e06a      	b.n	8004e10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d3a:	4b66      	ldr	r3, [pc, #408]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	061b      	lsls	r3, r3, #24
 8004d48:	4962      	ldr	r1, [pc, #392]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d4e:	e05f      	b.n	8004e10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d042      	beq.n	8004dde <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d58:	4b5e      	ldr	r3, [pc, #376]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a5d      	ldr	r2, [pc, #372]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fc faf4 	bl	8001350 <HAL_GetTick>
 8004d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d6c:	f7fc faf0 	bl	8001350 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e280      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d7e:	4b55      	ldr	r3, [pc, #340]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0f0      	beq.n	8004d6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d8a:	f7fc faed 	bl	8001368 <HAL_GetREVID>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d817      	bhi.n	8004dc8 <HAL_RCC_OscConfig+0x3ec>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d108      	bne.n	8004db2 <HAL_RCC_OscConfig+0x3d6>
 8004da0:	4b4c      	ldr	r3, [pc, #304]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004da8:	4a4a      	ldr	r2, [pc, #296]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004daa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dae:	6053      	str	r3, [r2, #4]
 8004db0:	e02e      	b.n	8004e10 <HAL_RCC_OscConfig+0x434>
 8004db2:	4b48      	ldr	r3, [pc, #288]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	069b      	lsls	r3, r3, #26
 8004dc0:	4944      	ldr	r1, [pc, #272]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	604b      	str	r3, [r1, #4]
 8004dc6:	e023      	b.n	8004e10 <HAL_RCC_OscConfig+0x434>
 8004dc8:	4b42      	ldr	r3, [pc, #264]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	061b      	lsls	r3, r3, #24
 8004dd6:	493f      	ldr	r1, [pc, #252]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60cb      	str	r3, [r1, #12]
 8004ddc:	e018      	b.n	8004e10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004dde:	4b3d      	ldr	r3, [pc, #244]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a3c      	ldr	r2, [pc, #240]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dea:	f7fc fab1 	bl	8001350 <HAL_GetTick>
 8004dee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004df2:	f7fc faad 	bl	8001350 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e23d      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e04:	4b33      	ldr	r3, [pc, #204]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1f0      	bne.n	8004df2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d036      	beq.n	8004e8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d019      	beq.n	8004e58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e24:	4b2b      	ldr	r3, [pc, #172]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e28:	4a2a      	ldr	r2, [pc, #168]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e30:	f7fc fa8e 	bl	8001350 <HAL_GetTick>
 8004e34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e38:	f7fc fa8a 	bl	8001350 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e21a      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e4a:	4b22      	ldr	r3, [pc, #136]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0x45c>
 8004e56:	e018      	b.n	8004e8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e58:	4b1e      	ldr	r3, [pc, #120]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5c:	4a1d      	ldr	r2, [pc, #116]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004e5e:	f023 0301 	bic.w	r3, r3, #1
 8004e62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e64:	f7fc fa74 	bl	8001350 <HAL_GetTick>
 8004e68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6c:	f7fc fa70 	bl	8001350 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e200      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e7e:	4b15      	ldr	r3, [pc, #84]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f0      	bne.n	8004e6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d039      	beq.n	8004f0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d01c      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a0c      	ldr	r2, [pc, #48]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ea8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004eaa:	f7fc fa51 	bl	8001350 <HAL_GetTick>
 8004eae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eb2:	f7fc fa4d 	bl	8001350 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e1dd      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ec4:	4b03      	ldr	r3, [pc, #12]	; (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0f0      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x4d6>
 8004ed0:	e01b      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
 8004ed2:	bf00      	nop
 8004ed4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ed8:	4b9b      	ldr	r3, [pc, #620]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a9a      	ldr	r2, [pc, #616]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ee2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ee4:	f7fc fa34 	bl	8001350 <HAL_GetTick>
 8004ee8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eec:	f7fc fa30 	bl	8001350 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e1c0      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004efe:	4b92      	ldr	r3, [pc, #584]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 8081 	beq.w	800501a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f18:	4b8c      	ldr	r3, [pc, #560]	; (800514c <HAL_RCC_OscConfig+0x770>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a8b      	ldr	r2, [pc, #556]	; (800514c <HAL_RCC_OscConfig+0x770>)
 8004f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f24:	f7fc fa14 	bl	8001350 <HAL_GetTick>
 8004f28:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f2c:	f7fc fa10 	bl	8001350 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b64      	cmp	r3, #100	; 0x64
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e1a0      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f3e:	4b83      	ldr	r3, [pc, #524]	; (800514c <HAL_RCC_OscConfig+0x770>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d106      	bne.n	8004f60 <HAL_RCC_OscConfig+0x584>
 8004f52:	4b7d      	ldr	r3, [pc, #500]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f56:	4a7c      	ldr	r2, [pc, #496]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f58:	f043 0301 	orr.w	r3, r3, #1
 8004f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5e:	e02d      	b.n	8004fbc <HAL_RCC_OscConfig+0x5e0>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10c      	bne.n	8004f82 <HAL_RCC_OscConfig+0x5a6>
 8004f68:	4b77      	ldr	r3, [pc, #476]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	4a76      	ldr	r2, [pc, #472]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	6713      	str	r3, [r2, #112]	; 0x70
 8004f74:	4b74      	ldr	r3, [pc, #464]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f78:	4a73      	ldr	r2, [pc, #460]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f7a:	f023 0304 	bic.w	r3, r3, #4
 8004f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f80:	e01c      	b.n	8004fbc <HAL_RCC_OscConfig+0x5e0>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b05      	cmp	r3, #5
 8004f88:	d10c      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x5c8>
 8004f8a:	4b6f      	ldr	r3, [pc, #444]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	4a6e      	ldr	r2, [pc, #440]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f90:	f043 0304 	orr.w	r3, r3, #4
 8004f94:	6713      	str	r3, [r2, #112]	; 0x70
 8004f96:	4b6c      	ldr	r3, [pc, #432]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	4a6b      	ldr	r2, [pc, #428]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f9c:	f043 0301 	orr.w	r3, r3, #1
 8004fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa2:	e00b      	b.n	8004fbc <HAL_RCC_OscConfig+0x5e0>
 8004fa4:	4b68      	ldr	r3, [pc, #416]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa8:	4a67      	ldr	r2, [pc, #412]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004faa:	f023 0301 	bic.w	r3, r3, #1
 8004fae:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb0:	4b65      	ldr	r3, [pc, #404]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb4:	4a64      	ldr	r2, [pc, #400]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004fb6:	f023 0304 	bic.w	r3, r3, #4
 8004fba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d015      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc4:	f7fc f9c4 	bl	8001350 <HAL_GetTick>
 8004fc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fca:	e00a      	b.n	8004fe2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fcc:	f7fc f9c0 	bl	8001350 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e14e      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fe2:	4b59      	ldr	r3, [pc, #356]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0ee      	beq.n	8004fcc <HAL_RCC_OscConfig+0x5f0>
 8004fee:	e014      	b.n	800501a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff0:	f7fc f9ae 	bl	8001350 <HAL_GetTick>
 8004ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff8:	f7fc f9aa 	bl	8001350 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	; 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e138      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800500e:	4b4e      	ldr	r3, [pc, #312]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1ee      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 812d 	beq.w	800527e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005024:	4b48      	ldr	r3, [pc, #288]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800502c:	2b18      	cmp	r3, #24
 800502e:	f000 80bd 	beq.w	80051ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	2b02      	cmp	r3, #2
 8005038:	f040 809e 	bne.w	8005178 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503c:	4b42      	ldr	r3, [pc, #264]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a41      	ldr	r2, [pc, #260]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005042:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fc f982 	bl	8001350 <HAL_GetTick>
 800504c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005050:	f7fc f97e 	bl	8001350 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e10e      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005062:	4b39      	ldr	r3, [pc, #228]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800506e:	4b36      	ldr	r3, [pc, #216]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005072:	4b37      	ldr	r3, [pc, #220]	; (8005150 <HAL_RCC_OscConfig+0x774>)
 8005074:	4013      	ands	r3, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800507e:	0112      	lsls	r2, r2, #4
 8005080:	430a      	orrs	r2, r1
 8005082:	4931      	ldr	r1, [pc, #196]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005084:	4313      	orrs	r3, r2
 8005086:	628b      	str	r3, [r1, #40]	; 0x28
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508c:	3b01      	subs	r3, #1
 800508e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005096:	3b01      	subs	r3, #1
 8005098:	025b      	lsls	r3, r3, #9
 800509a:	b29b      	uxth	r3, r3
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a2:	3b01      	subs	r3, #1
 80050a4:	041b      	lsls	r3, r3, #16
 80050a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	3b01      	subs	r3, #1
 80050b2:	061b      	lsls	r3, r3, #24
 80050b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050b8:	4923      	ldr	r1, [pc, #140]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80050be:	4b22      	ldr	r3, [pc, #136]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	4a21      	ldr	r2, [pc, #132]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050c4:	f023 0301 	bic.w	r3, r3, #1
 80050c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050ca:	4b1f      	ldr	r3, [pc, #124]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ce:	4b21      	ldr	r3, [pc, #132]	; (8005154 <HAL_RCC_OscConfig+0x778>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80050d6:	00d2      	lsls	r2, r2, #3
 80050d8:	491b      	ldr	r1, [pc, #108]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80050de:	4b1a      	ldr	r3, [pc, #104]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	f023 020c 	bic.w	r2, r3, #12
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	4917      	ldr	r1, [pc, #92]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050f0:	4b15      	ldr	r3, [pc, #84]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	f023 0202 	bic.w	r2, r3, #2
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fc:	4912      	ldr	r1, [pc, #72]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005102:	4b11      	ldr	r3, [pc, #68]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005106:	4a10      	ldr	r2, [pc, #64]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800510e:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	4a0d      	ldr	r2, [pc, #52]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005118:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800511a:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	4a0a      	ldr	r2, [pc, #40]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005124:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005126:	4b08      	ldr	r3, [pc, #32]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	4a07      	ldr	r2, [pc, #28]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 800512c:	f043 0301 	orr.w	r3, r3, #1
 8005130:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005132:	4b05      	ldr	r3, [pc, #20]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a04      	ldr	r2, [pc, #16]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005138:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800513c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513e:	f7fc f907 	bl	8001350 <HAL_GetTick>
 8005142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005144:	e011      	b.n	800516a <HAL_RCC_OscConfig+0x78e>
 8005146:	bf00      	nop
 8005148:	58024400 	.word	0x58024400
 800514c:	58024800 	.word	0x58024800
 8005150:	fffffc0c 	.word	0xfffffc0c
 8005154:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005158:	f7fc f8fa 	bl	8001350 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e08a      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800516a:	4b47      	ldr	r3, [pc, #284]	; (8005288 <HAL_RCC_OscConfig+0x8ac>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f0      	beq.n	8005158 <HAL_RCC_OscConfig+0x77c>
 8005176:	e082      	b.n	800527e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005178:	4b43      	ldr	r3, [pc, #268]	; (8005288 <HAL_RCC_OscConfig+0x8ac>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a42      	ldr	r2, [pc, #264]	; (8005288 <HAL_RCC_OscConfig+0x8ac>)
 800517e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005184:	f7fc f8e4 	bl	8001350 <HAL_GetTick>
 8005188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800518c:	f7fc f8e0 	bl	8001350 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e070      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800519e:	4b3a      	ldr	r3, [pc, #232]	; (8005288 <HAL_RCC_OscConfig+0x8ac>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0x7b0>
 80051aa:	e068      	b.n	800527e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80051ac:	4b36      	ldr	r3, [pc, #216]	; (8005288 <HAL_RCC_OscConfig+0x8ac>)
 80051ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051b2:	4b35      	ldr	r3, [pc, #212]	; (8005288 <HAL_RCC_OscConfig+0x8ac>)
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d031      	beq.n	8005224 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f003 0203 	and.w	r2, r3, #3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d12a      	bne.n	8005224 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051da:	429a      	cmp	r2, r3
 80051dc:	d122      	bne.n	8005224 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d11a      	bne.n	8005224 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	0a5b      	lsrs	r3, r3, #9
 80051f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d111      	bne.n	8005224 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	0c1b      	lsrs	r3, r3, #16
 8005204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800520e:	429a      	cmp	r2, r3
 8005210:	d108      	bne.n	8005224 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	0e1b      	lsrs	r3, r3, #24
 8005216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005220:	429a      	cmp	r2, r3
 8005222:	d001      	beq.n	8005228 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e02b      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005228:	4b17      	ldr	r3, [pc, #92]	; (8005288 <HAL_RCC_OscConfig+0x8ac>)
 800522a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522c:	08db      	lsrs	r3, r3, #3
 800522e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005232:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	429a      	cmp	r2, r3
 800523c:	d01f      	beq.n	800527e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <HAL_RCC_OscConfig+0x8ac>)
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	4a11      	ldr	r2, [pc, #68]	; (8005288 <HAL_RCC_OscConfig+0x8ac>)
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800524a:	f7fc f881 	bl	8001350 <HAL_GetTick>
 800524e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005250:	bf00      	nop
 8005252:	f7fc f87d 	bl	8001350 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	4293      	cmp	r3, r2
 800525c:	d0f9      	beq.n	8005252 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800525e:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <HAL_RCC_OscConfig+0x8ac>)
 8005260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005262:	4b0a      	ldr	r3, [pc, #40]	; (800528c <HAL_RCC_OscConfig+0x8b0>)
 8005264:	4013      	ands	r3, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800526a:	00d2      	lsls	r2, r2, #3
 800526c:	4906      	ldr	r1, [pc, #24]	; (8005288 <HAL_RCC_OscConfig+0x8ac>)
 800526e:	4313      	orrs	r3, r2
 8005270:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005272:	4b05      	ldr	r3, [pc, #20]	; (8005288 <HAL_RCC_OscConfig+0x8ac>)
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	4a04      	ldr	r2, [pc, #16]	; (8005288 <HAL_RCC_OscConfig+0x8ac>)
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3730      	adds	r7, #48	; 0x30
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	58024400 	.word	0x58024400
 800528c:	ffff0007 	.word	0xffff0007

08005290 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e19c      	b.n	80055de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052a4:	4b8a      	ldr	r3, [pc, #552]	; (80054d0 <HAL_RCC_ClockConfig+0x240>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d910      	bls.n	80052d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b2:	4b87      	ldr	r3, [pc, #540]	; (80054d0 <HAL_RCC_ClockConfig+0x240>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f023 020f 	bic.w	r2, r3, #15
 80052ba:	4985      	ldr	r1, [pc, #532]	; (80054d0 <HAL_RCC_ClockConfig+0x240>)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	4313      	orrs	r3, r2
 80052c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c2:	4b83      	ldr	r3, [pc, #524]	; (80054d0 <HAL_RCC_ClockConfig+0x240>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d001      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e184      	b.n	80055de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d010      	beq.n	8005302 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	4b7b      	ldr	r3, [pc, #492]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d908      	bls.n	8005302 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052f0:	4b78      	ldr	r3, [pc, #480]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	4975      	ldr	r1, [pc, #468]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d010      	beq.n	8005330 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695a      	ldr	r2, [r3, #20]
 8005312:	4b70      	ldr	r3, [pc, #448]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800531a:	429a      	cmp	r2, r3
 800531c:	d908      	bls.n	8005330 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800531e:	4b6d      	ldr	r3, [pc, #436]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	496a      	ldr	r1, [pc, #424]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 800532c:	4313      	orrs	r3, r2
 800532e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	2b00      	cmp	r3, #0
 800533a:	d010      	beq.n	800535e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699a      	ldr	r2, [r3, #24]
 8005340:	4b64      	ldr	r3, [pc, #400]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005348:	429a      	cmp	r2, r3
 800534a:	d908      	bls.n	800535e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800534c:	4b61      	ldr	r3, [pc, #388]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	495e      	ldr	r1, [pc, #376]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 800535a:	4313      	orrs	r3, r2
 800535c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d010      	beq.n	800538c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69da      	ldr	r2, [r3, #28]
 800536e:	4b59      	ldr	r3, [pc, #356]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005376:	429a      	cmp	r2, r3
 8005378:	d908      	bls.n	800538c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800537a:	4b56      	ldr	r3, [pc, #344]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	4953      	ldr	r1, [pc, #332]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005388:	4313      	orrs	r3, r2
 800538a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d010      	beq.n	80053ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	4b4d      	ldr	r3, [pc, #308]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d908      	bls.n	80053ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a8:	4b4a      	ldr	r3, [pc, #296]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f023 020f 	bic.w	r2, r3, #15
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4947      	ldr	r1, [pc, #284]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d055      	beq.n	8005472 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80053c6:	4b43      	ldr	r3, [pc, #268]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	4940      	ldr	r1, [pc, #256]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d107      	bne.n	80053f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053e0:	4b3c      	ldr	r3, [pc, #240]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d121      	bne.n	8005430 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0f6      	b.n	80055de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d107      	bne.n	8005408 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053f8:	4b36      	ldr	r3, [pc, #216]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d115      	bne.n	8005430 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e0ea      	b.n	80055de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d107      	bne.n	8005420 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005410:	4b30      	ldr	r3, [pc, #192]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0de      	b.n	80055de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005420:	4b2c      	ldr	r3, [pc, #176]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0d6      	b.n	80055de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005430:	4b28      	ldr	r3, [pc, #160]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f023 0207 	bic.w	r2, r3, #7
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	4925      	ldr	r1, [pc, #148]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 800543e:	4313      	orrs	r3, r2
 8005440:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005442:	f7fb ff85 	bl	8001350 <HAL_GetTick>
 8005446:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005448:	e00a      	b.n	8005460 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800544a:	f7fb ff81 	bl	8001350 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f241 3288 	movw	r2, #5000	; 0x1388
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e0be      	b.n	80055de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005460:	4b1c      	ldr	r3, [pc, #112]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	429a      	cmp	r2, r3
 8005470:	d1eb      	bne.n	800544a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d010      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	429a      	cmp	r2, r3
 800548c:	d208      	bcs.n	80054a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800548e:	4b11      	ldr	r3, [pc, #68]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f023 020f 	bic.w	r2, r3, #15
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	490e      	ldr	r1, [pc, #56]	; (80054d4 <HAL_RCC_ClockConfig+0x244>)
 800549c:	4313      	orrs	r3, r2
 800549e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054a0:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <HAL_RCC_ClockConfig+0x240>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d214      	bcs.n	80054d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b08      	ldr	r3, [pc, #32]	; (80054d0 <HAL_RCC_ClockConfig+0x240>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f023 020f 	bic.w	r2, r3, #15
 80054b6:	4906      	ldr	r1, [pc, #24]	; (80054d0 <HAL_RCC_ClockConfig+0x240>)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054be:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <HAL_RCC_ClockConfig+0x240>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d005      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e086      	b.n	80055de <HAL_RCC_ClockConfig+0x34e>
 80054d0:	52002000 	.word	0x52002000
 80054d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d010      	beq.n	8005506 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	4b3f      	ldr	r3, [pc, #252]	; (80055e8 <HAL_RCC_ClockConfig+0x358>)
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d208      	bcs.n	8005506 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054f4:	4b3c      	ldr	r3, [pc, #240]	; (80055e8 <HAL_RCC_ClockConfig+0x358>)
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	4939      	ldr	r1, [pc, #228]	; (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005502:	4313      	orrs	r3, r2
 8005504:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d010      	beq.n	8005534 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	695a      	ldr	r2, [r3, #20]
 8005516:	4b34      	ldr	r3, [pc, #208]	; (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800551e:	429a      	cmp	r2, r3
 8005520:	d208      	bcs.n	8005534 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005522:	4b31      	ldr	r3, [pc, #196]	; (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	492e      	ldr	r1, [pc, #184]	; (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005530:	4313      	orrs	r3, r2
 8005532:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0310 	and.w	r3, r3, #16
 800553c:	2b00      	cmp	r3, #0
 800553e:	d010      	beq.n	8005562 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699a      	ldr	r2, [r3, #24]
 8005544:	4b28      	ldr	r3, [pc, #160]	; (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800554c:	429a      	cmp	r2, r3
 800554e:	d208      	bcs.n	8005562 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005550:	4b25      	ldr	r3, [pc, #148]	; (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	4922      	ldr	r1, [pc, #136]	; (80055e8 <HAL_RCC_ClockConfig+0x358>)
 800555e:	4313      	orrs	r3, r2
 8005560:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d010      	beq.n	8005590 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69da      	ldr	r2, [r3, #28]
 8005572:	4b1d      	ldr	r3, [pc, #116]	; (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800557a:	429a      	cmp	r2, r3
 800557c:	d208      	bcs.n	8005590 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800557e:	4b1a      	ldr	r3, [pc, #104]	; (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	4917      	ldr	r1, [pc, #92]	; (80055e8 <HAL_RCC_ClockConfig+0x358>)
 800558c:	4313      	orrs	r3, r2
 800558e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005590:	f000 f834 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 8005594:	4602      	mov	r2, r0
 8005596:	4b14      	ldr	r3, [pc, #80]	; (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	0a1b      	lsrs	r3, r3, #8
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	4912      	ldr	r1, [pc, #72]	; (80055ec <HAL_RCC_ClockConfig+0x35c>)
 80055a2:	5ccb      	ldrb	r3, [r1, r3]
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	fa22 f303 	lsr.w	r3, r2, r3
 80055ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055ae:	4b0e      	ldr	r3, [pc, #56]	; (80055e8 <HAL_RCC_ClockConfig+0x358>)
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	4a0d      	ldr	r2, [pc, #52]	; (80055ec <HAL_RCC_ClockConfig+0x35c>)
 80055b8:	5cd3      	ldrb	r3, [r2, r3]
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	fa22 f303 	lsr.w	r3, r2, r3
 80055c4:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <HAL_RCC_ClockConfig+0x360>)
 80055c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055c8:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <HAL_RCC_ClockConfig+0x364>)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80055ce:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <HAL_RCC_ClockConfig+0x368>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fb fbec 	bl	8000db0 <HAL_InitTick>
 80055d8:	4603      	mov	r3, r0
 80055da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	58024400 	.word	0x58024400
 80055ec:	08010cac 	.word	0x08010cac
 80055f0:	24000004 	.word	0x24000004
 80055f4:	24000000 	.word	0x24000000
 80055f8:	24000008 	.word	0x24000008

080055fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b089      	sub	sp, #36	; 0x24
 8005600:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005602:	4bb3      	ldr	r3, [pc, #716]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800560a:	2b18      	cmp	r3, #24
 800560c:	f200 8155 	bhi.w	80058ba <HAL_RCC_GetSysClockFreq+0x2be>
 8005610:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005616:	bf00      	nop
 8005618:	0800567d 	.word	0x0800567d
 800561c:	080058bb 	.word	0x080058bb
 8005620:	080058bb 	.word	0x080058bb
 8005624:	080058bb 	.word	0x080058bb
 8005628:	080058bb 	.word	0x080058bb
 800562c:	080058bb 	.word	0x080058bb
 8005630:	080058bb 	.word	0x080058bb
 8005634:	080058bb 	.word	0x080058bb
 8005638:	080056a3 	.word	0x080056a3
 800563c:	080058bb 	.word	0x080058bb
 8005640:	080058bb 	.word	0x080058bb
 8005644:	080058bb 	.word	0x080058bb
 8005648:	080058bb 	.word	0x080058bb
 800564c:	080058bb 	.word	0x080058bb
 8005650:	080058bb 	.word	0x080058bb
 8005654:	080058bb 	.word	0x080058bb
 8005658:	080056a9 	.word	0x080056a9
 800565c:	080058bb 	.word	0x080058bb
 8005660:	080058bb 	.word	0x080058bb
 8005664:	080058bb 	.word	0x080058bb
 8005668:	080058bb 	.word	0x080058bb
 800566c:	080058bb 	.word	0x080058bb
 8005670:	080058bb 	.word	0x080058bb
 8005674:	080058bb 	.word	0x080058bb
 8005678:	080056af 	.word	0x080056af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800567c:	4b94      	ldr	r3, [pc, #592]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0320 	and.w	r3, r3, #32
 8005684:	2b00      	cmp	r3, #0
 8005686:	d009      	beq.n	800569c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005688:	4b91      	ldr	r3, [pc, #580]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	08db      	lsrs	r3, r3, #3
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	4a90      	ldr	r2, [pc, #576]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
 8005698:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800569a:	e111      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800569c:	4b8d      	ldr	r3, [pc, #564]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800569e:	61bb      	str	r3, [r7, #24]
      break;
 80056a0:	e10e      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80056a2:	4b8d      	ldr	r3, [pc, #564]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056a4:	61bb      	str	r3, [r7, #24]
      break;
 80056a6:	e10b      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80056a8:	4b8c      	ldr	r3, [pc, #560]	; (80058dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80056aa:	61bb      	str	r3, [r7, #24]
      break;
 80056ac:	e108      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056ae:	4b88      	ldr	r3, [pc, #544]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80056b8:	4b85      	ldr	r3, [pc, #532]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	091b      	lsrs	r3, r3, #4
 80056be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80056c4:	4b82      	ldr	r3, [pc, #520]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80056ce:	4b80      	ldr	r3, [pc, #512]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d2:	08db      	lsrs	r3, r3, #3
 80056d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	fb02 f303 	mul.w	r3, r2, r3
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80e1 	beq.w	80058b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	f000 8083 	beq.w	8005800 <HAL_RCC_GetSysClockFreq+0x204>
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	f200 80a1 	bhi.w	8005844 <HAL_RCC_GetSysClockFreq+0x248>
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_RCC_GetSysClockFreq+0x114>
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d056      	beq.n	80057bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800570e:	e099      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005710:	4b6f      	ldr	r3, [pc, #444]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d02d      	beq.n	8005778 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800571c:	4b6c      	ldr	r3, [pc, #432]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	08db      	lsrs	r3, r3, #3
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	4a6b      	ldr	r2, [pc, #428]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005728:	fa22 f303 	lsr.w	r3, r2, r3
 800572c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	ee07 3a90 	vmov	s15, r3
 8005734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005746:	4b62      	ldr	r3, [pc, #392]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005756:	ed97 6a02 	vldr	s12, [r7, #8]
 800575a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80058e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800575e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800576a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005772:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005776:	e087      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005782:	eddf 6a58 	vldr	s13, [pc, #352]	; 80058e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800578a:	4b51      	ldr	r3, [pc, #324]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579a:	ed97 6a02 	vldr	s12, [r7, #8]
 800579e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80058e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057ba:	e065      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80058e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ce:	4b40      	ldr	r3, [pc, #256]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057de:	ed97 6a02 	vldr	s12, [r7, #8]
 80057e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80058e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057fe:	e043      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80058ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800580e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005812:	4b2f      	ldr	r3, [pc, #188]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005822:	ed97 6a02 	vldr	s12, [r7, #8]
 8005826:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80058e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800582a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005842:	e021      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80058e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005856:	4b1e      	ldr	r3, [pc, #120]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005866:	ed97 6a02 	vldr	s12, [r7, #8]
 800586a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80058e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800586e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800587a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005882:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005886:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005888:	4b11      	ldr	r3, [pc, #68]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588c:	0a5b      	lsrs	r3, r3, #9
 800588e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005892:	3301      	adds	r3, #1
 8005894:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	ee07 3a90 	vmov	s15, r3
 800589c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80058a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ac:	ee17 3a90 	vmov	r3, s15
 80058b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80058b2:	e005      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61bb      	str	r3, [r7, #24]
      break;
 80058b8:	e002      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80058ba:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058bc:	61bb      	str	r3, [r7, #24]
      break;
 80058be:	bf00      	nop
  }

  return sysclockfreq;
 80058c0:	69bb      	ldr	r3, [r7, #24]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3724      	adds	r7, #36	; 0x24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	58024400 	.word	0x58024400
 80058d4:	03d09000 	.word	0x03d09000
 80058d8:	003d0900 	.word	0x003d0900
 80058dc:	007a1200 	.word	0x007a1200
 80058e0:	46000000 	.word	0x46000000
 80058e4:	4c742400 	.word	0x4c742400
 80058e8:	4a742400 	.word	0x4a742400
 80058ec:	4af42400 	.word	0x4af42400

080058f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058f6:	f7ff fe81 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 80058fa:	4602      	mov	r2, r0
 80058fc:	4b10      	ldr	r3, [pc, #64]	; (8005940 <HAL_RCC_GetHCLKFreq+0x50>)
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	0a1b      	lsrs	r3, r3, #8
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	490f      	ldr	r1, [pc, #60]	; (8005944 <HAL_RCC_GetHCLKFreq+0x54>)
 8005908:	5ccb      	ldrb	r3, [r1, r3]
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	fa22 f303 	lsr.w	r3, r2, r3
 8005912:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005914:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <HAL_RCC_GetHCLKFreq+0x50>)
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	4a09      	ldr	r2, [pc, #36]	; (8005944 <HAL_RCC_GetHCLKFreq+0x54>)
 800591e:	5cd3      	ldrb	r3, [r2, r3]
 8005920:	f003 031f 	and.w	r3, r3, #31
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	fa22 f303 	lsr.w	r3, r2, r3
 800592a:	4a07      	ldr	r2, [pc, #28]	; (8005948 <HAL_RCC_GetHCLKFreq+0x58>)
 800592c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800592e:	4a07      	ldr	r2, [pc, #28]	; (800594c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005934:	4b04      	ldr	r3, [pc, #16]	; (8005948 <HAL_RCC_GetHCLKFreq+0x58>)
 8005936:	681b      	ldr	r3, [r3, #0]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	58024400 	.word	0x58024400
 8005944:	08010cac 	.word	0x08010cac
 8005948:	24000004 	.word	0x24000004
 800594c:	24000000 	.word	0x24000000

08005950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005954:	f7ff ffcc 	bl	80058f0 <HAL_RCC_GetHCLKFreq>
 8005958:	4602      	mov	r2, r0
 800595a:	4b06      	ldr	r3, [pc, #24]	; (8005974 <HAL_RCC_GetPCLK1Freq+0x24>)
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	091b      	lsrs	r3, r3, #4
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	4904      	ldr	r1, [pc, #16]	; (8005978 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005966:	5ccb      	ldrb	r3, [r1, r3]
 8005968:	f003 031f 	and.w	r3, r3, #31
 800596c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005970:	4618      	mov	r0, r3
 8005972:	bd80      	pop	{r7, pc}
 8005974:	58024400 	.word	0x58024400
 8005978:	08010cac 	.word	0x08010cac

0800597c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	223f      	movs	r2, #63	; 0x3f
 800598a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800598c:	4b1a      	ldr	r3, [pc, #104]	; (80059f8 <HAL_RCC_GetClockConfig+0x7c>)
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f003 0207 	and.w	r2, r3, #7
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005998:	4b17      	ldr	r3, [pc, #92]	; (80059f8 <HAL_RCC_GetClockConfig+0x7c>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80059a4:	4b14      	ldr	r3, [pc, #80]	; (80059f8 <HAL_RCC_GetClockConfig+0x7c>)
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f003 020f 	and.w	r2, r3, #15
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80059b0:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <HAL_RCC_GetClockConfig+0x7c>)
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80059bc:	4b0e      	ldr	r3, [pc, #56]	; (80059f8 <HAL_RCC_GetClockConfig+0x7c>)
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80059c8:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <HAL_RCC_GetClockConfig+0x7c>)
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80059d4:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <HAL_RCC_GetClockConfig+0x7c>)
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059e0:	4b06      	ldr	r3, [pc, #24]	; (80059fc <HAL_RCC_GetClockConfig+0x80>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 020f 	and.w	r2, r3, #15
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	601a      	str	r2, [r3, #0]
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	58024400 	.word	0x58024400
 80059fc:	52002000 	.word	0x52002000

08005a00 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a04:	b0ca      	sub	sp, #296	; 0x128
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a12:	2300      	movs	r3, #0
 8005a14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a20:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005a24:	2500      	movs	r5, #0
 8005a26:	ea54 0305 	orrs.w	r3, r4, r5
 8005a2a:	d049      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a36:	d02f      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a3c:	d828      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a42:	d01a      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a48:	d822      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a52:	d007      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a54:	e01c      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a56:	4bb8      	ldr	r3, [pc, #736]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	4ab7      	ldr	r2, [pc, #732]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a62:	e01a      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a68:	3308      	adds	r3, #8
 8005a6a:	2102      	movs	r1, #2
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f002 fb61 	bl	8008134 <RCCEx_PLL2_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a78:	e00f      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a7e:	3328      	adds	r3, #40	; 0x28
 8005a80:	2102      	movs	r1, #2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f002 fc08 	bl	8008298 <RCCEx_PLL3_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a8e:	e004      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a96:	e000      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10a      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005aa2:	4ba5      	ldr	r3, [pc, #660]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ab0:	4aa1      	ldr	r2, [pc, #644]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	6513      	str	r3, [r2, #80]	; 0x50
 8005ab6:	e003      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005abc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005acc:	f04f 0900 	mov.w	r9, #0
 8005ad0:	ea58 0309 	orrs.w	r3, r8, r9
 8005ad4:	d047      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d82a      	bhi.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005ae0:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae6:	bf00      	nop
 8005ae8:	08005afd 	.word	0x08005afd
 8005aec:	08005b0b 	.word	0x08005b0b
 8005af0:	08005b21 	.word	0x08005b21
 8005af4:	08005b3f 	.word	0x08005b3f
 8005af8:	08005b3f 	.word	0x08005b3f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005afc:	4b8e      	ldr	r3, [pc, #568]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	4a8d      	ldr	r2, [pc, #564]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b08:	e01a      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b0e:	3308      	adds	r3, #8
 8005b10:	2100      	movs	r1, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f002 fb0e 	bl	8008134 <RCCEx_PLL2_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b1e:	e00f      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b24:	3328      	adds	r3, #40	; 0x28
 8005b26:	2100      	movs	r1, #0
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f002 fbb5 	bl	8008298 <RCCEx_PLL3_Config>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b34:	e004      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b3c:	e000      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b48:	4b7b      	ldr	r3, [pc, #492]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4c:	f023 0107 	bic.w	r1, r3, #7
 8005b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b56:	4a78      	ldr	r2, [pc, #480]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	6513      	str	r3, [r2, #80]	; 0x50
 8005b5c:	e003      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005b72:	f04f 0b00 	mov.w	fp, #0
 8005b76:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b7a:	d04c      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b86:	d030      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8c:	d829      	bhi.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b8e:	2bc0      	cmp	r3, #192	; 0xc0
 8005b90:	d02d      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005b92:	2bc0      	cmp	r3, #192	; 0xc0
 8005b94:	d825      	bhi.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b96:	2b80      	cmp	r3, #128	; 0x80
 8005b98:	d018      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b9a:	2b80      	cmp	r3, #128	; 0x80
 8005b9c:	d821      	bhi.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005ba2:	2b40      	cmp	r3, #64	; 0x40
 8005ba4:	d007      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005ba6:	e01c      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba8:	4b63      	ldr	r3, [pc, #396]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	4a62      	ldr	r2, [pc, #392]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bb4:	e01c      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bba:	3308      	adds	r3, #8
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f002 fab8 	bl	8008134 <RCCEx_PLL2_Config>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bca:	e011      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd0:	3328      	adds	r3, #40	; 0x28
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f002 fb5f 	bl	8008298 <RCCEx_PLL3_Config>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005be0:	e006      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005be8:	e002      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005bea:	bf00      	nop
 8005bec:	e000      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005bf8:	4b4f      	ldr	r3, [pc, #316]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bfc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c06:	4a4c      	ldr	r2, [pc, #304]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	6513      	str	r3, [r2, #80]	; 0x50
 8005c0c:	e003      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005c22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c26:	2300      	movs	r3, #0
 8005c28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c2c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005c30:	460b      	mov	r3, r1
 8005c32:	4313      	orrs	r3, r2
 8005c34:	d053      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c42:	d035      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005c44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c48:	d82e      	bhi.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c4e:	d031      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005c50:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c54:	d828      	bhi.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c5a:	d01a      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c60:	d822      	bhi.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005c66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c6a:	d007      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005c6c:	e01c      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c6e:	4b32      	ldr	r3, [pc, #200]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	4a31      	ldr	r2, [pc, #196]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c7a:	e01c      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c80:	3308      	adds	r3, #8
 8005c82:	2100      	movs	r1, #0
 8005c84:	4618      	mov	r0, r3
 8005c86:	f002 fa55 	bl	8008134 <RCCEx_PLL2_Config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c90:	e011      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c96:	3328      	adds	r3, #40	; 0x28
 8005c98:	2100      	movs	r1, #0
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f002 fafc 	bl	8008298 <RCCEx_PLL3_Config>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ca6:	e006      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cae:	e002      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005cb0:	bf00      	nop
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10b      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005cbe:	4b1e      	ldr	r3, [pc, #120]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005cce:	4a1a      	ldr	r2, [pc, #104]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8005cd4:	e003      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005cea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005cf4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	d056      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d0a:	d038      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005d0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d10:	d831      	bhi.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d16:	d034      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005d18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d1c:	d82b      	bhi.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d22:	d01d      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d28:	d825      	bhi.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d006      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005d2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d32:	d00a      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d34:	e01f      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d36:	bf00      	nop
 8005d38:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d3c:	4ba2      	ldr	r3, [pc, #648]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	4aa1      	ldr	r2, [pc, #644]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d48:	e01c      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d4e:	3308      	adds	r3, #8
 8005d50:	2100      	movs	r1, #0
 8005d52:	4618      	mov	r0, r3
 8005d54:	f002 f9ee 	bl	8008134 <RCCEx_PLL2_Config>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d5e:	e011      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d64:	3328      	adds	r3, #40	; 0x28
 8005d66:	2100      	movs	r1, #0
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f002 fa95 	bl	8008298 <RCCEx_PLL3_Config>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d74:	e006      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d7c:	e002      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d7e:	bf00      	nop
 8005d80:	e000      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10b      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d8c:	4b8e      	ldr	r3, [pc, #568]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d90:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d9c:	4a8a      	ldr	r2, [pc, #552]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d9e:	430b      	orrs	r3, r1
 8005da0:	6593      	str	r3, [r2, #88]	; 0x58
 8005da2:	e003      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005da8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005db8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005dc2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	d03a      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	2b30      	cmp	r3, #48	; 0x30
 8005dd4:	d01f      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005dd6:	2b30      	cmp	r3, #48	; 0x30
 8005dd8:	d819      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	d00c      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d815      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d019      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005de6:	2b10      	cmp	r3, #16
 8005de8:	d111      	bne.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dea:	4b77      	ldr	r3, [pc, #476]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	4a76      	ldr	r2, [pc, #472]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005df4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005df6:	e011      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dfc:	3308      	adds	r3, #8
 8005dfe:	2102      	movs	r1, #2
 8005e00:	4618      	mov	r0, r3
 8005e02:	f002 f997 	bl	8008134 <RCCEx_PLL2_Config>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e0c:	e006      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e14:	e002      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e16:	bf00      	nop
 8005e18:	e000      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e24:	4b68      	ldr	r3, [pc, #416]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e28:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e32:	4a65      	ldr	r2, [pc, #404]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e34:	430b      	orrs	r3, r1
 8005e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e38:	e003      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005e4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e52:	2300      	movs	r3, #0
 8005e54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e58:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	d051      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e6c:	d035      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005e6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e72:	d82e      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e78:	d031      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005e7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e7e:	d828      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e84:	d01a      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e8a:	d822      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e94:	d007      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e96:	e01c      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e98:	4b4b      	ldr	r3, [pc, #300]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	4a4a      	ldr	r2, [pc, #296]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ea4:	e01c      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eaa:	3308      	adds	r3, #8
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f002 f940 	bl	8008134 <RCCEx_PLL2_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005eba:	e011      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec0:	3328      	adds	r3, #40	; 0x28
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f002 f9e7 	bl	8008298 <RCCEx_PLL3_Config>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ed0:	e006      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ed8:	e002      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005eda:	bf00      	nop
 8005edc:	e000      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ee8:	4b37      	ldr	r3, [pc, #220]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef6:	4a34      	ldr	r2, [pc, #208]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	6513      	str	r3, [r2, #80]	; 0x50
 8005efc:	e003      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005f12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f16:	2300      	movs	r3, #0
 8005f18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005f20:	460b      	mov	r3, r1
 8005f22:	4313      	orrs	r3, r2
 8005f24:	d056      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f30:	d033      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f36:	d82c      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f3c:	d02f      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005f3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f42:	d826      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f48:	d02b      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005f4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f4e:	d820      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f54:	d012      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005f56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f5a:	d81a      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d022      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f64:	d115      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f002 f8e0 	bl	8008134 <RCCEx_PLL2_Config>
 8005f74:	4603      	mov	r3, r0
 8005f76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f7a:	e015      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f80:	3328      	adds	r3, #40	; 0x28
 8005f82:	2101      	movs	r1, #1
 8005f84:	4618      	mov	r0, r3
 8005f86:	f002 f987 	bl	8008298 <RCCEx_PLL3_Config>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f90:	e00a      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f98:	e006      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f9a:	bf00      	nop
 8005f9c:	e004      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f9e:	bf00      	nop
 8005fa0:	e002      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fa2:	bf00      	nop
 8005fa4:	e000      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10d      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fb0:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fbe:	4a02      	ldr	r2, [pc, #8]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	6513      	str	r3, [r2, #80]	; 0x50
 8005fc4:	e006      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005fc6:	bf00      	nop
 8005fc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fdc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	d055      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006000:	d033      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006002:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006006:	d82c      	bhi.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600c:	d02f      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800600e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006012:	d826      	bhi.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006014:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006018:	d02b      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800601a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800601e:	d820      	bhi.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006024:	d012      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800602a:	d81a      	bhi.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800602c:	2b00      	cmp	r3, #0
 800602e:	d022      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006034:	d115      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800603a:	3308      	adds	r3, #8
 800603c:	2101      	movs	r1, #1
 800603e:	4618      	mov	r0, r3
 8006040:	f002 f878 	bl	8008134 <RCCEx_PLL2_Config>
 8006044:	4603      	mov	r3, r0
 8006046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800604a:	e015      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006050:	3328      	adds	r3, #40	; 0x28
 8006052:	2101      	movs	r1, #1
 8006054:	4618      	mov	r0, r3
 8006056:	f002 f91f 	bl	8008298 <RCCEx_PLL3_Config>
 800605a:	4603      	mov	r3, r0
 800605c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006060:	e00a      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006068:	e006      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800606a:	bf00      	nop
 800606c:	e004      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800606e:	bf00      	nop
 8006070:	e002      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006072:	bf00      	nop
 8006074:	e000      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006078:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10b      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006080:	4ba3      	ldr	r3, [pc, #652]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006084:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800608c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006090:	4a9f      	ldr	r2, [pc, #636]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006092:	430b      	orrs	r3, r1
 8006094:	6593      	str	r3, [r2, #88]	; 0x58
 8006096:	e003      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006098:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800609c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80060ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060b0:	2300      	movs	r3, #0
 80060b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060ba:	460b      	mov	r3, r1
 80060bc:	4313      	orrs	r3, r2
 80060be:	d037      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060ca:	d00e      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80060cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060d0:	d816      	bhi.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d018      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80060d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060da:	d111      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060dc:	4b8c      	ldr	r3, [pc, #560]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e0:	4a8b      	ldr	r2, [pc, #556]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060e8:	e00f      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ee:	3308      	adds	r3, #8
 80060f0:	2101      	movs	r1, #1
 80060f2:	4618      	mov	r0, r3
 80060f4:	f002 f81e 	bl	8008134 <RCCEx_PLL2_Config>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060fe:	e004      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006106:	e000      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10a      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006112:	4b7f      	ldr	r3, [pc, #508]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006116:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800611a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800611e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006120:	4a7b      	ldr	r2, [pc, #492]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006122:	430b      	orrs	r3, r1
 8006124:	6513      	str	r3, [r2, #80]	; 0x50
 8006126:	e003      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006128:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800612c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800613c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006140:	2300      	movs	r3, #0
 8006142:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006146:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800614a:	460b      	mov	r3, r1
 800614c:	4313      	orrs	r3, r2
 800614e:	d039      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006156:	2b03      	cmp	r3, #3
 8006158:	d81c      	bhi.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800615a:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	0800619d 	.word	0x0800619d
 8006164:	08006171 	.word	0x08006171
 8006168:	0800617f 	.word	0x0800617f
 800616c:	0800619d 	.word	0x0800619d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006170:	4b67      	ldr	r3, [pc, #412]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	4a66      	ldr	r2, [pc, #408]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800617a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800617c:	e00f      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800617e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006182:	3308      	adds	r3, #8
 8006184:	2102      	movs	r1, #2
 8006186:	4618      	mov	r0, r3
 8006188:	f001 ffd4 	bl	8008134 <RCCEx_PLL2_Config>
 800618c:	4603      	mov	r3, r0
 800618e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006192:	e004      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800619a:	e000      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800619c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800619e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10a      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061a6:	4b5a      	ldr	r3, [pc, #360]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061aa:	f023 0103 	bic.w	r1, r3, #3
 80061ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b4:	4a56      	ldr	r2, [pc, #344]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061b6:	430b      	orrs	r3, r1
 80061b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061ba:	e003      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80061d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061d4:	2300      	movs	r3, #0
 80061d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80061de:	460b      	mov	r3, r1
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f000 809f 	beq.w	8006324 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061e6:	4b4b      	ldr	r3, [pc, #300]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a4a      	ldr	r2, [pc, #296]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061f2:	f7fb f8ad 	bl	8001350 <HAL_GetTick>
 80061f6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061fa:	e00b      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061fc:	f7fb f8a8 	bl	8001350 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b64      	cmp	r3, #100	; 0x64
 800620a:	d903      	bls.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006212:	e005      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006214:	4b3f      	ldr	r3, [pc, #252]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0ed      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006220:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006224:	2b00      	cmp	r3, #0
 8006226:	d179      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006228:	4b39      	ldr	r3, [pc, #228]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800622a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800622c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006230:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006234:	4053      	eors	r3, r2
 8006236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623a:	2b00      	cmp	r3, #0
 800623c:	d015      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800623e:	4b34      	ldr	r3, [pc, #208]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006246:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800624a:	4b31      	ldr	r3, [pc, #196]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800624c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624e:	4a30      	ldr	r2, [pc, #192]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006254:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006256:	4b2e      	ldr	r3, [pc, #184]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625a:	4a2d      	ldr	r2, [pc, #180]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800625c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006260:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006262:	4a2b      	ldr	r2, [pc, #172]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006264:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006268:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800626e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006276:	d118      	bne.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006278:	f7fb f86a 	bl	8001350 <HAL_GetTick>
 800627c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006280:	e00d      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006282:	f7fb f865 	bl	8001350 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800628c:	1ad2      	subs	r2, r2, r3
 800628e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006292:	429a      	cmp	r2, r3
 8006294:	d903      	bls.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800629c:	e005      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800629e:	4b1c      	ldr	r3, [pc, #112]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0eb      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80062aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d129      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c2:	d10e      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80062c4:	4b12      	ldr	r3, [pc, #72]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062d4:	091a      	lsrs	r2, r3, #4
 80062d6:	4b10      	ldr	r3, [pc, #64]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80062d8:	4013      	ands	r3, r2
 80062da:	4a0d      	ldr	r2, [pc, #52]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062dc:	430b      	orrs	r3, r1
 80062de:	6113      	str	r3, [r2, #16]
 80062e0:	e005      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80062e2:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80062ec:	6113      	str	r3, [r2, #16]
 80062ee:	4b08      	ldr	r3, [pc, #32]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80062f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062fe:	4a04      	ldr	r2, [pc, #16]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006300:	430b      	orrs	r3, r1
 8006302:	6713      	str	r3, [r2, #112]	; 0x70
 8006304:	e00e      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800630a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800630e:	e009      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006310:	58024400 	.word	0x58024400
 8006314:	58024800 	.word	0x58024800
 8006318:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006320:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	f002 0301 	and.w	r3, r2, #1
 8006330:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006334:	2300      	movs	r3, #0
 8006336:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800633a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800633e:	460b      	mov	r3, r1
 8006340:	4313      	orrs	r3, r2
 8006342:	f000 8089 	beq.w	8006458 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800634a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800634c:	2b28      	cmp	r3, #40	; 0x28
 800634e:	d86b      	bhi.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006350:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006356:	bf00      	nop
 8006358:	08006431 	.word	0x08006431
 800635c:	08006429 	.word	0x08006429
 8006360:	08006429 	.word	0x08006429
 8006364:	08006429 	.word	0x08006429
 8006368:	08006429 	.word	0x08006429
 800636c:	08006429 	.word	0x08006429
 8006370:	08006429 	.word	0x08006429
 8006374:	08006429 	.word	0x08006429
 8006378:	080063fd 	.word	0x080063fd
 800637c:	08006429 	.word	0x08006429
 8006380:	08006429 	.word	0x08006429
 8006384:	08006429 	.word	0x08006429
 8006388:	08006429 	.word	0x08006429
 800638c:	08006429 	.word	0x08006429
 8006390:	08006429 	.word	0x08006429
 8006394:	08006429 	.word	0x08006429
 8006398:	08006413 	.word	0x08006413
 800639c:	08006429 	.word	0x08006429
 80063a0:	08006429 	.word	0x08006429
 80063a4:	08006429 	.word	0x08006429
 80063a8:	08006429 	.word	0x08006429
 80063ac:	08006429 	.word	0x08006429
 80063b0:	08006429 	.word	0x08006429
 80063b4:	08006429 	.word	0x08006429
 80063b8:	08006431 	.word	0x08006431
 80063bc:	08006429 	.word	0x08006429
 80063c0:	08006429 	.word	0x08006429
 80063c4:	08006429 	.word	0x08006429
 80063c8:	08006429 	.word	0x08006429
 80063cc:	08006429 	.word	0x08006429
 80063d0:	08006429 	.word	0x08006429
 80063d4:	08006429 	.word	0x08006429
 80063d8:	08006431 	.word	0x08006431
 80063dc:	08006429 	.word	0x08006429
 80063e0:	08006429 	.word	0x08006429
 80063e4:	08006429 	.word	0x08006429
 80063e8:	08006429 	.word	0x08006429
 80063ec:	08006429 	.word	0x08006429
 80063f0:	08006429 	.word	0x08006429
 80063f4:	08006429 	.word	0x08006429
 80063f8:	08006431 	.word	0x08006431
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006400:	3308      	adds	r3, #8
 8006402:	2101      	movs	r1, #1
 8006404:	4618      	mov	r0, r3
 8006406:	f001 fe95 	bl	8008134 <RCCEx_PLL2_Config>
 800640a:	4603      	mov	r3, r0
 800640c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006410:	e00f      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006416:	3328      	adds	r3, #40	; 0x28
 8006418:	2101      	movs	r1, #1
 800641a:	4618      	mov	r0, r3
 800641c:	f001 ff3c 	bl	8008298 <RCCEx_PLL3_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006426:	e004      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800642e:	e000      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10a      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800643a:	4bbf      	ldr	r3, [pc, #764]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800643c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006448:	4abb      	ldr	r2, [pc, #748]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800644a:	430b      	orrs	r3, r1
 800644c:	6553      	str	r3, [r2, #84]	; 0x54
 800644e:	e003      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006450:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006454:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	f002 0302 	and.w	r3, r2, #2
 8006464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006468:	2300      	movs	r3, #0
 800646a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800646e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006472:	460b      	mov	r3, r1
 8006474:	4313      	orrs	r3, r2
 8006476:	d041      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800647c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800647e:	2b05      	cmp	r3, #5
 8006480:	d824      	bhi.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006482:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006488:	080064d5 	.word	0x080064d5
 800648c:	080064a1 	.word	0x080064a1
 8006490:	080064b7 	.word	0x080064b7
 8006494:	080064d5 	.word	0x080064d5
 8006498:	080064d5 	.word	0x080064d5
 800649c:	080064d5 	.word	0x080064d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064a4:	3308      	adds	r3, #8
 80064a6:	2101      	movs	r1, #1
 80064a8:	4618      	mov	r0, r3
 80064aa:	f001 fe43 	bl	8008134 <RCCEx_PLL2_Config>
 80064ae:	4603      	mov	r3, r0
 80064b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064b4:	e00f      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ba:	3328      	adds	r3, #40	; 0x28
 80064bc:	2101      	movs	r1, #1
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 feea 	bl	8008298 <RCCEx_PLL3_Config>
 80064c4:	4603      	mov	r3, r0
 80064c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064ca:	e004      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064d2:	e000      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80064d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10a      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064de:	4b96      	ldr	r3, [pc, #600]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e2:	f023 0107 	bic.w	r1, r3, #7
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ec:	4a92      	ldr	r2, [pc, #584]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064ee:	430b      	orrs	r3, r1
 80064f0:	6553      	str	r3, [r2, #84]	; 0x54
 80064f2:	e003      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	f002 0304 	and.w	r3, r2, #4
 8006508:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800650c:	2300      	movs	r3, #0
 800650e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006512:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006516:	460b      	mov	r3, r1
 8006518:	4313      	orrs	r3, r2
 800651a:	d044      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800651c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006524:	2b05      	cmp	r3, #5
 8006526:	d825      	bhi.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006528:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800652a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652e:	bf00      	nop
 8006530:	0800657d 	.word	0x0800657d
 8006534:	08006549 	.word	0x08006549
 8006538:	0800655f 	.word	0x0800655f
 800653c:	0800657d 	.word	0x0800657d
 8006540:	0800657d 	.word	0x0800657d
 8006544:	0800657d 	.word	0x0800657d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800654c:	3308      	adds	r3, #8
 800654e:	2101      	movs	r1, #1
 8006550:	4618      	mov	r0, r3
 8006552:	f001 fdef 	bl	8008134 <RCCEx_PLL2_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800655c:	e00f      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800655e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006562:	3328      	adds	r3, #40	; 0x28
 8006564:	2101      	movs	r1, #1
 8006566:	4618      	mov	r0, r3
 8006568:	f001 fe96 	bl	8008298 <RCCEx_PLL3_Config>
 800656c:	4603      	mov	r3, r0
 800656e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006572:	e004      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800657a:	e000      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800657c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800657e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10b      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006586:	4b6c      	ldr	r3, [pc, #432]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800658a:	f023 0107 	bic.w	r1, r3, #7
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006596:	4a68      	ldr	r2, [pc, #416]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006598:	430b      	orrs	r3, r1
 800659a:	6593      	str	r3, [r2, #88]	; 0x58
 800659c:	e003      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	f002 0320 	and.w	r3, r2, #32
 80065b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065b6:	2300      	movs	r3, #0
 80065b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80065c0:	460b      	mov	r3, r1
 80065c2:	4313      	orrs	r3, r2
 80065c4:	d055      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065d2:	d033      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80065d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065d8:	d82c      	bhi.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065de:	d02f      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80065e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e4:	d826      	bhi.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065ea:	d02b      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80065ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065f0:	d820      	bhi.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065f6:	d012      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80065f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065fc:	d81a      	bhi.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d022      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006606:	d115      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800660c:	3308      	adds	r3, #8
 800660e:	2100      	movs	r1, #0
 8006610:	4618      	mov	r0, r3
 8006612:	f001 fd8f 	bl	8008134 <RCCEx_PLL2_Config>
 8006616:	4603      	mov	r3, r0
 8006618:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800661c:	e015      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800661e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006622:	3328      	adds	r3, #40	; 0x28
 8006624:	2102      	movs	r1, #2
 8006626:	4618      	mov	r0, r3
 8006628:	f001 fe36 	bl	8008298 <RCCEx_PLL3_Config>
 800662c:	4603      	mov	r3, r0
 800662e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006632:	e00a      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800663a:	e006      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800663c:	bf00      	nop
 800663e:	e004      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006640:	bf00      	nop
 8006642:	e002      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006644:	bf00      	nop
 8006646:	e000      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800664a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10b      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006652:	4b39      	ldr	r3, [pc, #228]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006656:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800665a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800665e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006662:	4a35      	ldr	r2, [pc, #212]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006664:	430b      	orrs	r3, r1
 8006666:	6553      	str	r3, [r2, #84]	; 0x54
 8006668:	e003      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800666e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800667e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006682:	2300      	movs	r3, #0
 8006684:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006688:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800668c:	460b      	mov	r3, r1
 800668e:	4313      	orrs	r3, r2
 8006690:	d058      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800669a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800669e:	d033      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80066a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80066a4:	d82c      	bhi.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066aa:	d02f      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80066ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b0:	d826      	bhi.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066b6:	d02b      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80066b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066bc:	d820      	bhi.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066c2:	d012      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80066c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066c8:	d81a      	bhi.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d022      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80066ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d2:	d115      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d8:	3308      	adds	r3, #8
 80066da:	2100      	movs	r1, #0
 80066dc:	4618      	mov	r0, r3
 80066de:	f001 fd29 	bl	8008134 <RCCEx_PLL2_Config>
 80066e2:	4603      	mov	r3, r0
 80066e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066e8:	e015      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ee:	3328      	adds	r3, #40	; 0x28
 80066f0:	2102      	movs	r1, #2
 80066f2:	4618      	mov	r0, r3
 80066f4:	f001 fdd0 	bl	8008298 <RCCEx_PLL3_Config>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066fe:	e00a      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006706:	e006      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006708:	bf00      	nop
 800670a:	e004      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800670c:	bf00      	nop
 800670e:	e002      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006710:	bf00      	nop
 8006712:	e000      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10e      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800671e:	4b06      	ldr	r3, [pc, #24]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006722:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800672a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800672e:	4a02      	ldr	r2, [pc, #8]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006730:	430b      	orrs	r3, r1
 8006732:	6593      	str	r3, [r2, #88]	; 0x58
 8006734:	e006      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006736:	bf00      	nop
 8006738:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006740:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006754:	2300      	movs	r3, #0
 8006756:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800675a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800675e:	460b      	mov	r3, r1
 8006760:	4313      	orrs	r3, r2
 8006762:	d055      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006768:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800676c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006770:	d033      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006772:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006776:	d82c      	bhi.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800677c:	d02f      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800677e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006782:	d826      	bhi.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006784:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006788:	d02b      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800678a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800678e:	d820      	bhi.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006794:	d012      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800679a:	d81a      	bhi.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800679c:	2b00      	cmp	r3, #0
 800679e:	d022      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80067a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a4:	d115      	bne.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067aa:	3308      	adds	r3, #8
 80067ac:	2100      	movs	r1, #0
 80067ae:	4618      	mov	r0, r3
 80067b0:	f001 fcc0 	bl	8008134 <RCCEx_PLL2_Config>
 80067b4:	4603      	mov	r3, r0
 80067b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067ba:	e015      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c0:	3328      	adds	r3, #40	; 0x28
 80067c2:	2102      	movs	r1, #2
 80067c4:	4618      	mov	r0, r3
 80067c6:	f001 fd67 	bl	8008298 <RCCEx_PLL3_Config>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067d0:	e00a      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067d8:	e006      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067da:	bf00      	nop
 80067dc:	e004      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067de:	bf00      	nop
 80067e0:	e002      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067e2:	bf00      	nop
 80067e4:	e000      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10b      	bne.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067f0:	4ba1      	ldr	r3, [pc, #644]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80067f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006800:	4a9d      	ldr	r2, [pc, #628]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006802:	430b      	orrs	r3, r1
 8006804:	6593      	str	r3, [r2, #88]	; 0x58
 8006806:	e003      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006808:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800680c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006818:	f002 0308 	and.w	r3, r2, #8
 800681c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006820:	2300      	movs	r3, #0
 8006822:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006826:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800682a:	460b      	mov	r3, r1
 800682c:	4313      	orrs	r3, r2
 800682e:	d01e      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683c:	d10c      	bne.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800683e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006842:	3328      	adds	r3, #40	; 0x28
 8006844:	2102      	movs	r1, #2
 8006846:	4618      	mov	r0, r3
 8006848:	f001 fd26 	bl	8008298 <RCCEx_PLL3_Config>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006858:	4b87      	ldr	r3, [pc, #540]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800685a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006868:	4a83      	ldr	r2, [pc, #524]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800686a:	430b      	orrs	r3, r1
 800686c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800686e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	f002 0310 	and.w	r3, r2, #16
 800687a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800687e:	2300      	movs	r3, #0
 8006880:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006884:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006888:	460b      	mov	r3, r1
 800688a:	4313      	orrs	r3, r2
 800688c:	d01e      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800688e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006892:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800689a:	d10c      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800689c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068a0:	3328      	adds	r3, #40	; 0x28
 80068a2:	2102      	movs	r1, #2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 fcf7 	bl	8008298 <RCCEx_PLL3_Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068b6:	4b70      	ldr	r3, [pc, #448]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068c6:	4a6c      	ldr	r2, [pc, #432]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068c8:	430b      	orrs	r3, r1
 80068ca:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80068d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068dc:	2300      	movs	r3, #0
 80068de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80068e6:	460b      	mov	r3, r1
 80068e8:	4313      	orrs	r3, r2
 80068ea:	d03e      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068f8:	d022      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80068fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068fe:	d81b      	bhi.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006900:	2b00      	cmp	r3, #0
 8006902:	d003      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006908:	d00b      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800690a:	e015      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800690c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006910:	3308      	adds	r3, #8
 8006912:	2100      	movs	r1, #0
 8006914:	4618      	mov	r0, r3
 8006916:	f001 fc0d 	bl	8008134 <RCCEx_PLL2_Config>
 800691a:	4603      	mov	r3, r0
 800691c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006920:	e00f      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006926:	3328      	adds	r3, #40	; 0x28
 8006928:	2102      	movs	r1, #2
 800692a:	4618      	mov	r0, r3
 800692c:	f001 fcb4 	bl	8008298 <RCCEx_PLL3_Config>
 8006930:	4603      	mov	r3, r0
 8006932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006936:	e004      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800693e:	e000      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10b      	bne.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800694a:	4b4b      	ldr	r3, [pc, #300]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800694c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800694e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006956:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800695a:	4a47      	ldr	r2, [pc, #284]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800695c:	430b      	orrs	r3, r1
 800695e:	6593      	str	r3, [r2, #88]	; 0x58
 8006960:	e003      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006966:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800696a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006972:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006976:	67bb      	str	r3, [r7, #120]	; 0x78
 8006978:	2300      	movs	r3, #0
 800697a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800697c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006980:	460b      	mov	r3, r1
 8006982:	4313      	orrs	r3, r2
 8006984:	d03b      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800698a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006992:	d01f      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006994:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006998:	d818      	bhi.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800699a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699e:	d003      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80069a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069a4:	d007      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80069a6:	e011      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069a8:	4b33      	ldr	r3, [pc, #204]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ac:	4a32      	ldr	r2, [pc, #200]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069b4:	e00f      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ba:	3328      	adds	r3, #40	; 0x28
 80069bc:	2101      	movs	r1, #1
 80069be:	4618      	mov	r0, r3
 80069c0:	f001 fc6a 	bl	8008298 <RCCEx_PLL3_Config>
 80069c4:	4603      	mov	r3, r0
 80069c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80069ca:	e004      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069d2:	e000      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80069d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10b      	bne.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069de:	4b26      	ldr	r3, [pc, #152]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80069e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ee:	4a22      	ldr	r2, [pc, #136]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069f0:	430b      	orrs	r3, r1
 80069f2:	6553      	str	r3, [r2, #84]	; 0x54
 80069f4:	e003      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006a0a:	673b      	str	r3, [r7, #112]	; 0x70
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	677b      	str	r3, [r7, #116]	; 0x74
 8006a10:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006a14:	460b      	mov	r3, r1
 8006a16:	4313      	orrs	r3, r2
 8006a18:	d034      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a28:	d007      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006a2a:	e011      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a2c:	4b12      	ldr	r3, [pc, #72]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	4a11      	ldr	r2, [pc, #68]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a38:	e00e      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a3e:	3308      	adds	r3, #8
 8006a40:	2102      	movs	r1, #2
 8006a42:	4618      	mov	r0, r3
 8006a44:	f001 fb76 	bl	8008134 <RCCEx_PLL2_Config>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a4e:	e003      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10d      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a60:	4b05      	ldr	r3, [pc, #20]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6e:	4a02      	ldr	r2, [pc, #8]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a70:	430b      	orrs	r3, r1
 8006a72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a74:	e006      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006a76:	bf00      	nop
 8006a78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006a90:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a92:	2300      	movs	r3, #0
 8006a94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a96:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	d00c      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa4:	3328      	adds	r3, #40	; 0x28
 8006aa6:	2102      	movs	r1, #2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f001 fbf5 	bl	8008298 <RCCEx_PLL3_Config>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006ac6:	663b      	str	r3, [r7, #96]	; 0x60
 8006ac8:	2300      	movs	r3, #0
 8006aca:	667b      	str	r3, [r7, #100]	; 0x64
 8006acc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	d038      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ae2:	d018      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006ae4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ae8:	d811      	bhi.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aee:	d014      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006af4:	d80b      	bhi.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d011      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006afe:	d106      	bne.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b00:	4bc3      	ldr	r3, [pc, #780]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	4ac2      	ldr	r2, [pc, #776]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b0c:	e008      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b14:	e004      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b16:	bf00      	nop
 8006b18:	e002      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b1a:	bf00      	nop
 8006b1c:	e000      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10b      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b28:	4bb9      	ldr	r3, [pc, #740]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b38:	4ab5      	ldr	r2, [pc, #724]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b3a:	430b      	orrs	r3, r1
 8006b3c:	6553      	str	r3, [r2, #84]	; 0x54
 8006b3e:	e003      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006b54:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b56:	2300      	movs	r3, #0
 8006b58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b5a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4313      	orrs	r3, r2
 8006b62:	d009      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b64:	4baa      	ldr	r3, [pc, #680]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b72:	4aa7      	ldr	r2, [pc, #668]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b74:	430b      	orrs	r3, r1
 8006b76:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b80:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006b84:	653b      	str	r3, [r7, #80]	; 0x50
 8006b86:	2300      	movs	r3, #0
 8006b88:	657b      	str	r3, [r7, #84]	; 0x54
 8006b8a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4313      	orrs	r3, r2
 8006b92:	d00a      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b94:	4b9e      	ldr	r3, [pc, #632]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006ba4:	4a9a      	ldr	r2, [pc, #616]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bb8:	2300      	movs	r3, #0
 8006bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bbc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	d009      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bc6:	4b92      	ldr	r3, [pc, #584]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bca:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd4:	4a8e      	ldr	r2, [pc, #568]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bd6:	430b      	orrs	r3, r1
 8006bd8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006be6:	643b      	str	r3, [r7, #64]	; 0x40
 8006be8:	2300      	movs	r3, #0
 8006bea:	647b      	str	r3, [r7, #68]	; 0x44
 8006bec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	d00e      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bf6:	4b86      	ldr	r3, [pc, #536]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	4a85      	ldr	r2, [pc, #532]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c00:	6113      	str	r3, [r2, #16]
 8006c02:	4b83      	ldr	r3, [pc, #524]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c04:	6919      	ldr	r1, [r3, #16]
 8006c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006c0e:	4a80      	ldr	r2, [pc, #512]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006c20:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c22:	2300      	movs	r3, #0
 8006c24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c26:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	d009      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c30:	4b77      	ldr	r3, [pc, #476]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c34:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3e:	4a74      	ldr	r2, [pc, #464]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c40:	430b      	orrs	r3, r1
 8006c42:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006c50:	633b      	str	r3, [r7, #48]	; 0x30
 8006c52:	2300      	movs	r3, #0
 8006c54:	637b      	str	r3, [r7, #52]	; 0x34
 8006c56:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	d00a      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c60:	4b6b      	ldr	r3, [pc, #428]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c64:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c70:	4a67      	ldr	r2, [pc, #412]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c72:	430b      	orrs	r3, r1
 8006c74:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	2100      	movs	r1, #0
 8006c80:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c88:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	d011      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c96:	3308      	adds	r3, #8
 8006c98:	2100      	movs	r1, #0
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f001 fa4a 	bl	8008134 <RCCEx_PLL2_Config>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	6239      	str	r1, [r7, #32]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	d011      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	2101      	movs	r1, #1
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 fa2a 	bl	8008134 <RCCEx_PLL2_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	2100      	movs	r1, #0
 8006d00:	61b9      	str	r1, [r7, #24]
 8006d02:	f003 0304 	and.w	r3, r3, #4
 8006d06:	61fb      	str	r3, [r7, #28]
 8006d08:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	d011      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d16:	3308      	adds	r3, #8
 8006d18:	2102      	movs	r1, #2
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f001 fa0a 	bl	8008134 <RCCEx_PLL2_Config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006d26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	2100      	movs	r1, #0
 8006d40:	6139      	str	r1, [r7, #16]
 8006d42:	f003 0308 	and.w	r3, r3, #8
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	d011      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d56:	3328      	adds	r3, #40	; 0x28
 8006d58:	2100      	movs	r1, #0
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f001 fa9c 	bl	8008298 <RCCEx_PLL3_Config>
 8006d60:	4603      	mov	r3, r0
 8006d62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006d66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	2100      	movs	r1, #0
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	d011      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d96:	3328      	adds	r3, #40	; 0x28
 8006d98:	2101      	movs	r1, #1
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f001 fa7c 	bl	8008298 <RCCEx_PLL3_Config>
 8006da0:	4603      	mov	r3, r0
 8006da2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006da6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006db2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	6039      	str	r1, [r7, #0]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	607b      	str	r3, [r7, #4]
 8006dc8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	d011      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd6:	3328      	adds	r3, #40	; 0x28
 8006dd8:	2102      	movs	r1, #2
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f001 fa5c 	bl	8008298 <RCCEx_PLL3_Config>
 8006de0:	4603      	mov	r3, r0
 8006de2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006de6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006df2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006df6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	e000      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e10:	58024400 	.word	0x58024400

08006e14 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b090      	sub	sp, #64	; 0x40
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e22:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006e26:	430b      	orrs	r3, r1
 8006e28:	f040 8094 	bne.w	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006e2c:	4b9e      	ldr	r3, [pc, #632]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	f200 8087 	bhi.w	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e59 	.word	0x08006e59
 8006e48:	08006e81 	.word	0x08006e81
 8006e4c:	08006ea9 	.word	0x08006ea9
 8006e50:	08006f45 	.word	0x08006f45
 8006e54:	08006ed1 	.word	0x08006ed1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e58:	4b93      	ldr	r3, [pc, #588]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e64:	d108      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f001 f810 	bl	8007e90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e74:	f000 bd45 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e7c:	f000 bd41 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e80:	4b89      	ldr	r3, [pc, #548]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e8c:	d108      	bne.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e8e:	f107 0318 	add.w	r3, r7, #24
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fd54 	bl	8007940 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e9c:	f000 bd31 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ea4:	f000 bd2d 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ea8:	4b7f      	ldr	r3, [pc, #508]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eb4:	d108      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eb6:	f107 030c 	add.w	r3, r7, #12
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 fe94 	bl	8007be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ec4:	f000 bd1d 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ecc:	f000 bd19 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ed0:	4b75      	ldr	r3, [pc, #468]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ed8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006eda:	4b73      	ldr	r3, [pc, #460]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0304 	and.w	r3, r3, #4
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d10c      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d109      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006eec:	4b6e      	ldr	r3, [pc, #440]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	08db      	lsrs	r3, r3, #3
 8006ef2:	f003 0303 	and.w	r3, r3, #3
 8006ef6:	4a6d      	ldr	r2, [pc, #436]	; (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8006efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006efe:	e01f      	b.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f00:	4b69      	ldr	r3, [pc, #420]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f0c:	d106      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f14:	d102      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f16:	4b66      	ldr	r3, [pc, #408]	; (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f1a:	e011      	b.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f1c:	4b62      	ldr	r3, [pc, #392]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f28:	d106      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f30:	d102      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f32:	4b60      	ldr	r3, [pc, #384]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f36:	e003      	b.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006f3c:	f000 bce1 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f40:	f000 bcdf 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f44:	4b5c      	ldr	r3, [pc, #368]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f48:	f000 bcdb 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f50:	f000 bcd7 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006f54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f58:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	f040 80ad 	bne.w	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006f62:	4b51      	ldr	r3, [pc, #324]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f66:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006f6a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f72:	d056      	beq.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f7a:	f200 8090 	bhi.w	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	2bc0      	cmp	r3, #192	; 0xc0
 8006f82:	f000 8088 	beq.w	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	2bc0      	cmp	r3, #192	; 0xc0
 8006f8a:	f200 8088 	bhi.w	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	2b80      	cmp	r3, #128	; 0x80
 8006f92:	d032      	beq.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	2b80      	cmp	r3, #128	; 0x80
 8006f98:	f200 8081 	bhi.w	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa4:	2b40      	cmp	r3, #64	; 0x40
 8006fa6:	d014      	beq.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006fa8:	e079      	b.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006faa:	4b3f      	ldr	r3, [pc, #252]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fb6:	d108      	bne.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 ff67 	bl	8007e90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fc6:	f000 bc9c 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fce:	f000 bc98 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fd2:	4b35      	ldr	r3, [pc, #212]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fde:	d108      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fe0:	f107 0318 	add.w	r3, r7, #24
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 fcab 	bl	8007940 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fee:	f000 bc88 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ff6:	f000 bc84 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ffa:	4b2b      	ldr	r3, [pc, #172]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007006:	d108      	bne.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007008:	f107 030c 	add.w	r3, r7, #12
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fdeb 	bl	8007be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007016:	f000 bc74 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800701a:	2300      	movs	r3, #0
 800701c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800701e:	f000 bc70 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007022:	4b21      	ldr	r3, [pc, #132]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007026:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800702a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800702c:	4b1e      	ldr	r3, [pc, #120]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b04      	cmp	r3, #4
 8007036:	d10c      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703a:	2b00      	cmp	r3, #0
 800703c:	d109      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800703e:	4b1a      	ldr	r3, [pc, #104]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	08db      	lsrs	r3, r3, #3
 8007044:	f003 0303 	and.w	r3, r3, #3
 8007048:	4a18      	ldr	r2, [pc, #96]	; (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800704a:	fa22 f303 	lsr.w	r3, r2, r3
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007050:	e01f      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007052:	4b15      	ldr	r3, [pc, #84]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800705a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800705e:	d106      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007066:	d102      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007068:	4b11      	ldr	r3, [pc, #68]	; (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800706a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800706c:	e011      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800706e:	4b0e      	ldr	r3, [pc, #56]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007076:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800707a:	d106      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800707c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007082:	d102      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007084:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007088:	e003      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800708e:	f000 bc38 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007092:	f000 bc36 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007096:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800709a:	f000 bc32 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070a2:	f000 bc2e 	b.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070a6:	bf00      	nop
 80070a8:	58024400 	.word	0x58024400
 80070ac:	03d09000 	.word	0x03d09000
 80070b0:	003d0900 	.word	0x003d0900
 80070b4:	007a1200 	.word	0x007a1200
 80070b8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80070bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070c0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80070c4:	430b      	orrs	r3, r1
 80070c6:	f040 809c 	bne.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80070ca:	4b9e      	ldr	r3, [pc, #632]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ce:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80070d2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80070d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070da:	d054      	beq.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070e2:	f200 808b 	bhi.w	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070ec:	f000 8083 	beq.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070f6:	f200 8081 	bhi.w	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007100:	d02f      	beq.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007108:	d878      	bhi.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	2b00      	cmp	r3, #0
 800710e:	d004      	beq.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007116:	d012      	beq.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007118:	e070      	b.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800711a:	4b8a      	ldr	r3, [pc, #552]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007122:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007126:	d107      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800712c:	4618      	mov	r0, r3
 800712e:	f000 feaf 	bl	8007e90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007136:	e3e4      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800713c:	e3e1      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800713e:	4b81      	ldr	r3, [pc, #516]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800714a:	d107      	bne.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800714c:	f107 0318 	add.w	r3, r7, #24
 8007150:	4618      	mov	r0, r3
 8007152:	f000 fbf5 	bl	8007940 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800715a:	e3d2      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800715c:	2300      	movs	r3, #0
 800715e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007160:	e3cf      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007162:	4b78      	ldr	r3, [pc, #480]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800716a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800716e:	d107      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007170:	f107 030c 	add.w	r3, r7, #12
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fd37 	bl	8007be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800717e:	e3c0      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007180:	2300      	movs	r3, #0
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007184:	e3bd      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007186:	4b6f      	ldr	r3, [pc, #444]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800718e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007190:	4b6c      	ldr	r3, [pc, #432]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b04      	cmp	r3, #4
 800719a:	d10c      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800719c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d109      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071a2:	4b68      	ldr	r3, [pc, #416]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	08db      	lsrs	r3, r3, #3
 80071a8:	f003 0303 	and.w	r3, r3, #3
 80071ac:	4a66      	ldr	r2, [pc, #408]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80071ae:	fa22 f303 	lsr.w	r3, r2, r3
 80071b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071b4:	e01e      	b.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071b6:	4b63      	ldr	r3, [pc, #396]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c2:	d106      	bne.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80071c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071ca:	d102      	bne.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80071cc:	4b5f      	ldr	r3, [pc, #380]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80071ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071d0:	e010      	b.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071d2:	4b5c      	ldr	r3, [pc, #368]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071de:	d106      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80071e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071e6:	d102      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071e8:	4b59      	ldr	r3, [pc, #356]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ec:	e002      	b.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80071f2:	e386      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071f4:	e385      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80071f6:	4b57      	ldr	r3, [pc, #348]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80071f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071fa:	e382      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007200:	e37f      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007206:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800720a:	430b      	orrs	r3, r1
 800720c:	f040 80a7 	bne.w	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007210:	4b4c      	ldr	r3, [pc, #304]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007214:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007218:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007220:	d055      	beq.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007228:	f200 8096 	bhi.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007232:	f000 8084 	beq.w	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800723c:	f200 808c 	bhi.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007242:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007246:	d030      	beq.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800724e:	f200 8083 	bhi.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	2b00      	cmp	r3, #0
 8007256:	d004      	beq.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800725e:	d012      	beq.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007260:	e07a      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007262:	4b38      	ldr	r3, [pc, #224]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800726a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800726e:	d107      	bne.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fe0b 	bl	8007e90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800727e:	e340      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007280:	2300      	movs	r3, #0
 8007282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007284:	e33d      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007286:	4b2f      	ldr	r3, [pc, #188]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800728e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007292:	d107      	bne.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007294:	f107 0318 	add.w	r3, r7, #24
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fb51 	bl	8007940 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072a2:	e32e      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072a4:	2300      	movs	r3, #0
 80072a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072a8:	e32b      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072aa:	4b26      	ldr	r3, [pc, #152]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072b6:	d107      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072b8:	f107 030c 	add.w	r3, r7, #12
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 fc93 	bl	8007be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072c6:	e31c      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072cc:	e319      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072ce:	4b1d      	ldr	r3, [pc, #116]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072d6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072d8:	4b1a      	ldr	r3, [pc, #104]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b04      	cmp	r3, #4
 80072e2:	d10c      	bne.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80072e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d109      	bne.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072ea:	4b16      	ldr	r3, [pc, #88]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	08db      	lsrs	r3, r3, #3
 80072f0:	f003 0303 	and.w	r3, r3, #3
 80072f4:	4a14      	ldr	r2, [pc, #80]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80072f6:	fa22 f303 	lsr.w	r3, r2, r3
 80072fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072fc:	e01e      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072fe:	4b11      	ldr	r3, [pc, #68]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800730a:	d106      	bne.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800730c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007312:	d102      	bne.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007314:	4b0d      	ldr	r3, [pc, #52]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007318:	e010      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800731a:	4b0a      	ldr	r3, [pc, #40]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007322:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007326:	d106      	bne.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800732e:	d102      	bne.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007334:	e002      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007336:	2300      	movs	r3, #0
 8007338:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800733a:	e2e2      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800733c:	e2e1      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800733e:	4b05      	ldr	r3, [pc, #20]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007340:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007342:	e2de      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007344:	58024400 	.word	0x58024400
 8007348:	03d09000 	.word	0x03d09000
 800734c:	003d0900 	.word	0x003d0900
 8007350:	007a1200 	.word	0x007a1200
 8007354:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800735c:	e2d1      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800735e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007362:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007366:	430b      	orrs	r3, r1
 8007368:	f040 809c 	bne.w	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800736c:	4b93      	ldr	r3, [pc, #588]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800736e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007370:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007374:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800737c:	d054      	beq.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007384:	f200 808b 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800738e:	f000 8083 	beq.w	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007398:	f200 8081 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800739c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073a2:	d02f      	beq.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80073a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073aa:	d878      	bhi.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80073ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d004      	beq.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b8:	d012      	beq.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80073ba:	e070      	b.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073bc:	4b7f      	ldr	r3, [pc, #508]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073c8:	d107      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fd5e 	bl	8007e90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073d8:	e293      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073de:	e290      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073e0:	4b76      	ldr	r3, [pc, #472]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073ec:	d107      	bne.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ee:	f107 0318 	add.w	r3, r7, #24
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 faa4 	bl	8007940 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073fc:	e281      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007402:	e27e      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007404:	4b6d      	ldr	r3, [pc, #436]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800740c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007410:	d107      	bne.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007412:	f107 030c 	add.w	r3, r7, #12
 8007416:	4618      	mov	r0, r3
 8007418:	f000 fbe6 	bl	8007be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007420:	e26f      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007426:	e26c      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007428:	4b64      	ldr	r3, [pc, #400]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800742a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007430:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007432:	4b62      	ldr	r3, [pc, #392]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0304 	and.w	r3, r3, #4
 800743a:	2b04      	cmp	r3, #4
 800743c:	d10c      	bne.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800743e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007440:	2b00      	cmp	r3, #0
 8007442:	d109      	bne.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007444:	4b5d      	ldr	r3, [pc, #372]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	08db      	lsrs	r3, r3, #3
 800744a:	f003 0303 	and.w	r3, r3, #3
 800744e:	4a5c      	ldr	r2, [pc, #368]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007450:	fa22 f303 	lsr.w	r3, r2, r3
 8007454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007456:	e01e      	b.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007458:	4b58      	ldr	r3, [pc, #352]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007464:	d106      	bne.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800746c:	d102      	bne.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800746e:	4b55      	ldr	r3, [pc, #340]	; (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007472:	e010      	b.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007474:	4b51      	ldr	r3, [pc, #324]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800747c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007480:	d106      	bne.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007488:	d102      	bne.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800748a:	4b4f      	ldr	r3, [pc, #316]	; (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800748c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800748e:	e002      	b.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007494:	e235      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007496:	e234      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007498:	4b4c      	ldr	r3, [pc, #304]	; (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800749a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800749c:	e231      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074a2:	e22e      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80074a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074a8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80074ac:	430b      	orrs	r3, r1
 80074ae:	f040 808f 	bne.w	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80074b2:	4b42      	ldr	r3, [pc, #264]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80074ba:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074c2:	d06b      	beq.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074ca:	d874      	bhi.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074d2:	d056      	beq.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80074d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074da:	d86c      	bhi.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074e2:	d03b      	beq.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074ea:	d864      	bhi.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074f2:	d021      	beq.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074fa:	d85c      	bhi.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d004      	beq.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007508:	d004      	beq.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800750a:	e054      	b.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800750c:	f7fe fa20 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 8007510:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007512:	e1f6      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007514:	4b29      	ldr	r3, [pc, #164]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800751c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007520:	d107      	bne.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007522:	f107 0318 	add.w	r3, r7, #24
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fa0a 	bl	8007940 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007530:	e1e7      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007536:	e1e4      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007538:	4b20      	ldr	r3, [pc, #128]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007544:	d107      	bne.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007546:	f107 030c 	add.w	r3, r7, #12
 800754a:	4618      	mov	r0, r3
 800754c:	f000 fb4c 	bl	8007be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007554:	e1d5      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800755a:	e1d2      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800755c:	4b17      	ldr	r3, [pc, #92]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b04      	cmp	r3, #4
 8007566:	d109      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007568:	4b14      	ldr	r3, [pc, #80]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	08db      	lsrs	r3, r3, #3
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	4a13      	ldr	r2, [pc, #76]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007574:	fa22 f303 	lsr.w	r3, r2, r3
 8007578:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800757a:	e1c2      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007580:	e1bf      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007582:	4b0e      	ldr	r3, [pc, #56]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800758e:	d102      	bne.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007590:	4b0c      	ldr	r3, [pc, #48]	; (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007592:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007594:	e1b5      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800759a:	e1b2      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800759c:	4b07      	ldr	r3, [pc, #28]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075a8:	d102      	bne.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80075aa:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80075ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ae:	e1a8      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075b4:	e1a5      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075ba:	e1a2      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80075bc:	58024400 	.word	0x58024400
 80075c0:	03d09000 	.word	0x03d09000
 80075c4:	003d0900 	.word	0x003d0900
 80075c8:	007a1200 	.word	0x007a1200
 80075cc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80075d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075d4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80075d8:	430b      	orrs	r3, r1
 80075da:	d173      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80075dc:	4b9c      	ldr	r3, [pc, #624]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075ec:	d02f      	beq.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075f4:	d863      	bhi.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80075f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d004      	beq.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80075fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007602:	d012      	beq.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007604:	e05b      	b.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007606:	4b92      	ldr	r3, [pc, #584]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800760e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007612:	d107      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007614:	f107 0318 	add.w	r3, r7, #24
 8007618:	4618      	mov	r0, r3
 800761a:	f000 f991 	bl	8007940 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007622:	e16e      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007624:	2300      	movs	r3, #0
 8007626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007628:	e16b      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800762a:	4b89      	ldr	r3, [pc, #548]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007636:	d107      	bne.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007638:	f107 030c 	add.w	r3, r7, #12
 800763c:	4618      	mov	r0, r3
 800763e:	f000 fad3 	bl	8007be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007646:	e15c      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007648:	2300      	movs	r3, #0
 800764a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800764c:	e159      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800764e:	4b80      	ldr	r3, [pc, #512]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007652:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007656:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007658:	4b7d      	ldr	r3, [pc, #500]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b04      	cmp	r3, #4
 8007662:	d10c      	bne.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007666:	2b00      	cmp	r3, #0
 8007668:	d109      	bne.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800766a:	4b79      	ldr	r3, [pc, #484]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	08db      	lsrs	r3, r3, #3
 8007670:	f003 0303 	and.w	r3, r3, #3
 8007674:	4a77      	ldr	r2, [pc, #476]	; (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007676:	fa22 f303 	lsr.w	r3, r2, r3
 800767a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800767c:	e01e      	b.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800767e:	4b74      	ldr	r3, [pc, #464]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800768a:	d106      	bne.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800768c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007692:	d102      	bne.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007694:	4b70      	ldr	r3, [pc, #448]	; (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007698:	e010      	b.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800769a:	4b6d      	ldr	r3, [pc, #436]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076a6:	d106      	bne.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80076a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ae:	d102      	bne.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076b0:	4b6a      	ldr	r3, [pc, #424]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80076b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076b4:	e002      	b.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80076ba:	e122      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076bc:	e121      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076c2:	e11e      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80076c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076c8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80076cc:	430b      	orrs	r3, r1
 80076ce:	d133      	bne.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80076d0:	4b5f      	ldr	r3, [pc, #380]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076d8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80076da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d004      	beq.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80076e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076e6:	d012      	beq.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80076e8:	e023      	b.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076ea:	4b59      	ldr	r3, [pc, #356]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076f6:	d107      	bne.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fbc7 	bl	8007e90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007704:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007706:	e0fc      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800770c:	e0f9      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800770e:	4b50      	ldr	r3, [pc, #320]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800771a:	d107      	bne.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800771c:	f107 0318 	add.w	r3, r7, #24
 8007720:	4618      	mov	r0, r3
 8007722:	f000 f90d 	bl	8007940 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800772a:	e0ea      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007730:	e0e7      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007732:	2300      	movs	r3, #0
 8007734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007736:	e0e4      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800773c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007740:	430b      	orrs	r3, r1
 8007742:	f040 808d 	bne.w	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007746:	4b42      	ldr	r3, [pc, #264]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800774e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007752:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007756:	d06b      	beq.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800775e:	d874      	bhi.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007766:	d056      	beq.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776e:	d86c      	bhi.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007772:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007776:	d03b      	beq.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800777e:	d864      	bhi.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007786:	d021      	beq.n	80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800778e:	d85c      	bhi.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	2b00      	cmp	r3, #0
 8007794:	d004      	beq.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007798:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800779c:	d004      	beq.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800779e:	e054      	b.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80077a0:	f000 f8b8 	bl	8007914 <HAL_RCCEx_GetD3PCLK1Freq>
 80077a4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80077a6:	e0ac      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077a8:	4b29      	ldr	r3, [pc, #164]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077b4:	d107      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077b6:	f107 0318 	add.w	r3, r7, #24
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 f8c0 	bl	8007940 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077c4:	e09d      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077c6:	2300      	movs	r3, #0
 80077c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077ca:	e09a      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077cc:	4b20      	ldr	r3, [pc, #128]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077d8:	d107      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077da:	f107 030c 	add.w	r3, r7, #12
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 fa02 	bl	8007be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077e8:	e08b      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077ee:	e088      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077f0:	4b17      	ldr	r3, [pc, #92]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d109      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077fc:	4b14      	ldr	r3, [pc, #80]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	08db      	lsrs	r3, r3, #3
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	4a13      	ldr	r2, [pc, #76]	; (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007808:	fa22 f303 	lsr.w	r3, r2, r3
 800780c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800780e:	e078      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007814:	e075      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007816:	4b0e      	ldr	r3, [pc, #56]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800781e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007822:	d102      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007824:	4b0c      	ldr	r3, [pc, #48]	; (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007826:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007828:	e06b      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800782e:	e068      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007830:	4b07      	ldr	r3, [pc, #28]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800783c:	d102      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800783e:	4b07      	ldr	r3, [pc, #28]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007840:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007842:	e05e      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007848:	e05b      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800784a:	2300      	movs	r3, #0
 800784c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800784e:	e058      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007850:	58024400 	.word	0x58024400
 8007854:	03d09000 	.word	0x03d09000
 8007858:	003d0900 	.word	0x003d0900
 800785c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007864:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007868:	430b      	orrs	r3, r1
 800786a:	d148      	bne.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800786c:	4b27      	ldr	r3, [pc, #156]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800786e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007874:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800787c:	d02a      	beq.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800787e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007884:	d838      	bhi.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007888:	2b00      	cmp	r3, #0
 800788a:	d004      	beq.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800788c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007892:	d00d      	beq.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007894:	e030      	b.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007896:	4b1d      	ldr	r3, [pc, #116]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800789e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078a2:	d102      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80078a4:	4b1a      	ldr	r3, [pc, #104]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80078a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078a8:	e02b      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078ae:	e028      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078b0:	4b16      	ldr	r3, [pc, #88]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078bc:	d107      	bne.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 fae4 	bl	8007e90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078cc:	e019      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078d2:	e016      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078d4:	4b0d      	ldr	r3, [pc, #52]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078e0:	d107      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078e2:	f107 0318 	add.w	r3, r7, #24
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 f82a 	bl	8007940 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078f0:	e007      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078f2:	2300      	movs	r3, #0
 80078f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078f6:	e004      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078fc:	e001      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80078fe:	2300      	movs	r3, #0
 8007900:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007904:	4618      	mov	r0, r3
 8007906:	3740      	adds	r7, #64	; 0x40
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	58024400 	.word	0x58024400
 8007910:	007a1200 	.word	0x007a1200

08007914 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007918:	f7fd ffea 	bl	80058f0 <HAL_RCC_GetHCLKFreq>
 800791c:	4602      	mov	r2, r0
 800791e:	4b06      	ldr	r3, [pc, #24]	; (8007938 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	091b      	lsrs	r3, r3, #4
 8007924:	f003 0307 	and.w	r3, r3, #7
 8007928:	4904      	ldr	r1, [pc, #16]	; (800793c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800792a:	5ccb      	ldrb	r3, [r1, r3]
 800792c:	f003 031f 	and.w	r3, r3, #31
 8007930:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007934:	4618      	mov	r0, r3
 8007936:	bd80      	pop	{r7, pc}
 8007938:	58024400 	.word	0x58024400
 800793c:	08010cac 	.word	0x08010cac

08007940 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007940:	b480      	push	{r7}
 8007942:	b089      	sub	sp, #36	; 0x24
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007948:	4ba1      	ldr	r3, [pc, #644]	; (8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794c:	f003 0303 	and.w	r3, r3, #3
 8007950:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007952:	4b9f      	ldr	r3, [pc, #636]	; (8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007956:	0b1b      	lsrs	r3, r3, #12
 8007958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800795c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800795e:	4b9c      	ldr	r3, [pc, #624]	; (8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	091b      	lsrs	r3, r3, #4
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800796a:	4b99      	ldr	r3, [pc, #612]	; (8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800796c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796e:	08db      	lsrs	r3, r3, #3
 8007970:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	fb02 f303 	mul.w	r3, r2, r3
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007982:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 8111 	beq.w	8007bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	2b02      	cmp	r3, #2
 8007992:	f000 8083 	beq.w	8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	2b02      	cmp	r3, #2
 800799a:	f200 80a1 	bhi.w	8007ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d056      	beq.n	8007a58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80079aa:	e099      	b.n	8007ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079ac:	4b88      	ldr	r3, [pc, #544]	; (8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d02d      	beq.n	8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079b8:	4b85      	ldr	r3, [pc, #532]	; (8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	08db      	lsrs	r3, r3, #3
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	4a84      	ldr	r2, [pc, #528]	; (8007bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80079c4:	fa22 f303 	lsr.w	r3, r2, r3
 80079c8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	ee07 3a90 	vmov	s15, r3
 80079d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	ee07 3a90 	vmov	s15, r3
 80079da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e2:	4b7b      	ldr	r3, [pc, #492]	; (8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a12:	e087      	b.n	8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	ee07 3a90 	vmov	s15, r3
 8007a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007bdc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a26:	4b6a      	ldr	r3, [pc, #424]	; (8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a2e:	ee07 3a90 	vmov	s15, r3
 8007a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a56:	e065      	b.n	8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	ee07 3a90 	vmov	s15, r3
 8007a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007be0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a6a:	4b59      	ldr	r3, [pc, #356]	; (8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a72:	ee07 3a90 	vmov	s15, r3
 8007a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a9a:	e043      	b.n	8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	ee07 3a90 	vmov	s15, r3
 8007aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aae:	4b48      	ldr	r3, [pc, #288]	; (8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab6:	ee07 3a90 	vmov	s15, r3
 8007aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ac2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ade:	e021      	b.n	8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	ee07 3a90 	vmov	s15, r3
 8007ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007be0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af2:	4b37      	ldr	r3, [pc, #220]	; (8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007b24:	4b2a      	ldr	r3, [pc, #168]	; (8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	0a5b      	lsrs	r3, r3, #9
 8007b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b2e:	ee07 3a90 	vmov	s15, r3
 8007b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b4a:	ee17 2a90 	vmov	r2, s15
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007b52:	4b1f      	ldr	r3, [pc, #124]	; (8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b56:	0c1b      	lsrs	r3, r3, #16
 8007b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b5c:	ee07 3a90 	vmov	s15, r3
 8007b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b78:	ee17 2a90 	vmov	r2, s15
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007b80:	4b13      	ldr	r3, [pc, #76]	; (8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b84:	0e1b      	lsrs	r3, r3, #24
 8007b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ba6:	ee17 2a90 	vmov	r2, s15
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007bae:	e008      	b.n	8007bc2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	609a      	str	r2, [r3, #8]
}
 8007bc2:	bf00      	nop
 8007bc4:	3724      	adds	r7, #36	; 0x24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	58024400 	.word	0x58024400
 8007bd4:	03d09000 	.word	0x03d09000
 8007bd8:	46000000 	.word	0x46000000
 8007bdc:	4c742400 	.word	0x4c742400
 8007be0:	4a742400 	.word	0x4a742400
 8007be4:	4af42400 	.word	0x4af42400

08007be8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b089      	sub	sp, #36	; 0x24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bf0:	4ba1      	ldr	r3, [pc, #644]	; (8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf4:	f003 0303 	and.w	r3, r3, #3
 8007bf8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007bfa:	4b9f      	ldr	r3, [pc, #636]	; (8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfe:	0d1b      	lsrs	r3, r3, #20
 8007c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c06:	4b9c      	ldr	r3, [pc, #624]	; (8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0a:	0a1b      	lsrs	r3, r3, #8
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c12:	4b99      	ldr	r3, [pc, #612]	; (8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c16:	08db      	lsrs	r3, r3, #3
 8007c18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	fb02 f303 	mul.w	r3, r2, r3
 8007c22:	ee07 3a90 	vmov	s15, r3
 8007c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 8111 	beq.w	8007e58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	f000 8083 	beq.w	8007d44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	f200 80a1 	bhi.w	8007d88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d056      	beq.n	8007d00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007c52:	e099      	b.n	8007d88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c54:	4b88      	ldr	r3, [pc, #544]	; (8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0320 	and.w	r3, r3, #32
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d02d      	beq.n	8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c60:	4b85      	ldr	r3, [pc, #532]	; (8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	08db      	lsrs	r3, r3, #3
 8007c66:	f003 0303 	and.w	r3, r3, #3
 8007c6a:	4a84      	ldr	r2, [pc, #528]	; (8007e7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c70:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	ee07 3a90 	vmov	s15, r3
 8007c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	ee07 3a90 	vmov	s15, r3
 8007c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c8a:	4b7b      	ldr	r3, [pc, #492]	; (8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c92:	ee07 3a90 	vmov	s15, r3
 8007c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007cba:	e087      	b.n	8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007e84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cce:	4b6a      	ldr	r3, [pc, #424]	; (8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd6:	ee07 3a90 	vmov	s15, r3
 8007cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ce2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cfe:	e065      	b.n	8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007e88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d12:	4b59      	ldr	r3, [pc, #356]	; (8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d1a:	ee07 3a90 	vmov	s15, r3
 8007d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d42:	e043      	b.n	8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d56:	4b48      	ldr	r3, [pc, #288]	; (8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d5e:	ee07 3a90 	vmov	s15, r3
 8007d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d86:	e021      	b.n	8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	ee07 3a90 	vmov	s15, r3
 8007d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007e88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d9a:	4b37      	ldr	r3, [pc, #220]	; (8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da2:	ee07 3a90 	vmov	s15, r3
 8007da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007dcc:	4b2a      	ldr	r3, [pc, #168]	; (8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd0:	0a5b      	lsrs	r3, r3, #9
 8007dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd6:	ee07 3a90 	vmov	s15, r3
 8007dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007de2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007de6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007df2:	ee17 2a90 	vmov	r2, s15
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007dfa:	4b1f      	ldr	r3, [pc, #124]	; (8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfe:	0c1b      	lsrs	r3, r3, #16
 8007e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e04:	ee07 3a90 	vmov	s15, r3
 8007e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e14:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e20:	ee17 2a90 	vmov	r2, s15
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007e28:	4b13      	ldr	r3, [pc, #76]	; (8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2c:	0e1b      	lsrs	r3, r3, #24
 8007e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e32:	ee07 3a90 	vmov	s15, r3
 8007e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e42:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e4e:	ee17 2a90 	vmov	r2, s15
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007e56:	e008      	b.n	8007e6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	609a      	str	r2, [r3, #8]
}
 8007e6a:	bf00      	nop
 8007e6c:	3724      	adds	r7, #36	; 0x24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	58024400 	.word	0x58024400
 8007e7c:	03d09000 	.word	0x03d09000
 8007e80:	46000000 	.word	0x46000000
 8007e84:	4c742400 	.word	0x4c742400
 8007e88:	4a742400 	.word	0x4a742400
 8007e8c:	4af42400 	.word	0x4af42400

08007e90 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b089      	sub	sp, #36	; 0x24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e98:	4ba0      	ldr	r3, [pc, #640]	; (800811c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9c:	f003 0303 	and.w	r3, r3, #3
 8007ea0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007ea2:	4b9e      	ldr	r3, [pc, #632]	; (800811c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea6:	091b      	lsrs	r3, r3, #4
 8007ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007eae:	4b9b      	ldr	r3, [pc, #620]	; (800811c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007eb8:	4b98      	ldr	r3, [pc, #608]	; (800811c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ebc:	08db      	lsrs	r3, r3, #3
 8007ebe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	fb02 f303 	mul.w	r3, r2, r3
 8007ec8:	ee07 3a90 	vmov	s15, r3
 8007ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 8111 	beq.w	80080fe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	f000 8083 	beq.w	8007fea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	f200 80a1 	bhi.w	800802e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d056      	beq.n	8007fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007ef8:	e099      	b.n	800802e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007efa:	4b88      	ldr	r3, [pc, #544]	; (800811c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d02d      	beq.n	8007f62 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f06:	4b85      	ldr	r3, [pc, #532]	; (800811c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	08db      	lsrs	r3, r3, #3
 8007f0c:	f003 0303 	and.w	r3, r3, #3
 8007f10:	4a83      	ldr	r2, [pc, #524]	; (8008120 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007f12:	fa22 f303 	lsr.w	r3, r2, r3
 8007f16:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	ee07 3a90 	vmov	s15, r3
 8007f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	ee07 3a90 	vmov	s15, r3
 8007f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f30:	4b7a      	ldr	r3, [pc, #488]	; (800811c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f38:	ee07 3a90 	vmov	s15, r3
 8007f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f40:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f44:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008124 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f60:	e087      	b.n	8008072 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	ee07 3a90 	vmov	s15, r3
 8007f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007f70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f74:	4b69      	ldr	r3, [pc, #420]	; (800811c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7c:	ee07 3a90 	vmov	s15, r3
 8007f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f84:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f88:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008124 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fa4:	e065      	b.n	8008072 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	ee07 3a90 	vmov	s15, r3
 8007fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800812c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007fb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fb8:	4b58      	ldr	r3, [pc, #352]	; (800811c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc0:	ee07 3a90 	vmov	s15, r3
 8007fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fcc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008124 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fe8:	e043      	b.n	8008072 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	ee07 3a90 	vmov	s15, r3
 8007ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008130 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007ff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ffc:	4b47      	ldr	r3, [pc, #284]	; (800811c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008004:	ee07 3a90 	vmov	s15, r3
 8008008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800800c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008010:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008124 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008014:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008018:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800801c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008028:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800802c:	e021      	b.n	8008072 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	ee07 3a90 	vmov	s15, r3
 8008034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008038:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800803c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008040:	4b36      	ldr	r3, [pc, #216]	; (800811c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008048:	ee07 3a90 	vmov	s15, r3
 800804c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008050:	ed97 6a03 	vldr	s12, [r7, #12]
 8008054:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008124 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008058:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800805c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800806c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008070:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008072:	4b2a      	ldr	r3, [pc, #168]	; (800811c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008076:	0a5b      	lsrs	r3, r3, #9
 8008078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800807c:	ee07 3a90 	vmov	s15, r3
 8008080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008084:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008088:	ee37 7a87 	vadd.f32	s14, s15, s14
 800808c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008098:	ee17 2a90 	vmov	r2, s15
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80080a0:	4b1e      	ldr	r3, [pc, #120]	; (800811c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a4:	0c1b      	lsrs	r3, r3, #16
 80080a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080aa:	ee07 3a90 	vmov	s15, r3
 80080ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80080be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080c6:	ee17 2a90 	vmov	r2, s15
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80080ce:	4b13      	ldr	r3, [pc, #76]	; (800811c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d2:	0e1b      	lsrs	r3, r3, #24
 80080d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d8:	ee07 3a90 	vmov	s15, r3
 80080dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80080ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080f4:	ee17 2a90 	vmov	r2, s15
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80080fc:	e008      	b.n	8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	609a      	str	r2, [r3, #8]
}
 8008110:	bf00      	nop
 8008112:	3724      	adds	r7, #36	; 0x24
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	58024400 	.word	0x58024400
 8008120:	03d09000 	.word	0x03d09000
 8008124:	46000000 	.word	0x46000000
 8008128:	4c742400 	.word	0x4c742400
 800812c:	4a742400 	.word	0x4a742400
 8008130:	4af42400 	.word	0x4af42400

08008134 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008142:	4b53      	ldr	r3, [pc, #332]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	f003 0303 	and.w	r3, r3, #3
 800814a:	2b03      	cmp	r3, #3
 800814c:	d101      	bne.n	8008152 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e099      	b.n	8008286 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008152:	4b4f      	ldr	r3, [pc, #316]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a4e      	ldr	r2, [pc, #312]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 8008158:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800815c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800815e:	f7f9 f8f7 	bl	8001350 <HAL_GetTick>
 8008162:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008164:	e008      	b.n	8008178 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008166:	f7f9 f8f3 	bl	8001350 <HAL_GetTick>
 800816a:	4602      	mov	r2, r0
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	2b02      	cmp	r3, #2
 8008172:	d901      	bls.n	8008178 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	e086      	b.n	8008286 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008178:	4b45      	ldr	r3, [pc, #276]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1f0      	bne.n	8008166 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008184:	4b42      	ldr	r3, [pc, #264]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 8008186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008188:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	031b      	lsls	r3, r3, #12
 8008192:	493f      	ldr	r1, [pc, #252]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 8008194:	4313      	orrs	r3, r2
 8008196:	628b      	str	r3, [r1, #40]	; 0x28
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	3b01      	subs	r3, #1
 800819e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	025b      	lsls	r3, r3, #9
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	431a      	orrs	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	041b      	lsls	r3, r3, #16
 80081b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081ba:	431a      	orrs	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	061b      	lsls	r3, r3, #24
 80081c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081c8:	4931      	ldr	r1, [pc, #196]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081ce:	4b30      	ldr	r3, [pc, #192]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 80081d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	492d      	ldr	r1, [pc, #180]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80081e0:	4b2b      	ldr	r3, [pc, #172]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	f023 0220 	bic.w	r2, r3, #32
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	4928      	ldr	r1, [pc, #160]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80081f2:	4b27      	ldr	r3, [pc, #156]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f6:	4a26      	ldr	r2, [pc, #152]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 80081f8:	f023 0310 	bic.w	r3, r3, #16
 80081fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80081fe:	4b24      	ldr	r3, [pc, #144]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 8008200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008202:	4b24      	ldr	r3, [pc, #144]	; (8008294 <RCCEx_PLL2_Config+0x160>)
 8008204:	4013      	ands	r3, r2
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	69d2      	ldr	r2, [r2, #28]
 800820a:	00d2      	lsls	r2, r2, #3
 800820c:	4920      	ldr	r1, [pc, #128]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 800820e:	4313      	orrs	r3, r2
 8008210:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008212:	4b1f      	ldr	r3, [pc, #124]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 8008214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008216:	4a1e      	ldr	r2, [pc, #120]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 8008218:	f043 0310 	orr.w	r3, r3, #16
 800821c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d106      	bne.n	8008232 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008224:	4b1a      	ldr	r3, [pc, #104]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 8008226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008228:	4a19      	ldr	r2, [pc, #100]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 800822a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800822e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008230:	e00f      	b.n	8008252 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d106      	bne.n	8008246 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008238:	4b15      	ldr	r3, [pc, #84]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 800823a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823c:	4a14      	ldr	r2, [pc, #80]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 800823e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008242:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008244:	e005      	b.n	8008252 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008246:	4b12      	ldr	r3, [pc, #72]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 8008248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824a:	4a11      	ldr	r2, [pc, #68]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 800824c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008250:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008252:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a0e      	ldr	r2, [pc, #56]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 8008258:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800825c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800825e:	f7f9 f877 	bl	8001350 <HAL_GetTick>
 8008262:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008264:	e008      	b.n	8008278 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008266:	f7f9 f873 	bl	8001350 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	2b02      	cmp	r3, #2
 8008272:	d901      	bls.n	8008278 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e006      	b.n	8008286 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008278:	4b05      	ldr	r3, [pc, #20]	; (8008290 <RCCEx_PLL2_Config+0x15c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d0f0      	beq.n	8008266 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008284:	7bfb      	ldrb	r3, [r7, #15]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	58024400 	.word	0x58024400
 8008294:	ffff0007 	.word	0xffff0007

08008298 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082a6:	4b53      	ldr	r3, [pc, #332]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 80082a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d101      	bne.n	80082b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e099      	b.n	80083ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082b6:	4b4f      	ldr	r3, [pc, #316]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a4e      	ldr	r2, [pc, #312]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 80082bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082c2:	f7f9 f845 	bl	8001350 <HAL_GetTick>
 80082c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082c8:	e008      	b.n	80082dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082ca:	f7f9 f841 	bl	8001350 <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d901      	bls.n	80082dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e086      	b.n	80083ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082dc:	4b45      	ldr	r3, [pc, #276]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1f0      	bne.n	80082ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082e8:	4b42      	ldr	r3, [pc, #264]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	051b      	lsls	r3, r3, #20
 80082f6:	493f      	ldr	r1, [pc, #252]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	628b      	str	r3, [r1, #40]	; 0x28
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	3b01      	subs	r3, #1
 8008302:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	3b01      	subs	r3, #1
 800830c:	025b      	lsls	r3, r3, #9
 800830e:	b29b      	uxth	r3, r3
 8008310:	431a      	orrs	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	3b01      	subs	r3, #1
 8008318:	041b      	lsls	r3, r3, #16
 800831a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800831e:	431a      	orrs	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	3b01      	subs	r3, #1
 8008326:	061b      	lsls	r3, r3, #24
 8008328:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800832c:	4931      	ldr	r1, [pc, #196]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 800832e:	4313      	orrs	r3, r2
 8008330:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008332:	4b30      	ldr	r3, [pc, #192]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 8008334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008336:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	492d      	ldr	r1, [pc, #180]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 8008340:	4313      	orrs	r3, r2
 8008342:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008344:	4b2b      	ldr	r3, [pc, #172]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 8008346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008348:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	4928      	ldr	r1, [pc, #160]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 8008352:	4313      	orrs	r3, r2
 8008354:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008356:	4b27      	ldr	r3, [pc, #156]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 8008358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835a:	4a26      	ldr	r2, [pc, #152]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 800835c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008360:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008362:	4b24      	ldr	r3, [pc, #144]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 8008364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008366:	4b24      	ldr	r3, [pc, #144]	; (80083f8 <RCCEx_PLL3_Config+0x160>)
 8008368:	4013      	ands	r3, r2
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	69d2      	ldr	r2, [r2, #28]
 800836e:	00d2      	lsls	r2, r2, #3
 8008370:	4920      	ldr	r1, [pc, #128]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 8008372:	4313      	orrs	r3, r2
 8008374:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008376:	4b1f      	ldr	r3, [pc, #124]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 8008378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837a:	4a1e      	ldr	r2, [pc, #120]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 800837c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008380:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d106      	bne.n	8008396 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008388:	4b1a      	ldr	r3, [pc, #104]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 800838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838c:	4a19      	ldr	r2, [pc, #100]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 800838e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008392:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008394:	e00f      	b.n	80083b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d106      	bne.n	80083aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800839c:	4b15      	ldr	r3, [pc, #84]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	4a14      	ldr	r2, [pc, #80]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 80083a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80083a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083a8:	e005      	b.n	80083b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80083aa:	4b12      	ldr	r3, [pc, #72]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 80083ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ae:	4a11      	ldr	r2, [pc, #68]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 80083b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083b6:	4b0f      	ldr	r3, [pc, #60]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a0e      	ldr	r2, [pc, #56]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 80083bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083c2:	f7f8 ffc5 	bl	8001350 <HAL_GetTick>
 80083c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083c8:	e008      	b.n	80083dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083ca:	f7f8 ffc1 	bl	8001350 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d901      	bls.n	80083dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e006      	b.n	80083ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083dc:	4b05      	ldr	r3, [pc, #20]	; (80083f4 <RCCEx_PLL3_Config+0x15c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d0f0      	beq.n	80083ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	58024400 	.word	0x58024400
 80083f8:	ffff0007 	.word	0xffff0007

080083fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e049      	b.n	80084a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d106      	bne.n	8008428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7f8 feae 	bl	8001184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3304      	adds	r3, #4
 8008438:	4619      	mov	r1, r3
 800843a:	4610      	mov	r0, r2
 800843c:	f000 fcd2 	bl	8008de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d001      	beq.n	80084c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e04c      	b.n	800855e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2202      	movs	r2, #2
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a26      	ldr	r2, [pc, #152]	; (800856c <HAL_TIM_Base_Start+0xc0>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d022      	beq.n	800851c <HAL_TIM_Base_Start+0x70>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084de:	d01d      	beq.n	800851c <HAL_TIM_Base_Start+0x70>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a22      	ldr	r2, [pc, #136]	; (8008570 <HAL_TIM_Base_Start+0xc4>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d018      	beq.n	800851c <HAL_TIM_Base_Start+0x70>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a21      	ldr	r2, [pc, #132]	; (8008574 <HAL_TIM_Base_Start+0xc8>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d013      	beq.n	800851c <HAL_TIM_Base_Start+0x70>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a1f      	ldr	r2, [pc, #124]	; (8008578 <HAL_TIM_Base_Start+0xcc>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d00e      	beq.n	800851c <HAL_TIM_Base_Start+0x70>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a1e      	ldr	r2, [pc, #120]	; (800857c <HAL_TIM_Base_Start+0xd0>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d009      	beq.n	800851c <HAL_TIM_Base_Start+0x70>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a1c      	ldr	r2, [pc, #112]	; (8008580 <HAL_TIM_Base_Start+0xd4>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d004      	beq.n	800851c <HAL_TIM_Base_Start+0x70>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a1b      	ldr	r2, [pc, #108]	; (8008584 <HAL_TIM_Base_Start+0xd8>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d115      	bne.n	8008548 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689a      	ldr	r2, [r3, #8]
 8008522:	4b19      	ldr	r3, [pc, #100]	; (8008588 <HAL_TIM_Base_Start+0xdc>)
 8008524:	4013      	ands	r3, r2
 8008526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2b06      	cmp	r3, #6
 800852c:	d015      	beq.n	800855a <HAL_TIM_Base_Start+0xae>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008534:	d011      	beq.n	800855a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f042 0201 	orr.w	r2, r2, #1
 8008544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008546:	e008      	b.n	800855a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0201 	orr.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	e000      	b.n	800855c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800855a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	40010000 	.word	0x40010000
 8008570:	40000400 	.word	0x40000400
 8008574:	40000800 	.word	0x40000800
 8008578:	40000c00 	.word	0x40000c00
 800857c:	40010400 	.word	0x40010400
 8008580:	40001800 	.word	0x40001800
 8008584:	40014000 	.word	0x40014000
 8008588:	00010007 	.word	0x00010007

0800858c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b01      	cmp	r3, #1
 800859e:	d001      	beq.n	80085a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e054      	b.n	800864e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68da      	ldr	r2, [r3, #12]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f042 0201 	orr.w	r2, r2, #1
 80085ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a26      	ldr	r2, [pc, #152]	; (800865c <HAL_TIM_Base_Start_IT+0xd0>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d022      	beq.n	800860c <HAL_TIM_Base_Start_IT+0x80>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ce:	d01d      	beq.n	800860c <HAL_TIM_Base_Start_IT+0x80>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a22      	ldr	r2, [pc, #136]	; (8008660 <HAL_TIM_Base_Start_IT+0xd4>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d018      	beq.n	800860c <HAL_TIM_Base_Start_IT+0x80>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a21      	ldr	r2, [pc, #132]	; (8008664 <HAL_TIM_Base_Start_IT+0xd8>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d013      	beq.n	800860c <HAL_TIM_Base_Start_IT+0x80>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a1f      	ldr	r2, [pc, #124]	; (8008668 <HAL_TIM_Base_Start_IT+0xdc>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d00e      	beq.n	800860c <HAL_TIM_Base_Start_IT+0x80>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a1e      	ldr	r2, [pc, #120]	; (800866c <HAL_TIM_Base_Start_IT+0xe0>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d009      	beq.n	800860c <HAL_TIM_Base_Start_IT+0x80>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a1c      	ldr	r2, [pc, #112]	; (8008670 <HAL_TIM_Base_Start_IT+0xe4>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d004      	beq.n	800860c <HAL_TIM_Base_Start_IT+0x80>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a1b      	ldr	r2, [pc, #108]	; (8008674 <HAL_TIM_Base_Start_IT+0xe8>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d115      	bne.n	8008638 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689a      	ldr	r2, [r3, #8]
 8008612:	4b19      	ldr	r3, [pc, #100]	; (8008678 <HAL_TIM_Base_Start_IT+0xec>)
 8008614:	4013      	ands	r3, r2
 8008616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b06      	cmp	r3, #6
 800861c:	d015      	beq.n	800864a <HAL_TIM_Base_Start_IT+0xbe>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008624:	d011      	beq.n	800864a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f042 0201 	orr.w	r2, r2, #1
 8008634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008636:	e008      	b.n	800864a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f042 0201 	orr.w	r2, r2, #1
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	e000      	b.n	800864c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800864a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	40010000 	.word	0x40010000
 8008660:	40000400 	.word	0x40000400
 8008664:	40000800 	.word	0x40000800
 8008668:	40000c00 	.word	0x40000c00
 800866c:	40010400 	.word	0x40010400
 8008670:	40001800 	.word	0x40001800
 8008674:	40014000 	.word	0x40014000
 8008678:	00010007 	.word	0x00010007

0800867c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e049      	b.n	8008722 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d106      	bne.n	80086a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f841 	bl	800872a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2202      	movs	r2, #2
 80086ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	3304      	adds	r3, #4
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	f000 fb92 	bl	8008de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800872a:	b480      	push	{r7}
 800872c:	b083      	sub	sp, #12
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008732:	bf00      	nop
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b082      	sub	sp, #8
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	f003 0302 	and.w	r3, r3, #2
 8008750:	2b02      	cmp	r3, #2
 8008752:	d122      	bne.n	800879a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b02      	cmp	r3, #2
 8008760:	d11b      	bne.n	800879a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f06f 0202 	mvn.w	r2, #2
 800876a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	f003 0303 	and.w	r3, r3, #3
 800877c:	2b00      	cmp	r3, #0
 800877e:	d003      	beq.n	8008788 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fb11 	bl	8008da8 <HAL_TIM_IC_CaptureCallback>
 8008786:	e005      	b.n	8008794 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fb03 	bl	8008d94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fb14 	bl	8008dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	d122      	bne.n	80087ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	f003 0304 	and.w	r3, r3, #4
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d11b      	bne.n	80087ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f06f 0204 	mvn.w	r2, #4
 80087be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d003      	beq.n	80087dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fae7 	bl	8008da8 <HAL_TIM_IC_CaptureCallback>
 80087da:	e005      	b.n	80087e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fad9 	bl	8008d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 faea 	bl	8008dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	f003 0308 	and.w	r3, r3, #8
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d122      	bne.n	8008842 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	f003 0308 	and.w	r3, r3, #8
 8008806:	2b08      	cmp	r3, #8
 8008808:	d11b      	bne.n	8008842 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f06f 0208 	mvn.w	r2, #8
 8008812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2204      	movs	r2, #4
 8008818:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	69db      	ldr	r3, [r3, #28]
 8008820:	f003 0303 	and.w	r3, r3, #3
 8008824:	2b00      	cmp	r3, #0
 8008826:	d003      	beq.n	8008830 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fabd 	bl	8008da8 <HAL_TIM_IC_CaptureCallback>
 800882e:	e005      	b.n	800883c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 faaf 	bl	8008d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fac0 	bl	8008dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	f003 0310 	and.w	r3, r3, #16
 800884c:	2b10      	cmp	r3, #16
 800884e:	d122      	bne.n	8008896 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f003 0310 	and.w	r3, r3, #16
 800885a:	2b10      	cmp	r3, #16
 800885c:	d11b      	bne.n	8008896 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f06f 0210 	mvn.w	r2, #16
 8008866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2208      	movs	r2, #8
 800886c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	69db      	ldr	r3, [r3, #28]
 8008874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fa93 	bl	8008da8 <HAL_TIM_IC_CaptureCallback>
 8008882:	e005      	b.n	8008890 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fa85 	bl	8008d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fa96 	bl	8008dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	f003 0301 	and.w	r3, r3, #1
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d10e      	bne.n	80088c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d107      	bne.n	80088c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f06f 0201 	mvn.w	r2, #1
 80088ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7f8 f9bd 	bl	8000c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088cc:	2b80      	cmp	r3, #128	; 0x80
 80088ce:	d10e      	bne.n	80088ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088da:	2b80      	cmp	r3, #128	; 0x80
 80088dc:	d107      	bne.n	80088ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 ff9f 	bl	800982c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088fc:	d10e      	bne.n	800891c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008908:	2b80      	cmp	r3, #128	; 0x80
 800890a:	d107      	bne.n	800891c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 ff92 	bl	8009840 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008926:	2b40      	cmp	r3, #64	; 0x40
 8008928:	d10e      	bne.n	8008948 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008934:	2b40      	cmp	r3, #64	; 0x40
 8008936:	d107      	bne.n	8008948 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fa44 	bl	8008dd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	f003 0320 	and.w	r3, r3, #32
 8008952:	2b20      	cmp	r3, #32
 8008954:	d10e      	bne.n	8008974 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	f003 0320 	and.w	r3, r3, #32
 8008960:	2b20      	cmp	r3, #32
 8008962:	d107      	bne.n	8008974 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f06f 0220 	mvn.w	r2, #32
 800896c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 ff52 	bl	8009818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008992:	2b01      	cmp	r3, #1
 8008994:	d101      	bne.n	800899a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008996:	2302      	movs	r3, #2
 8008998:	e0ff      	b.n	8008b9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2b14      	cmp	r3, #20
 80089a6:	f200 80f0 	bhi.w	8008b8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80089aa:	a201      	add	r2, pc, #4	; (adr r2, 80089b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80089ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b0:	08008a05 	.word	0x08008a05
 80089b4:	08008b8b 	.word	0x08008b8b
 80089b8:	08008b8b 	.word	0x08008b8b
 80089bc:	08008b8b 	.word	0x08008b8b
 80089c0:	08008a45 	.word	0x08008a45
 80089c4:	08008b8b 	.word	0x08008b8b
 80089c8:	08008b8b 	.word	0x08008b8b
 80089cc:	08008b8b 	.word	0x08008b8b
 80089d0:	08008a87 	.word	0x08008a87
 80089d4:	08008b8b 	.word	0x08008b8b
 80089d8:	08008b8b 	.word	0x08008b8b
 80089dc:	08008b8b 	.word	0x08008b8b
 80089e0:	08008ac7 	.word	0x08008ac7
 80089e4:	08008b8b 	.word	0x08008b8b
 80089e8:	08008b8b 	.word	0x08008b8b
 80089ec:	08008b8b 	.word	0x08008b8b
 80089f0:	08008b09 	.word	0x08008b09
 80089f4:	08008b8b 	.word	0x08008b8b
 80089f8:	08008b8b 	.word	0x08008b8b
 80089fc:	08008b8b 	.word	0x08008b8b
 8008a00:	08008b49 	.word	0x08008b49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68b9      	ldr	r1, [r7, #8]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fa84 	bl	8008f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	699a      	ldr	r2, [r3, #24]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f042 0208 	orr.w	r2, r2, #8
 8008a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	699a      	ldr	r2, [r3, #24]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f022 0204 	bic.w	r2, r2, #4
 8008a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6999      	ldr	r1, [r3, #24]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	691a      	ldr	r2, [r3, #16]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	619a      	str	r2, [r3, #24]
      break;
 8008a42:	e0a5      	b.n	8008b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 faf4 	bl	8009038 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	699a      	ldr	r2, [r3, #24]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	699a      	ldr	r2, [r3, #24]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6999      	ldr	r1, [r3, #24]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	021a      	lsls	r2, r3, #8
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	619a      	str	r2, [r3, #24]
      break;
 8008a84:	e084      	b.n	8008b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68b9      	ldr	r1, [r7, #8]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f000 fb5d 	bl	800914c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	69da      	ldr	r2, [r3, #28]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f042 0208 	orr.w	r2, r2, #8
 8008aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	69da      	ldr	r2, [r3, #28]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f022 0204 	bic.w	r2, r2, #4
 8008ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	69d9      	ldr	r1, [r3, #28]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	691a      	ldr	r2, [r3, #16]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	61da      	str	r2, [r3, #28]
      break;
 8008ac4:	e064      	b.n	8008b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68b9      	ldr	r1, [r7, #8]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 fbc5 	bl	800925c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	69da      	ldr	r2, [r3, #28]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	69da      	ldr	r2, [r3, #28]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	69d9      	ldr	r1, [r3, #28]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	021a      	lsls	r2, r3, #8
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	61da      	str	r2, [r3, #28]
      break;
 8008b06:	e043      	b.n	8008b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68b9      	ldr	r1, [r7, #8]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 fc0e 	bl	8009330 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f042 0208 	orr.w	r2, r2, #8
 8008b22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f022 0204 	bic.w	r2, r2, #4
 8008b32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	691a      	ldr	r2, [r3, #16]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	430a      	orrs	r2, r1
 8008b44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b46:	e023      	b.n	8008b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68b9      	ldr	r1, [r7, #8]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 fc52 	bl	80093f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	021a      	lsls	r2, r3, #8
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	430a      	orrs	r2, r1
 8008b86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b88:	e002      	b.n	8008b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop

08008ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d101      	bne.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1c>
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	e0dc      	b.n	8008d7a <HAL_TIM_ConfigClockSource+0x1d6>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	4b6a      	ldr	r3, [pc, #424]	; (8008d84 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008bdc:	4013      	ands	r3, r2
 8008bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008be6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a64      	ldr	r2, [pc, #400]	; (8008d88 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	f000 80a9 	beq.w	8008d4e <HAL_TIM_ConfigClockSource+0x1aa>
 8008bfc:	4a62      	ldr	r2, [pc, #392]	; (8008d88 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	f200 80ae 	bhi.w	8008d60 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c04:	4a61      	ldr	r2, [pc, #388]	; (8008d8c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	f000 80a1 	beq.w	8008d4e <HAL_TIM_ConfigClockSource+0x1aa>
 8008c0c:	4a5f      	ldr	r2, [pc, #380]	; (8008d8c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	f200 80a6 	bhi.w	8008d60 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c14:	4a5e      	ldr	r2, [pc, #376]	; (8008d90 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	f000 8099 	beq.w	8008d4e <HAL_TIM_ConfigClockSource+0x1aa>
 8008c1c:	4a5c      	ldr	r2, [pc, #368]	; (8008d90 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	f200 809e 	bhi.w	8008d60 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c28:	f000 8091 	beq.w	8008d4e <HAL_TIM_ConfigClockSource+0x1aa>
 8008c2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c30:	f200 8096 	bhi.w	8008d60 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c38:	f000 8089 	beq.w	8008d4e <HAL_TIM_ConfigClockSource+0x1aa>
 8008c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c40:	f200 808e 	bhi.w	8008d60 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c48:	d03e      	beq.n	8008cc8 <HAL_TIM_ConfigClockSource+0x124>
 8008c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c4e:	f200 8087 	bhi.w	8008d60 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c56:	f000 8086 	beq.w	8008d66 <HAL_TIM_ConfigClockSource+0x1c2>
 8008c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c5e:	d87f      	bhi.n	8008d60 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c60:	2b70      	cmp	r3, #112	; 0x70
 8008c62:	d01a      	beq.n	8008c9a <HAL_TIM_ConfigClockSource+0xf6>
 8008c64:	2b70      	cmp	r3, #112	; 0x70
 8008c66:	d87b      	bhi.n	8008d60 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c68:	2b60      	cmp	r3, #96	; 0x60
 8008c6a:	d050      	beq.n	8008d0e <HAL_TIM_ConfigClockSource+0x16a>
 8008c6c:	2b60      	cmp	r3, #96	; 0x60
 8008c6e:	d877      	bhi.n	8008d60 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c70:	2b50      	cmp	r3, #80	; 0x50
 8008c72:	d03c      	beq.n	8008cee <HAL_TIM_ConfigClockSource+0x14a>
 8008c74:	2b50      	cmp	r3, #80	; 0x50
 8008c76:	d873      	bhi.n	8008d60 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c78:	2b40      	cmp	r3, #64	; 0x40
 8008c7a:	d058      	beq.n	8008d2e <HAL_TIM_ConfigClockSource+0x18a>
 8008c7c:	2b40      	cmp	r3, #64	; 0x40
 8008c7e:	d86f      	bhi.n	8008d60 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c80:	2b30      	cmp	r3, #48	; 0x30
 8008c82:	d064      	beq.n	8008d4e <HAL_TIM_ConfigClockSource+0x1aa>
 8008c84:	2b30      	cmp	r3, #48	; 0x30
 8008c86:	d86b      	bhi.n	8008d60 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c88:	2b20      	cmp	r3, #32
 8008c8a:	d060      	beq.n	8008d4e <HAL_TIM_ConfigClockSource+0x1aa>
 8008c8c:	2b20      	cmp	r3, #32
 8008c8e:	d867      	bhi.n	8008d60 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d05c      	beq.n	8008d4e <HAL_TIM_ConfigClockSource+0x1aa>
 8008c94:	2b10      	cmp	r3, #16
 8008c96:	d05a      	beq.n	8008d4e <HAL_TIM_ConfigClockSource+0x1aa>
 8008c98:	e062      	b.n	8008d60 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008caa:	f000 fc89 	bl	80095c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008cbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	609a      	str	r2, [r3, #8]
      break;
 8008cc6:	e04f      	b.n	8008d68 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008cd8:	f000 fc72 	bl	80095c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689a      	ldr	r2, [r3, #8]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cea:	609a      	str	r2, [r3, #8]
      break;
 8008cec:	e03c      	b.n	8008d68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	f000 fbe2 	bl	80094c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2150      	movs	r1, #80	; 0x50
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 fc3c 	bl	8009584 <TIM_ITRx_SetConfig>
      break;
 8008d0c:	e02c      	b.n	8008d68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f000 fc01 	bl	8009522 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2160      	movs	r1, #96	; 0x60
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 fc2c 	bl	8009584 <TIM_ITRx_SetConfig>
      break;
 8008d2c:	e01c      	b.n	8008d68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f000 fbc2 	bl	80094c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2140      	movs	r1, #64	; 0x40
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 fc1c 	bl	8009584 <TIM_ITRx_SetConfig>
      break;
 8008d4c:	e00c      	b.n	8008d68 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4619      	mov	r1, r3
 8008d58:	4610      	mov	r0, r2
 8008d5a:	f000 fc13 	bl	8009584 <TIM_ITRx_SetConfig>
      break;
 8008d5e:	e003      	b.n	8008d68 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	73fb      	strb	r3, [r7, #15]
      break;
 8008d64:	e000      	b.n	8008d68 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	ffceff88 	.word	0xffceff88
 8008d88:	00100040 	.word	0x00100040
 8008d8c:	00100030 	.word	0x00100030
 8008d90:	00100020 	.word	0x00100020

08008d94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a40      	ldr	r2, [pc, #256]	; (8008ef8 <TIM_Base_SetConfig+0x114>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d013      	beq.n	8008e24 <TIM_Base_SetConfig+0x40>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e02:	d00f      	beq.n	8008e24 <TIM_Base_SetConfig+0x40>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a3d      	ldr	r2, [pc, #244]	; (8008efc <TIM_Base_SetConfig+0x118>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d00b      	beq.n	8008e24 <TIM_Base_SetConfig+0x40>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a3c      	ldr	r2, [pc, #240]	; (8008f00 <TIM_Base_SetConfig+0x11c>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d007      	beq.n	8008e24 <TIM_Base_SetConfig+0x40>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a3b      	ldr	r2, [pc, #236]	; (8008f04 <TIM_Base_SetConfig+0x120>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d003      	beq.n	8008e24 <TIM_Base_SetConfig+0x40>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a3a      	ldr	r2, [pc, #232]	; (8008f08 <TIM_Base_SetConfig+0x124>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d108      	bne.n	8008e36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a2f      	ldr	r2, [pc, #188]	; (8008ef8 <TIM_Base_SetConfig+0x114>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d01f      	beq.n	8008e7e <TIM_Base_SetConfig+0x9a>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e44:	d01b      	beq.n	8008e7e <TIM_Base_SetConfig+0x9a>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a2c      	ldr	r2, [pc, #176]	; (8008efc <TIM_Base_SetConfig+0x118>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d017      	beq.n	8008e7e <TIM_Base_SetConfig+0x9a>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a2b      	ldr	r2, [pc, #172]	; (8008f00 <TIM_Base_SetConfig+0x11c>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d013      	beq.n	8008e7e <TIM_Base_SetConfig+0x9a>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a2a      	ldr	r2, [pc, #168]	; (8008f04 <TIM_Base_SetConfig+0x120>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d00f      	beq.n	8008e7e <TIM_Base_SetConfig+0x9a>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a29      	ldr	r2, [pc, #164]	; (8008f08 <TIM_Base_SetConfig+0x124>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d00b      	beq.n	8008e7e <TIM_Base_SetConfig+0x9a>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a28      	ldr	r2, [pc, #160]	; (8008f0c <TIM_Base_SetConfig+0x128>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d007      	beq.n	8008e7e <TIM_Base_SetConfig+0x9a>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a27      	ldr	r2, [pc, #156]	; (8008f10 <TIM_Base_SetConfig+0x12c>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d003      	beq.n	8008e7e <TIM_Base_SetConfig+0x9a>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a26      	ldr	r2, [pc, #152]	; (8008f14 <TIM_Base_SetConfig+0x130>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d108      	bne.n	8008e90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	689a      	ldr	r2, [r3, #8]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a10      	ldr	r2, [pc, #64]	; (8008ef8 <TIM_Base_SetConfig+0x114>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d00f      	beq.n	8008edc <TIM_Base_SetConfig+0xf8>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a12      	ldr	r2, [pc, #72]	; (8008f08 <TIM_Base_SetConfig+0x124>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d00b      	beq.n	8008edc <TIM_Base_SetConfig+0xf8>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a11      	ldr	r2, [pc, #68]	; (8008f0c <TIM_Base_SetConfig+0x128>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d007      	beq.n	8008edc <TIM_Base_SetConfig+0xf8>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a10      	ldr	r2, [pc, #64]	; (8008f10 <TIM_Base_SetConfig+0x12c>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d003      	beq.n	8008edc <TIM_Base_SetConfig+0xf8>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a0f      	ldr	r2, [pc, #60]	; (8008f14 <TIM_Base_SetConfig+0x130>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d103      	bne.n	8008ee4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	691a      	ldr	r2, [r3, #16]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	615a      	str	r2, [r3, #20]
}
 8008eea:	bf00      	nop
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	40010000 	.word	0x40010000
 8008efc:	40000400 	.word	0x40000400
 8008f00:	40000800 	.word	0x40000800
 8008f04:	40000c00 	.word	0x40000c00
 8008f08:	40010400 	.word	0x40010400
 8008f0c:	40014000 	.word	0x40014000
 8008f10:	40014400 	.word	0x40014400
 8008f14:	40014800 	.word	0x40014800

08008f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	f023 0201 	bic.w	r2, r3, #1
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4b37      	ldr	r3, [pc, #220]	; (8009020 <TIM_OC1_SetConfig+0x108>)
 8008f44:	4013      	ands	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f023 0303 	bic.w	r3, r3, #3
 8008f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f023 0302 	bic.w	r3, r3, #2
 8008f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a2d      	ldr	r2, [pc, #180]	; (8009024 <TIM_OC1_SetConfig+0x10c>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d00f      	beq.n	8008f94 <TIM_OC1_SetConfig+0x7c>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a2c      	ldr	r2, [pc, #176]	; (8009028 <TIM_OC1_SetConfig+0x110>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d00b      	beq.n	8008f94 <TIM_OC1_SetConfig+0x7c>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a2b      	ldr	r2, [pc, #172]	; (800902c <TIM_OC1_SetConfig+0x114>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d007      	beq.n	8008f94 <TIM_OC1_SetConfig+0x7c>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a2a      	ldr	r2, [pc, #168]	; (8009030 <TIM_OC1_SetConfig+0x118>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d003      	beq.n	8008f94 <TIM_OC1_SetConfig+0x7c>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a29      	ldr	r2, [pc, #164]	; (8009034 <TIM_OC1_SetConfig+0x11c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d10c      	bne.n	8008fae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f023 0308 	bic.w	r3, r3, #8
 8008f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f023 0304 	bic.w	r3, r3, #4
 8008fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a1c      	ldr	r2, [pc, #112]	; (8009024 <TIM_OC1_SetConfig+0x10c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d00f      	beq.n	8008fd6 <TIM_OC1_SetConfig+0xbe>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a1b      	ldr	r2, [pc, #108]	; (8009028 <TIM_OC1_SetConfig+0x110>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d00b      	beq.n	8008fd6 <TIM_OC1_SetConfig+0xbe>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a1a      	ldr	r2, [pc, #104]	; (800902c <TIM_OC1_SetConfig+0x114>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d007      	beq.n	8008fd6 <TIM_OC1_SetConfig+0xbe>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a19      	ldr	r2, [pc, #100]	; (8009030 <TIM_OC1_SetConfig+0x118>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d003      	beq.n	8008fd6 <TIM_OC1_SetConfig+0xbe>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a18      	ldr	r2, [pc, #96]	; (8009034 <TIM_OC1_SetConfig+0x11c>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d111      	bne.n	8008ffa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	685a      	ldr	r2, [r3, #4]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	697a      	ldr	r2, [r7, #20]
 8009012:	621a      	str	r2, [r3, #32]
}
 8009014:	bf00      	nop
 8009016:	371c      	adds	r7, #28
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr
 8009020:	fffeff8f 	.word	0xfffeff8f
 8009024:	40010000 	.word	0x40010000
 8009028:	40010400 	.word	0x40010400
 800902c:	40014000 	.word	0x40014000
 8009030:	40014400 	.word	0x40014400
 8009034:	40014800 	.word	0x40014800

08009038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009038:	b480      	push	{r7}
 800903a:	b087      	sub	sp, #28
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	f023 0210 	bic.w	r2, r3, #16
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	4b34      	ldr	r3, [pc, #208]	; (8009134 <TIM_OC2_SetConfig+0xfc>)
 8009064:	4013      	ands	r3, r2
 8009066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800906e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	021b      	lsls	r3, r3, #8
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	4313      	orrs	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f023 0320 	bic.w	r3, r3, #32
 8009082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	011b      	lsls	r3, r3, #4
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	4313      	orrs	r3, r2
 800908e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a29      	ldr	r2, [pc, #164]	; (8009138 <TIM_OC2_SetConfig+0x100>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d003      	beq.n	80090a0 <TIM_OC2_SetConfig+0x68>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a28      	ldr	r2, [pc, #160]	; (800913c <TIM_OC2_SetConfig+0x104>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d10d      	bne.n	80090bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	011b      	lsls	r3, r3, #4
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a1e      	ldr	r2, [pc, #120]	; (8009138 <TIM_OC2_SetConfig+0x100>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d00f      	beq.n	80090e4 <TIM_OC2_SetConfig+0xac>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a1d      	ldr	r2, [pc, #116]	; (800913c <TIM_OC2_SetConfig+0x104>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d00b      	beq.n	80090e4 <TIM_OC2_SetConfig+0xac>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a1c      	ldr	r2, [pc, #112]	; (8009140 <TIM_OC2_SetConfig+0x108>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d007      	beq.n	80090e4 <TIM_OC2_SetConfig+0xac>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a1b      	ldr	r2, [pc, #108]	; (8009144 <TIM_OC2_SetConfig+0x10c>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d003      	beq.n	80090e4 <TIM_OC2_SetConfig+0xac>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a1a      	ldr	r2, [pc, #104]	; (8009148 <TIM_OC2_SetConfig+0x110>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d113      	bne.n	800910c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	4313      	orrs	r3, r2
 800910a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	621a      	str	r2, [r3, #32]
}
 8009126:	bf00      	nop
 8009128:	371c      	adds	r7, #28
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	feff8fff 	.word	0xfeff8fff
 8009138:	40010000 	.word	0x40010000
 800913c:	40010400 	.word	0x40010400
 8009140:	40014000 	.word	0x40014000
 8009144:	40014400 	.word	0x40014400
 8009148:	40014800 	.word	0x40014800

0800914c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800914c:	b480      	push	{r7}
 800914e:	b087      	sub	sp, #28
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	69db      	ldr	r3, [r3, #28]
 8009172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	4b33      	ldr	r3, [pc, #204]	; (8009244 <TIM_OC3_SetConfig+0xf8>)
 8009178:	4013      	ands	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 0303 	bic.w	r3, r3, #3
 8009182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	4313      	orrs	r3, r2
 800918c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	021b      	lsls	r3, r3, #8
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	4313      	orrs	r3, r2
 80091a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a28      	ldr	r2, [pc, #160]	; (8009248 <TIM_OC3_SetConfig+0xfc>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d003      	beq.n	80091b2 <TIM_OC3_SetConfig+0x66>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a27      	ldr	r2, [pc, #156]	; (800924c <TIM_OC3_SetConfig+0x100>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d10d      	bne.n	80091ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	021b      	lsls	r3, r3, #8
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a1d      	ldr	r2, [pc, #116]	; (8009248 <TIM_OC3_SetConfig+0xfc>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d00f      	beq.n	80091f6 <TIM_OC3_SetConfig+0xaa>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a1c      	ldr	r2, [pc, #112]	; (800924c <TIM_OC3_SetConfig+0x100>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d00b      	beq.n	80091f6 <TIM_OC3_SetConfig+0xaa>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a1b      	ldr	r2, [pc, #108]	; (8009250 <TIM_OC3_SetConfig+0x104>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d007      	beq.n	80091f6 <TIM_OC3_SetConfig+0xaa>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a1a      	ldr	r2, [pc, #104]	; (8009254 <TIM_OC3_SetConfig+0x108>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d003      	beq.n	80091f6 <TIM_OC3_SetConfig+0xaa>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a19      	ldr	r2, [pc, #100]	; (8009258 <TIM_OC3_SetConfig+0x10c>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d113      	bne.n	800921e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	011b      	lsls	r3, r3, #4
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	4313      	orrs	r3, r2
 800921c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	621a      	str	r2, [r3, #32]
}
 8009238:	bf00      	nop
 800923a:	371c      	adds	r7, #28
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	fffeff8f 	.word	0xfffeff8f
 8009248:	40010000 	.word	0x40010000
 800924c:	40010400 	.word	0x40010400
 8009250:	40014000 	.word	0x40014000
 8009254:	40014400 	.word	0x40014400
 8009258:	40014800 	.word	0x40014800

0800925c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800925c:	b480      	push	{r7}
 800925e:	b087      	sub	sp, #28
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	69db      	ldr	r3, [r3, #28]
 8009282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	4b24      	ldr	r3, [pc, #144]	; (8009318 <TIM_OC4_SetConfig+0xbc>)
 8009288:	4013      	ands	r3, r2
 800928a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	021b      	lsls	r3, r3, #8
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	4313      	orrs	r3, r2
 800929e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	031b      	lsls	r3, r3, #12
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a19      	ldr	r2, [pc, #100]	; (800931c <TIM_OC4_SetConfig+0xc0>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d00f      	beq.n	80092dc <TIM_OC4_SetConfig+0x80>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a18      	ldr	r2, [pc, #96]	; (8009320 <TIM_OC4_SetConfig+0xc4>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d00b      	beq.n	80092dc <TIM_OC4_SetConfig+0x80>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a17      	ldr	r2, [pc, #92]	; (8009324 <TIM_OC4_SetConfig+0xc8>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d007      	beq.n	80092dc <TIM_OC4_SetConfig+0x80>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a16      	ldr	r2, [pc, #88]	; (8009328 <TIM_OC4_SetConfig+0xcc>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d003      	beq.n	80092dc <TIM_OC4_SetConfig+0x80>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a15      	ldr	r2, [pc, #84]	; (800932c <TIM_OC4_SetConfig+0xd0>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d109      	bne.n	80092f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	019b      	lsls	r3, r3, #6
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	621a      	str	r2, [r3, #32]
}
 800930a:	bf00      	nop
 800930c:	371c      	adds	r7, #28
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	feff8fff 	.word	0xfeff8fff
 800931c:	40010000 	.word	0x40010000
 8009320:	40010400 	.word	0x40010400
 8009324:	40014000 	.word	0x40014000
 8009328:	40014400 	.word	0x40014400
 800932c:	40014800 	.word	0x40014800

08009330 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	4b21      	ldr	r3, [pc, #132]	; (80093e0 <TIM_OC5_SetConfig+0xb0>)
 800935c:	4013      	ands	r3, r2
 800935e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	4313      	orrs	r3, r2
 8009368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009370:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	041b      	lsls	r3, r3, #16
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	4313      	orrs	r3, r2
 800937c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a18      	ldr	r2, [pc, #96]	; (80093e4 <TIM_OC5_SetConfig+0xb4>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d00f      	beq.n	80093a6 <TIM_OC5_SetConfig+0x76>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a17      	ldr	r2, [pc, #92]	; (80093e8 <TIM_OC5_SetConfig+0xb8>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d00b      	beq.n	80093a6 <TIM_OC5_SetConfig+0x76>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a16      	ldr	r2, [pc, #88]	; (80093ec <TIM_OC5_SetConfig+0xbc>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d007      	beq.n	80093a6 <TIM_OC5_SetConfig+0x76>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a15      	ldr	r2, [pc, #84]	; (80093f0 <TIM_OC5_SetConfig+0xc0>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d003      	beq.n	80093a6 <TIM_OC5_SetConfig+0x76>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a14      	ldr	r2, [pc, #80]	; (80093f4 <TIM_OC5_SetConfig+0xc4>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d109      	bne.n	80093ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	697a      	ldr	r2, [r7, #20]
 80093be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	685a      	ldr	r2, [r3, #4]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	621a      	str	r2, [r3, #32]
}
 80093d4:	bf00      	nop
 80093d6:	371c      	adds	r7, #28
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	fffeff8f 	.word	0xfffeff8f
 80093e4:	40010000 	.word	0x40010000
 80093e8:	40010400 	.word	0x40010400
 80093ec:	40014000 	.word	0x40014000
 80093f0:	40014400 	.word	0x40014400
 80093f4:	40014800 	.word	0x40014800

080093f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b087      	sub	sp, #28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800941e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	4b22      	ldr	r3, [pc, #136]	; (80094ac <TIM_OC6_SetConfig+0xb4>)
 8009424:	4013      	ands	r3, r2
 8009426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	021b      	lsls	r3, r3, #8
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	4313      	orrs	r3, r2
 8009432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800943a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	051b      	lsls	r3, r3, #20
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	4313      	orrs	r3, r2
 8009446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a19      	ldr	r2, [pc, #100]	; (80094b0 <TIM_OC6_SetConfig+0xb8>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d00f      	beq.n	8009470 <TIM_OC6_SetConfig+0x78>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a18      	ldr	r2, [pc, #96]	; (80094b4 <TIM_OC6_SetConfig+0xbc>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d00b      	beq.n	8009470 <TIM_OC6_SetConfig+0x78>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a17      	ldr	r2, [pc, #92]	; (80094b8 <TIM_OC6_SetConfig+0xc0>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d007      	beq.n	8009470 <TIM_OC6_SetConfig+0x78>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a16      	ldr	r2, [pc, #88]	; (80094bc <TIM_OC6_SetConfig+0xc4>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d003      	beq.n	8009470 <TIM_OC6_SetConfig+0x78>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a15      	ldr	r2, [pc, #84]	; (80094c0 <TIM_OC6_SetConfig+0xc8>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d109      	bne.n	8009484 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009476:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	695b      	ldr	r3, [r3, #20]
 800947c:	029b      	lsls	r3, r3, #10
 800947e:	697a      	ldr	r2, [r7, #20]
 8009480:	4313      	orrs	r3, r2
 8009482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	621a      	str	r2, [r3, #32]
}
 800949e:	bf00      	nop
 80094a0:	371c      	adds	r7, #28
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	feff8fff 	.word	0xfeff8fff
 80094b0:	40010000 	.word	0x40010000
 80094b4:	40010400 	.word	0x40010400
 80094b8:	40014000 	.word	0x40014000
 80094bc:	40014400 	.word	0x40014400
 80094c0:	40014800 	.word	0x40014800

080094c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b087      	sub	sp, #28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6a1b      	ldr	r3, [r3, #32]
 80094d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	f023 0201 	bic.w	r2, r3, #1
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	011b      	lsls	r3, r3, #4
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	f023 030a 	bic.w	r3, r3, #10
 8009500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009502:	697a      	ldr	r2, [r7, #20]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	4313      	orrs	r3, r2
 8009508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	621a      	str	r2, [r3, #32]
}
 8009516:	bf00      	nop
 8009518:	371c      	adds	r7, #28
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009522:	b480      	push	{r7}
 8009524:	b087      	sub	sp, #28
 8009526:	af00      	add	r7, sp, #0
 8009528:	60f8      	str	r0, [r7, #12]
 800952a:	60b9      	str	r1, [r7, #8]
 800952c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	f023 0210 	bic.w	r2, r3, #16
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6a1b      	ldr	r3, [r3, #32]
 8009544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800954c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	031b      	lsls	r3, r3, #12
 8009552:	697a      	ldr	r2, [r7, #20]
 8009554:	4313      	orrs	r3, r2
 8009556:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800955e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	011b      	lsls	r3, r3, #4
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	4313      	orrs	r3, r2
 8009568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	621a      	str	r2, [r3, #32]
}
 8009576:	bf00      	nop
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
	...

08009584 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	4b09      	ldr	r3, [pc, #36]	; (80095bc <TIM_ITRx_SetConfig+0x38>)
 8009598:	4013      	ands	r3, r2
 800959a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	f043 0307 	orr.w	r3, r3, #7
 80095a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	609a      	str	r2, [r3, #8]
}
 80095ae:	bf00      	nop
 80095b0:	3714      	adds	r7, #20
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	ffcfff8f 	.word	0xffcfff8f

080095c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	021a      	lsls	r2, r3, #8
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	431a      	orrs	r2, r3
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	697a      	ldr	r2, [r7, #20]
 80095f2:	609a      	str	r2, [r3, #8]
}
 80095f4:	bf00      	nop
 80095f6:	371c      	adds	r7, #28
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009610:	2b01      	cmp	r3, #1
 8009612:	d101      	bne.n	8009618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009614:	2302      	movs	r3, #2
 8009616:	e06d      	b.n	80096f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2202      	movs	r2, #2
 8009624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a30      	ldr	r2, [pc, #192]	; (8009700 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d004      	beq.n	800964c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a2f      	ldr	r2, [pc, #188]	; (8009704 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d108      	bne.n	800965e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009652:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	4313      	orrs	r3, r2
 800965c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009664:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	4313      	orrs	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a20      	ldr	r2, [pc, #128]	; (8009700 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d022      	beq.n	80096c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800968a:	d01d      	beq.n	80096c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a1d      	ldr	r2, [pc, #116]	; (8009708 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d018      	beq.n	80096c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a1c      	ldr	r2, [pc, #112]	; (800970c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d013      	beq.n	80096c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a1a      	ldr	r2, [pc, #104]	; (8009710 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d00e      	beq.n	80096c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a15      	ldr	r2, [pc, #84]	; (8009704 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d009      	beq.n	80096c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a16      	ldr	r2, [pc, #88]	; (8009714 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d004      	beq.n	80096c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a15      	ldr	r2, [pc, #84]	; (8009718 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d10c      	bne.n	80096e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	40010000 	.word	0x40010000
 8009704:	40010400 	.word	0x40010400
 8009708:	40000400 	.word	0x40000400
 800970c:	40000800 	.word	0x40000800
 8009710:	40000c00 	.word	0x40000c00
 8009714:	40001800 	.word	0x40001800
 8009718:	40014000 	.word	0x40014000

0800971c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009726:	2300      	movs	r3, #0
 8009728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009730:	2b01      	cmp	r3, #1
 8009732:	d101      	bne.n	8009738 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009734:	2302      	movs	r3, #2
 8009736:	e065      	b.n	8009804 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	4313      	orrs	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	4313      	orrs	r3, r2
 800975a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	4313      	orrs	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4313      	orrs	r3, r2
 8009776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	4313      	orrs	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	695b      	ldr	r3, [r3, #20]
 8009790:	4313      	orrs	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979e:	4313      	orrs	r3, r2
 80097a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	041b      	lsls	r3, r3, #16
 80097ae:	4313      	orrs	r3, r2
 80097b0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a16      	ldr	r2, [pc, #88]	; (8009810 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d004      	beq.n	80097c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a14      	ldr	r2, [pc, #80]	; (8009814 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d115      	bne.n	80097f2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d0:	051b      	lsls	r3, r3, #20
 80097d2:	4313      	orrs	r3, r2
 80097d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	69db      	ldr	r3, [r3, #28]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	40010000 	.word	0x40010000
 8009814:	40010400 	.word	0x40010400

08009818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <__NVIC_SetPriority>:
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	4603      	mov	r3, r0
 800985c:	6039      	str	r1, [r7, #0]
 800985e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009864:	2b00      	cmp	r3, #0
 8009866:	db0a      	blt.n	800987e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	b2da      	uxtb	r2, r3
 800986c:	490c      	ldr	r1, [pc, #48]	; (80098a0 <__NVIC_SetPriority+0x4c>)
 800986e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009872:	0112      	lsls	r2, r2, #4
 8009874:	b2d2      	uxtb	r2, r2
 8009876:	440b      	add	r3, r1
 8009878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800987c:	e00a      	b.n	8009894 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	b2da      	uxtb	r2, r3
 8009882:	4908      	ldr	r1, [pc, #32]	; (80098a4 <__NVIC_SetPriority+0x50>)
 8009884:	88fb      	ldrh	r3, [r7, #6]
 8009886:	f003 030f 	and.w	r3, r3, #15
 800988a:	3b04      	subs	r3, #4
 800988c:	0112      	lsls	r2, r2, #4
 800988e:	b2d2      	uxtb	r2, r2
 8009890:	440b      	add	r3, r1
 8009892:	761a      	strb	r2, [r3, #24]
}
 8009894:	bf00      	nop
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	e000e100 	.word	0xe000e100
 80098a4:	e000ed00 	.word	0xe000ed00

080098a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80098ac:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <SysTick_Handler+0x1c>)
 80098ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80098b0:	f001 ffec 	bl	800b88c <xTaskGetSchedulerState>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d001      	beq.n	80098be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80098ba:	f002 fe1d 	bl	800c4f8 <xPortSysTickHandler>
  }
}
 80098be:	bf00      	nop
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	e000e010 	.word	0xe000e010

080098c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80098c8:	b580      	push	{r7, lr}
 80098ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80098cc:	2100      	movs	r1, #0
 80098ce:	f06f 0004 	mvn.w	r0, #4
 80098d2:	f7ff ffbf 	bl	8009854 <__NVIC_SetPriority>
#endif
}
 80098d6:	bf00      	nop
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098e2:	f3ef 8305 	mrs	r3, IPSR
 80098e6:	603b      	str	r3, [r7, #0]
  return(result);
 80098e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80098ee:	f06f 0305 	mvn.w	r3, #5
 80098f2:	607b      	str	r3, [r7, #4]
 80098f4:	e00c      	b.n	8009910 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80098f6:	4b0a      	ldr	r3, [pc, #40]	; (8009920 <osKernelInitialize+0x44>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d105      	bne.n	800990a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80098fe:	4b08      	ldr	r3, [pc, #32]	; (8009920 <osKernelInitialize+0x44>)
 8009900:	2201      	movs	r2, #1
 8009902:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009904:	2300      	movs	r3, #0
 8009906:	607b      	str	r3, [r7, #4]
 8009908:	e002      	b.n	8009910 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800990a:	f04f 33ff 	mov.w	r3, #4294967295
 800990e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009910:	687b      	ldr	r3, [r7, #4]
}
 8009912:	4618      	mov	r0, r3
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	24000224 	.word	0x24000224

08009924 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800992a:	f3ef 8305 	mrs	r3, IPSR
 800992e:	603b      	str	r3, [r7, #0]
  return(result);
 8009930:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009936:	f06f 0305 	mvn.w	r3, #5
 800993a:	607b      	str	r3, [r7, #4]
 800993c:	e010      	b.n	8009960 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800993e:	4b0b      	ldr	r3, [pc, #44]	; (800996c <osKernelStart+0x48>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d109      	bne.n	800995a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009946:	f7ff ffbf 	bl	80098c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800994a:	4b08      	ldr	r3, [pc, #32]	; (800996c <osKernelStart+0x48>)
 800994c:	2202      	movs	r2, #2
 800994e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009950:	f001 fb22 	bl	800af98 <vTaskStartScheduler>
      stat = osOK;
 8009954:	2300      	movs	r3, #0
 8009956:	607b      	str	r3, [r7, #4]
 8009958:	e002      	b.n	8009960 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800995a:	f04f 33ff 	mov.w	r3, #4294967295
 800995e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009960:	687b      	ldr	r3, [r7, #4]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	24000224 	.word	0x24000224

08009970 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009970:	b580      	push	{r7, lr}
 8009972:	b08e      	sub	sp, #56	; 0x38
 8009974:	af04      	add	r7, sp, #16
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800997c:	2300      	movs	r3, #0
 800997e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009980:	f3ef 8305 	mrs	r3, IPSR
 8009984:	617b      	str	r3, [r7, #20]
  return(result);
 8009986:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009988:	2b00      	cmp	r3, #0
 800998a:	d17e      	bne.n	8009a8a <osThreadNew+0x11a>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d07b      	beq.n	8009a8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009992:	2380      	movs	r3, #128	; 0x80
 8009994:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009996:	2318      	movs	r3, #24
 8009998:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800999a:	2300      	movs	r3, #0
 800999c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800999e:	f04f 33ff 	mov.w	r3, #4294967295
 80099a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d045      	beq.n	8009a36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d002      	beq.n	80099b8 <osThreadNew+0x48>
        name = attr->name;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d002      	beq.n	80099c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	699b      	ldr	r3, [r3, #24]
 80099c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d008      	beq.n	80099de <osThreadNew+0x6e>
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	2b38      	cmp	r3, #56	; 0x38
 80099d0:	d805      	bhi.n	80099de <osThreadNew+0x6e>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <osThreadNew+0x72>
        return (NULL);
 80099de:	2300      	movs	r3, #0
 80099e0:	e054      	b.n	8009a8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d003      	beq.n	80099f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	089b      	lsrs	r3, r3, #2
 80099f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00e      	beq.n	8009a18 <osThreadNew+0xa8>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	2bab      	cmp	r3, #171	; 0xab
 8009a00:	d90a      	bls.n	8009a18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d006      	beq.n	8009a18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <osThreadNew+0xa8>
        mem = 1;
 8009a12:	2301      	movs	r3, #1
 8009a14:	61bb      	str	r3, [r7, #24]
 8009a16:	e010      	b.n	8009a3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10c      	bne.n	8009a3a <osThreadNew+0xca>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d108      	bne.n	8009a3a <osThreadNew+0xca>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d104      	bne.n	8009a3a <osThreadNew+0xca>
          mem = 0;
 8009a30:	2300      	movs	r3, #0
 8009a32:	61bb      	str	r3, [r7, #24]
 8009a34:	e001      	b.n	8009a3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009a36:	2300      	movs	r3, #0
 8009a38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d110      	bne.n	8009a62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a48:	9202      	str	r2, [sp, #8]
 8009a4a:	9301      	str	r3, [sp, #4]
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	6a3a      	ldr	r2, [r7, #32]
 8009a54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f000 ffdc 	bl	800aa14 <xTaskCreateStatic>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	613b      	str	r3, [r7, #16]
 8009a60:	e013      	b.n	8009a8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d110      	bne.n	8009a8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009a68:	6a3b      	ldr	r3, [r7, #32]
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	f107 0310 	add.w	r3, r7, #16
 8009a70:	9301      	str	r3, [sp, #4]
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f001 f827 	bl	800aace <xTaskCreate>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d001      	beq.n	8009a8a <osThreadNew+0x11a>
            hTask = NULL;
 8009a86:	2300      	movs	r3, #0
 8009a88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009a8a:	693b      	ldr	r3, [r7, #16]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3728      	adds	r7, #40	; 0x28
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08a      	sub	sp, #40	; 0x28
 8009a98:	af02      	add	r7, sp, #8
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aa4:	f3ef 8305 	mrs	r3, IPSR
 8009aa8:	613b      	str	r3, [r7, #16]
  return(result);
 8009aaa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d15f      	bne.n	8009b70 <osMessageQueueNew+0xdc>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d05c      	beq.n	8009b70 <osMessageQueueNew+0xdc>
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d059      	beq.n	8009b70 <osMessageQueueNew+0xdc>
    mem = -1;
 8009abc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d029      	beq.n	8009b1c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d012      	beq.n	8009af6 <osMessageQueueNew+0x62>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	2b4f      	cmp	r3, #79	; 0x4f
 8009ad6:	d90e      	bls.n	8009af6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00a      	beq.n	8009af6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	695a      	ldr	r2, [r3, #20]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	68b9      	ldr	r1, [r7, #8]
 8009ae8:	fb01 f303 	mul.w	r3, r1, r3
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d302      	bcc.n	8009af6 <osMessageQueueNew+0x62>
        mem = 1;
 8009af0:	2301      	movs	r3, #1
 8009af2:	61bb      	str	r3, [r7, #24]
 8009af4:	e014      	b.n	8009b20 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d110      	bne.n	8009b20 <osMessageQueueNew+0x8c>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10c      	bne.n	8009b20 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d108      	bne.n	8009b20 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d104      	bne.n	8009b20 <osMessageQueueNew+0x8c>
          mem = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	61bb      	str	r3, [r7, #24]
 8009b1a:	e001      	b.n	8009b20 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d10b      	bne.n	8009b3e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	691a      	ldr	r2, [r3, #16]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	2100      	movs	r1, #0
 8009b30:	9100      	str	r1, [sp, #0]
 8009b32:	68b9      	ldr	r1, [r7, #8]
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f000 fa2f 	bl	8009f98 <xQueueGenericCreateStatic>
 8009b3a:	61f8      	str	r0, [r7, #28]
 8009b3c:	e008      	b.n	8009b50 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d105      	bne.n	8009b50 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009b44:	2200      	movs	r2, #0
 8009b46:	68b9      	ldr	r1, [r7, #8]
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f000 fa9d 	bl	800a088 <xQueueGenericCreate>
 8009b4e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00c      	beq.n	8009b70 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d003      	beq.n	8009b64 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	617b      	str	r3, [r7, #20]
 8009b62:	e001      	b.n	8009b68 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009b64:	2300      	movs	r3, #0
 8009b66:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009b68:	6979      	ldr	r1, [r7, #20]
 8009b6a:	69f8      	ldr	r0, [r7, #28]
 8009b6c:	f000 fef4 	bl	800a958 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009b70:	69fb      	ldr	r3, [r7, #28]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3720      	adds	r7, #32
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
	...

08009b7c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b088      	sub	sp, #32
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	603b      	str	r3, [r7, #0]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b94:	f3ef 8305 	mrs	r3, IPSR
 8009b98:	617b      	str	r3, [r7, #20]
  return(result);
 8009b9a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d028      	beq.n	8009bf2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d005      	beq.n	8009bb2 <osMessageQueuePut+0x36>
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <osMessageQueuePut+0x36>
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009bb2:	f06f 0303 	mvn.w	r3, #3
 8009bb6:	61fb      	str	r3, [r7, #28]
 8009bb8:	e038      	b.n	8009c2c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009bbe:	f107 0210 	add.w	r2, r7, #16
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	68b9      	ldr	r1, [r7, #8]
 8009bc6:	69b8      	ldr	r0, [r7, #24]
 8009bc8:	f000 fbba 	bl	800a340 <xQueueGenericSendFromISR>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d003      	beq.n	8009bda <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009bd2:	f06f 0302 	mvn.w	r3, #2
 8009bd6:	61fb      	str	r3, [r7, #28]
 8009bd8:	e028      	b.n	8009c2c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d025      	beq.n	8009c2c <osMessageQueuePut+0xb0>
 8009be0:	4b15      	ldr	r3, [pc, #84]	; (8009c38 <osMessageQueuePut+0xbc>)
 8009be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009be6:	601a      	str	r2, [r3, #0]
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	e01c      	b.n	8009c2c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <osMessageQueuePut+0x82>
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d103      	bne.n	8009c06 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009bfe:	f06f 0303 	mvn.w	r3, #3
 8009c02:	61fb      	str	r3, [r7, #28]
 8009c04:	e012      	b.n	8009c2c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009c06:	2300      	movs	r3, #0
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	68b9      	ldr	r1, [r7, #8]
 8009c0c:	69b8      	ldr	r0, [r7, #24]
 8009c0e:	f000 fa99 	bl	800a144 <xQueueGenericSend>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d009      	beq.n	8009c2c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d003      	beq.n	8009c26 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009c1e:	f06f 0301 	mvn.w	r3, #1
 8009c22:	61fb      	str	r3, [r7, #28]
 8009c24:	e002      	b.n	8009c2c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009c26:	f06f 0302 	mvn.w	r3, #2
 8009c2a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009c2c:	69fb      	ldr	r3, [r7, #28]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3720      	adds	r7, #32
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	e000ed04 	.word	0xe000ed04

08009c3c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b088      	sub	sp, #32
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
 8009c48:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c52:	f3ef 8305 	mrs	r3, IPSR
 8009c56:	617b      	str	r3, [r7, #20]
  return(result);
 8009c58:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d028      	beq.n	8009cb0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d005      	beq.n	8009c70 <osMessageQueueGet+0x34>
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <osMessageQueueGet+0x34>
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d003      	beq.n	8009c78 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009c70:	f06f 0303 	mvn.w	r3, #3
 8009c74:	61fb      	str	r3, [r7, #28]
 8009c76:	e037      	b.n	8009ce8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009c7c:	f107 0310 	add.w	r3, r7, #16
 8009c80:	461a      	mov	r2, r3
 8009c82:	68b9      	ldr	r1, [r7, #8]
 8009c84:	69b8      	ldr	r0, [r7, #24]
 8009c86:	f000 fcd7 	bl	800a638 <xQueueReceiveFromISR>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d003      	beq.n	8009c98 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009c90:	f06f 0302 	mvn.w	r3, #2
 8009c94:	61fb      	str	r3, [r7, #28]
 8009c96:	e027      	b.n	8009ce8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d024      	beq.n	8009ce8 <osMessageQueueGet+0xac>
 8009c9e:	4b15      	ldr	r3, [pc, #84]	; (8009cf4 <osMessageQueueGet+0xb8>)
 8009ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	e01b      	b.n	8009ce8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d002      	beq.n	8009cbc <osMessageQueueGet+0x80>
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d103      	bne.n	8009cc4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009cbc:	f06f 0303 	mvn.w	r3, #3
 8009cc0:	61fb      	str	r3, [r7, #28]
 8009cc2:	e011      	b.n	8009ce8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	68b9      	ldr	r1, [r7, #8]
 8009cc8:	69b8      	ldr	r0, [r7, #24]
 8009cca:	f000 fbd5 	bl	800a478 <xQueueReceive>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d009      	beq.n	8009ce8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009cda:	f06f 0301 	mvn.w	r3, #1
 8009cde:	61fb      	str	r3, [r7, #28]
 8009ce0:	e002      	b.n	8009ce8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009ce2:	f06f 0302 	mvn.w	r3, #2
 8009ce6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009ce8:	69fb      	ldr	r3, [r7, #28]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3720      	adds	r7, #32
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	e000ed04 	.word	0xe000ed04

08009cf8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	4a07      	ldr	r2, [pc, #28]	; (8009d24 <vApplicationGetIdleTaskMemory+0x2c>)
 8009d08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	4a06      	ldr	r2, [pc, #24]	; (8009d28 <vApplicationGetIdleTaskMemory+0x30>)
 8009d0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2280      	movs	r2, #128	; 0x80
 8009d14:	601a      	str	r2, [r3, #0]
}
 8009d16:	bf00      	nop
 8009d18:	3714      	adds	r7, #20
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	24000228 	.word	0x24000228
 8009d28:	240002d4 	.word	0x240002d4

08009d2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4a07      	ldr	r2, [pc, #28]	; (8009d58 <vApplicationGetTimerTaskMemory+0x2c>)
 8009d3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	4a06      	ldr	r2, [pc, #24]	; (8009d5c <vApplicationGetTimerTaskMemory+0x30>)
 8009d42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d4a:	601a      	str	r2, [r3, #0]
}
 8009d4c:	bf00      	nop
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	240004d4 	.word	0x240004d4
 8009d5c:	24000580 	.word	0x24000580

08009d60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f103 0208 	add.w	r2, r3, #8
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f04f 32ff 	mov.w	r2, #4294967295
 8009d78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f103 0208 	add.w	r2, r3, #8
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f103 0208 	add.w	r2, r3, #8
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d94:	bf00      	nop
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009dae:	bf00      	nop
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dba:	b480      	push	{r7}
 8009dbc:	b085      	sub	sp, #20
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	689a      	ldr	r2, [r3, #8]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	1c5a      	adds	r2, r3, #1
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	601a      	str	r2, [r3, #0]
}
 8009df6:	bf00      	nop
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e02:	b480      	push	{r7}
 8009e04:	b085      	sub	sp, #20
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e18:	d103      	bne.n	8009e22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	60fb      	str	r3, [r7, #12]
 8009e20:	e00c      	b.n	8009e3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3308      	adds	r3, #8
 8009e26:	60fb      	str	r3, [r7, #12]
 8009e28:	e002      	b.n	8009e30 <vListInsert+0x2e>
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	60fb      	str	r3, [r7, #12]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d2f6      	bcs.n	8009e2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	683a      	ldr	r2, [r7, #0]
 8009e56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	1c5a      	adds	r2, r3, #1
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	601a      	str	r2, [r3, #0]
}
 8009e68:	bf00      	nop
 8009e6a:	3714      	adds	r7, #20
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	6892      	ldr	r2, [r2, #8]
 8009e8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	6852      	ldr	r2, [r2, #4]
 8009e94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d103      	bne.n	8009ea8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	689a      	ldr	r2, [r3, #8]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	1e5a      	subs	r2, r3, #1
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3714      	adds	r7, #20
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10a      	bne.n	8009ef2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009eee:	bf00      	nop
 8009ef0:	e7fe      	b.n	8009ef0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ef2:	f002 fa6f 	bl	800c3d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009efe:	68f9      	ldr	r1, [r7, #12]
 8009f00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f02:	fb01 f303 	mul.w	r3, r1, r3
 8009f06:	441a      	add	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f22:	3b01      	subs	r3, #1
 8009f24:	68f9      	ldr	r1, [r7, #12]
 8009f26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f28:	fb01 f303 	mul.w	r3, r1, r3
 8009f2c:	441a      	add	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	22ff      	movs	r2, #255	; 0xff
 8009f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	22ff      	movs	r2, #255	; 0xff
 8009f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d114      	bne.n	8009f72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d01a      	beq.n	8009f86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	3310      	adds	r3, #16
 8009f54:	4618      	mov	r0, r3
 8009f56:	f001 fad7 	bl	800b508 <xTaskRemoveFromEventList>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d012      	beq.n	8009f86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f60:	4b0c      	ldr	r3, [pc, #48]	; (8009f94 <xQueueGenericReset+0xcc>)
 8009f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	e009      	b.n	8009f86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3310      	adds	r3, #16
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7ff fef2 	bl	8009d60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	3324      	adds	r3, #36	; 0x24
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7ff feed 	bl	8009d60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f86:	f002 fa55 	bl	800c434 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f8a:	2301      	movs	r3, #1
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	e000ed04 	.word	0xe000ed04

08009f98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b08e      	sub	sp, #56	; 0x38
 8009f9c:	af02      	add	r7, sp, #8
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
 8009fa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10a      	bne.n	8009fc2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb0:	f383 8811 	msr	BASEPRI, r3
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fbe:	bf00      	nop
 8009fc0:	e7fe      	b.n	8009fc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10a      	bne.n	8009fde <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fda:	bf00      	nop
 8009fdc:	e7fe      	b.n	8009fdc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d002      	beq.n	8009fea <xQueueGenericCreateStatic+0x52>
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <xQueueGenericCreateStatic+0x56>
 8009fea:	2301      	movs	r3, #1
 8009fec:	e000      	b.n	8009ff0 <xQueueGenericCreateStatic+0x58>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10a      	bne.n	800a00a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	623b      	str	r3, [r7, #32]
}
 800a006:	bf00      	nop
 800a008:	e7fe      	b.n	800a008 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d102      	bne.n	800a016 <xQueueGenericCreateStatic+0x7e>
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <xQueueGenericCreateStatic+0x82>
 800a016:	2301      	movs	r3, #1
 800a018:	e000      	b.n	800a01c <xQueueGenericCreateStatic+0x84>
 800a01a:	2300      	movs	r3, #0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10a      	bne.n	800a036 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	61fb      	str	r3, [r7, #28]
}
 800a032:	bf00      	nop
 800a034:	e7fe      	b.n	800a034 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a036:	2350      	movs	r3, #80	; 0x50
 800a038:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	2b50      	cmp	r3, #80	; 0x50
 800a03e:	d00a      	beq.n	800a056 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	61bb      	str	r3, [r7, #24]
}
 800a052:	bf00      	nop
 800a054:	e7fe      	b.n	800a054 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a056:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00d      	beq.n	800a07e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a064:	2201      	movs	r2, #1
 800a066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a06a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	4613      	mov	r3, r2
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	68b9      	ldr	r1, [r7, #8]
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f000 f83f 	bl	800a0fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a080:	4618      	mov	r0, r3
 800a082:	3730      	adds	r7, #48	; 0x30
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08a      	sub	sp, #40	; 0x28
 800a08c:	af02      	add	r7, sp, #8
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	4613      	mov	r3, r2
 800a094:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10a      	bne.n	800a0b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a0:	f383 8811 	msr	BASEPRI, r3
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	613b      	str	r3, [r7, #16]
}
 800a0ae:	bf00      	nop
 800a0b0:	e7fe      	b.n	800a0b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	fb02 f303 	mul.w	r3, r2, r3
 800a0ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	3350      	adds	r3, #80	; 0x50
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f002 faa9 	bl	800c618 <pvPortMalloc>
 800a0c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d011      	beq.n	800a0f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	3350      	adds	r3, #80	; 0x50
 800a0d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0e0:	79fa      	ldrb	r2, [r7, #7]
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	697a      	ldr	r2, [r7, #20]
 800a0ea:	68b9      	ldr	r1, [r7, #8]
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f000 f805 	bl	800a0fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0f2:	69bb      	ldr	r3, [r7, #24]
	}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3720      	adds	r7, #32
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
 800a108:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d103      	bne.n	800a118 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	69ba      	ldr	r2, [r7, #24]
 800a114:	601a      	str	r2, [r3, #0]
 800a116:	e002      	b.n	800a11e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a12a:	2101      	movs	r1, #1
 800a12c:	69b8      	ldr	r0, [r7, #24]
 800a12e:	f7ff fecb 	bl	8009ec8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	78fa      	ldrb	r2, [r7, #3]
 800a136:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a13a:	bf00      	nop
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
	...

0800a144 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b08e      	sub	sp, #56	; 0x38
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
 800a150:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a152:	2300      	movs	r3, #0
 800a154:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10a      	bne.n	800a176 <xQueueGenericSend+0x32>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a172:	bf00      	nop
 800a174:	e7fe      	b.n	800a174 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d103      	bne.n	800a184 <xQueueGenericSend+0x40>
 800a17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a180:	2b00      	cmp	r3, #0
 800a182:	d101      	bne.n	800a188 <xQueueGenericSend+0x44>
 800a184:	2301      	movs	r3, #1
 800a186:	e000      	b.n	800a18a <xQueueGenericSend+0x46>
 800a188:	2300      	movs	r3, #0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10a      	bne.n	800a1a4 <xQueueGenericSend+0x60>
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1a0:	bf00      	nop
 800a1a2:	e7fe      	b.n	800a1a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d103      	bne.n	800a1b2 <xQueueGenericSend+0x6e>
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d101      	bne.n	800a1b6 <xQueueGenericSend+0x72>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e000      	b.n	800a1b8 <xQueueGenericSend+0x74>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10a      	bne.n	800a1d2 <xQueueGenericSend+0x8e>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	623b      	str	r3, [r7, #32]
}
 800a1ce:	bf00      	nop
 800a1d0:	e7fe      	b.n	800a1d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1d2:	f001 fb5b 	bl	800b88c <xTaskGetSchedulerState>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d102      	bne.n	800a1e2 <xQueueGenericSend+0x9e>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d101      	bne.n	800a1e6 <xQueueGenericSend+0xa2>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e000      	b.n	800a1e8 <xQueueGenericSend+0xa4>
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10a      	bne.n	800a202 <xQueueGenericSend+0xbe>
	__asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f0:	f383 8811 	msr	BASEPRI, r3
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	61fb      	str	r3, [r7, #28]
}
 800a1fe:	bf00      	nop
 800a200:	e7fe      	b.n	800a200 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a202:	f002 f8e7 	bl	800c3d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a20e:	429a      	cmp	r2, r3
 800a210:	d302      	bcc.n	800a218 <xQueueGenericSend+0xd4>
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	2b02      	cmp	r3, #2
 800a216:	d129      	bne.n	800a26c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a218:	683a      	ldr	r2, [r7, #0]
 800a21a:	68b9      	ldr	r1, [r7, #8]
 800a21c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a21e:	f000 fa8b 	bl	800a738 <prvCopyDataToQueue>
 800a222:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d010      	beq.n	800a24e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22e:	3324      	adds	r3, #36	; 0x24
 800a230:	4618      	mov	r0, r3
 800a232:	f001 f969 	bl	800b508 <xTaskRemoveFromEventList>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d013      	beq.n	800a264 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a23c:	4b3f      	ldr	r3, [pc, #252]	; (800a33c <xQueueGenericSend+0x1f8>)
 800a23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	e00a      	b.n	800a264 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a250:	2b00      	cmp	r3, #0
 800a252:	d007      	beq.n	800a264 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a254:	4b39      	ldr	r3, [pc, #228]	; (800a33c <xQueueGenericSend+0x1f8>)
 800a256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a25a:	601a      	str	r2, [r3, #0]
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a264:	f002 f8e6 	bl	800c434 <vPortExitCritical>
				return pdPASS;
 800a268:	2301      	movs	r3, #1
 800a26a:	e063      	b.n	800a334 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d103      	bne.n	800a27a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a272:	f002 f8df 	bl	800c434 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a276:	2300      	movs	r3, #0
 800a278:	e05c      	b.n	800a334 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d106      	bne.n	800a28e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a280:	f107 0314 	add.w	r3, r7, #20
 800a284:	4618      	mov	r0, r3
 800a286:	f001 f9a3 	bl	800b5d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a28a:	2301      	movs	r3, #1
 800a28c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a28e:	f002 f8d1 	bl	800c434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a292:	f000 fef3 	bl	800b07c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a296:	f002 f89d 	bl	800c3d4 <vPortEnterCritical>
 800a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2a0:	b25b      	sxtb	r3, r3
 800a2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a6:	d103      	bne.n	800a2b0 <xQueueGenericSend+0x16c>
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2b6:	b25b      	sxtb	r3, r3
 800a2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2bc:	d103      	bne.n	800a2c6 <xQueueGenericSend+0x182>
 800a2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2c6:	f002 f8b5 	bl	800c434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2ca:	1d3a      	adds	r2, r7, #4
 800a2cc:	f107 0314 	add.w	r3, r7, #20
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f001 f992 	bl	800b5fc <xTaskCheckForTimeOut>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d124      	bne.n	800a328 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2e0:	f000 fb22 	bl	800a928 <prvIsQueueFull>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d018      	beq.n	800a31c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	3310      	adds	r3, #16
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f001 f8b8 	bl	800b468 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2fa:	f000 faad 	bl	800a858 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2fe:	f000 fecb 	bl	800b098 <xTaskResumeAll>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	f47f af7c 	bne.w	800a202 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a30a:	4b0c      	ldr	r3, [pc, #48]	; (800a33c <xQueueGenericSend+0x1f8>)
 800a30c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a310:	601a      	str	r2, [r3, #0]
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	e772      	b.n	800a202 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a31c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a31e:	f000 fa9b 	bl	800a858 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a322:	f000 feb9 	bl	800b098 <xTaskResumeAll>
 800a326:	e76c      	b.n	800a202 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a32a:	f000 fa95 	bl	800a858 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a32e:	f000 feb3 	bl	800b098 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a332:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a334:	4618      	mov	r0, r3
 800a336:	3738      	adds	r7, #56	; 0x38
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	e000ed04 	.word	0xe000ed04

0800a340 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b090      	sub	sp, #64	; 0x40
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
 800a34c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10a      	bne.n	800a36e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35c:	f383 8811 	msr	BASEPRI, r3
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	f3bf 8f4f 	dsb	sy
 800a368:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a36a:	bf00      	nop
 800a36c:	e7fe      	b.n	800a36c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d103      	bne.n	800a37c <xQueueGenericSendFromISR+0x3c>
 800a374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <xQueueGenericSendFromISR+0x40>
 800a37c:	2301      	movs	r3, #1
 800a37e:	e000      	b.n	800a382 <xQueueGenericSendFromISR+0x42>
 800a380:	2300      	movs	r3, #0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10a      	bne.n	800a39c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a398:	bf00      	nop
 800a39a:	e7fe      	b.n	800a39a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	d103      	bne.n	800a3aa <xQueueGenericSendFromISR+0x6a>
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d101      	bne.n	800a3ae <xQueueGenericSendFromISR+0x6e>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e000      	b.n	800a3b0 <xQueueGenericSendFromISR+0x70>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10a      	bne.n	800a3ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b8:	f383 8811 	msr	BASEPRI, r3
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	623b      	str	r3, [r7, #32]
}
 800a3c6:	bf00      	nop
 800a3c8:	e7fe      	b.n	800a3c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3ca:	f002 f8e5 	bl	800c598 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a3ce:	f3ef 8211 	mrs	r2, BASEPRI
 800a3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	61fa      	str	r2, [r7, #28]
 800a3e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a3e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d302      	bcc.n	800a3fc <xQueueGenericSendFromISR+0xbc>
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	d12f      	bne.n	800a45c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	68b9      	ldr	r1, [r7, #8]
 800a410:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a412:	f000 f991 	bl	800a738 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a416:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a41a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a41e:	d112      	bne.n	800a446 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a424:	2b00      	cmp	r3, #0
 800a426:	d016      	beq.n	800a456 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42a:	3324      	adds	r3, #36	; 0x24
 800a42c:	4618      	mov	r0, r3
 800a42e:	f001 f86b 	bl	800b508 <xTaskRemoveFromEventList>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00e      	beq.n	800a456 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00b      	beq.n	800a456 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2201      	movs	r2, #1
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	e007      	b.n	800a456 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a446:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a44a:	3301      	adds	r3, #1
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	b25a      	sxtb	r2, r3
 800a450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a456:	2301      	movs	r3, #1
 800a458:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a45a:	e001      	b.n	800a460 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a45c:	2300      	movs	r3, #0
 800a45e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a462:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a46a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3740      	adds	r7, #64	; 0x40
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
	...

0800a478 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b08c      	sub	sp, #48	; 0x30
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a484:	2300      	movs	r3, #0
 800a486:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d10a      	bne.n	800a4a8 <xQueueReceive+0x30>
	__asm volatile
 800a492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	623b      	str	r3, [r7, #32]
}
 800a4a4:	bf00      	nop
 800a4a6:	e7fe      	b.n	800a4a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d103      	bne.n	800a4b6 <xQueueReceive+0x3e>
 800a4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d101      	bne.n	800a4ba <xQueueReceive+0x42>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e000      	b.n	800a4bc <xQueueReceive+0x44>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10a      	bne.n	800a4d6 <xQueueReceive+0x5e>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	61fb      	str	r3, [r7, #28]
}
 800a4d2:	bf00      	nop
 800a4d4:	e7fe      	b.n	800a4d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4d6:	f001 f9d9 	bl	800b88c <xTaskGetSchedulerState>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d102      	bne.n	800a4e6 <xQueueReceive+0x6e>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <xQueueReceive+0x72>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e000      	b.n	800a4ec <xQueueReceive+0x74>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10a      	bne.n	800a506 <xQueueReceive+0x8e>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	61bb      	str	r3, [r7, #24]
}
 800a502:	bf00      	nop
 800a504:	e7fe      	b.n	800a504 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a506:	f001 ff65 	bl	800c3d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	2b00      	cmp	r3, #0
 800a514:	d01f      	beq.n	800a556 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a516:	68b9      	ldr	r1, [r7, #8]
 800a518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a51a:	f000 f977 	bl	800a80c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a520:	1e5a      	subs	r2, r3, #1
 800a522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a524:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00f      	beq.n	800a54e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a530:	3310      	adds	r3, #16
 800a532:	4618      	mov	r0, r3
 800a534:	f000 ffe8 	bl	800b508 <xTaskRemoveFromEventList>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d007      	beq.n	800a54e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a53e:	4b3d      	ldr	r3, [pc, #244]	; (800a634 <xQueueReceive+0x1bc>)
 800a540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	f3bf 8f4f 	dsb	sy
 800a54a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a54e:	f001 ff71 	bl	800c434 <vPortExitCritical>
				return pdPASS;
 800a552:	2301      	movs	r3, #1
 800a554:	e069      	b.n	800a62a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d103      	bne.n	800a564 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a55c:	f001 ff6a 	bl	800c434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a560:	2300      	movs	r3, #0
 800a562:	e062      	b.n	800a62a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a566:	2b00      	cmp	r3, #0
 800a568:	d106      	bne.n	800a578 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a56a:	f107 0310 	add.w	r3, r7, #16
 800a56e:	4618      	mov	r0, r3
 800a570:	f001 f82e 	bl	800b5d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a574:	2301      	movs	r3, #1
 800a576:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a578:	f001 ff5c 	bl	800c434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a57c:	f000 fd7e 	bl	800b07c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a580:	f001 ff28 	bl	800c3d4 <vPortEnterCritical>
 800a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a58a:	b25b      	sxtb	r3, r3
 800a58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a590:	d103      	bne.n	800a59a <xQueueReceive+0x122>
 800a592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5a0:	b25b      	sxtb	r3, r3
 800a5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a6:	d103      	bne.n	800a5b0 <xQueueReceive+0x138>
 800a5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5b0:	f001 ff40 	bl	800c434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5b4:	1d3a      	adds	r2, r7, #4
 800a5b6:	f107 0310 	add.w	r3, r7, #16
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f001 f81d 	bl	800b5fc <xTaskCheckForTimeOut>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d123      	bne.n	800a610 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5ca:	f000 f997 	bl	800a8fc <prvIsQueueEmpty>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d017      	beq.n	800a604 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d6:	3324      	adds	r3, #36	; 0x24
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	4611      	mov	r1, r2
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f000 ff43 	bl	800b468 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5e4:	f000 f938 	bl	800a858 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5e8:	f000 fd56 	bl	800b098 <xTaskResumeAll>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d189      	bne.n	800a506 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a5f2:	4b10      	ldr	r3, [pc, #64]	; (800a634 <xQueueReceive+0x1bc>)
 800a5f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5f8:	601a      	str	r2, [r3, #0]
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	e780      	b.n	800a506 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a606:	f000 f927 	bl	800a858 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a60a:	f000 fd45 	bl	800b098 <xTaskResumeAll>
 800a60e:	e77a      	b.n	800a506 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a612:	f000 f921 	bl	800a858 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a616:	f000 fd3f 	bl	800b098 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a61a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a61c:	f000 f96e 	bl	800a8fc <prvIsQueueEmpty>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	f43f af6f 	beq.w	800a506 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a628:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3730      	adds	r7, #48	; 0x30
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	e000ed04 	.word	0xe000ed04

0800a638 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b08e      	sub	sp, #56	; 0x38
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10a      	bne.n	800a664 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	623b      	str	r3, [r7, #32]
}
 800a660:	bf00      	nop
 800a662:	e7fe      	b.n	800a662 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d103      	bne.n	800a672 <xQueueReceiveFromISR+0x3a>
 800a66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <xQueueReceiveFromISR+0x3e>
 800a672:	2301      	movs	r3, #1
 800a674:	e000      	b.n	800a678 <xQueueReceiveFromISR+0x40>
 800a676:	2300      	movs	r3, #0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10a      	bne.n	800a692 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	61fb      	str	r3, [r7, #28]
}
 800a68e:	bf00      	nop
 800a690:	e7fe      	b.n	800a690 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a692:	f001 ff81 	bl	800c598 <vPortValidateInterruptPriority>
	__asm volatile
 800a696:	f3ef 8211 	mrs	r2, BASEPRI
 800a69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	61ba      	str	r2, [r7, #24]
 800a6ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a6ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d02f      	beq.n	800a71e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6c8:	68b9      	ldr	r1, [r7, #8]
 800a6ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6cc:	f000 f89e 	bl	800a80c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	1e5a      	subs	r2, r3, #1
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a6d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e0:	d112      	bne.n	800a708 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d016      	beq.n	800a718 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ec:	3310      	adds	r3, #16
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 ff0a 	bl	800b508 <xTaskRemoveFromEventList>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00e      	beq.n	800a718 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00b      	beq.n	800a718 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	601a      	str	r2, [r3, #0]
 800a706:	e007      	b.n	800a718 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a70c:	3301      	adds	r3, #1
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	b25a      	sxtb	r2, r3
 800a712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a718:	2301      	movs	r3, #1
 800a71a:	637b      	str	r3, [r7, #52]	; 0x34
 800a71c:	e001      	b.n	800a722 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a71e:	2300      	movs	r3, #0
 800a720:	637b      	str	r3, [r7, #52]	; 0x34
 800a722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a724:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f383 8811 	msr	BASEPRI, r3
}
 800a72c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a730:	4618      	mov	r0, r3
 800a732:	3738      	adds	r7, #56	; 0x38
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b086      	sub	sp, #24
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a744:	2300      	movs	r3, #0
 800a746:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10d      	bne.n	800a772 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d14d      	bne.n	800a7fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	4618      	mov	r0, r3
 800a764:	f001 f8b0 	bl	800b8c8 <xTaskPriorityDisinherit>
 800a768:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	609a      	str	r2, [r3, #8]
 800a770:	e043      	b.n	800a7fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d119      	bne.n	800a7ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6858      	ldr	r0, [r3, #4]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a780:	461a      	mov	r2, r3
 800a782:	68b9      	ldr	r1, [r7, #8]
 800a784:	f002 f9b6 	bl	800caf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a790:	441a      	add	r2, r3
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	685a      	ldr	r2, [r3, #4]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d32b      	bcc.n	800a7fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	605a      	str	r2, [r3, #4]
 800a7aa:	e026      	b.n	800a7fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	68d8      	ldr	r0, [r3, #12]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	68b9      	ldr	r1, [r7, #8]
 800a7b8:	f002 f99c 	bl	800caf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	68da      	ldr	r2, [r3, #12]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c4:	425b      	negs	r3, r3
 800a7c6:	441a      	add	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	68da      	ldr	r2, [r3, #12]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d207      	bcs.n	800a7e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	689a      	ldr	r2, [r3, #8]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e0:	425b      	negs	r3, r3
 800a7e2:	441a      	add	r2, r3
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d105      	bne.n	800a7fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d002      	beq.n	800a7fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	1c5a      	adds	r2, r3, #1
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a802:	697b      	ldr	r3, [r7, #20]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d018      	beq.n	800a850 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	68da      	ldr	r2, [r3, #12]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a826:	441a      	add	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	68da      	ldr	r2, [r3, #12]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	429a      	cmp	r2, r3
 800a836:	d303      	bcc.n	800a840 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	68d9      	ldr	r1, [r3, #12]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a848:	461a      	mov	r2, r3
 800a84a:	6838      	ldr	r0, [r7, #0]
 800a84c:	f002 f952 	bl	800caf4 <memcpy>
	}
}
 800a850:	bf00      	nop
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a860:	f001 fdb8 	bl	800c3d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a86a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a86c:	e011      	b.n	800a892 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a872:	2b00      	cmp	r3, #0
 800a874:	d012      	beq.n	800a89c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	3324      	adds	r3, #36	; 0x24
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 fe44 	bl	800b508 <xTaskRemoveFromEventList>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d001      	beq.n	800a88a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a886:	f000 ff1b 	bl	800b6c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a88a:	7bfb      	ldrb	r3, [r7, #15]
 800a88c:	3b01      	subs	r3, #1
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a896:	2b00      	cmp	r3, #0
 800a898:	dce9      	bgt.n	800a86e <prvUnlockQueue+0x16>
 800a89a:	e000      	b.n	800a89e <prvUnlockQueue+0x46>
					break;
 800a89c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	22ff      	movs	r2, #255	; 0xff
 800a8a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a8a6:	f001 fdc5 	bl	800c434 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a8aa:	f001 fd93 	bl	800c3d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8b6:	e011      	b.n	800a8dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d012      	beq.n	800a8e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	3310      	adds	r3, #16
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f000 fe1f 	bl	800b508 <xTaskRemoveFromEventList>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a8d0:	f000 fef6 	bl	800b6c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8d4:	7bbb      	ldrb	r3, [r7, #14]
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	dce9      	bgt.n	800a8b8 <prvUnlockQueue+0x60>
 800a8e4:	e000      	b.n	800a8e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a8e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	22ff      	movs	r2, #255	; 0xff
 800a8ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a8f0:	f001 fda0 	bl	800c434 <vPortExitCritical>
}
 800a8f4:	bf00      	nop
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a904:	f001 fd66 	bl	800c3d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d102      	bne.n	800a916 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a910:	2301      	movs	r3, #1
 800a912:	60fb      	str	r3, [r7, #12]
 800a914:	e001      	b.n	800a91a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a916:	2300      	movs	r3, #0
 800a918:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a91a:	f001 fd8b 	bl	800c434 <vPortExitCritical>

	return xReturn;
 800a91e:	68fb      	ldr	r3, [r7, #12]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a930:	f001 fd50 	bl	800c3d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d102      	bne.n	800a946 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a940:	2301      	movs	r3, #1
 800a942:	60fb      	str	r3, [r7, #12]
 800a944:	e001      	b.n	800a94a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a946:	2300      	movs	r3, #0
 800a948:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a94a:	f001 fd73 	bl	800c434 <vPortExitCritical>

	return xReturn;
 800a94e:	68fb      	ldr	r3, [r7, #12]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a962:	2300      	movs	r3, #0
 800a964:	60fb      	str	r3, [r7, #12]
 800a966:	e014      	b.n	800a992 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a968:	4a0f      	ldr	r2, [pc, #60]	; (800a9a8 <vQueueAddToRegistry+0x50>)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10b      	bne.n	800a98c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a974:	490c      	ldr	r1, [pc, #48]	; (800a9a8 <vQueueAddToRegistry+0x50>)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	683a      	ldr	r2, [r7, #0]
 800a97a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a97e:	4a0a      	ldr	r2, [pc, #40]	; (800a9a8 <vQueueAddToRegistry+0x50>)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	00db      	lsls	r3, r3, #3
 800a984:	4413      	add	r3, r2
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a98a:	e006      	b.n	800a99a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	3301      	adds	r3, #1
 800a990:	60fb      	str	r3, [r7, #12]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2b07      	cmp	r3, #7
 800a996:	d9e7      	bls.n	800a968 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a998:	bf00      	nop
 800a99a:	bf00      	nop
 800a99c:	3714      	adds	r7, #20
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	24000980 	.word	0x24000980

0800a9ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a9bc:	f001 fd0a 	bl	800c3d4 <vPortEnterCritical>
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9c6:	b25b      	sxtb	r3, r3
 800a9c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9cc:	d103      	bne.n	800a9d6 <vQueueWaitForMessageRestricted+0x2a>
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9dc:	b25b      	sxtb	r3, r3
 800a9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e2:	d103      	bne.n	800a9ec <vQueueWaitForMessageRestricted+0x40>
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9ec:	f001 fd22 	bl	800c434 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d106      	bne.n	800aa06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	3324      	adds	r3, #36	; 0x24
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	68b9      	ldr	r1, [r7, #8]
 800aa00:	4618      	mov	r0, r3
 800aa02:	f000 fd55 	bl	800b4b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aa06:	6978      	ldr	r0, [r7, #20]
 800aa08:	f7ff ff26 	bl	800a858 <prvUnlockQueue>
	}
 800aa0c:	bf00      	nop
 800aa0e:	3718      	adds	r7, #24
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b08e      	sub	sp, #56	; 0x38
 800aa18:	af04      	add	r7, sp, #16
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
 800aa20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10a      	bne.n	800aa3e <xTaskCreateStatic+0x2a>
	__asm volatile
 800aa28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2c:	f383 8811 	msr	BASEPRI, r3
 800aa30:	f3bf 8f6f 	isb	sy
 800aa34:	f3bf 8f4f 	dsb	sy
 800aa38:	623b      	str	r3, [r7, #32]
}
 800aa3a:	bf00      	nop
 800aa3c:	e7fe      	b.n	800aa3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10a      	bne.n	800aa5a <xTaskCreateStatic+0x46>
	__asm volatile
 800aa44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa48:	f383 8811 	msr	BASEPRI, r3
 800aa4c:	f3bf 8f6f 	isb	sy
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	61fb      	str	r3, [r7, #28]
}
 800aa56:	bf00      	nop
 800aa58:	e7fe      	b.n	800aa58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa5a:	23ac      	movs	r3, #172	; 0xac
 800aa5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	2bac      	cmp	r3, #172	; 0xac
 800aa62:	d00a      	beq.n	800aa7a <xTaskCreateStatic+0x66>
	__asm volatile
 800aa64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	61bb      	str	r3, [r7, #24]
}
 800aa76:	bf00      	nop
 800aa78:	e7fe      	b.n	800aa78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d01e      	beq.n	800aac0 <xTaskCreateStatic+0xac>
 800aa82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d01b      	beq.n	800aac0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	2202      	movs	r2, #2
 800aa96:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	9303      	str	r3, [sp, #12]
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa0:	9302      	str	r3, [sp, #8]
 800aaa2:	f107 0314 	add.w	r3, r7, #20
 800aaa6:	9301      	str	r3, [sp, #4]
 800aaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaaa:	9300      	str	r3, [sp, #0]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	68b9      	ldr	r1, [r7, #8]
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f000 f850 	bl	800ab58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaba:	f000 f8f7 	bl	800acac <prvAddNewTaskToReadyList>
 800aabe:	e001      	b.n	800aac4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aac0:	2300      	movs	r3, #0
 800aac2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aac4:	697b      	ldr	r3, [r7, #20]
	}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3728      	adds	r7, #40	; 0x28
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b08c      	sub	sp, #48	; 0x30
 800aad2:	af04      	add	r7, sp, #16
 800aad4:	60f8      	str	r0, [r7, #12]
 800aad6:	60b9      	str	r1, [r7, #8]
 800aad8:	603b      	str	r3, [r7, #0]
 800aada:	4613      	mov	r3, r2
 800aadc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aade:	88fb      	ldrh	r3, [r7, #6]
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4618      	mov	r0, r3
 800aae4:	f001 fd98 	bl	800c618 <pvPortMalloc>
 800aae8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00e      	beq.n	800ab0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aaf0:	20ac      	movs	r0, #172	; 0xac
 800aaf2:	f001 fd91 	bl	800c618 <pvPortMalloc>
 800aaf6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d003      	beq.n	800ab06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	631a      	str	r2, [r3, #48]	; 0x30
 800ab04:	e005      	b.n	800ab12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab06:	6978      	ldr	r0, [r7, #20]
 800ab08:	f001 fe52 	bl	800c7b0 <vPortFree>
 800ab0c:	e001      	b.n	800ab12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d017      	beq.n	800ab48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab20:	88fa      	ldrh	r2, [r7, #6]
 800ab22:	2300      	movs	r3, #0
 800ab24:	9303      	str	r3, [sp, #12]
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	9302      	str	r3, [sp, #8]
 800ab2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2c:	9301      	str	r3, [sp, #4]
 800ab2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab30:	9300      	str	r3, [sp, #0]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	68b9      	ldr	r1, [r7, #8]
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f000 f80e 	bl	800ab58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab3c:	69f8      	ldr	r0, [r7, #28]
 800ab3e:	f000 f8b5 	bl	800acac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab42:	2301      	movs	r3, #1
 800ab44:	61bb      	str	r3, [r7, #24]
 800ab46:	e002      	b.n	800ab4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab48:	f04f 33ff 	mov.w	r3, #4294967295
 800ab4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab4e:	69bb      	ldr	r3, [r7, #24]
	}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3720      	adds	r7, #32
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b088      	sub	sp, #32
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
 800ab64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	461a      	mov	r2, r3
 800ab70:	21a5      	movs	r1, #165	; 0xa5
 800ab72:	f001 ff3b 	bl	800c9ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab7a:	6879      	ldr	r1, [r7, #4]
 800ab7c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ab80:	440b      	add	r3, r1
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4413      	add	r3, r2
 800ab86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	f023 0307 	bic.w	r3, r3, #7
 800ab8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	f003 0307 	and.w	r3, r3, #7
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00a      	beq.n	800abb0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ab9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9e:	f383 8811 	msr	BASEPRI, r3
 800aba2:	f3bf 8f6f 	isb	sy
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	617b      	str	r3, [r7, #20]
}
 800abac:	bf00      	nop
 800abae:	e7fe      	b.n	800abae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d01f      	beq.n	800abf6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abb6:	2300      	movs	r3, #0
 800abb8:	61fb      	str	r3, [r7, #28]
 800abba:	e012      	b.n	800abe2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800abbc:	68ba      	ldr	r2, [r7, #8]
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	4413      	add	r3, r2
 800abc2:	7819      	ldrb	r1, [r3, #0]
 800abc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	4413      	add	r3, r2
 800abca:	3334      	adds	r3, #52	; 0x34
 800abcc:	460a      	mov	r2, r1
 800abce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800abd0:	68ba      	ldr	r2, [r7, #8]
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	4413      	add	r3, r2
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d006      	beq.n	800abea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	3301      	adds	r3, #1
 800abe0:	61fb      	str	r3, [r7, #28]
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	2b0f      	cmp	r3, #15
 800abe6:	d9e9      	bls.n	800abbc <prvInitialiseNewTask+0x64>
 800abe8:	e000      	b.n	800abec <prvInitialiseNewTask+0x94>
			{
				break;
 800abea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800abec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abee:	2200      	movs	r2, #0
 800abf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abf4:	e003      	b.n	800abfe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	2200      	movs	r2, #0
 800abfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800abfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac00:	2b37      	cmp	r3, #55	; 0x37
 800ac02:	d901      	bls.n	800ac08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac04:	2337      	movs	r3, #55	; 0x37
 800ac06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	2200      	movs	r2, #0
 800ac18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7ff f8be 	bl	8009da0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac26:	3318      	adds	r3, #24
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff f8b9 	bl	8009da0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800ac44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac46:	2200      	movs	r2, #0
 800ac48:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5c:	3358      	adds	r3, #88	; 0x58
 800ac5e:	224c      	movs	r2, #76	; 0x4c
 800ac60:	2100      	movs	r1, #0
 800ac62:	4618      	mov	r0, r3
 800ac64:	f001 fec2 	bl	800c9ec <memset>
 800ac68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6a:	4a0d      	ldr	r2, [pc, #52]	; (800aca0 <prvInitialiseNewTask+0x148>)
 800ac6c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	4a0c      	ldr	r2, [pc, #48]	; (800aca4 <prvInitialiseNewTask+0x14c>)
 800ac72:	661a      	str	r2, [r3, #96]	; 0x60
 800ac74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac76:	4a0c      	ldr	r2, [pc, #48]	; (800aca8 <prvInitialiseNewTask+0x150>)
 800ac78:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	68f9      	ldr	r1, [r7, #12]
 800ac7e:	69b8      	ldr	r0, [r7, #24]
 800ac80:	f001 fa7e 	bl	800c180 <pxPortInitialiseStack>
 800ac84:	4602      	mov	r2, r0
 800ac86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac96:	bf00      	nop
 800ac98:	3720      	adds	r7, #32
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	24004c1c 	.word	0x24004c1c
 800aca4:	24004c84 	.word	0x24004c84
 800aca8:	24004cec 	.word	0x24004cec

0800acac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800acb4:	f001 fb8e 	bl	800c3d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800acb8:	4b2d      	ldr	r3, [pc, #180]	; (800ad70 <prvAddNewTaskToReadyList+0xc4>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	3301      	adds	r3, #1
 800acbe:	4a2c      	ldr	r2, [pc, #176]	; (800ad70 <prvAddNewTaskToReadyList+0xc4>)
 800acc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800acc2:	4b2c      	ldr	r3, [pc, #176]	; (800ad74 <prvAddNewTaskToReadyList+0xc8>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d109      	bne.n	800acde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800acca:	4a2a      	ldr	r2, [pc, #168]	; (800ad74 <prvAddNewTaskToReadyList+0xc8>)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800acd0:	4b27      	ldr	r3, [pc, #156]	; (800ad70 <prvAddNewTaskToReadyList+0xc4>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d110      	bne.n	800acfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800acd8:	f000 fd16 	bl	800b708 <prvInitialiseTaskLists>
 800acdc:	e00d      	b.n	800acfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800acde:	4b26      	ldr	r3, [pc, #152]	; (800ad78 <prvAddNewTaskToReadyList+0xcc>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d109      	bne.n	800acfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ace6:	4b23      	ldr	r3, [pc, #140]	; (800ad74 <prvAddNewTaskToReadyList+0xc8>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d802      	bhi.n	800acfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800acf4:	4a1f      	ldr	r2, [pc, #124]	; (800ad74 <prvAddNewTaskToReadyList+0xc8>)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800acfa:	4b20      	ldr	r3, [pc, #128]	; (800ad7c <prvAddNewTaskToReadyList+0xd0>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	3301      	adds	r3, #1
 800ad00:	4a1e      	ldr	r2, [pc, #120]	; (800ad7c <prvAddNewTaskToReadyList+0xd0>)
 800ad02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad04:	4b1d      	ldr	r3, [pc, #116]	; (800ad7c <prvAddNewTaskToReadyList+0xd0>)
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad10:	4b1b      	ldr	r3, [pc, #108]	; (800ad80 <prvAddNewTaskToReadyList+0xd4>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d903      	bls.n	800ad20 <prvAddNewTaskToReadyList+0x74>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1c:	4a18      	ldr	r2, [pc, #96]	; (800ad80 <prvAddNewTaskToReadyList+0xd4>)
 800ad1e:	6013      	str	r3, [r2, #0]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad24:	4613      	mov	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4413      	add	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4a15      	ldr	r2, [pc, #84]	; (800ad84 <prvAddNewTaskToReadyList+0xd8>)
 800ad2e:	441a      	add	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3304      	adds	r3, #4
 800ad34:	4619      	mov	r1, r3
 800ad36:	4610      	mov	r0, r2
 800ad38:	f7ff f83f 	bl	8009dba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad3c:	f001 fb7a 	bl	800c434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad40:	4b0d      	ldr	r3, [pc, #52]	; (800ad78 <prvAddNewTaskToReadyList+0xcc>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00e      	beq.n	800ad66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad48:	4b0a      	ldr	r3, [pc, #40]	; (800ad74 <prvAddNewTaskToReadyList+0xc8>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d207      	bcs.n	800ad66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad56:	4b0c      	ldr	r3, [pc, #48]	; (800ad88 <prvAddNewTaskToReadyList+0xdc>)
 800ad58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad5c:	601a      	str	r2, [r3, #0]
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad66:	bf00      	nop
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	24000e94 	.word	0x24000e94
 800ad74:	240009c0 	.word	0x240009c0
 800ad78:	24000ea0 	.word	0x24000ea0
 800ad7c:	24000eb0 	.word	0x24000eb0
 800ad80:	24000e9c 	.word	0x24000e9c
 800ad84:	240009c4 	.word	0x240009c4
 800ad88:	e000ed04 	.word	0xe000ed04

0800ad8c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ad94:	f001 fb1e 	bl	800c3d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d102      	bne.n	800ada4 <vTaskSuspend+0x18>
 800ad9e:	4b30      	ldr	r3, [pc, #192]	; (800ae60 <vTaskSuspend+0xd4>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	e000      	b.n	800ada6 <vTaskSuspend+0x1a>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	3304      	adds	r3, #4
 800adac:	4618      	mov	r0, r3
 800adae:	f7ff f861 	bl	8009e74 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d004      	beq.n	800adc4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	3318      	adds	r3, #24
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7ff f858 	bl	8009e74 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	3304      	adds	r3, #4
 800adc8:	4619      	mov	r1, r3
 800adca:	4826      	ldr	r0, [pc, #152]	; (800ae64 <vTaskSuspend+0xd8>)
 800adcc:	f7fe fff5 	bl	8009dba <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800add6:	b2db      	uxtb	r3, r3
 800add8:	2b01      	cmp	r3, #1
 800adda:	d103      	bne.n	800ade4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800ade4:	f001 fb26 	bl	800c434 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800ade8:	4b1f      	ldr	r3, [pc, #124]	; (800ae68 <vTaskSuspend+0xdc>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d005      	beq.n	800adfc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800adf0:	f001 faf0 	bl	800c3d4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800adf4:	f000 fd2a 	bl	800b84c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800adf8:	f001 fb1c 	bl	800c434 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800adfc:	4b18      	ldr	r3, [pc, #96]	; (800ae60 <vTaskSuspend+0xd4>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d127      	bne.n	800ae56 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800ae06:	4b18      	ldr	r3, [pc, #96]	; (800ae68 <vTaskSuspend+0xdc>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d017      	beq.n	800ae3e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800ae0e:	4b17      	ldr	r3, [pc, #92]	; (800ae6c <vTaskSuspend+0xe0>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00a      	beq.n	800ae2c <vTaskSuspend+0xa0>
	__asm volatile
 800ae16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1a:	f383 8811 	msr	BASEPRI, r3
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	f3bf 8f4f 	dsb	sy
 800ae26:	60bb      	str	r3, [r7, #8]
}
 800ae28:	bf00      	nop
 800ae2a:	e7fe      	b.n	800ae2a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800ae2c:	4b10      	ldr	r3, [pc, #64]	; (800ae70 <vTaskSuspend+0xe4>)
 800ae2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	f3bf 8f4f 	dsb	sy
 800ae38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae3c:	e00b      	b.n	800ae56 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800ae3e:	4b09      	ldr	r3, [pc, #36]	; (800ae64 <vTaskSuspend+0xd8>)
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	4b0c      	ldr	r3, [pc, #48]	; (800ae74 <vTaskSuspend+0xe8>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d103      	bne.n	800ae52 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800ae4a:	4b05      	ldr	r3, [pc, #20]	; (800ae60 <vTaskSuspend+0xd4>)
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	601a      	str	r2, [r3, #0]
	}
 800ae50:	e001      	b.n	800ae56 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800ae52:	f000 fa89 	bl	800b368 <vTaskSwitchContext>
	}
 800ae56:	bf00      	nop
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	240009c0 	.word	0x240009c0
 800ae64:	24000e80 	.word	0x24000e80
 800ae68:	24000ea0 	.word	0x24000ea0
 800ae6c:	24000ebc 	.word	0x24000ebc
 800ae70:	e000ed04 	.word	0xe000ed04
 800ae74:	24000e94 	.word	0x24000e94

0800ae78 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ae78:	b480      	push	{r7}
 800ae7a:	b087      	sub	sp, #28
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ae80:	2300      	movs	r3, #0
 800ae82:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d10a      	bne.n	800aea4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800ae8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae92:	f383 8811 	msr	BASEPRI, r3
 800ae96:	f3bf 8f6f 	isb	sy
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	60fb      	str	r3, [r7, #12]
}
 800aea0:	bf00      	nop
 800aea2:	e7fe      	b.n	800aea2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	695b      	ldr	r3, [r3, #20]
 800aea8:	4a0a      	ldr	r2, [pc, #40]	; (800aed4 <prvTaskIsTaskSuspended+0x5c>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d10a      	bne.n	800aec4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb2:	4a09      	ldr	r2, [pc, #36]	; (800aed8 <prvTaskIsTaskSuspended+0x60>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d005      	beq.n	800aec4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d101      	bne.n	800aec4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800aec0:	2301      	movs	r3, #1
 800aec2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aec4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800aec6:	4618      	mov	r0, r3
 800aec8:	371c      	adds	r7, #28
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	24000e80 	.word	0x24000e80
 800aed8:	24000e54 	.word	0x24000e54

0800aedc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10a      	bne.n	800af04 <vTaskResume+0x28>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	60bb      	str	r3, [r7, #8]
}
 800af00:	bf00      	nop
 800af02:	e7fe      	b.n	800af02 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800af04:	4b20      	ldr	r3, [pc, #128]	; (800af88 <vTaskResume+0xac>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d038      	beq.n	800af80 <vTaskResume+0xa4>
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d035      	beq.n	800af80 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800af14:	f001 fa5e 	bl	800c3d4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f7ff ffad 	bl	800ae78 <prvTaskIsTaskSuspended>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d02b      	beq.n	800af7c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	3304      	adds	r3, #4
 800af28:	4618      	mov	r0, r3
 800af2a:	f7fe ffa3 	bl	8009e74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af32:	4b16      	ldr	r3, [pc, #88]	; (800af8c <vTaskResume+0xb0>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	429a      	cmp	r2, r3
 800af38:	d903      	bls.n	800af42 <vTaskResume+0x66>
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3e:	4a13      	ldr	r2, [pc, #76]	; (800af8c <vTaskResume+0xb0>)
 800af40:	6013      	str	r3, [r2, #0]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af46:	4613      	mov	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4413      	add	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4a10      	ldr	r2, [pc, #64]	; (800af90 <vTaskResume+0xb4>)
 800af50:	441a      	add	r2, r3
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	3304      	adds	r3, #4
 800af56:	4619      	mov	r1, r3
 800af58:	4610      	mov	r0, r2
 800af5a:	f7fe ff2e 	bl	8009dba <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af62:	4b09      	ldr	r3, [pc, #36]	; (800af88 <vTaskResume+0xac>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af68:	429a      	cmp	r2, r3
 800af6a:	d307      	bcc.n	800af7c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800af6c:	4b09      	ldr	r3, [pc, #36]	; (800af94 <vTaskResume+0xb8>)
 800af6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800af7c:	f001 fa5a 	bl	800c434 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af80:	bf00      	nop
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	240009c0 	.word	0x240009c0
 800af8c:	24000e9c 	.word	0x24000e9c
 800af90:	240009c4 	.word	0x240009c4
 800af94:	e000ed04 	.word	0xe000ed04

0800af98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b08a      	sub	sp, #40	; 0x28
 800af9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af9e:	2300      	movs	r3, #0
 800afa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800afa6:	463a      	mov	r2, r7
 800afa8:	1d39      	adds	r1, r7, #4
 800afaa:	f107 0308 	add.w	r3, r7, #8
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fe fea2 	bl	8009cf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	9202      	str	r2, [sp, #8]
 800afbc:	9301      	str	r3, [sp, #4]
 800afbe:	2300      	movs	r3, #0
 800afc0:	9300      	str	r3, [sp, #0]
 800afc2:	2300      	movs	r3, #0
 800afc4:	460a      	mov	r2, r1
 800afc6:	4925      	ldr	r1, [pc, #148]	; (800b05c <vTaskStartScheduler+0xc4>)
 800afc8:	4825      	ldr	r0, [pc, #148]	; (800b060 <vTaskStartScheduler+0xc8>)
 800afca:	f7ff fd23 	bl	800aa14 <xTaskCreateStatic>
 800afce:	4603      	mov	r3, r0
 800afd0:	4a24      	ldr	r2, [pc, #144]	; (800b064 <vTaskStartScheduler+0xcc>)
 800afd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800afd4:	4b23      	ldr	r3, [pc, #140]	; (800b064 <vTaskStartScheduler+0xcc>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800afdc:	2301      	movs	r3, #1
 800afde:	617b      	str	r3, [r7, #20]
 800afe0:	e001      	b.n	800afe6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800afe2:	2300      	movs	r3, #0
 800afe4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d102      	bne.n	800aff2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800afec:	f000 fd7a 	bl	800bae4 <xTimerCreateTimerTask>
 800aff0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d11d      	bne.n	800b034 <vTaskStartScheduler+0x9c>
	__asm volatile
 800aff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affc:	f383 8811 	msr	BASEPRI, r3
 800b000:	f3bf 8f6f 	isb	sy
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	613b      	str	r3, [r7, #16]
}
 800b00a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b00c:	4b16      	ldr	r3, [pc, #88]	; (800b068 <vTaskStartScheduler+0xd0>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	3358      	adds	r3, #88	; 0x58
 800b012:	4a16      	ldr	r2, [pc, #88]	; (800b06c <vTaskStartScheduler+0xd4>)
 800b014:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b016:	4b16      	ldr	r3, [pc, #88]	; (800b070 <vTaskStartScheduler+0xd8>)
 800b018:	f04f 32ff 	mov.w	r2, #4294967295
 800b01c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b01e:	4b15      	ldr	r3, [pc, #84]	; (800b074 <vTaskStartScheduler+0xdc>)
 800b020:	2201      	movs	r2, #1
 800b022:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b024:	4b14      	ldr	r3, [pc, #80]	; (800b078 <vTaskStartScheduler+0xe0>)
 800b026:	2200      	movs	r2, #0
 800b028:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b02a:	f7f5 fac7 	bl	80005bc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b02e:	f001 f92f 	bl	800c290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b032:	e00e      	b.n	800b052 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b03a:	d10a      	bne.n	800b052 <vTaskStartScheduler+0xba>
	__asm volatile
 800b03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b040:	f383 8811 	msr	BASEPRI, r3
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	60fb      	str	r3, [r7, #12]
}
 800b04e:	bf00      	nop
 800b050:	e7fe      	b.n	800b050 <vTaskStartScheduler+0xb8>
}
 800b052:	bf00      	nop
 800b054:	3718      	adds	r7, #24
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	0800cc0c 	.word	0x0800cc0c
 800b060:	0800b6d9 	.word	0x0800b6d9
 800b064:	24000eb8 	.word	0x24000eb8
 800b068:	240009c0 	.word	0x240009c0
 800b06c:	24000060 	.word	0x24000060
 800b070:	24000eb4 	.word	0x24000eb4
 800b074:	24000ea0 	.word	0x24000ea0
 800b078:	24000e98 	.word	0x24000e98

0800b07c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b07c:	b480      	push	{r7}
 800b07e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b080:	4b04      	ldr	r3, [pc, #16]	; (800b094 <vTaskSuspendAll+0x18>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	3301      	adds	r3, #1
 800b086:	4a03      	ldr	r2, [pc, #12]	; (800b094 <vTaskSuspendAll+0x18>)
 800b088:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b08a:	bf00      	nop
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr
 800b094:	24000ebc 	.word	0x24000ebc

0800b098 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b0a6:	4b42      	ldr	r3, [pc, #264]	; (800b1b0 <xTaskResumeAll+0x118>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d10a      	bne.n	800b0c4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b2:	f383 8811 	msr	BASEPRI, r3
 800b0b6:	f3bf 8f6f 	isb	sy
 800b0ba:	f3bf 8f4f 	dsb	sy
 800b0be:	603b      	str	r3, [r7, #0]
}
 800b0c0:	bf00      	nop
 800b0c2:	e7fe      	b.n	800b0c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b0c4:	f001 f986 	bl	800c3d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b0c8:	4b39      	ldr	r3, [pc, #228]	; (800b1b0 <xTaskResumeAll+0x118>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	4a38      	ldr	r2, [pc, #224]	; (800b1b0 <xTaskResumeAll+0x118>)
 800b0d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0d2:	4b37      	ldr	r3, [pc, #220]	; (800b1b0 <xTaskResumeAll+0x118>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d162      	bne.n	800b1a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b0da:	4b36      	ldr	r3, [pc, #216]	; (800b1b4 <xTaskResumeAll+0x11c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d05e      	beq.n	800b1a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0e2:	e02f      	b.n	800b144 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0e4:	4b34      	ldr	r3, [pc, #208]	; (800b1b8 <xTaskResumeAll+0x120>)
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	3318      	adds	r3, #24
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fe febf 	bl	8009e74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	3304      	adds	r3, #4
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fe feba 	bl	8009e74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b104:	4b2d      	ldr	r3, [pc, #180]	; (800b1bc <xTaskResumeAll+0x124>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d903      	bls.n	800b114 <xTaskResumeAll+0x7c>
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b110:	4a2a      	ldr	r2, [pc, #168]	; (800b1bc <xTaskResumeAll+0x124>)
 800b112:	6013      	str	r3, [r2, #0]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b118:	4613      	mov	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4413      	add	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4a27      	ldr	r2, [pc, #156]	; (800b1c0 <xTaskResumeAll+0x128>)
 800b122:	441a      	add	r2, r3
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	3304      	adds	r3, #4
 800b128:	4619      	mov	r1, r3
 800b12a:	4610      	mov	r0, r2
 800b12c:	f7fe fe45 	bl	8009dba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b134:	4b23      	ldr	r3, [pc, #140]	; (800b1c4 <xTaskResumeAll+0x12c>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d302      	bcc.n	800b144 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b13e:	4b22      	ldr	r3, [pc, #136]	; (800b1c8 <xTaskResumeAll+0x130>)
 800b140:	2201      	movs	r2, #1
 800b142:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b144:	4b1c      	ldr	r3, [pc, #112]	; (800b1b8 <xTaskResumeAll+0x120>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1cb      	bne.n	800b0e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b152:	f000 fb7b 	bl	800b84c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b156:	4b1d      	ldr	r3, [pc, #116]	; (800b1cc <xTaskResumeAll+0x134>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d010      	beq.n	800b184 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b162:	f000 f847 	bl	800b1f4 <xTaskIncrementTick>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b16c:	4b16      	ldr	r3, [pc, #88]	; (800b1c8 <xTaskResumeAll+0x130>)
 800b16e:	2201      	movs	r2, #1
 800b170:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3b01      	subs	r3, #1
 800b176:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1f1      	bne.n	800b162 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b17e:	4b13      	ldr	r3, [pc, #76]	; (800b1cc <xTaskResumeAll+0x134>)
 800b180:	2200      	movs	r2, #0
 800b182:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b184:	4b10      	ldr	r3, [pc, #64]	; (800b1c8 <xTaskResumeAll+0x130>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d009      	beq.n	800b1a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b18c:	2301      	movs	r3, #1
 800b18e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b190:	4b0f      	ldr	r3, [pc, #60]	; (800b1d0 <xTaskResumeAll+0x138>)
 800b192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b196:	601a      	str	r2, [r3, #0]
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1a0:	f001 f948 	bl	800c434 <vPortExitCritical>

	return xAlreadyYielded;
 800b1a4:	68bb      	ldr	r3, [r7, #8]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	24000ebc 	.word	0x24000ebc
 800b1b4:	24000e94 	.word	0x24000e94
 800b1b8:	24000e54 	.word	0x24000e54
 800b1bc:	24000e9c 	.word	0x24000e9c
 800b1c0:	240009c4 	.word	0x240009c4
 800b1c4:	240009c0 	.word	0x240009c0
 800b1c8:	24000ea8 	.word	0x24000ea8
 800b1cc:	24000ea4 	.word	0x24000ea4
 800b1d0:	e000ed04 	.word	0xe000ed04

0800b1d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b1da:	4b05      	ldr	r3, [pc, #20]	; (800b1f0 <xTaskGetTickCount+0x1c>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b1e0:	687b      	ldr	r3, [r7, #4]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	370c      	adds	r7, #12
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	24000e98 	.word	0x24000e98

0800b1f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1fe:	4b4f      	ldr	r3, [pc, #316]	; (800b33c <xTaskIncrementTick+0x148>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	f040 808f 	bne.w	800b326 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b208:	4b4d      	ldr	r3, [pc, #308]	; (800b340 <xTaskIncrementTick+0x14c>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	3301      	adds	r3, #1
 800b20e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b210:	4a4b      	ldr	r2, [pc, #300]	; (800b340 <xTaskIncrementTick+0x14c>)
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d120      	bne.n	800b25e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b21c:	4b49      	ldr	r3, [pc, #292]	; (800b344 <xTaskIncrementTick+0x150>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00a      	beq.n	800b23c <xTaskIncrementTick+0x48>
	__asm volatile
 800b226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22a:	f383 8811 	msr	BASEPRI, r3
 800b22e:	f3bf 8f6f 	isb	sy
 800b232:	f3bf 8f4f 	dsb	sy
 800b236:	603b      	str	r3, [r7, #0]
}
 800b238:	bf00      	nop
 800b23a:	e7fe      	b.n	800b23a <xTaskIncrementTick+0x46>
 800b23c:	4b41      	ldr	r3, [pc, #260]	; (800b344 <xTaskIncrementTick+0x150>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	60fb      	str	r3, [r7, #12]
 800b242:	4b41      	ldr	r3, [pc, #260]	; (800b348 <xTaskIncrementTick+0x154>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a3f      	ldr	r2, [pc, #252]	; (800b344 <xTaskIncrementTick+0x150>)
 800b248:	6013      	str	r3, [r2, #0]
 800b24a:	4a3f      	ldr	r2, [pc, #252]	; (800b348 <xTaskIncrementTick+0x154>)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6013      	str	r3, [r2, #0]
 800b250:	4b3e      	ldr	r3, [pc, #248]	; (800b34c <xTaskIncrementTick+0x158>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3301      	adds	r3, #1
 800b256:	4a3d      	ldr	r2, [pc, #244]	; (800b34c <xTaskIncrementTick+0x158>)
 800b258:	6013      	str	r3, [r2, #0]
 800b25a:	f000 faf7 	bl	800b84c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b25e:	4b3c      	ldr	r3, [pc, #240]	; (800b350 <xTaskIncrementTick+0x15c>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	693a      	ldr	r2, [r7, #16]
 800b264:	429a      	cmp	r2, r3
 800b266:	d349      	bcc.n	800b2fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b268:	4b36      	ldr	r3, [pc, #216]	; (800b344 <xTaskIncrementTick+0x150>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d104      	bne.n	800b27c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b272:	4b37      	ldr	r3, [pc, #220]	; (800b350 <xTaskIncrementTick+0x15c>)
 800b274:	f04f 32ff 	mov.w	r2, #4294967295
 800b278:	601a      	str	r2, [r3, #0]
					break;
 800b27a:	e03f      	b.n	800b2fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b27c:	4b31      	ldr	r3, [pc, #196]	; (800b344 <xTaskIncrementTick+0x150>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b28c:	693a      	ldr	r2, [r7, #16]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	429a      	cmp	r2, r3
 800b292:	d203      	bcs.n	800b29c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b294:	4a2e      	ldr	r2, [pc, #184]	; (800b350 <xTaskIncrementTick+0x15c>)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b29a:	e02f      	b.n	800b2fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	3304      	adds	r3, #4
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7fe fde7 	bl	8009e74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d004      	beq.n	800b2b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	3318      	adds	r3, #24
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7fe fdde 	bl	8009e74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2bc:	4b25      	ldr	r3, [pc, #148]	; (800b354 <xTaskIncrementTick+0x160>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d903      	bls.n	800b2cc <xTaskIncrementTick+0xd8>
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c8:	4a22      	ldr	r2, [pc, #136]	; (800b354 <xTaskIncrementTick+0x160>)
 800b2ca:	6013      	str	r3, [r2, #0]
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	4413      	add	r3, r2
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	4a1f      	ldr	r2, [pc, #124]	; (800b358 <xTaskIncrementTick+0x164>)
 800b2da:	441a      	add	r2, r3
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	3304      	adds	r3, #4
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	4610      	mov	r0, r2
 800b2e4:	f7fe fd69 	bl	8009dba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ec:	4b1b      	ldr	r3, [pc, #108]	; (800b35c <xTaskIncrementTick+0x168>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d3b8      	bcc.n	800b268 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2fa:	e7b5      	b.n	800b268 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2fc:	4b17      	ldr	r3, [pc, #92]	; (800b35c <xTaskIncrementTick+0x168>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b302:	4915      	ldr	r1, [pc, #84]	; (800b358 <xTaskIncrementTick+0x164>)
 800b304:	4613      	mov	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	440b      	add	r3, r1
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d901      	bls.n	800b318 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b314:	2301      	movs	r3, #1
 800b316:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b318:	4b11      	ldr	r3, [pc, #68]	; (800b360 <xTaskIncrementTick+0x16c>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d007      	beq.n	800b330 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b320:	2301      	movs	r3, #1
 800b322:	617b      	str	r3, [r7, #20]
 800b324:	e004      	b.n	800b330 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b326:	4b0f      	ldr	r3, [pc, #60]	; (800b364 <xTaskIncrementTick+0x170>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3301      	adds	r3, #1
 800b32c:	4a0d      	ldr	r2, [pc, #52]	; (800b364 <xTaskIncrementTick+0x170>)
 800b32e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b330:	697b      	ldr	r3, [r7, #20]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3718      	adds	r7, #24
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	24000ebc 	.word	0x24000ebc
 800b340:	24000e98 	.word	0x24000e98
 800b344:	24000e4c 	.word	0x24000e4c
 800b348:	24000e50 	.word	0x24000e50
 800b34c:	24000eac 	.word	0x24000eac
 800b350:	24000eb4 	.word	0x24000eb4
 800b354:	24000e9c 	.word	0x24000e9c
 800b358:	240009c4 	.word	0x240009c4
 800b35c:	240009c0 	.word	0x240009c0
 800b360:	24000ea8 	.word	0x24000ea8
 800b364:	24000ea4 	.word	0x24000ea4

0800b368 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b36e:	4b36      	ldr	r3, [pc, #216]	; (800b448 <vTaskSwitchContext+0xe0>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d003      	beq.n	800b37e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b376:	4b35      	ldr	r3, [pc, #212]	; (800b44c <vTaskSwitchContext+0xe4>)
 800b378:	2201      	movs	r2, #1
 800b37a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b37c:	e05f      	b.n	800b43e <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800b37e:	4b33      	ldr	r3, [pc, #204]	; (800b44c <vTaskSwitchContext+0xe4>)
 800b380:	2200      	movs	r2, #0
 800b382:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b384:	f7f5 f921 	bl	80005ca <getRunTimeCounterValue>
 800b388:	4603      	mov	r3, r0
 800b38a:	4a31      	ldr	r2, [pc, #196]	; (800b450 <vTaskSwitchContext+0xe8>)
 800b38c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b38e:	4b30      	ldr	r3, [pc, #192]	; (800b450 <vTaskSwitchContext+0xe8>)
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	4b30      	ldr	r3, [pc, #192]	; (800b454 <vTaskSwitchContext+0xec>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	429a      	cmp	r2, r3
 800b398:	d909      	bls.n	800b3ae <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b39a:	4b2f      	ldr	r3, [pc, #188]	; (800b458 <vTaskSwitchContext+0xf0>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b3a0:	4a2b      	ldr	r2, [pc, #172]	; (800b450 <vTaskSwitchContext+0xe8>)
 800b3a2:	6810      	ldr	r0, [r2, #0]
 800b3a4:	4a2b      	ldr	r2, [pc, #172]	; (800b454 <vTaskSwitchContext+0xec>)
 800b3a6:	6812      	ldr	r2, [r2, #0]
 800b3a8:	1a82      	subs	r2, r0, r2
 800b3aa:	440a      	add	r2, r1
 800b3ac:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b3ae:	4b28      	ldr	r3, [pc, #160]	; (800b450 <vTaskSwitchContext+0xe8>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a28      	ldr	r2, [pc, #160]	; (800b454 <vTaskSwitchContext+0xec>)
 800b3b4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3b6:	4b29      	ldr	r3, [pc, #164]	; (800b45c <vTaskSwitchContext+0xf4>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	60fb      	str	r3, [r7, #12]
 800b3bc:	e010      	b.n	800b3e0 <vTaskSwitchContext+0x78>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d10a      	bne.n	800b3da <vTaskSwitchContext+0x72>
	__asm volatile
 800b3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c8:	f383 8811 	msr	BASEPRI, r3
 800b3cc:	f3bf 8f6f 	isb	sy
 800b3d0:	f3bf 8f4f 	dsb	sy
 800b3d4:	607b      	str	r3, [r7, #4]
}
 800b3d6:	bf00      	nop
 800b3d8:	e7fe      	b.n	800b3d8 <vTaskSwitchContext+0x70>
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	60fb      	str	r3, [r7, #12]
 800b3e0:	491f      	ldr	r1, [pc, #124]	; (800b460 <vTaskSwitchContext+0xf8>)
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	4413      	add	r3, r2
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	440b      	add	r3, r1
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d0e4      	beq.n	800b3be <vTaskSwitchContext+0x56>
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	4413      	add	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	4a18      	ldr	r2, [pc, #96]	; (800b460 <vTaskSwitchContext+0xf8>)
 800b400:	4413      	add	r3, r2
 800b402:	60bb      	str	r3, [r7, #8]
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	685a      	ldr	r2, [r3, #4]
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	605a      	str	r2, [r3, #4]
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	685a      	ldr	r2, [r3, #4]
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	3308      	adds	r3, #8
 800b416:	429a      	cmp	r2, r3
 800b418:	d104      	bne.n	800b424 <vTaskSwitchContext+0xbc>
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	685a      	ldr	r2, [r3, #4]
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	605a      	str	r2, [r3, #4]
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	4a0b      	ldr	r2, [pc, #44]	; (800b458 <vTaskSwitchContext+0xf0>)
 800b42c:	6013      	str	r3, [r2, #0]
 800b42e:	4a0b      	ldr	r2, [pc, #44]	; (800b45c <vTaskSwitchContext+0xf4>)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b434:	4b08      	ldr	r3, [pc, #32]	; (800b458 <vTaskSwitchContext+0xf0>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	3358      	adds	r3, #88	; 0x58
 800b43a:	4a0a      	ldr	r2, [pc, #40]	; (800b464 <vTaskSwitchContext+0xfc>)
 800b43c:	6013      	str	r3, [r2, #0]
}
 800b43e:	bf00      	nop
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	24000ebc 	.word	0x24000ebc
 800b44c:	24000ea8 	.word	0x24000ea8
 800b450:	24000ec4 	.word	0x24000ec4
 800b454:	24000ec0 	.word	0x24000ec0
 800b458:	240009c0 	.word	0x240009c0
 800b45c:	24000e9c 	.word	0x24000e9c
 800b460:	240009c4 	.word	0x240009c4
 800b464:	24000060 	.word	0x24000060

0800b468 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10a      	bne.n	800b48e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	60fb      	str	r3, [r7, #12]
}
 800b48a:	bf00      	nop
 800b48c:	e7fe      	b.n	800b48c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b48e:	4b07      	ldr	r3, [pc, #28]	; (800b4ac <vTaskPlaceOnEventList+0x44>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3318      	adds	r3, #24
 800b494:	4619      	mov	r1, r3
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7fe fcb3 	bl	8009e02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b49c:	2101      	movs	r1, #1
 800b49e:	6838      	ldr	r0, [r7, #0]
 800b4a0:	f000 facc 	bl	800ba3c <prvAddCurrentTaskToDelayedList>
}
 800b4a4:	bf00      	nop
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	240009c0 	.word	0x240009c0

0800b4b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b086      	sub	sp, #24
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10a      	bne.n	800b4d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c6:	f383 8811 	msr	BASEPRI, r3
 800b4ca:	f3bf 8f6f 	isb	sy
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	617b      	str	r3, [r7, #20]
}
 800b4d4:	bf00      	nop
 800b4d6:	e7fe      	b.n	800b4d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4d8:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <vTaskPlaceOnEventListRestricted+0x54>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	3318      	adds	r3, #24
 800b4de:	4619      	mov	r1, r3
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f7fe fc6a 	bl	8009dba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d002      	beq.n	800b4f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b4f2:	6879      	ldr	r1, [r7, #4]
 800b4f4:	68b8      	ldr	r0, [r7, #8]
 800b4f6:	f000 faa1 	bl	800ba3c <prvAddCurrentTaskToDelayedList>
	}
 800b4fa:	bf00      	nop
 800b4fc:	3718      	adds	r7, #24
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	240009c0 	.word	0x240009c0

0800b508 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d10a      	bne.n	800b534 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	60fb      	str	r3, [r7, #12]
}
 800b530:	bf00      	nop
 800b532:	e7fe      	b.n	800b532 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	3318      	adds	r3, #24
 800b538:	4618      	mov	r0, r3
 800b53a:	f7fe fc9b 	bl	8009e74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b53e:	4b1e      	ldr	r3, [pc, #120]	; (800b5b8 <xTaskRemoveFromEventList+0xb0>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d11d      	bne.n	800b582 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	3304      	adds	r3, #4
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fe fc92 	bl	8009e74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b554:	4b19      	ldr	r3, [pc, #100]	; (800b5bc <xTaskRemoveFromEventList+0xb4>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d903      	bls.n	800b564 <xTaskRemoveFromEventList+0x5c>
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b560:	4a16      	ldr	r2, [pc, #88]	; (800b5bc <xTaskRemoveFromEventList+0xb4>)
 800b562:	6013      	str	r3, [r2, #0]
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b568:	4613      	mov	r3, r2
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	4413      	add	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4a13      	ldr	r2, [pc, #76]	; (800b5c0 <xTaskRemoveFromEventList+0xb8>)
 800b572:	441a      	add	r2, r3
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	3304      	adds	r3, #4
 800b578:	4619      	mov	r1, r3
 800b57a:	4610      	mov	r0, r2
 800b57c:	f7fe fc1d 	bl	8009dba <vListInsertEnd>
 800b580:	e005      	b.n	800b58e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	3318      	adds	r3, #24
 800b586:	4619      	mov	r1, r3
 800b588:	480e      	ldr	r0, [pc, #56]	; (800b5c4 <xTaskRemoveFromEventList+0xbc>)
 800b58a:	f7fe fc16 	bl	8009dba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b592:	4b0d      	ldr	r3, [pc, #52]	; (800b5c8 <xTaskRemoveFromEventList+0xc0>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b598:	429a      	cmp	r2, r3
 800b59a:	d905      	bls.n	800b5a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b59c:	2301      	movs	r3, #1
 800b59e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b5a0:	4b0a      	ldr	r3, [pc, #40]	; (800b5cc <xTaskRemoveFromEventList+0xc4>)
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	601a      	str	r2, [r3, #0]
 800b5a6:	e001      	b.n	800b5ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b5ac:	697b      	ldr	r3, [r7, #20]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3718      	adds	r7, #24
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	24000ebc 	.word	0x24000ebc
 800b5bc:	24000e9c 	.word	0x24000e9c
 800b5c0:	240009c4 	.word	0x240009c4
 800b5c4:	24000e54 	.word	0x24000e54
 800b5c8:	240009c0 	.word	0x240009c0
 800b5cc:	24000ea8 	.word	0x24000ea8

0800b5d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b5d8:	4b06      	ldr	r3, [pc, #24]	; (800b5f4 <vTaskInternalSetTimeOutState+0x24>)
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b5e0:	4b05      	ldr	r3, [pc, #20]	; (800b5f8 <vTaskInternalSetTimeOutState+0x28>)
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	605a      	str	r2, [r3, #4]
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr
 800b5f4:	24000eac 	.word	0x24000eac
 800b5f8:	24000e98 	.word	0x24000e98

0800b5fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b088      	sub	sp, #32
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10a      	bne.n	800b622 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b610:	f383 8811 	msr	BASEPRI, r3
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	613b      	str	r3, [r7, #16]
}
 800b61e:	bf00      	nop
 800b620:	e7fe      	b.n	800b620 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d10a      	bne.n	800b63e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62c:	f383 8811 	msr	BASEPRI, r3
 800b630:	f3bf 8f6f 	isb	sy
 800b634:	f3bf 8f4f 	dsb	sy
 800b638:	60fb      	str	r3, [r7, #12]
}
 800b63a:	bf00      	nop
 800b63c:	e7fe      	b.n	800b63c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b63e:	f000 fec9 	bl	800c3d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b642:	4b1d      	ldr	r3, [pc, #116]	; (800b6b8 <xTaskCheckForTimeOut+0xbc>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	69ba      	ldr	r2, [r7, #24]
 800b64e:	1ad3      	subs	r3, r2, r3
 800b650:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b65a:	d102      	bne.n	800b662 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b65c:	2300      	movs	r3, #0
 800b65e:	61fb      	str	r3, [r7, #28]
 800b660:	e023      	b.n	800b6aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	4b15      	ldr	r3, [pc, #84]	; (800b6bc <xTaskCheckForTimeOut+0xc0>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d007      	beq.n	800b67e <xTaskCheckForTimeOut+0x82>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	69ba      	ldr	r2, [r7, #24]
 800b674:	429a      	cmp	r2, r3
 800b676:	d302      	bcc.n	800b67e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b678:	2301      	movs	r3, #1
 800b67a:	61fb      	str	r3, [r7, #28]
 800b67c:	e015      	b.n	800b6aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	429a      	cmp	r2, r3
 800b686:	d20b      	bcs.n	800b6a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	1ad2      	subs	r2, r2, r3
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f7ff ff9b 	bl	800b5d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b69a:	2300      	movs	r3, #0
 800b69c:	61fb      	str	r3, [r7, #28]
 800b69e:	e004      	b.n	800b6aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b6aa:	f000 fec3 	bl	800c434 <vPortExitCritical>

	return xReturn;
 800b6ae:	69fb      	ldr	r3, [r7, #28]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3720      	adds	r7, #32
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	24000e98 	.word	0x24000e98
 800b6bc:	24000eac 	.word	0x24000eac

0800b6c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b6c4:	4b03      	ldr	r3, [pc, #12]	; (800b6d4 <vTaskMissedYield+0x14>)
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	601a      	str	r2, [r3, #0]
}
 800b6ca:	bf00      	nop
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr
 800b6d4:	24000ea8 	.word	0x24000ea8

0800b6d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b6e0:	f000 f852 	bl	800b788 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b6e4:	4b06      	ldr	r3, [pc, #24]	; (800b700 <prvIdleTask+0x28>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d9f9      	bls.n	800b6e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b6ec:	4b05      	ldr	r3, [pc, #20]	; (800b704 <prvIdleTask+0x2c>)
 800b6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6f2:	601a      	str	r2, [r3, #0]
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b6fc:	e7f0      	b.n	800b6e0 <prvIdleTask+0x8>
 800b6fe:	bf00      	nop
 800b700:	240009c4 	.word	0x240009c4
 800b704:	e000ed04 	.word	0xe000ed04

0800b708 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b70e:	2300      	movs	r3, #0
 800b710:	607b      	str	r3, [r7, #4]
 800b712:	e00c      	b.n	800b72e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	4613      	mov	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	4413      	add	r3, r2
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	4a12      	ldr	r2, [pc, #72]	; (800b768 <prvInitialiseTaskLists+0x60>)
 800b720:	4413      	add	r3, r2
 800b722:	4618      	mov	r0, r3
 800b724:	f7fe fb1c 	bl	8009d60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	3301      	adds	r3, #1
 800b72c:	607b      	str	r3, [r7, #4]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2b37      	cmp	r3, #55	; 0x37
 800b732:	d9ef      	bls.n	800b714 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b734:	480d      	ldr	r0, [pc, #52]	; (800b76c <prvInitialiseTaskLists+0x64>)
 800b736:	f7fe fb13 	bl	8009d60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b73a:	480d      	ldr	r0, [pc, #52]	; (800b770 <prvInitialiseTaskLists+0x68>)
 800b73c:	f7fe fb10 	bl	8009d60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b740:	480c      	ldr	r0, [pc, #48]	; (800b774 <prvInitialiseTaskLists+0x6c>)
 800b742:	f7fe fb0d 	bl	8009d60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b746:	480c      	ldr	r0, [pc, #48]	; (800b778 <prvInitialiseTaskLists+0x70>)
 800b748:	f7fe fb0a 	bl	8009d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b74c:	480b      	ldr	r0, [pc, #44]	; (800b77c <prvInitialiseTaskLists+0x74>)
 800b74e:	f7fe fb07 	bl	8009d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b752:	4b0b      	ldr	r3, [pc, #44]	; (800b780 <prvInitialiseTaskLists+0x78>)
 800b754:	4a05      	ldr	r2, [pc, #20]	; (800b76c <prvInitialiseTaskLists+0x64>)
 800b756:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b758:	4b0a      	ldr	r3, [pc, #40]	; (800b784 <prvInitialiseTaskLists+0x7c>)
 800b75a:	4a05      	ldr	r2, [pc, #20]	; (800b770 <prvInitialiseTaskLists+0x68>)
 800b75c:	601a      	str	r2, [r3, #0]
}
 800b75e:	bf00      	nop
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	240009c4 	.word	0x240009c4
 800b76c:	24000e24 	.word	0x24000e24
 800b770:	24000e38 	.word	0x24000e38
 800b774:	24000e54 	.word	0x24000e54
 800b778:	24000e68 	.word	0x24000e68
 800b77c:	24000e80 	.word	0x24000e80
 800b780:	24000e4c 	.word	0x24000e4c
 800b784:	24000e50 	.word	0x24000e50

0800b788 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b78e:	e019      	b.n	800b7c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b790:	f000 fe20 	bl	800c3d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b794:	4b10      	ldr	r3, [pc, #64]	; (800b7d8 <prvCheckTasksWaitingTermination+0x50>)
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	3304      	adds	r3, #4
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7fe fb67 	bl	8009e74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b7a6:	4b0d      	ldr	r3, [pc, #52]	; (800b7dc <prvCheckTasksWaitingTermination+0x54>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	4a0b      	ldr	r2, [pc, #44]	; (800b7dc <prvCheckTasksWaitingTermination+0x54>)
 800b7ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b7b0:	4b0b      	ldr	r3, [pc, #44]	; (800b7e0 <prvCheckTasksWaitingTermination+0x58>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	4a0a      	ldr	r2, [pc, #40]	; (800b7e0 <prvCheckTasksWaitingTermination+0x58>)
 800b7b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b7ba:	f000 fe3b 	bl	800c434 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f810 	bl	800b7e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7c4:	4b06      	ldr	r3, [pc, #24]	; (800b7e0 <prvCheckTasksWaitingTermination+0x58>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1e1      	bne.n	800b790 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b7cc:	bf00      	nop
 800b7ce:	bf00      	nop
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	24000e68 	.word	0x24000e68
 800b7dc:	24000e94 	.word	0x24000e94
 800b7e0:	24000e7c 	.word	0x24000e7c

0800b7e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	3358      	adds	r3, #88	; 0x58
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f001 f903 	bl	800c9fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d108      	bne.n	800b812 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b804:	4618      	mov	r0, r3
 800b806:	f000 ffd3 	bl	800c7b0 <vPortFree>
				vPortFree( pxTCB );
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 ffd0 	bl	800c7b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b810:	e018      	b.n	800b844 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d103      	bne.n	800b824 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 ffc7 	bl	800c7b0 <vPortFree>
	}
 800b822:	e00f      	b.n	800b844 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	d00a      	beq.n	800b844 <prvDeleteTCB+0x60>
	__asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	60fb      	str	r3, [r7, #12]
}
 800b840:	bf00      	nop
 800b842:	e7fe      	b.n	800b842 <prvDeleteTCB+0x5e>
	}
 800b844:	bf00      	nop
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b852:	4b0c      	ldr	r3, [pc, #48]	; (800b884 <prvResetNextTaskUnblockTime+0x38>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d104      	bne.n	800b866 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b85c:	4b0a      	ldr	r3, [pc, #40]	; (800b888 <prvResetNextTaskUnblockTime+0x3c>)
 800b85e:	f04f 32ff 	mov.w	r2, #4294967295
 800b862:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b864:	e008      	b.n	800b878 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b866:	4b07      	ldr	r3, [pc, #28]	; (800b884 <prvResetNextTaskUnblockTime+0x38>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	4a04      	ldr	r2, [pc, #16]	; (800b888 <prvResetNextTaskUnblockTime+0x3c>)
 800b876:	6013      	str	r3, [r2, #0]
}
 800b878:	bf00      	nop
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr
 800b884:	24000e4c 	.word	0x24000e4c
 800b888:	24000eb4 	.word	0x24000eb4

0800b88c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b892:	4b0b      	ldr	r3, [pc, #44]	; (800b8c0 <xTaskGetSchedulerState+0x34>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d102      	bne.n	800b8a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b89a:	2301      	movs	r3, #1
 800b89c:	607b      	str	r3, [r7, #4]
 800b89e:	e008      	b.n	800b8b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8a0:	4b08      	ldr	r3, [pc, #32]	; (800b8c4 <xTaskGetSchedulerState+0x38>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d102      	bne.n	800b8ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	607b      	str	r3, [r7, #4]
 800b8ac:	e001      	b.n	800b8b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b8b2:	687b      	ldr	r3, [r7, #4]
	}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	24000ea0 	.word	0x24000ea0
 800b8c4:	24000ebc 	.word	0x24000ebc

0800b8c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d056      	beq.n	800b98c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b8de:	4b2e      	ldr	r3, [pc, #184]	; (800b998 <xTaskPriorityDisinherit+0xd0>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d00a      	beq.n	800b8fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ec:	f383 8811 	msr	BASEPRI, r3
 800b8f0:	f3bf 8f6f 	isb	sy
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	60fb      	str	r3, [r7, #12]
}
 800b8fa:	bf00      	nop
 800b8fc:	e7fe      	b.n	800b8fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10a      	bne.n	800b91c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	60bb      	str	r3, [r7, #8]
}
 800b918:	bf00      	nop
 800b91a:	e7fe      	b.n	800b91a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b920:	1e5a      	subs	r2, r3, #1
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b92e:	429a      	cmp	r2, r3
 800b930:	d02c      	beq.n	800b98c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b936:	2b00      	cmp	r3, #0
 800b938:	d128      	bne.n	800b98c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	3304      	adds	r3, #4
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fe fa98 	bl	8009e74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b950:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b95c:	4b0f      	ldr	r3, [pc, #60]	; (800b99c <xTaskPriorityDisinherit+0xd4>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	429a      	cmp	r2, r3
 800b962:	d903      	bls.n	800b96c <xTaskPriorityDisinherit+0xa4>
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b968:	4a0c      	ldr	r2, [pc, #48]	; (800b99c <xTaskPriorityDisinherit+0xd4>)
 800b96a:	6013      	str	r3, [r2, #0]
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b970:	4613      	mov	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	4413      	add	r3, r2
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	4a09      	ldr	r2, [pc, #36]	; (800b9a0 <xTaskPriorityDisinherit+0xd8>)
 800b97a:	441a      	add	r2, r3
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	3304      	adds	r3, #4
 800b980:	4619      	mov	r1, r3
 800b982:	4610      	mov	r0, r2
 800b984:	f7fe fa19 	bl	8009dba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b988:	2301      	movs	r3, #1
 800b98a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b98c:	697b      	ldr	r3, [r7, #20]
	}
 800b98e:	4618      	mov	r0, r3
 800b990:	3718      	adds	r7, #24
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	240009c0 	.word	0x240009c0
 800b99c:	24000e9c 	.word	0x24000e9c
 800b9a0:	240009c4 	.word	0x240009c4

0800b9a4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800b9ae:	f000 fd11 	bl	800c3d4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800b9b2:	4b20      	ldr	r3, [pc, #128]	; (800ba34 <ulTaskNotifyTake+0x90>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d113      	bne.n	800b9e6 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b9be:	4b1d      	ldr	r3, [pc, #116]	; (800ba34 <ulTaskNotifyTake+0x90>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00b      	beq.n	800b9e6 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b9ce:	2101      	movs	r1, #1
 800b9d0:	6838      	ldr	r0, [r7, #0]
 800b9d2:	f000 f833 	bl	800ba3c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b9d6:	4b18      	ldr	r3, [pc, #96]	; (800ba38 <ulTaskNotifyTake+0x94>)
 800b9d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9dc:	601a      	str	r2, [r3, #0]
 800b9de:	f3bf 8f4f 	dsb	sy
 800b9e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b9e6:	f000 fd25 	bl	800c434 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b9ea:	f000 fcf3 	bl	800c3d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800b9ee:	4b11      	ldr	r3, [pc, #68]	; (800ba34 <ulTaskNotifyTake+0x90>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b9f6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00e      	beq.n	800ba1c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d005      	beq.n	800ba10 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ba04:	4b0b      	ldr	r3, [pc, #44]	; (800ba34 <ulTaskNotifyTake+0x90>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800ba0e:	e005      	b.n	800ba1c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800ba10:	4b08      	ldr	r3, [pc, #32]	; (800ba34 <ulTaskNotifyTake+0x90>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	3a01      	subs	r2, #1
 800ba18:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba1c:	4b05      	ldr	r3, [pc, #20]	; (800ba34 <ulTaskNotifyTake+0x90>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	2200      	movs	r2, #0
 800ba22:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		}
		taskEXIT_CRITICAL();
 800ba26:	f000 fd05 	bl	800c434 <vPortExitCritical>

		return ulReturn;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
	}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	240009c0 	.word	0x240009c0
 800ba38:	e000ed04 	.word	0xe000ed04

0800ba3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba46:	4b21      	ldr	r3, [pc, #132]	; (800bacc <prvAddCurrentTaskToDelayedList+0x90>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba4c:	4b20      	ldr	r3, [pc, #128]	; (800bad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	3304      	adds	r3, #4
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe fa0e 	bl	8009e74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba5e:	d10a      	bne.n	800ba76 <prvAddCurrentTaskToDelayedList+0x3a>
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d007      	beq.n	800ba76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba66:	4b1a      	ldr	r3, [pc, #104]	; (800bad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	3304      	adds	r3, #4
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	4819      	ldr	r0, [pc, #100]	; (800bad4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ba70:	f7fe f9a3 	bl	8009dba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba74:	e026      	b.n	800bac4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba7e:	4b14      	ldr	r3, [pc, #80]	; (800bad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d209      	bcs.n	800baa2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba8e:	4b12      	ldr	r3, [pc, #72]	; (800bad8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	4b0f      	ldr	r3, [pc, #60]	; (800bad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	3304      	adds	r3, #4
 800ba98:	4619      	mov	r1, r3
 800ba9a:	4610      	mov	r0, r2
 800ba9c:	f7fe f9b1 	bl	8009e02 <vListInsert>
}
 800baa0:	e010      	b.n	800bac4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baa2:	4b0e      	ldr	r3, [pc, #56]	; (800badc <prvAddCurrentTaskToDelayedList+0xa0>)
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	4b0a      	ldr	r3, [pc, #40]	; (800bad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	3304      	adds	r3, #4
 800baac:	4619      	mov	r1, r3
 800baae:	4610      	mov	r0, r2
 800bab0:	f7fe f9a7 	bl	8009e02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bab4:	4b0a      	ldr	r3, [pc, #40]	; (800bae0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68ba      	ldr	r2, [r7, #8]
 800baba:	429a      	cmp	r2, r3
 800babc:	d202      	bcs.n	800bac4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800babe:	4a08      	ldr	r2, [pc, #32]	; (800bae0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	6013      	str	r3, [r2, #0]
}
 800bac4:	bf00      	nop
 800bac6:	3710      	adds	r7, #16
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	24000e98 	.word	0x24000e98
 800bad0:	240009c0 	.word	0x240009c0
 800bad4:	24000e80 	.word	0x24000e80
 800bad8:	24000e50 	.word	0x24000e50
 800badc:	24000e4c 	.word	0x24000e4c
 800bae0:	24000eb4 	.word	0x24000eb4

0800bae4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b08a      	sub	sp, #40	; 0x28
 800bae8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800baea:	2300      	movs	r3, #0
 800baec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800baee:	f000 fb07 	bl	800c100 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800baf2:	4b1c      	ldr	r3, [pc, #112]	; (800bb64 <xTimerCreateTimerTask+0x80>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d021      	beq.n	800bb3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bafa:	2300      	movs	r3, #0
 800bafc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bafe:	2300      	movs	r3, #0
 800bb00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bb02:	1d3a      	adds	r2, r7, #4
 800bb04:	f107 0108 	add.w	r1, r7, #8
 800bb08:	f107 030c 	add.w	r3, r7, #12
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7fe f90d 	bl	8009d2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bb12:	6879      	ldr	r1, [r7, #4]
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	9202      	str	r2, [sp, #8]
 800bb1a:	9301      	str	r3, [sp, #4]
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	9300      	str	r3, [sp, #0]
 800bb20:	2300      	movs	r3, #0
 800bb22:	460a      	mov	r2, r1
 800bb24:	4910      	ldr	r1, [pc, #64]	; (800bb68 <xTimerCreateTimerTask+0x84>)
 800bb26:	4811      	ldr	r0, [pc, #68]	; (800bb6c <xTimerCreateTimerTask+0x88>)
 800bb28:	f7fe ff74 	bl	800aa14 <xTaskCreateStatic>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	4a10      	ldr	r2, [pc, #64]	; (800bb70 <xTimerCreateTimerTask+0x8c>)
 800bb30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bb32:	4b0f      	ldr	r3, [pc, #60]	; (800bb70 <xTimerCreateTimerTask+0x8c>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10a      	bne.n	800bb5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb48:	f383 8811 	msr	BASEPRI, r3
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	613b      	str	r3, [r7, #16]
}
 800bb56:	bf00      	nop
 800bb58:	e7fe      	b.n	800bb58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb5a:	697b      	ldr	r3, [r7, #20]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	24000ef8 	.word	0x24000ef8
 800bb68:	0800cc14 	.word	0x0800cc14
 800bb6c:	0800bca9 	.word	0x0800bca9
 800bb70:	24000efc 	.word	0x24000efc

0800bb74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b08a      	sub	sp, #40	; 0x28
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
 800bb80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb82:	2300      	movs	r3, #0
 800bb84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10a      	bne.n	800bba2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	623b      	str	r3, [r7, #32]
}
 800bb9e:	bf00      	nop
 800bba0:	e7fe      	b.n	800bba0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bba2:	4b1a      	ldr	r3, [pc, #104]	; (800bc0c <xTimerGenericCommand+0x98>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d02a      	beq.n	800bc00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	2b05      	cmp	r3, #5
 800bbba:	dc18      	bgt.n	800bbee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bbbc:	f7ff fe66 	bl	800b88c <xTaskGetSchedulerState>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d109      	bne.n	800bbda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bbc6:	4b11      	ldr	r3, [pc, #68]	; (800bc0c <xTimerGenericCommand+0x98>)
 800bbc8:	6818      	ldr	r0, [r3, #0]
 800bbca:	f107 0110 	add.w	r1, r7, #16
 800bbce:	2300      	movs	r3, #0
 800bbd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbd2:	f7fe fab7 	bl	800a144 <xQueueGenericSend>
 800bbd6:	6278      	str	r0, [r7, #36]	; 0x24
 800bbd8:	e012      	b.n	800bc00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bbda:	4b0c      	ldr	r3, [pc, #48]	; (800bc0c <xTimerGenericCommand+0x98>)
 800bbdc:	6818      	ldr	r0, [r3, #0]
 800bbde:	f107 0110 	add.w	r1, r7, #16
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f7fe faad 	bl	800a144 <xQueueGenericSend>
 800bbea:	6278      	str	r0, [r7, #36]	; 0x24
 800bbec:	e008      	b.n	800bc00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bbee:	4b07      	ldr	r3, [pc, #28]	; (800bc0c <xTimerGenericCommand+0x98>)
 800bbf0:	6818      	ldr	r0, [r3, #0]
 800bbf2:	f107 0110 	add.w	r1, r7, #16
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	683a      	ldr	r2, [r7, #0]
 800bbfa:	f7fe fba1 	bl	800a340 <xQueueGenericSendFromISR>
 800bbfe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3728      	adds	r7, #40	; 0x28
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	24000ef8 	.word	0x24000ef8

0800bc10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b088      	sub	sp, #32
 800bc14:	af02      	add	r7, sp, #8
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc1a:	4b22      	ldr	r3, [pc, #136]	; (800bca4 <prvProcessExpiredTimer+0x94>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	3304      	adds	r3, #4
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fe f923 	bl	8009e74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc34:	f003 0304 	and.w	r3, r3, #4
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d022      	beq.n	800bc82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	699a      	ldr	r2, [r3, #24]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	18d1      	adds	r1, r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	683a      	ldr	r2, [r7, #0]
 800bc48:	6978      	ldr	r0, [r7, #20]
 800bc4a:	f000 f8d1 	bl	800bdf0 <prvInsertTimerInActiveList>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d01f      	beq.n	800bc94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc54:	2300      	movs	r3, #0
 800bc56:	9300      	str	r3, [sp, #0]
 800bc58:	2300      	movs	r3, #0
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	6978      	ldr	r0, [r7, #20]
 800bc60:	f7ff ff88 	bl	800bb74 <xTimerGenericCommand>
 800bc64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d113      	bne.n	800bc94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc70:	f383 8811 	msr	BASEPRI, r3
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	f3bf 8f4f 	dsb	sy
 800bc7c:	60fb      	str	r3, [r7, #12]
}
 800bc7e:	bf00      	nop
 800bc80:	e7fe      	b.n	800bc80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc88:	f023 0301 	bic.w	r3, r3, #1
 800bc8c:	b2da      	uxtb	r2, r3
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	6a1b      	ldr	r3, [r3, #32]
 800bc98:	6978      	ldr	r0, [r7, #20]
 800bc9a:	4798      	blx	r3
}
 800bc9c:	bf00      	nop
 800bc9e:	3718      	adds	r7, #24
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	24000ef0 	.word	0x24000ef0

0800bca8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcb0:	f107 0308 	add.w	r3, r7, #8
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f000 f857 	bl	800bd68 <prvGetNextExpireTime>
 800bcba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f000 f803 	bl	800bccc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bcc6:	f000 f8d5 	bl	800be74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcca:	e7f1      	b.n	800bcb0 <prvTimerTask+0x8>

0800bccc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bcd6:	f7ff f9d1 	bl	800b07c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcda:	f107 0308 	add.w	r3, r7, #8
 800bcde:	4618      	mov	r0, r3
 800bce0:	f000 f866 	bl	800bdb0 <prvSampleTimeNow>
 800bce4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d130      	bne.n	800bd4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10a      	bne.n	800bd08 <prvProcessTimerOrBlockTask+0x3c>
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d806      	bhi.n	800bd08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bcfa:	f7ff f9cd 	bl	800b098 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bcfe:	68f9      	ldr	r1, [r7, #12]
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f7ff ff85 	bl	800bc10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd06:	e024      	b.n	800bd52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d008      	beq.n	800bd20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd0e:	4b13      	ldr	r3, [pc, #76]	; (800bd5c <prvProcessTimerOrBlockTask+0x90>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d101      	bne.n	800bd1c <prvProcessTimerOrBlockTask+0x50>
 800bd18:	2301      	movs	r3, #1
 800bd1a:	e000      	b.n	800bd1e <prvProcessTimerOrBlockTask+0x52>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd20:	4b0f      	ldr	r3, [pc, #60]	; (800bd60 <prvProcessTimerOrBlockTask+0x94>)
 800bd22:	6818      	ldr	r0, [r3, #0]
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	f7fe fe3d 	bl	800a9ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd32:	f7ff f9b1 	bl	800b098 <xTaskResumeAll>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d10a      	bne.n	800bd52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd3c:	4b09      	ldr	r3, [pc, #36]	; (800bd64 <prvProcessTimerOrBlockTask+0x98>)
 800bd3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	f3bf 8f6f 	isb	sy
}
 800bd4c:	e001      	b.n	800bd52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd4e:	f7ff f9a3 	bl	800b098 <xTaskResumeAll>
}
 800bd52:	bf00      	nop
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	24000ef4 	.word	0x24000ef4
 800bd60:	24000ef8 	.word	0x24000ef8
 800bd64:	e000ed04 	.word	0xe000ed04

0800bd68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd70:	4b0e      	ldr	r3, [pc, #56]	; (800bdac <prvGetNextExpireTime+0x44>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d101      	bne.n	800bd7e <prvGetNextExpireTime+0x16>
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	e000      	b.n	800bd80 <prvGetNextExpireTime+0x18>
 800bd7e:	2200      	movs	r2, #0
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d105      	bne.n	800bd98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd8c:	4b07      	ldr	r3, [pc, #28]	; (800bdac <prvGetNextExpireTime+0x44>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	60fb      	str	r3, [r7, #12]
 800bd96:	e001      	b.n	800bd9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	24000ef0 	.word	0x24000ef0

0800bdb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bdb8:	f7ff fa0c 	bl	800b1d4 <xTaskGetTickCount>
 800bdbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bdbe:	4b0b      	ldr	r3, [pc, #44]	; (800bdec <prvSampleTimeNow+0x3c>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	68fa      	ldr	r2, [r7, #12]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d205      	bcs.n	800bdd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bdc8:	f000 f936 	bl	800c038 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	601a      	str	r2, [r3, #0]
 800bdd2:	e002      	b.n	800bdda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bdda:	4a04      	ldr	r2, [pc, #16]	; (800bdec <prvSampleTimeNow+0x3c>)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bde0:	68fb      	ldr	r3, [r7, #12]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	24000f00 	.word	0x24000f00

0800bdf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b086      	sub	sp, #24
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
 800bdfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bdfe:	2300      	movs	r3, #0
 800be00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	68ba      	ldr	r2, [r7, #8]
 800be06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	429a      	cmp	r2, r3
 800be14:	d812      	bhi.n	800be3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	1ad2      	subs	r2, r2, r3
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	429a      	cmp	r2, r3
 800be22:	d302      	bcc.n	800be2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800be24:	2301      	movs	r3, #1
 800be26:	617b      	str	r3, [r7, #20]
 800be28:	e01b      	b.n	800be62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be2a:	4b10      	ldr	r3, [pc, #64]	; (800be6c <prvInsertTimerInActiveList+0x7c>)
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	3304      	adds	r3, #4
 800be32:	4619      	mov	r1, r3
 800be34:	4610      	mov	r0, r2
 800be36:	f7fd ffe4 	bl	8009e02 <vListInsert>
 800be3a:	e012      	b.n	800be62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	429a      	cmp	r2, r3
 800be42:	d206      	bcs.n	800be52 <prvInsertTimerInActiveList+0x62>
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d302      	bcc.n	800be52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be4c:	2301      	movs	r3, #1
 800be4e:	617b      	str	r3, [r7, #20]
 800be50:	e007      	b.n	800be62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be52:	4b07      	ldr	r3, [pc, #28]	; (800be70 <prvInsertTimerInActiveList+0x80>)
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	3304      	adds	r3, #4
 800be5a:	4619      	mov	r1, r3
 800be5c:	4610      	mov	r0, r2
 800be5e:	f7fd ffd0 	bl	8009e02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be62:	697b      	ldr	r3, [r7, #20]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3718      	adds	r7, #24
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	24000ef4 	.word	0x24000ef4
 800be70:	24000ef0 	.word	0x24000ef0

0800be74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b08e      	sub	sp, #56	; 0x38
 800be78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be7a:	e0ca      	b.n	800c012 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	da18      	bge.n	800beb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be82:	1d3b      	adds	r3, r7, #4
 800be84:	3304      	adds	r3, #4
 800be86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800be88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10a      	bne.n	800bea4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	61fb      	str	r3, [r7, #28]
}
 800bea0:	bf00      	nop
 800bea2:	e7fe      	b.n	800bea2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beaa:	6850      	ldr	r0, [r2, #4]
 800beac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beae:	6892      	ldr	r2, [r2, #8]
 800beb0:	4611      	mov	r1, r2
 800beb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f2c0 80ab 	blt.w	800c012 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec2:	695b      	ldr	r3, [r3, #20]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d004      	beq.n	800bed2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beca:	3304      	adds	r3, #4
 800becc:	4618      	mov	r0, r3
 800bece:	f7fd ffd1 	bl	8009e74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bed2:	463b      	mov	r3, r7
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7ff ff6b 	bl	800bdb0 <prvSampleTimeNow>
 800beda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2b09      	cmp	r3, #9
 800bee0:	f200 8096 	bhi.w	800c010 <prvProcessReceivedCommands+0x19c>
 800bee4:	a201      	add	r2, pc, #4	; (adr r2, 800beec <prvProcessReceivedCommands+0x78>)
 800bee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beea:	bf00      	nop
 800beec:	0800bf15 	.word	0x0800bf15
 800bef0:	0800bf15 	.word	0x0800bf15
 800bef4:	0800bf15 	.word	0x0800bf15
 800bef8:	0800bf89 	.word	0x0800bf89
 800befc:	0800bf9d 	.word	0x0800bf9d
 800bf00:	0800bfe7 	.word	0x0800bfe7
 800bf04:	0800bf15 	.word	0x0800bf15
 800bf08:	0800bf15 	.word	0x0800bf15
 800bf0c:	0800bf89 	.word	0x0800bf89
 800bf10:	0800bf9d 	.word	0x0800bf9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf1a:	f043 0301 	orr.w	r3, r3, #1
 800bf1e:	b2da      	uxtb	r2, r3
 800bf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf26:	68ba      	ldr	r2, [r7, #8]
 800bf28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2a:	699b      	ldr	r3, [r3, #24]
 800bf2c:	18d1      	adds	r1, r2, r3
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf34:	f7ff ff5c 	bl	800bdf0 <prvInsertTimerInActiveList>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d069      	beq.n	800c012 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf40:	6a1b      	ldr	r3, [r3, #32]
 800bf42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf4c:	f003 0304 	and.w	r3, r3, #4
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d05e      	beq.n	800c012 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf58:	699b      	ldr	r3, [r3, #24]
 800bf5a:	441a      	add	r2, r3
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	9300      	str	r3, [sp, #0]
 800bf60:	2300      	movs	r3, #0
 800bf62:	2100      	movs	r1, #0
 800bf64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf66:	f7ff fe05 	bl	800bb74 <xTimerGenericCommand>
 800bf6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf6c:	6a3b      	ldr	r3, [r7, #32]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d14f      	bne.n	800c012 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf76:	f383 8811 	msr	BASEPRI, r3
 800bf7a:	f3bf 8f6f 	isb	sy
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	61bb      	str	r3, [r7, #24]
}
 800bf84:	bf00      	nop
 800bf86:	e7fe      	b.n	800bf86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf8e:	f023 0301 	bic.w	r3, r3, #1
 800bf92:	b2da      	uxtb	r2, r3
 800bf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bf9a:	e03a      	b.n	800c012 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfa2:	f043 0301 	orr.w	r3, r3, #1
 800bfa6:	b2da      	uxtb	r2, r3
 800bfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bfae:	68ba      	ldr	r2, [r7, #8]
 800bfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb6:	699b      	ldr	r3, [r3, #24]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10a      	bne.n	800bfd2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc0:	f383 8811 	msr	BASEPRI, r3
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	617b      	str	r3, [r7, #20]
}
 800bfce:	bf00      	nop
 800bfd0:	e7fe      	b.n	800bfd0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd4:	699a      	ldr	r2, [r3, #24]
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd8:	18d1      	adds	r1, r2, r3
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfe0:	f7ff ff06 	bl	800bdf0 <prvInsertTimerInActiveList>
					break;
 800bfe4:	e015      	b.n	800c012 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfec:	f003 0302 	and.w	r3, r3, #2
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d103      	bne.n	800bffc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bff6:	f000 fbdb 	bl	800c7b0 <vPortFree>
 800bffa:	e00a      	b.n	800c012 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c002:	f023 0301 	bic.w	r3, r3, #1
 800c006:	b2da      	uxtb	r2, r3
 800c008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c00e:	e000      	b.n	800c012 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c010:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c012:	4b08      	ldr	r3, [pc, #32]	; (800c034 <prvProcessReceivedCommands+0x1c0>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	1d39      	adds	r1, r7, #4
 800c018:	2200      	movs	r2, #0
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fe fa2c 	bl	800a478 <xQueueReceive>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	f47f af2a 	bne.w	800be7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c028:	bf00      	nop
 800c02a:	bf00      	nop
 800c02c:	3730      	adds	r7, #48	; 0x30
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	24000ef8 	.word	0x24000ef8

0800c038 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b088      	sub	sp, #32
 800c03c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c03e:	e048      	b.n	800c0d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c040:	4b2d      	ldr	r3, [pc, #180]	; (800c0f8 <prvSwitchTimerLists+0xc0>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c04a:	4b2b      	ldr	r3, [pc, #172]	; (800c0f8 <prvSwitchTimerLists+0xc0>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	3304      	adds	r3, #4
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fd ff0b 	bl	8009e74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6a1b      	ldr	r3, [r3, #32]
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c06c:	f003 0304 	and.w	r3, r3, #4
 800c070:	2b00      	cmp	r3, #0
 800c072:	d02e      	beq.n	800c0d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	699b      	ldr	r3, [r3, #24]
 800c078:	693a      	ldr	r2, [r7, #16]
 800c07a:	4413      	add	r3, r2
 800c07c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	429a      	cmp	r2, r3
 800c084:	d90e      	bls.n	800c0a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	68ba      	ldr	r2, [r7, #8]
 800c08a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c092:	4b19      	ldr	r3, [pc, #100]	; (800c0f8 <prvSwitchTimerLists+0xc0>)
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	3304      	adds	r3, #4
 800c09a:	4619      	mov	r1, r3
 800c09c:	4610      	mov	r0, r2
 800c09e:	f7fd feb0 	bl	8009e02 <vListInsert>
 800c0a2:	e016      	b.n	800c0d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	68f8      	ldr	r0, [r7, #12]
 800c0b0:	f7ff fd60 	bl	800bb74 <xTimerGenericCommand>
 800c0b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10a      	bne.n	800c0d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	603b      	str	r3, [r7, #0]
}
 800c0ce:	bf00      	nop
 800c0d0:	e7fe      	b.n	800c0d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0d2:	4b09      	ldr	r3, [pc, #36]	; (800c0f8 <prvSwitchTimerLists+0xc0>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d1b1      	bne.n	800c040 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c0dc:	4b06      	ldr	r3, [pc, #24]	; (800c0f8 <prvSwitchTimerLists+0xc0>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c0e2:	4b06      	ldr	r3, [pc, #24]	; (800c0fc <prvSwitchTimerLists+0xc4>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a04      	ldr	r2, [pc, #16]	; (800c0f8 <prvSwitchTimerLists+0xc0>)
 800c0e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c0ea:	4a04      	ldr	r2, [pc, #16]	; (800c0fc <prvSwitchTimerLists+0xc4>)
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	6013      	str	r3, [r2, #0]
}
 800c0f0:	bf00      	nop
 800c0f2:	3718      	adds	r7, #24
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	24000ef0 	.word	0x24000ef0
 800c0fc:	24000ef4 	.word	0x24000ef4

0800c100 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c106:	f000 f965 	bl	800c3d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c10a:	4b15      	ldr	r3, [pc, #84]	; (800c160 <prvCheckForValidListAndQueue+0x60>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d120      	bne.n	800c154 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c112:	4814      	ldr	r0, [pc, #80]	; (800c164 <prvCheckForValidListAndQueue+0x64>)
 800c114:	f7fd fe24 	bl	8009d60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c118:	4813      	ldr	r0, [pc, #76]	; (800c168 <prvCheckForValidListAndQueue+0x68>)
 800c11a:	f7fd fe21 	bl	8009d60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c11e:	4b13      	ldr	r3, [pc, #76]	; (800c16c <prvCheckForValidListAndQueue+0x6c>)
 800c120:	4a10      	ldr	r2, [pc, #64]	; (800c164 <prvCheckForValidListAndQueue+0x64>)
 800c122:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c124:	4b12      	ldr	r3, [pc, #72]	; (800c170 <prvCheckForValidListAndQueue+0x70>)
 800c126:	4a10      	ldr	r2, [pc, #64]	; (800c168 <prvCheckForValidListAndQueue+0x68>)
 800c128:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c12a:	2300      	movs	r3, #0
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	4b11      	ldr	r3, [pc, #68]	; (800c174 <prvCheckForValidListAndQueue+0x74>)
 800c130:	4a11      	ldr	r2, [pc, #68]	; (800c178 <prvCheckForValidListAndQueue+0x78>)
 800c132:	2110      	movs	r1, #16
 800c134:	200a      	movs	r0, #10
 800c136:	f7fd ff2f 	bl	8009f98 <xQueueGenericCreateStatic>
 800c13a:	4603      	mov	r3, r0
 800c13c:	4a08      	ldr	r2, [pc, #32]	; (800c160 <prvCheckForValidListAndQueue+0x60>)
 800c13e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c140:	4b07      	ldr	r3, [pc, #28]	; (800c160 <prvCheckForValidListAndQueue+0x60>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d005      	beq.n	800c154 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c148:	4b05      	ldr	r3, [pc, #20]	; (800c160 <prvCheckForValidListAndQueue+0x60>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	490b      	ldr	r1, [pc, #44]	; (800c17c <prvCheckForValidListAndQueue+0x7c>)
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fe fc02 	bl	800a958 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c154:	f000 f96e 	bl	800c434 <vPortExitCritical>
}
 800c158:	bf00      	nop
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	24000ef8 	.word	0x24000ef8
 800c164:	24000ec8 	.word	0x24000ec8
 800c168:	24000edc 	.word	0x24000edc
 800c16c:	24000ef0 	.word	0x24000ef0
 800c170:	24000ef4 	.word	0x24000ef4
 800c174:	24000fa4 	.word	0x24000fa4
 800c178:	24000f04 	.word	0x24000f04
 800c17c:	0800cc1c 	.word	0x0800cc1c

0800c180 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c180:	b480      	push	{r7}
 800c182:	b085      	sub	sp, #20
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	3b04      	subs	r3, #4
 800c190:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	3b04      	subs	r3, #4
 800c19e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	f023 0201 	bic.w	r2, r3, #1
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	3b04      	subs	r3, #4
 800c1ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1b0:	4a0c      	ldr	r2, [pc, #48]	; (800c1e4 <pxPortInitialiseStack+0x64>)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	3b14      	subs	r3, #20
 800c1ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3b04      	subs	r3, #4
 800c1c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f06f 0202 	mvn.w	r2, #2
 800c1ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	3b20      	subs	r3, #32
 800c1d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3714      	adds	r7, #20
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr
 800c1e4:	0800c1e9 	.word	0x0800c1e9

0800c1e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1f2:	4b12      	ldr	r3, [pc, #72]	; (800c23c <prvTaskExitError+0x54>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1fa:	d00a      	beq.n	800c212 <prvTaskExitError+0x2a>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	60fb      	str	r3, [r7, #12]
}
 800c20e:	bf00      	nop
 800c210:	e7fe      	b.n	800c210 <prvTaskExitError+0x28>
	__asm volatile
 800c212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c216:	f383 8811 	msr	BASEPRI, r3
 800c21a:	f3bf 8f6f 	isb	sy
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	60bb      	str	r3, [r7, #8]
}
 800c224:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c226:	bf00      	nop
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d0fc      	beq.n	800c228 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c22e:	bf00      	nop
 800c230:	bf00      	nop
 800c232:	3714      	adds	r7, #20
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	24000010 	.word	0x24000010

0800c240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c240:	4b07      	ldr	r3, [pc, #28]	; (800c260 <pxCurrentTCBConst2>)
 800c242:	6819      	ldr	r1, [r3, #0]
 800c244:	6808      	ldr	r0, [r1, #0]
 800c246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24a:	f380 8809 	msr	PSP, r0
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f04f 0000 	mov.w	r0, #0
 800c256:	f380 8811 	msr	BASEPRI, r0
 800c25a:	4770      	bx	lr
 800c25c:	f3af 8000 	nop.w

0800c260 <pxCurrentTCBConst2>:
 800c260:	240009c0 	.word	0x240009c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop

0800c268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c268:	4808      	ldr	r0, [pc, #32]	; (800c28c <prvPortStartFirstTask+0x24>)
 800c26a:	6800      	ldr	r0, [r0, #0]
 800c26c:	6800      	ldr	r0, [r0, #0]
 800c26e:	f380 8808 	msr	MSP, r0
 800c272:	f04f 0000 	mov.w	r0, #0
 800c276:	f380 8814 	msr	CONTROL, r0
 800c27a:	b662      	cpsie	i
 800c27c:	b661      	cpsie	f
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	df00      	svc	0
 800c288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c28a:	bf00      	nop
 800c28c:	e000ed08 	.word	0xe000ed08

0800c290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c296:	4b46      	ldr	r3, [pc, #280]	; (800c3b0 <xPortStartScheduler+0x120>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a46      	ldr	r2, [pc, #280]	; (800c3b4 <xPortStartScheduler+0x124>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d10a      	bne.n	800c2b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	613b      	str	r3, [r7, #16]
}
 800c2b2:	bf00      	nop
 800c2b4:	e7fe      	b.n	800c2b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2b6:	4b3e      	ldr	r3, [pc, #248]	; (800c3b0 <xPortStartScheduler+0x120>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a3f      	ldr	r2, [pc, #252]	; (800c3b8 <xPortStartScheduler+0x128>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d10a      	bne.n	800c2d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c4:	f383 8811 	msr	BASEPRI, r3
 800c2c8:	f3bf 8f6f 	isb	sy
 800c2cc:	f3bf 8f4f 	dsb	sy
 800c2d0:	60fb      	str	r3, [r7, #12]
}
 800c2d2:	bf00      	nop
 800c2d4:	e7fe      	b.n	800c2d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2d6:	4b39      	ldr	r3, [pc, #228]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c2d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	22ff      	movs	r2, #255	; 0xff
 800c2e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c2f8:	b2da      	uxtb	r2, r3
 800c2fa:	4b31      	ldr	r3, [pc, #196]	; (800c3c0 <xPortStartScheduler+0x130>)
 800c2fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2fe:	4b31      	ldr	r3, [pc, #196]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c300:	2207      	movs	r2, #7
 800c302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c304:	e009      	b.n	800c31a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c306:	4b2f      	ldr	r3, [pc, #188]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	4a2d      	ldr	r2, [pc, #180]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c30e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c310:	78fb      	ldrb	r3, [r7, #3]
 800c312:	b2db      	uxtb	r3, r3
 800c314:	005b      	lsls	r3, r3, #1
 800c316:	b2db      	uxtb	r3, r3
 800c318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c31a:	78fb      	ldrb	r3, [r7, #3]
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c322:	2b80      	cmp	r3, #128	; 0x80
 800c324:	d0ef      	beq.n	800c306 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c326:	4b27      	ldr	r3, [pc, #156]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f1c3 0307 	rsb	r3, r3, #7
 800c32e:	2b04      	cmp	r3, #4
 800c330:	d00a      	beq.n	800c348 <xPortStartScheduler+0xb8>
	__asm volatile
 800c332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c336:	f383 8811 	msr	BASEPRI, r3
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	60bb      	str	r3, [r7, #8]
}
 800c344:	bf00      	nop
 800c346:	e7fe      	b.n	800c346 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c348:	4b1e      	ldr	r3, [pc, #120]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	021b      	lsls	r3, r3, #8
 800c34e:	4a1d      	ldr	r2, [pc, #116]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c350:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c352:	4b1c      	ldr	r3, [pc, #112]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c35a:	4a1a      	ldr	r2, [pc, #104]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c35c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	b2da      	uxtb	r2, r3
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c366:	4b18      	ldr	r3, [pc, #96]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a17      	ldr	r2, [pc, #92]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c36c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c372:	4b15      	ldr	r3, [pc, #84]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a14      	ldr	r2, [pc, #80]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c378:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c37c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c37e:	f000 f8dd 	bl	800c53c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c382:	4b12      	ldr	r3, [pc, #72]	; (800c3cc <xPortStartScheduler+0x13c>)
 800c384:	2200      	movs	r2, #0
 800c386:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c388:	f000 f8fc 	bl	800c584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c38c:	4b10      	ldr	r3, [pc, #64]	; (800c3d0 <xPortStartScheduler+0x140>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a0f      	ldr	r2, [pc, #60]	; (800c3d0 <xPortStartScheduler+0x140>)
 800c392:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c396:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c398:	f7ff ff66 	bl	800c268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c39c:	f7fe ffe4 	bl	800b368 <vTaskSwitchContext>
	prvTaskExitError();
 800c3a0:	f7ff ff22 	bl	800c1e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3718      	adds	r7, #24
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	e000ed00 	.word	0xe000ed00
 800c3b4:	410fc271 	.word	0x410fc271
 800c3b8:	410fc270 	.word	0x410fc270
 800c3bc:	e000e400 	.word	0xe000e400
 800c3c0:	24000ff4 	.word	0x24000ff4
 800c3c4:	24000ff8 	.word	0x24000ff8
 800c3c8:	e000ed20 	.word	0xe000ed20
 800c3cc:	24000010 	.word	0x24000010
 800c3d0:	e000ef34 	.word	0xe000ef34

0800c3d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	607b      	str	r3, [r7, #4]
}
 800c3ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3ee:	4b0f      	ldr	r3, [pc, #60]	; (800c42c <vPortEnterCritical+0x58>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	4a0d      	ldr	r2, [pc, #52]	; (800c42c <vPortEnterCritical+0x58>)
 800c3f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3f8:	4b0c      	ldr	r3, [pc, #48]	; (800c42c <vPortEnterCritical+0x58>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d10f      	bne.n	800c420 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c400:	4b0b      	ldr	r3, [pc, #44]	; (800c430 <vPortEnterCritical+0x5c>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00a      	beq.n	800c420 <vPortEnterCritical+0x4c>
	__asm volatile
 800c40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40e:	f383 8811 	msr	BASEPRI, r3
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	603b      	str	r3, [r7, #0]
}
 800c41c:	bf00      	nop
 800c41e:	e7fe      	b.n	800c41e <vPortEnterCritical+0x4a>
	}
}
 800c420:	bf00      	nop
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	24000010 	.word	0x24000010
 800c430:	e000ed04 	.word	0xe000ed04

0800c434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c43a:	4b12      	ldr	r3, [pc, #72]	; (800c484 <vPortExitCritical+0x50>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d10a      	bne.n	800c458 <vPortExitCritical+0x24>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	607b      	str	r3, [r7, #4]
}
 800c454:	bf00      	nop
 800c456:	e7fe      	b.n	800c456 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c458:	4b0a      	ldr	r3, [pc, #40]	; (800c484 <vPortExitCritical+0x50>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	4a09      	ldr	r2, [pc, #36]	; (800c484 <vPortExitCritical+0x50>)
 800c460:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c462:	4b08      	ldr	r3, [pc, #32]	; (800c484 <vPortExitCritical+0x50>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d105      	bne.n	800c476 <vPortExitCritical+0x42>
 800c46a:	2300      	movs	r3, #0
 800c46c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	f383 8811 	msr	BASEPRI, r3
}
 800c474:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c476:	bf00      	nop
 800c478:	370c      	adds	r7, #12
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	24000010 	.word	0x24000010
	...

0800c490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c490:	f3ef 8009 	mrs	r0, PSP
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	4b15      	ldr	r3, [pc, #84]	; (800c4f0 <pxCurrentTCBConst>)
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	f01e 0f10 	tst.w	lr, #16
 800c4a0:	bf08      	it	eq
 800c4a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4aa:	6010      	str	r0, [r2, #0]
 800c4ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c4b4:	f380 8811 	msr	BASEPRI, r0
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f7fe ff52 	bl	800b368 <vTaskSwitchContext>
 800c4c4:	f04f 0000 	mov.w	r0, #0
 800c4c8:	f380 8811 	msr	BASEPRI, r0
 800c4cc:	bc09      	pop	{r0, r3}
 800c4ce:	6819      	ldr	r1, [r3, #0]
 800c4d0:	6808      	ldr	r0, [r1, #0]
 800c4d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d6:	f01e 0f10 	tst.w	lr, #16
 800c4da:	bf08      	it	eq
 800c4dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4e0:	f380 8809 	msr	PSP, r0
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	f3af 8000 	nop.w

0800c4f0 <pxCurrentTCBConst>:
 800c4f0:	240009c0 	.word	0x240009c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4f4:	bf00      	nop
 800c4f6:	bf00      	nop

0800c4f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	607b      	str	r3, [r7, #4]
}
 800c510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c512:	f7fe fe6f 	bl	800b1f4 <xTaskIncrementTick>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d003      	beq.n	800c524 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c51c:	4b06      	ldr	r3, [pc, #24]	; (800c538 <xPortSysTickHandler+0x40>)
 800c51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c522:	601a      	str	r2, [r3, #0]
 800c524:	2300      	movs	r3, #0
 800c526:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	f383 8811 	msr	BASEPRI, r3
}
 800c52e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c530:	bf00      	nop
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	e000ed04 	.word	0xe000ed04

0800c53c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c53c:	b480      	push	{r7}
 800c53e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c540:	4b0b      	ldr	r3, [pc, #44]	; (800c570 <vPortSetupTimerInterrupt+0x34>)
 800c542:	2200      	movs	r2, #0
 800c544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c546:	4b0b      	ldr	r3, [pc, #44]	; (800c574 <vPortSetupTimerInterrupt+0x38>)
 800c548:	2200      	movs	r2, #0
 800c54a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c54c:	4b0a      	ldr	r3, [pc, #40]	; (800c578 <vPortSetupTimerInterrupt+0x3c>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a0a      	ldr	r2, [pc, #40]	; (800c57c <vPortSetupTimerInterrupt+0x40>)
 800c552:	fba2 2303 	umull	r2, r3, r2, r3
 800c556:	099b      	lsrs	r3, r3, #6
 800c558:	4a09      	ldr	r2, [pc, #36]	; (800c580 <vPortSetupTimerInterrupt+0x44>)
 800c55a:	3b01      	subs	r3, #1
 800c55c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c55e:	4b04      	ldr	r3, [pc, #16]	; (800c570 <vPortSetupTimerInterrupt+0x34>)
 800c560:	2207      	movs	r2, #7
 800c562:	601a      	str	r2, [r3, #0]
}
 800c564:	bf00      	nop
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	e000e010 	.word	0xe000e010
 800c574:	e000e018 	.word	0xe000e018
 800c578:	24000000 	.word	0x24000000
 800c57c:	10624dd3 	.word	0x10624dd3
 800c580:	e000e014 	.word	0xe000e014

0800c584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c594 <vPortEnableVFP+0x10>
 800c588:	6801      	ldr	r1, [r0, #0]
 800c58a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c58e:	6001      	str	r1, [r0, #0]
 800c590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c592:	bf00      	nop
 800c594:	e000ed88 	.word	0xe000ed88

0800c598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c59e:	f3ef 8305 	mrs	r3, IPSR
 800c5a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2b0f      	cmp	r3, #15
 800c5a8:	d914      	bls.n	800c5d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5aa:	4a17      	ldr	r2, [pc, #92]	; (800c608 <vPortValidateInterruptPriority+0x70>)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c5b4:	4b15      	ldr	r3, [pc, #84]	; (800c60c <vPortValidateInterruptPriority+0x74>)
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	7afa      	ldrb	r2, [r7, #11]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d20a      	bcs.n	800c5d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	607b      	str	r3, [r7, #4]
}
 800c5d0:	bf00      	nop
 800c5d2:	e7fe      	b.n	800c5d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c5d4:	4b0e      	ldr	r3, [pc, #56]	; (800c610 <vPortValidateInterruptPriority+0x78>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c5dc:	4b0d      	ldr	r3, [pc, #52]	; (800c614 <vPortValidateInterruptPriority+0x7c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d90a      	bls.n	800c5fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e8:	f383 8811 	msr	BASEPRI, r3
 800c5ec:	f3bf 8f6f 	isb	sy
 800c5f0:	f3bf 8f4f 	dsb	sy
 800c5f4:	603b      	str	r3, [r7, #0]
}
 800c5f6:	bf00      	nop
 800c5f8:	e7fe      	b.n	800c5f8 <vPortValidateInterruptPriority+0x60>
	}
 800c5fa:	bf00      	nop
 800c5fc:	3714      	adds	r7, #20
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop
 800c608:	e000e3f0 	.word	0xe000e3f0
 800c60c:	24000ff4 	.word	0x24000ff4
 800c610:	e000ed0c 	.word	0xe000ed0c
 800c614:	24000ff8 	.word	0x24000ff8

0800c618 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b08a      	sub	sp, #40	; 0x28
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c620:	2300      	movs	r3, #0
 800c622:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c624:	f7fe fd2a 	bl	800b07c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c628:	4b5b      	ldr	r3, [pc, #364]	; (800c798 <pvPortMalloc+0x180>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d101      	bne.n	800c634 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c630:	f000 f920 	bl	800c874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c634:	4b59      	ldr	r3, [pc, #356]	; (800c79c <pvPortMalloc+0x184>)
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4013      	ands	r3, r2
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f040 8093 	bne.w	800c768 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d01d      	beq.n	800c684 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c648:	2208      	movs	r2, #8
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4413      	add	r3, r2
 800c64e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f003 0307 	and.w	r3, r3, #7
 800c656:	2b00      	cmp	r3, #0
 800c658:	d014      	beq.n	800c684 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f023 0307 	bic.w	r3, r3, #7
 800c660:	3308      	adds	r3, #8
 800c662:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f003 0307 	and.w	r3, r3, #7
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00a      	beq.n	800c684 <pvPortMalloc+0x6c>
	__asm volatile
 800c66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	617b      	str	r3, [r7, #20]
}
 800c680:	bf00      	nop
 800c682:	e7fe      	b.n	800c682 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d06e      	beq.n	800c768 <pvPortMalloc+0x150>
 800c68a:	4b45      	ldr	r3, [pc, #276]	; (800c7a0 <pvPortMalloc+0x188>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	429a      	cmp	r2, r3
 800c692:	d869      	bhi.n	800c768 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c694:	4b43      	ldr	r3, [pc, #268]	; (800c7a4 <pvPortMalloc+0x18c>)
 800c696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c698:	4b42      	ldr	r3, [pc, #264]	; (800c7a4 <pvPortMalloc+0x18c>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c69e:	e004      	b.n	800c6aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d903      	bls.n	800c6bc <pvPortMalloc+0xa4>
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1f1      	bne.n	800c6a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6bc:	4b36      	ldr	r3, [pc, #216]	; (800c798 <pvPortMalloc+0x180>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d050      	beq.n	800c768 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6c6:	6a3b      	ldr	r3, [r7, #32]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2208      	movs	r2, #8
 800c6cc:	4413      	add	r3, r2
 800c6ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	6a3b      	ldr	r3, [r7, #32]
 800c6d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	1ad2      	subs	r2, r2, r3
 800c6e0:	2308      	movs	r3, #8
 800c6e2:	005b      	lsls	r3, r3, #1
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d91f      	bls.n	800c728 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	f003 0307 	and.w	r3, r3, #7
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00a      	beq.n	800c710 <pvPortMalloc+0xf8>
	__asm volatile
 800c6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fe:	f383 8811 	msr	BASEPRI, r3
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	613b      	str	r3, [r7, #16]
}
 800c70c:	bf00      	nop
 800c70e:	e7fe      	b.n	800c70e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c712:	685a      	ldr	r2, [r3, #4]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	1ad2      	subs	r2, r2, r3
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c722:	69b8      	ldr	r0, [r7, #24]
 800c724:	f000 f908 	bl	800c938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c728:	4b1d      	ldr	r3, [pc, #116]	; (800c7a0 <pvPortMalloc+0x188>)
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	1ad3      	subs	r3, r2, r3
 800c732:	4a1b      	ldr	r2, [pc, #108]	; (800c7a0 <pvPortMalloc+0x188>)
 800c734:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c736:	4b1a      	ldr	r3, [pc, #104]	; (800c7a0 <pvPortMalloc+0x188>)
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	4b1b      	ldr	r3, [pc, #108]	; (800c7a8 <pvPortMalloc+0x190>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d203      	bcs.n	800c74a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c742:	4b17      	ldr	r3, [pc, #92]	; (800c7a0 <pvPortMalloc+0x188>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a18      	ldr	r2, [pc, #96]	; (800c7a8 <pvPortMalloc+0x190>)
 800c748:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74c:	685a      	ldr	r2, [r3, #4]
 800c74e:	4b13      	ldr	r3, [pc, #76]	; (800c79c <pvPortMalloc+0x184>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	431a      	orrs	r2, r3
 800c754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c756:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75a:	2200      	movs	r2, #0
 800c75c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c75e:	4b13      	ldr	r3, [pc, #76]	; (800c7ac <pvPortMalloc+0x194>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3301      	adds	r3, #1
 800c764:	4a11      	ldr	r2, [pc, #68]	; (800c7ac <pvPortMalloc+0x194>)
 800c766:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c768:	f7fe fc96 	bl	800b098 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	f003 0307 	and.w	r3, r3, #7
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00a      	beq.n	800c78c <pvPortMalloc+0x174>
	__asm volatile
 800c776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	60fb      	str	r3, [r7, #12]
}
 800c788:	bf00      	nop
 800c78a:	e7fe      	b.n	800c78a <pvPortMalloc+0x172>
	return pvReturn;
 800c78c:	69fb      	ldr	r3, [r7, #28]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3728      	adds	r7, #40	; 0x28
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	24004c04 	.word	0x24004c04
 800c79c:	24004c18 	.word	0x24004c18
 800c7a0:	24004c08 	.word	0x24004c08
 800c7a4:	24004bfc 	.word	0x24004bfc
 800c7a8:	24004c0c 	.word	0x24004c0c
 800c7ac:	24004c10 	.word	0x24004c10

0800c7b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d04d      	beq.n	800c85e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c7c2:	2308      	movs	r3, #8
 800c7c4:	425b      	negs	r3, r3
 800c7c6:	697a      	ldr	r2, [r7, #20]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	685a      	ldr	r2, [r3, #4]
 800c7d4:	4b24      	ldr	r3, [pc, #144]	; (800c868 <vPortFree+0xb8>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4013      	ands	r3, r2
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10a      	bne.n	800c7f4 <vPortFree+0x44>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	60fb      	str	r3, [r7, #12]
}
 800c7f0:	bf00      	nop
 800c7f2:	e7fe      	b.n	800c7f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00a      	beq.n	800c812 <vPortFree+0x62>
	__asm volatile
 800c7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c800:	f383 8811 	msr	BASEPRI, r3
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	f3bf 8f4f 	dsb	sy
 800c80c:	60bb      	str	r3, [r7, #8]
}
 800c80e:	bf00      	nop
 800c810:	e7fe      	b.n	800c810 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	685a      	ldr	r2, [r3, #4]
 800c816:	4b14      	ldr	r3, [pc, #80]	; (800c868 <vPortFree+0xb8>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4013      	ands	r3, r2
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d01e      	beq.n	800c85e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d11a      	bne.n	800c85e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	4b0e      	ldr	r3, [pc, #56]	; (800c868 <vPortFree+0xb8>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	43db      	mvns	r3, r3
 800c832:	401a      	ands	r2, r3
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c838:	f7fe fc20 	bl	800b07c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	685a      	ldr	r2, [r3, #4]
 800c840:	4b0a      	ldr	r3, [pc, #40]	; (800c86c <vPortFree+0xbc>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4413      	add	r3, r2
 800c846:	4a09      	ldr	r2, [pc, #36]	; (800c86c <vPortFree+0xbc>)
 800c848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c84a:	6938      	ldr	r0, [r7, #16]
 800c84c:	f000 f874 	bl	800c938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c850:	4b07      	ldr	r3, [pc, #28]	; (800c870 <vPortFree+0xc0>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3301      	adds	r3, #1
 800c856:	4a06      	ldr	r2, [pc, #24]	; (800c870 <vPortFree+0xc0>)
 800c858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c85a:	f7fe fc1d 	bl	800b098 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c85e:	bf00      	nop
 800c860:	3718      	adds	r7, #24
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	24004c18 	.word	0x24004c18
 800c86c:	24004c08 	.word	0x24004c08
 800c870:	24004c14 	.word	0x24004c14

0800c874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c874:	b480      	push	{r7}
 800c876:	b085      	sub	sp, #20
 800c878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c87a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c87e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c880:	4b27      	ldr	r3, [pc, #156]	; (800c920 <prvHeapInit+0xac>)
 800c882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f003 0307 	and.w	r3, r3, #7
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00c      	beq.n	800c8a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	3307      	adds	r3, #7
 800c892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f023 0307 	bic.w	r3, r3, #7
 800c89a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	4a1f      	ldr	r2, [pc, #124]	; (800c920 <prvHeapInit+0xac>)
 800c8a4:	4413      	add	r3, r2
 800c8a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c8ac:	4a1d      	ldr	r2, [pc, #116]	; (800c924 <prvHeapInit+0xb0>)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c8b2:	4b1c      	ldr	r3, [pc, #112]	; (800c924 <prvHeapInit+0xb0>)
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	4413      	add	r3, r2
 800c8be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8c0:	2208      	movs	r2, #8
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	1a9b      	subs	r3, r3, r2
 800c8c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f023 0307 	bic.w	r3, r3, #7
 800c8ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	4a15      	ldr	r2, [pc, #84]	; (800c928 <prvHeapInit+0xb4>)
 800c8d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8d6:	4b14      	ldr	r3, [pc, #80]	; (800c928 <prvHeapInit+0xb4>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8de:	4b12      	ldr	r3, [pc, #72]	; (800c928 <prvHeapInit+0xb4>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	1ad2      	subs	r2, r2, r3
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8f4:	4b0c      	ldr	r3, [pc, #48]	; (800c928 <prvHeapInit+0xb4>)
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	4a0a      	ldr	r2, [pc, #40]	; (800c92c <prvHeapInit+0xb8>)
 800c902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	4a09      	ldr	r2, [pc, #36]	; (800c930 <prvHeapInit+0xbc>)
 800c90a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c90c:	4b09      	ldr	r3, [pc, #36]	; (800c934 <prvHeapInit+0xc0>)
 800c90e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c912:	601a      	str	r2, [r3, #0]
}
 800c914:	bf00      	nop
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr
 800c920:	24000ffc 	.word	0x24000ffc
 800c924:	24004bfc 	.word	0x24004bfc
 800c928:	24004c04 	.word	0x24004c04
 800c92c:	24004c0c 	.word	0x24004c0c
 800c930:	24004c08 	.word	0x24004c08
 800c934:	24004c18 	.word	0x24004c18

0800c938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c940:	4b28      	ldr	r3, [pc, #160]	; (800c9e4 <prvInsertBlockIntoFreeList+0xac>)
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	e002      	b.n	800c94c <prvInsertBlockIntoFreeList+0x14>
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	60fb      	str	r3, [r7, #12]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	429a      	cmp	r2, r3
 800c954:	d8f7      	bhi.n	800c946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	4413      	add	r3, r2
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	429a      	cmp	r2, r3
 800c966:	d108      	bne.n	800c97a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	685a      	ldr	r2, [r3, #4]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	441a      	add	r2, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	68ba      	ldr	r2, [r7, #8]
 800c984:	441a      	add	r2, r3
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d118      	bne.n	800c9c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	4b15      	ldr	r3, [pc, #84]	; (800c9e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	429a      	cmp	r2, r3
 800c998:	d00d      	beq.n	800c9b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685a      	ldr	r2, [r3, #4]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	441a      	add	r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	e008      	b.n	800c9c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c9b6:	4b0c      	ldr	r3, [pc, #48]	; (800c9e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	601a      	str	r2, [r3, #0]
 800c9be:	e003      	b.n	800c9c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d002      	beq.n	800c9d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9d6:	bf00      	nop
 800c9d8:	3714      	adds	r7, #20
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
 800c9e4:	24004bfc 	.word	0x24004bfc
 800c9e8:	24004c04 	.word	0x24004c04

0800c9ec <memset>:
 800c9ec:	4402      	add	r2, r0
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d100      	bne.n	800c9f6 <memset+0xa>
 800c9f4:	4770      	bx	lr
 800c9f6:	f803 1b01 	strb.w	r1, [r3], #1
 800c9fa:	e7f9      	b.n	800c9f0 <memset+0x4>

0800c9fc <_reclaim_reent>:
 800c9fc:	4b29      	ldr	r3, [pc, #164]	; (800caa4 <_reclaim_reent+0xa8>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4283      	cmp	r3, r0
 800ca02:	b570      	push	{r4, r5, r6, lr}
 800ca04:	4604      	mov	r4, r0
 800ca06:	d04b      	beq.n	800caa0 <_reclaim_reent+0xa4>
 800ca08:	69c3      	ldr	r3, [r0, #28]
 800ca0a:	b143      	cbz	r3, 800ca1e <_reclaim_reent+0x22>
 800ca0c:	68db      	ldr	r3, [r3, #12]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d144      	bne.n	800ca9c <_reclaim_reent+0xa0>
 800ca12:	69e3      	ldr	r3, [r4, #28]
 800ca14:	6819      	ldr	r1, [r3, #0]
 800ca16:	b111      	cbz	r1, 800ca1e <_reclaim_reent+0x22>
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f000 f879 	bl	800cb10 <_free_r>
 800ca1e:	6961      	ldr	r1, [r4, #20]
 800ca20:	b111      	cbz	r1, 800ca28 <_reclaim_reent+0x2c>
 800ca22:	4620      	mov	r0, r4
 800ca24:	f000 f874 	bl	800cb10 <_free_r>
 800ca28:	69e1      	ldr	r1, [r4, #28]
 800ca2a:	b111      	cbz	r1, 800ca32 <_reclaim_reent+0x36>
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f000 f86f 	bl	800cb10 <_free_r>
 800ca32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ca34:	b111      	cbz	r1, 800ca3c <_reclaim_reent+0x40>
 800ca36:	4620      	mov	r0, r4
 800ca38:	f000 f86a 	bl	800cb10 <_free_r>
 800ca3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca3e:	b111      	cbz	r1, 800ca46 <_reclaim_reent+0x4a>
 800ca40:	4620      	mov	r0, r4
 800ca42:	f000 f865 	bl	800cb10 <_free_r>
 800ca46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ca48:	b111      	cbz	r1, 800ca50 <_reclaim_reent+0x54>
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f000 f860 	bl	800cb10 <_free_r>
 800ca50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ca52:	b111      	cbz	r1, 800ca5a <_reclaim_reent+0x5e>
 800ca54:	4620      	mov	r0, r4
 800ca56:	f000 f85b 	bl	800cb10 <_free_r>
 800ca5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ca5c:	b111      	cbz	r1, 800ca64 <_reclaim_reent+0x68>
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f000 f856 	bl	800cb10 <_free_r>
 800ca64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ca66:	b111      	cbz	r1, 800ca6e <_reclaim_reent+0x72>
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f000 f851 	bl	800cb10 <_free_r>
 800ca6e:	6a23      	ldr	r3, [r4, #32]
 800ca70:	b1b3      	cbz	r3, 800caa0 <_reclaim_reent+0xa4>
 800ca72:	4620      	mov	r0, r4
 800ca74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ca78:	4718      	bx	r3
 800ca7a:	5949      	ldr	r1, [r1, r5]
 800ca7c:	b941      	cbnz	r1, 800ca90 <_reclaim_reent+0x94>
 800ca7e:	3504      	adds	r5, #4
 800ca80:	69e3      	ldr	r3, [r4, #28]
 800ca82:	2d80      	cmp	r5, #128	; 0x80
 800ca84:	68d9      	ldr	r1, [r3, #12]
 800ca86:	d1f8      	bne.n	800ca7a <_reclaim_reent+0x7e>
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f000 f841 	bl	800cb10 <_free_r>
 800ca8e:	e7c0      	b.n	800ca12 <_reclaim_reent+0x16>
 800ca90:	680e      	ldr	r6, [r1, #0]
 800ca92:	4620      	mov	r0, r4
 800ca94:	f000 f83c 	bl	800cb10 <_free_r>
 800ca98:	4631      	mov	r1, r6
 800ca9a:	e7ef      	b.n	800ca7c <_reclaim_reent+0x80>
 800ca9c:	2500      	movs	r5, #0
 800ca9e:	e7ef      	b.n	800ca80 <_reclaim_reent+0x84>
 800caa0:	bd70      	pop	{r4, r5, r6, pc}
 800caa2:	bf00      	nop
 800caa4:	24000060 	.word	0x24000060

0800caa8 <__libc_init_array>:
 800caa8:	b570      	push	{r4, r5, r6, lr}
 800caaa:	4d0d      	ldr	r5, [pc, #52]	; (800cae0 <__libc_init_array+0x38>)
 800caac:	4c0d      	ldr	r4, [pc, #52]	; (800cae4 <__libc_init_array+0x3c>)
 800caae:	1b64      	subs	r4, r4, r5
 800cab0:	10a4      	asrs	r4, r4, #2
 800cab2:	2600      	movs	r6, #0
 800cab4:	42a6      	cmp	r6, r4
 800cab6:	d109      	bne.n	800cacc <__libc_init_array+0x24>
 800cab8:	4d0b      	ldr	r5, [pc, #44]	; (800cae8 <__libc_init_array+0x40>)
 800caba:	4c0c      	ldr	r4, [pc, #48]	; (800caec <__libc_init_array+0x44>)
 800cabc:	f000 f880 	bl	800cbc0 <_init>
 800cac0:	1b64      	subs	r4, r4, r5
 800cac2:	10a4      	asrs	r4, r4, #2
 800cac4:	2600      	movs	r6, #0
 800cac6:	42a6      	cmp	r6, r4
 800cac8:	d105      	bne.n	800cad6 <__libc_init_array+0x2e>
 800caca:	bd70      	pop	{r4, r5, r6, pc}
 800cacc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cad0:	4798      	blx	r3
 800cad2:	3601      	adds	r6, #1
 800cad4:	e7ee      	b.n	800cab4 <__libc_init_array+0xc>
 800cad6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cada:	4798      	blx	r3
 800cadc:	3601      	adds	r6, #1
 800cade:	e7f2      	b.n	800cac6 <__libc_init_array+0x1e>
 800cae0:	08010cc4 	.word	0x08010cc4
 800cae4:	08010cc4 	.word	0x08010cc4
 800cae8:	08010cc4 	.word	0x08010cc4
 800caec:	08010cc8 	.word	0x08010cc8

0800caf0 <__retarget_lock_acquire_recursive>:
 800caf0:	4770      	bx	lr

0800caf2 <__retarget_lock_release_recursive>:
 800caf2:	4770      	bx	lr

0800caf4 <memcpy>:
 800caf4:	440a      	add	r2, r1
 800caf6:	4291      	cmp	r1, r2
 800caf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cafc:	d100      	bne.n	800cb00 <memcpy+0xc>
 800cafe:	4770      	bx	lr
 800cb00:	b510      	push	{r4, lr}
 800cb02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb0a:	4291      	cmp	r1, r2
 800cb0c:	d1f9      	bne.n	800cb02 <memcpy+0xe>
 800cb0e:	bd10      	pop	{r4, pc}

0800cb10 <_free_r>:
 800cb10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb12:	2900      	cmp	r1, #0
 800cb14:	d044      	beq.n	800cba0 <_free_r+0x90>
 800cb16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb1a:	9001      	str	r0, [sp, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f1a1 0404 	sub.w	r4, r1, #4
 800cb22:	bfb8      	it	lt
 800cb24:	18e4      	addlt	r4, r4, r3
 800cb26:	f000 f83f 	bl	800cba8 <__malloc_lock>
 800cb2a:	4a1e      	ldr	r2, [pc, #120]	; (800cba4 <_free_r+0x94>)
 800cb2c:	9801      	ldr	r0, [sp, #4]
 800cb2e:	6813      	ldr	r3, [r2, #0]
 800cb30:	b933      	cbnz	r3, 800cb40 <_free_r+0x30>
 800cb32:	6063      	str	r3, [r4, #4]
 800cb34:	6014      	str	r4, [r2, #0]
 800cb36:	b003      	add	sp, #12
 800cb38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb3c:	f000 b83a 	b.w	800cbb4 <__malloc_unlock>
 800cb40:	42a3      	cmp	r3, r4
 800cb42:	d908      	bls.n	800cb56 <_free_r+0x46>
 800cb44:	6825      	ldr	r5, [r4, #0]
 800cb46:	1961      	adds	r1, r4, r5
 800cb48:	428b      	cmp	r3, r1
 800cb4a:	bf01      	itttt	eq
 800cb4c:	6819      	ldreq	r1, [r3, #0]
 800cb4e:	685b      	ldreq	r3, [r3, #4]
 800cb50:	1949      	addeq	r1, r1, r5
 800cb52:	6021      	streq	r1, [r4, #0]
 800cb54:	e7ed      	b.n	800cb32 <_free_r+0x22>
 800cb56:	461a      	mov	r2, r3
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	b10b      	cbz	r3, 800cb60 <_free_r+0x50>
 800cb5c:	42a3      	cmp	r3, r4
 800cb5e:	d9fa      	bls.n	800cb56 <_free_r+0x46>
 800cb60:	6811      	ldr	r1, [r2, #0]
 800cb62:	1855      	adds	r5, r2, r1
 800cb64:	42a5      	cmp	r5, r4
 800cb66:	d10b      	bne.n	800cb80 <_free_r+0x70>
 800cb68:	6824      	ldr	r4, [r4, #0]
 800cb6a:	4421      	add	r1, r4
 800cb6c:	1854      	adds	r4, r2, r1
 800cb6e:	42a3      	cmp	r3, r4
 800cb70:	6011      	str	r1, [r2, #0]
 800cb72:	d1e0      	bne.n	800cb36 <_free_r+0x26>
 800cb74:	681c      	ldr	r4, [r3, #0]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	6053      	str	r3, [r2, #4]
 800cb7a:	440c      	add	r4, r1
 800cb7c:	6014      	str	r4, [r2, #0]
 800cb7e:	e7da      	b.n	800cb36 <_free_r+0x26>
 800cb80:	d902      	bls.n	800cb88 <_free_r+0x78>
 800cb82:	230c      	movs	r3, #12
 800cb84:	6003      	str	r3, [r0, #0]
 800cb86:	e7d6      	b.n	800cb36 <_free_r+0x26>
 800cb88:	6825      	ldr	r5, [r4, #0]
 800cb8a:	1961      	adds	r1, r4, r5
 800cb8c:	428b      	cmp	r3, r1
 800cb8e:	bf04      	itt	eq
 800cb90:	6819      	ldreq	r1, [r3, #0]
 800cb92:	685b      	ldreq	r3, [r3, #4]
 800cb94:	6063      	str	r3, [r4, #4]
 800cb96:	bf04      	itt	eq
 800cb98:	1949      	addeq	r1, r1, r5
 800cb9a:	6021      	streq	r1, [r4, #0]
 800cb9c:	6054      	str	r4, [r2, #4]
 800cb9e:	e7ca      	b.n	800cb36 <_free_r+0x26>
 800cba0:	b003      	add	sp, #12
 800cba2:	bd30      	pop	{r4, r5, pc}
 800cba4:	24004d58 	.word	0x24004d58

0800cba8 <__malloc_lock>:
 800cba8:	4801      	ldr	r0, [pc, #4]	; (800cbb0 <__malloc_lock+0x8>)
 800cbaa:	f7ff bfa1 	b.w	800caf0 <__retarget_lock_acquire_recursive>
 800cbae:	bf00      	nop
 800cbb0:	24004d54 	.word	0x24004d54

0800cbb4 <__malloc_unlock>:
 800cbb4:	4801      	ldr	r0, [pc, #4]	; (800cbbc <__malloc_unlock+0x8>)
 800cbb6:	f7ff bf9c 	b.w	800caf2 <__retarget_lock_release_recursive>
 800cbba:	bf00      	nop
 800cbbc:	24004d54 	.word	0x24004d54

0800cbc0 <_init>:
 800cbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc2:	bf00      	nop
 800cbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbc6:	bc08      	pop	{r3}
 800cbc8:	469e      	mov	lr, r3
 800cbca:	4770      	bx	lr

0800cbcc <_fini>:
 800cbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbce:	bf00      	nop
 800cbd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbd2:	bc08      	pop	{r3}
 800cbd4:	469e      	mov	lr, r3
 800cbd6:	4770      	bx	lr
