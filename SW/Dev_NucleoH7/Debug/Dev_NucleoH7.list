
Dev_NucleoH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4d8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800d778  0800d778  0001d778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d880  0800d880  0001d880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d884  0800d884  0001d884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00004074  24000000  0800d888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004d14  24004074  080118fc  00024074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24008d88  080118fc  00028d88  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00024074  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000240a2  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023bfd  00000000  00000000  000240e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046b1  00000000  00000000  00047ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a88  00000000  00000000  0004c398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001449  00000000  00000000  0004de20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b737  00000000  00000000  0004f269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022a08  00000000  00000000  0008a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017a616  00000000  00000000  000ad3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000071e8  00000000  00000000  002279c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005e  00000000  00000000  0022eba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24004074 	.word	0x24004074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d760 	.word	0x0800d760

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24004078 	.word	0x24004078
 80002dc:	0800d760 	.word	0x0800d760

080002e0 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b088      	sub	sp, #32
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
 80002f4:	615a      	str	r2, [r3, #20]
 80002f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <MX_ADC3_Init+0x100>)
 80002fa:	4a3a      	ldr	r2, [pc, #232]	; (80003e4 <MX_ADC3_Init+0x104>)
 80002fc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80002fe:	4b38      	ldr	r3, [pc, #224]	; (80003e0 <MX_ADC3_Init+0x100>)
 8000300:	2208      	movs	r2, #8
 8000302:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <MX_ADC3_Init+0x100>)
 8000306:	2201      	movs	r2, #1
 8000308:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800030a:	4b35      	ldr	r3, [pc, #212]	; (80003e0 <MX_ADC3_Init+0x100>)
 800030c:	2208      	movs	r2, #8
 800030e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000310:	4b33      	ldr	r3, [pc, #204]	; (80003e0 <MX_ADC3_Init+0x100>)
 8000312:	2200      	movs	r2, #0
 8000314:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000316:	4b32      	ldr	r3, [pc, #200]	; (80003e0 <MX_ADC3_Init+0x100>)
 8000318:	2200      	movs	r2, #0
 800031a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 800031c:	4b30      	ldr	r3, [pc, #192]	; (80003e0 <MX_ADC3_Init+0x100>)
 800031e:	2203      	movs	r2, #3
 8000320:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000322:	4b2f      	ldr	r3, [pc, #188]	; (80003e0 <MX_ADC3_Init+0x100>)
 8000324:	2200      	movs	r2, #0
 8000326:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000328:	4b2d      	ldr	r3, [pc, #180]	; (80003e0 <MX_ADC3_Init+0x100>)
 800032a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800032e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000330:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <MX_ADC3_Init+0x100>)
 8000332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000336:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000338:	4b29      	ldr	r3, [pc, #164]	; (80003e0 <MX_ADC3_Init+0x100>)
 800033a:	2203      	movs	r2, #3
 800033c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <MX_ADC3_Init+0x100>)
 8000340:	2200      	movs	r2, #0
 8000342:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000344:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <MX_ADC3_Init+0x100>)
 8000346:	2200      	movs	r2, #0
 8000348:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800034a:	4b25      	ldr	r3, [pc, #148]	; (80003e0 <MX_ADC3_Init+0x100>)
 800034c:	2200      	movs	r2, #0
 800034e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000352:	4823      	ldr	r0, [pc, #140]	; (80003e0 <MX_ADC3_Init+0x100>)
 8000354:	f001 fac0 	bl	80018d8 <HAL_ADC_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 800035e:	f000 fccf 	bl	8000d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000362:	4b21      	ldr	r3, [pc, #132]	; (80003e8 <MX_ADC3_Init+0x108>)
 8000364:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000366:	2306      	movs	r3, #6
 8000368:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800036e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000372:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000374:	2304      	movs	r3, #4
 8000376:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800037c:	2300      	movs	r3, #0
 800037e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	4619      	mov	r1, r3
 8000384:	4816      	ldr	r0, [pc, #88]	; (80003e0 <MX_ADC3_Init+0x100>)
 8000386:	f001 ff6f 	bl	8002268 <HAL_ADC_ConfigChannel>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000390:	f000 fcb6 	bl	8000d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <MX_ADC3_Init+0x10c>)
 8000396:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000398:	230c      	movs	r3, #12
 800039a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	4619      	mov	r1, r3
 80003a0:	480f      	ldr	r0, [pc, #60]	; (80003e0 <MX_ADC3_Init+0x100>)
 80003a2:	f001 ff61 	bl	8002268 <HAL_ADC_ConfigChannel>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80003ac:	f000 fca8 	bl	8000d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <MX_ADC3_Init+0x110>)
 80003b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003b4:	2312      	movs	r3, #18
 80003b6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_ADC3_Init+0x114>)
 80003ba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
  sConfig.OffsetRightShift = DISABLE;
 80003c0:	2300      	movs	r3, #0
 80003c2:	773b      	strb	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	4619      	mov	r1, r3
 80003c8:	4805      	ldr	r0, [pc, #20]	; (80003e0 <MX_ADC3_Init+0x100>)
 80003ca:	f001 ff4d 	bl	8002268 <HAL_ADC_ConfigChannel>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_ADC3_Init+0xf8>
  {
    Error_Handler();
 80003d4:	f000 fc94 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80003d8:	bf00      	nop
 80003da:	3720      	adds	r7, #32
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	24004090 	.word	0x24004090
 80003e4:	58026000 	.word	0x58026000
 80003e8:	04300002 	.word	0x04300002
 80003ec:	08600004 	.word	0x08600004
 80003f0:	0c900008 	.word	0x0c900008
 80003f4:	47ff0000 	.word	0x47ff0000

080003f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b0bc      	sub	sp, #240	; 0xf0
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000400:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
 800040e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000410:	f107 0318 	add.w	r3, r7, #24
 8000414:	22c0      	movs	r2, #192	; 0xc0
 8000416:	2100      	movs	r1, #0
 8000418:	4618      	mov	r0, r3
 800041a:	f00d f8b7 	bl	800d58c <memset>
  if(adcHandle->Instance==ADC3)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a53      	ldr	r2, [pc, #332]	; (8000570 <HAL_ADC_MspInit+0x178>)
 8000424:	4293      	cmp	r3, r2
 8000426:	f040 809e 	bne.w	8000566 <HAL_ADC_MspInit+0x16e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800042a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800042e:	f04f 0300 	mov.w	r3, #0
 8000432:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000436:	2301      	movs	r3, #1
 8000438:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 800043a:	2313      	movs	r3, #19
 800043c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800043e:	2302      	movs	r3, #2
 8000440:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000442:	2302      	movs	r3, #2
 8000444:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000446:	2302      	movs	r3, #2
 8000448:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800044a:	23c0      	movs	r3, #192	; 0xc0
 800044c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800044e:	2320      	movs	r3, #32
 8000450:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000456:	2300      	movs	r3, #0
 8000458:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800045c:	f107 0318 	add.w	r3, r7, #24
 8000460:	4618      	mov	r0, r3
 8000462:	f006 f989 	bl	8006778 <HAL_RCCEx_PeriphCLKConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 800046c:	f000 fc48 	bl	8000d00 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000470:	4b40      	ldr	r3, [pc, #256]	; (8000574 <HAL_ADC_MspInit+0x17c>)
 8000472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000476:	4a3f      	ldr	r2, [pc, #252]	; (8000574 <HAL_ADC_MspInit+0x17c>)
 8000478:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800047c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000480:	4b3c      	ldr	r3, [pc, #240]	; (8000574 <HAL_ADC_MspInit+0x17c>)
 8000482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800048a:	617b      	str	r3, [r7, #20]
 800048c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800048e:	4b39      	ldr	r3, [pc, #228]	; (8000574 <HAL_ADC_MspInit+0x17c>)
 8000490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000494:	4a37      	ldr	r2, [pc, #220]	; (8000574 <HAL_ADC_MspInit+0x17c>)
 8000496:	f043 0320 	orr.w	r3, r3, #32
 800049a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800049e:	4b35      	ldr	r3, [pc, #212]	; (8000574 <HAL_ADC_MspInit+0x17c>)
 80004a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a4:	f003 0320 	and.w	r3, r3, #32
 80004a8:	613b      	str	r3, [r7, #16]
 80004aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ac:	4b31      	ldr	r3, [pc, #196]	; (8000574 <HAL_ADC_MspInit+0x17c>)
 80004ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004b2:	4a30      	ldr	r2, [pc, #192]	; (8000574 <HAL_ADC_MspInit+0x17c>)
 80004b4:	f043 0304 	orr.w	r3, r3, #4
 80004b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004bc:	4b2d      	ldr	r3, [pc, #180]	; (8000574 <HAL_ADC_MspInit+0x17c>)
 80004be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c2:	f003 0304 	and.w	r3, r3, #4
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
    PF7     ------> ADC3_INP3
    PF8     ------> ADC3_INN3
    PF9     ------> ADC3_INP2
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80004ca:	f44f 7360 	mov.w	r3, #896	; 0x380
 80004ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004d2:	2303      	movs	r3, #3
 80004d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80004e2:	4619      	mov	r1, r3
 80004e4:	4824      	ldr	r0, [pc, #144]	; (8000578 <HAL_ADC_MspInit+0x180>)
 80004e6:	f004 ff19 	bl	800531c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80004ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80004ee:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80004f2:	f000 ffad 	bl	8001450 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 80004f6:	4b21      	ldr	r3, [pc, #132]	; (800057c <HAL_ADC_MspInit+0x184>)
 80004f8:	4a21      	ldr	r2, [pc, #132]	; (8000580 <HAL_ADC_MspInit+0x188>)
 80004fa:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80004fc:	4b1f      	ldr	r3, [pc, #124]	; (800057c <HAL_ADC_MspInit+0x184>)
 80004fe:	2273      	movs	r2, #115	; 0x73
 8000500:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000502:	4b1e      	ldr	r3, [pc, #120]	; (800057c <HAL_ADC_MspInit+0x184>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000508:	4b1c      	ldr	r3, [pc, #112]	; (800057c <HAL_ADC_MspInit+0x184>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800050e:	4b1b      	ldr	r3, [pc, #108]	; (800057c <HAL_ADC_MspInit+0x184>)
 8000510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000514:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000516:	4b19      	ldr	r3, [pc, #100]	; (800057c <HAL_ADC_MspInit+0x184>)
 8000518:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800051c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <HAL_ADC_MspInit+0x184>)
 8000520:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000524:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <HAL_ADC_MspInit+0x184>)
 8000528:	f44f 7280 	mov.w	r2, #256	; 0x100
 800052c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <HAL_ADC_MspInit+0x184>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <HAL_ADC_MspInit+0x184>)
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800053a:	4810      	ldr	r0, [pc, #64]	; (800057c <HAL_ADC_MspInit+0x184>)
 800053c:	f002 fe16 	bl	800316c <HAL_DMA_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_ADC_MspInit+0x152>
    {
      Error_Handler();
 8000546:	f000 fbdb 	bl	8000d00 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a0b      	ldr	r2, [pc, #44]	; (800057c <HAL_ADC_MspInit+0x184>)
 800054e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000550:	4a0a      	ldr	r2, [pc, #40]	; (800057c <HAL_ADC_MspInit+0x184>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2105      	movs	r1, #5
 800055a:	207f      	movs	r0, #127	; 0x7f
 800055c:	f002 fdde 	bl	800311c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000560:	207f      	movs	r0, #127	; 0x7f
 8000562:	f002 fdf5 	bl	8003150 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000566:	bf00      	nop
 8000568:	37f0      	adds	r7, #240	; 0xf0
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	58026000 	.word	0x58026000
 8000574:	58024400 	.word	0x58024400
 8000578:	58021400 	.word	0x58021400
 800057c:	240040f4 	.word	0x240040f4
 8000580:	40020010 	.word	0x40020010

08000584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <MX_DMA_Init+0x3c>)
 800058c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000590:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <MX_DMA_Init+0x3c>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_DMA_Init+0x3c>)
 800059c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2105      	movs	r1, #5
 80005ac:	200b      	movs	r0, #11
 80005ae:	f002 fdb5 	bl	800311c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005b2:	200b      	movs	r0, #11
 80005b4:	f002 fdcc 	bl	8003150 <HAL_NVIC_EnableIRQ>

}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	58024400 	.word	0x58024400

080005c4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0
return 0;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qMeasurements */
  qMeasurementsHandle = osMessageQueueNew (16, sizeof(float), &qMeasurements_attributes);
 80005e8:	4a14      	ldr	r2, [pc, #80]	; (800063c <MX_FREERTOS_Init+0x58>)
 80005ea:	2104      	movs	r1, #4
 80005ec:	2010      	movs	r0, #16
 80005ee:	f00a f928 	bl	800a842 <osMessageQueueNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a12      	ldr	r2, [pc, #72]	; (8000640 <MX_FREERTOS_Init+0x5c>)
 80005f6:	6013      	str	r3, [r2, #0]

  /* creation of qControl */
  qControlHandle = osMessageQueueNew (16, sizeof(float), &qControl_attributes);
 80005f8:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_FREERTOS_Init+0x60>)
 80005fa:	2104      	movs	r1, #4
 80005fc:	2010      	movs	r0, #16
 80005fe:	f00a f920 	bl	800a842 <osMessageQueueNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a10      	ldr	r2, [pc, #64]	; (8000648 <MX_FREERTOS_Init+0x64>)
 8000606:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Measurements */
  MeasurementsHandle = osThreadNew(initMeasurements, NULL, &Measurements_attributes);
 8000608:	4a10      	ldr	r2, [pc, #64]	; (800064c <MX_FREERTOS_Init+0x68>)
 800060a:	2100      	movs	r1, #0
 800060c:	4810      	ldr	r0, [pc, #64]	; (8000650 <MX_FREERTOS_Init+0x6c>)
 800060e:	f00a f86b 	bl	800a6e8 <osThreadNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <MX_FREERTOS_Init+0x70>)
 8000616:	6013      	str	r3, [r2, #0]

  /* creation of Control */
  ControlHandle = osThreadNew(initControl, NULL, &Control_attributes);
 8000618:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <MX_FREERTOS_Init+0x74>)
 800061a:	2100      	movs	r1, #0
 800061c:	480f      	ldr	r0, [pc, #60]	; (800065c <MX_FREERTOS_Init+0x78>)
 800061e:	f00a f863 	bl	800a6e8 <osThreadNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <MX_FREERTOS_Init+0x7c>)
 8000626:	6013      	str	r3, [r2, #0]

  /* creation of Safety */
  SafetyHandle = osThreadNew(initSafety, NULL, &Safety_attributes);
 8000628:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <MX_FREERTOS_Init+0x80>)
 800062a:	2100      	movs	r1, #0
 800062c:	480e      	ldr	r0, [pc, #56]	; (8000668 <MX_FREERTOS_Init+0x84>)
 800062e:	f00a f85b 	bl	800a6e8 <osThreadNew>
 8000632:	4603      	mov	r3, r0
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <MX_FREERTOS_Init+0x88>)
 8000636:	6013      	str	r3, [r2, #0]
  /* add events, ... */


  /* USER CODE END RTOS_EVENTS */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	0800d838 	.word	0x0800d838
 8000640:	24004188 	.word	0x24004188
 8000644:	0800d850 	.word	0x0800d850
 8000648:	2400418c 	.word	0x2400418c
 800064c:	0800d7cc 	.word	0x0800d7cc
 8000650:	08000671 	.word	0x08000671
 8000654:	2400417c 	.word	0x2400417c
 8000658:	0800d7f0 	.word	0x0800d7f0
 800065c:	080006c1 	.word	0x080006c1
 8000660:	24004180 	.word	0x24004180
 8000664:	0800d814 	.word	0x0800d814
 8000668:	08000811 	.word	0x08000811
 800066c:	24004184 	.word	0x24004184

08000670 <initMeasurements>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_initMeasurements */
void initMeasurements(void *argument)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN initMeasurements */
  /* Infinite loop */
  for(;;)
  {
	// Wait for notification from Control task
	ulTaskNotifyTake(pdTRUE, 1);
 8000678:	2101      	movs	r1, #1
 800067a:	2001      	movs	r0, #1
 800067c:	f00b ff5e 	bl	800c53c <ulTaskNotifyTake>



	measurementsAlive++;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <initMeasurements+0x44>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <initMeasurements+0x44>)
 8000688:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2101      	movs	r1, #1
 800068e:	480a      	ldr	r0, [pc, #40]	; (80006b8 <initMeasurements+0x48>)
 8000690:	f005 f80c 	bl	80056ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069a:	4807      	ldr	r0, [pc, #28]	; (80006b8 <initMeasurements+0x48>)
 800069c:	f005 f806 	bl	80056ac <HAL_GPIO_WritePin>

	// Resume Control task
	vTaskResume(ControlHandle);
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <initMeasurements+0x4c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f00b f9e5 	bl	800ba74 <vTaskResume>

	// Suspend Measurements task
	vTaskSuspend(NULL);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f00b f93a 	bl	800b924 <vTaskSuspend>
	ulTaskNotifyTake(pdTRUE, 1);
 80006b0:	e7e2      	b.n	8000678 <initMeasurements+0x8>
 80006b2:	bf00      	nop
 80006b4:	24004170 	.word	0x24004170
 80006b8:	58020400 	.word	0x58020400
 80006bc:	24004180 	.word	0x24004180

080006c0 <initControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_initControl */
void initControl(void *argument)
{
 80006c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c2:	b093      	sub	sp, #76	; 0x4c
 80006c4:	af10      	add	r7, sp, #64	; 0x40
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN initControl */
  /* Infinite loop */
  for(;;)
  {
	// Wait for notification from Measurements task
	ulTaskNotifyTake(pdTRUE, 1);
 80006c8:	2101      	movs	r1, #1
 80006ca:	2001      	movs	r0, #1
 80006cc:	f00b ff36 	bl	800c53c <ulTaskNotifyTake>


	// Calculate duty based on received current and setpoint
	currentSetpoint = (currentSetpoint < 0.0f) ? 0.0f : (currentSetpoint > 4.0f) ? 4.0f : currentSetpoint;
 80006d0:	4b44      	ldr	r3, [pc, #272]	; (80007e4 <initControl+0x124>)
 80006d2:	edd3 7a00 	vldr	s15, [r3]
 80006d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006de:	d502      	bpl.n	80006e6 <initControl+0x26>
 80006e0:	f04f 0300 	mov.w	r3, #0
 80006e4:	e00e      	b.n	8000704 <initControl+0x44>
 80006e6:	4b3f      	ldr	r3, [pc, #252]	; (80007e4 <initControl+0x124>)
 80006e8:	edd3 7a00 	vldr	s15, [r3]
 80006ec:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80006f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f8:	dd02      	ble.n	8000700 <initControl+0x40>
 80006fa:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80006fe:	e001      	b.n	8000704 <initControl+0x44>
 8000700:	4b38      	ldr	r3, [pc, #224]	; (80007e4 <initControl+0x124>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a37      	ldr	r2, [pc, #220]	; (80007e4 <initControl+0x124>)
 8000706:	6013      	str	r3, [r2, #0]

	//duty = (currentSetpoint - current) / voltage;

	duty = (duty < 0.0f) ? 0.0f : (duty > 0.99f) ? 0.99f : duty;
 8000708:	4b37      	ldr	r3, [pc, #220]	; (80007e8 <initControl+0x128>)
 800070a:	edd3 7a00 	vldr	s15, [r3]
 800070e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000716:	d502      	bpl.n	800071e <initControl+0x5e>
 8000718:	f04f 0300 	mov.w	r3, #0
 800071c:	e00d      	b.n	800073a <initControl+0x7a>
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <initControl+0x128>)
 8000720:	edd3 7a00 	vldr	s15, [r3]
 8000724:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80007ec <initControl+0x12c>
 8000728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800072c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000730:	dd01      	ble.n	8000736 <initControl+0x76>
 8000732:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <initControl+0x130>)
 8000734:	e001      	b.n	800073a <initControl+0x7a>
 8000736:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <initControl+0x128>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a2b      	ldr	r2, [pc, #172]	; (80007e8 <initControl+0x128>)
 800073c:	6013      	str	r3, [r2, #0]

	if (enable) {
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <initControl+0x134>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2b00      	cmp	r3, #0
 8000746:	d034      	beq.n	80007b2 <initControl+0xf2>
		enablePWM(htim1, duty);
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <initControl+0x128>)
 800074a:	edd3 7a00 	vldr	s15, [r3]
 800074e:	4e2a      	ldr	r6, [pc, #168]	; (80007f8 <initControl+0x138>)
 8000750:	466d      	mov	r5, sp
 8000752:	f106 0410 	add.w	r4, r6, #16
 8000756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800075a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800075c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800075e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000762:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000766:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800076a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800076e:	eeb0 0a67 	vmov.f32	s0, s15
 8000772:	f000 fb01 	bl	8000d78 <enablePWM>
		HAL_GPIO_WritePin(enable_HW_GPIO_Port, enable_HW_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	4820      	ldr	r0, [pc, #128]	; (80007fc <initControl+0x13c>)
 800077c:	f004 ff96 	bl	80056ac <HAL_GPIO_WritePin>
		// Send duty to qControl
		//osMessageQueuePut(qControlHandle, &duty, 0, 0);

		controlAlive++;
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <initControl+0x140>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <initControl+0x140>)
 8000788:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000790:	481c      	ldr	r0, [pc, #112]	; (8000804 <initControl+0x144>)
 8000792:	f004 ff8b 	bl	80056ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2101      	movs	r1, #1
 800079a:	481a      	ldr	r0, [pc, #104]	; (8000804 <initControl+0x144>)
 800079c:	f004 ff86 	bl	80056ac <HAL_GPIO_WritePin>

		// Resume Measurements task
		vTaskResume(MeasurementsHandle);
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <initControl+0x148>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f00b f965 	bl	800ba74 <vTaskResume>

		// Suspend Control task
		vTaskSuspend(NULL);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f00b f8ba 	bl	800b924 <vTaskSuspend>
 80007b0:	e78a      	b.n	80006c8 <initControl+0x8>

	} else {
		disablePWM(htim1);
 80007b2:	4e11      	ldr	r6, [pc, #68]	; (80007f8 <initControl+0x138>)
 80007b4:	466d      	mov	r5, sp
 80007b6:	f106 0410 	add.w	r4, r6, #16
 80007ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007c6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007ca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80007ce:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007d2:	f000 fb1b 	bl	8000e0c <disablePWM>
		controlAlive = 0;
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <initControl+0x140>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
		measurementsAlive = 0;
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <initControl+0x14c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE, 1);
 80007e2:	e771      	b.n	80006c8 <initControl+0x8>
 80007e4:	240041a0 	.word	0x240041a0
 80007e8:	2400400c 	.word	0x2400400c
 80007ec:	3f7d70a4 	.word	0x3f7d70a4
 80007f0:	3f7d70a4 	.word	0x3f7d70a4
 80007f4:	240041a4 	.word	0x240041a4
 80007f8:	24004200 	.word	0x24004200
 80007fc:	58021000 	.word	0x58021000
 8000800:	24004174 	.word	0x24004174
 8000804:	58020400 	.word	0x58020400
 8000808:	2400417c 	.word	0x2400417c
 800080c:	24004170 	.word	0x24004170

08000810 <initSafety>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_initSafety */
void initSafety(void *argument)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN initSafety */
  /* Infinite loop */
  for(;;)
  {
	enable = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081c:	4820      	ldr	r0, [pc, #128]	; (80008a0 <initSafety+0x90>)
 800081e:	f004 ff2d 	bl	800567c <HAL_GPIO_ReadPin>
 8000822:	4603      	mov	r3, r0
 8000824:	461a      	mov	r2, r3
 8000826:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <initSafety+0x94>)
 8000828:	701a      	strb	r2, [r3, #0]
	// Read ADC3 and use getLinear and getTemperature results
	current = getLinear(ADC3_raw[1], currentSlope, currentOffset);
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <initSafety+0x98>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	4a1f      	ldr	r2, [pc, #124]	; (80008ac <initSafety+0x9c>)
 8000830:	edd2 7a00 	vldr	s15, [r2]
 8000834:	4a1e      	ldr	r2, [pc, #120]	; (80008b0 <initSafety+0xa0>)
 8000836:	ed92 7a00 	vldr	s14, [r2]
 800083a:	eef0 0a47 	vmov.f32	s1, s14
 800083e:	eeb0 0a67 	vmov.f32	s0, s15
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fa64 	bl	8000d10 <getLinear>
 8000848:	eef0 7a40 	vmov.f32	s15, s0
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <initSafety+0xa4>)
 800084e:	edc3 7a00 	vstr	s15, [r3]
	voltage = getLinear(ADC3_raw[2]-2066, voltageSlope, voltageOffset);
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <initSafety+0x98>)
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	f6a3 0312 	subw	r3, r3, #2066	; 0x812
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <initSafety+0xa8>)
 800085c:	edd2 7a00 	vldr	s15, [r2]
 8000860:	4a16      	ldr	r2, [pc, #88]	; (80008bc <initSafety+0xac>)
 8000862:	ed92 7a00 	vldr	s14, [r2]
 8000866:	eef0 0a47 	vmov.f32	s1, s14
 800086a:	eeb0 0a67 	vmov.f32	s0, s15
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fa4e 	bl	8000d10 <getLinear>
 8000874:	eef0 7a40 	vmov.f32	s15, s0
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <initSafety+0xb0>)
 800087a:	edc3 7a00 	vstr	s15, [r3]
	temp = tempLUT[ADC3_raw[0]]; // LUT array indexing
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <initSafety+0x98>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <initSafety+0xb4>)
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <initSafety+0xb8>)
 800088c:	6013      	str	r3, [r2, #0]

    osDelay(1);
 800088e:	2001      	movs	r0, #1
 8000890:	f009 ffbc 	bl	800a80c <osDelay>
    safetyAlive++;
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <initSafety+0xbc>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	4a0c      	ldr	r2, [pc, #48]	; (80008cc <initSafety+0xbc>)
 800089c:	6013      	str	r3, [r2, #0]
	enable = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 800089e:	e7bb      	b.n	8000818 <initSafety+0x8>
 80008a0:	58020800 	.word	0x58020800
 80008a4:	240041a4 	.word	0x240041a4
 80008a8:	24004190 	.word	0x24004190
 80008ac:	24004000 	.word	0x24004000
 80008b0:	24004004 	.word	0x24004004
 80008b4:	240041a8 	.word	0x240041a8
 80008b8:	24004008 	.word	0x24004008
 80008bc:	2400416c 	.word	0x2400416c
 80008c0:	240041ac 	.word	0x240041ac
 80008c4:	24000000 	.word	0x24000000
 80008c8:	240041b0 	.word	0x240041b0
 80008cc:	24004178 	.word	0x24004178

080008d0 <MX_GPIO_Init>:
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08e      	sub	sp, #56	; 0x38
 80008d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b8a      	ldr	r3, [pc, #552]	; (8000b10 <MX_GPIO_Init+0x240>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ec:	4a88      	ldr	r2, [pc, #544]	; (8000b10 <MX_GPIO_Init+0x240>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f6:	4b86      	ldr	r3, [pc, #536]	; (8000b10 <MX_GPIO_Init+0x240>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	623b      	str	r3, [r7, #32]
 8000902:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000904:	4b82      	ldr	r3, [pc, #520]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090a:	4a81      	ldr	r2, [pc, #516]	; (8000b10 <MX_GPIO_Init+0x240>)
 800090c:	f043 0320 	orr.w	r3, r3, #32
 8000910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000914:	4b7e      	ldr	r3, [pc, #504]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091a:	f003 0320 	and.w	r3, r3, #32
 800091e:	61fb      	str	r3, [r7, #28]
 8000920:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000922:	4b7b      	ldr	r3, [pc, #492]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	4a79      	ldr	r2, [pc, #484]	; (8000b10 <MX_GPIO_Init+0x240>)
 800092a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000932:	4b77      	ldr	r3, [pc, #476]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093c:	61bb      	str	r3, [r7, #24]
 800093e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	4b73      	ldr	r3, [pc, #460]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000946:	4a72      	ldr	r2, [pc, #456]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000950:	4b6f      	ldr	r3, [pc, #444]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b6c      	ldr	r3, [pc, #432]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000964:	4a6a      	ldr	r2, [pc, #424]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000966:	f043 0302 	orr.w	r3, r3, #2
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096e:	4b68      	ldr	r3, [pc, #416]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800097c:	4b64      	ldr	r3, [pc, #400]	; (8000b10 <MX_GPIO_Init+0x240>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000982:	4a63      	ldr	r2, [pc, #396]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000984:	f043 0310 	orr.w	r3, r3, #16
 8000988:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098c:	4b60      	ldr	r3, [pc, #384]	; (8000b10 <MX_GPIO_Init+0x240>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000992:	f003 0310 	and.w	r3, r3, #16
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	4b5d      	ldr	r3, [pc, #372]	; (8000b10 <MX_GPIO_Init+0x240>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a0:	4a5b      	ldr	r2, [pc, #364]	; (8000b10 <MX_GPIO_Init+0x240>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009aa:	4b59      	ldr	r3, [pc, #356]	; (8000b10 <MX_GPIO_Init+0x240>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b8:	4b55      	ldr	r3, [pc, #340]	; (8000b10 <MX_GPIO_Init+0x240>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009be:	4a54      	ldr	r2, [pc, #336]	; (8000b10 <MX_GPIO_Init+0x240>)
 80009c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c8:	4b51      	ldr	r3, [pc, #324]	; (8000b10 <MX_GPIO_Init+0x240>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f244 0101 	movw	r1, #16385	; 0x4001
 80009dc:	484d      	ldr	r0, [pc, #308]	; (8000b14 <MX_GPIO_Init+0x244>)
 80009de:	f004 fe65 	bl	80056ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enable_HW_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2182      	movs	r1, #130	; 0x82
 80009e6:	484c      	ldr	r0, [pc, #304]	; (8000b18 <MX_GPIO_Init+0x248>)
 80009e8:	f004 fe60 	bl	80056ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	4619      	mov	r1, r3
 8000a00:	4846      	ldr	r0, [pc, #280]	; (8000b1c <MX_GPIO_Init+0x24c>)
 8000a02:	f004 fc8b 	bl	800531c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a06:	2386      	movs	r3, #134	; 0x86
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a16:	230b      	movs	r3, #11
 8000a18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1e:	4619      	mov	r1, r3
 8000a20:	483f      	ldr	r0, [pc, #252]	; (8000b20 <MX_GPIO_Init+0x250>)
 8000a22:	f004 fc7b 	bl	800531c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a26:	2330      	movs	r3, #48	; 0x30
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a36:	230b      	movs	r3, #11
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4836      	ldr	r0, [pc, #216]	; (8000b1c <MX_GPIO_Init+0x24c>)
 8000a42:	f004 fc6b 	bl	800531c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a46:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	482d      	ldr	r0, [pc, #180]	; (8000b14 <MX_GPIO_Init+0x244>)
 8000a60:	f004 fc5c 	bl	800531c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = enable_HW_Pin|LD2_Pin;
 8000a64:	2382      	movs	r3, #130	; 0x82
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4827      	ldr	r0, [pc, #156]	; (8000b18 <MX_GPIO_Init+0x248>)
 8000a7c:	f004 fc4e 	bl	800531c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a92:	230b      	movs	r3, #11
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	481d      	ldr	r0, [pc, #116]	; (8000b14 <MX_GPIO_Init+0x244>)
 8000a9e:	f004 fc3d 	bl	800531c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000aa2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	4819      	ldr	r0, [pc, #100]	; (8000b24 <MX_GPIO_Init+0x254>)
 8000ac0:	f004 fc2c 	bl	800531c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ac4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480f      	ldr	r0, [pc, #60]	; (8000b20 <MX_GPIO_Init+0x250>)
 8000ae2:	f004 fc1b 	bl	800531c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ae6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af8:	230b      	movs	r3, #11
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	4809      	ldr	r0, [pc, #36]	; (8000b28 <MX_GPIO_Init+0x258>)
 8000b04:	f004 fc0a 	bl	800531c <HAL_GPIO_Init>

}
 8000b08:	bf00      	nop
 8000b0a:	3738      	adds	r7, #56	; 0x38
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	58024400 	.word	0x58024400
 8000b14:	58020400 	.word	0x58020400
 8000b18:	58021000 	.word	0x58021000
 8000b1c:	58020800 	.word	0x58020800
 8000b20:	58020000 	.word	0x58020000
 8000b24:	58020c00 	.word	0x58020c00
 8000b28:	58021800 	.word	0x58021800

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b30:	f000 fc26 	bl	8001380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b34:	f000 f824 	bl	8000b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b38:	f7ff feca 	bl	80008d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b3c:	f7ff fd22 	bl	8000584 <MX_DMA_Init>
  MX_ADC3_Init();
 8000b40:	f7ff fbce 	bl	80002e0 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000b44:	f000 fad6 	bl	80010f4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_Base_Start(&htim1);
 8000b48:	480a      	ldr	r0, [pc, #40]	; (8000b74 <main+0x48>)
 8000b4a:	f008 fb6b 	bl	8009224 <HAL_TIM_Base_Start>

	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000b4e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000b52:	2100      	movs	r1, #0
 8000b54:	4808      	ldr	r0, [pc, #32]	; (8000b78 <main+0x4c>)
 8000b56:	f002 f993 	bl	8002e80 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *) ADC3_raw,3);
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	4907      	ldr	r1, [pc, #28]	; (8000b7c <main+0x50>)
 8000b5e:	4806      	ldr	r0, [pc, #24]	; (8000b78 <main+0x4c>)
 8000b60:	f001 f85c 	bl	8001c1c <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b64:	f009 fd76 	bl	800a654 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000b68:	f7ff fd3c 	bl	80005e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b6c:	f009 fd96 	bl	800a69c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <main+0x44>
 8000b72:	bf00      	nop
 8000b74:	24004200 	.word	0x24004200
 8000b78:	24004090 	.word	0x24004090
 8000b7c:	24004190 	.word	0x24004190

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b09e      	sub	sp, #120	; 0x78
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8a:	224c      	movs	r2, #76	; 0x4c
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f00c fcfc 	bl	800d58c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2220      	movs	r2, #32
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f00c fcf5 	bl	800d58c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f004 fd9c 	bl	80056e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	4b48      	ldr	r3, [pc, #288]	; (8000cd0 <SystemClock_Config+0x150>)
 8000bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb0:	4a47      	ldr	r2, [pc, #284]	; (8000cd0 <SystemClock_Config+0x150>)
 8000bb2:	f023 0301 	bic.w	r3, r3, #1
 8000bb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bb8:	4b45      	ldr	r3, [pc, #276]	; (8000cd0 <SystemClock_Config+0x150>)
 8000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <SystemClock_Config+0x154>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	4a43      	ldr	r2, [pc, #268]	; (8000cd4 <SystemClock_Config+0x154>)
 8000bc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bcc:	6193      	str	r3, [r2, #24]
 8000bce:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <SystemClock_Config+0x154>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bda:	bf00      	nop
 8000bdc:	4b3d      	ldr	r3, [pc, #244]	; (8000cd4 <SystemClock_Config+0x154>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000be8:	d1f8      	bne.n	8000bdc <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	4b3b      	ldr	r3, [pc, #236]	; (8000cd8 <SystemClock_Config+0x158>)
 8000bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bf0:	4a39      	ldr	r2, [pc, #228]	; (8000cd8 <SystemClock_Config+0x158>)
 8000bf2:	f043 0302 	orr.w	r3, r3, #2
 8000bf6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bfa:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <SystemClock_Config+0x158>)
 8000bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c08:	2300      	movs	r3, #0
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <SystemClock_Config+0x154>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a30      	ldr	r2, [pc, #192]	; (8000cd4 <SystemClock_Config+0x154>)
 8000c12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <SystemClock_Config+0x154>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <SystemClock_Config+0x150>)
 8000c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c26:	4a2a      	ldr	r2, [pc, #168]	; (8000cd0 <SystemClock_Config+0x150>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c2e:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <SystemClock_Config+0x150>)
 8000c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c3a:	bf00      	nop
 8000c3c:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <SystemClock_Config+0x154>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c48:	d1f8      	bne.n	8000c3c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c4e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c54:	2302      	movs	r3, #2
 8000c56:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000c60:	2378      	movs	r3, #120	; 0x78
 8000c62:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c70:	230c      	movs	r3, #12
 8000c72:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 fd67 	bl	8005754 <HAL_RCC_OscConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000c8c:	f000 f838 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c90:	233f      	movs	r3, #63	; 0x3f
 8000c92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c94:	2303      	movs	r3, #3
 8000c96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ca0:	2340      	movs	r3, #64	; 0x40
 8000ca2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ca4:	2340      	movs	r3, #64	; 0x40
 8000ca6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cae:	2340      	movs	r3, #64	; 0x40
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	2104      	movs	r1, #4
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f005 f9a5 	bl	8006008 <HAL_RCC_ClockConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000cc4:	f000 f81c 	bl	8000d00 <Error_Handler>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3778      	adds	r7, #120	; 0x78
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	58000400 	.word	0x58000400
 8000cd4:	58024800 	.word	0x58024800
 8000cd8:	58024400 	.word	0x58024400

08000cdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d101      	bne.n	8000cf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cee:	f000 fb83 	bl	80013f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40001000 	.word	0x40001000

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
 8000d0a:	0000      	movs	r0, r0
 8000d0c:	0000      	movs	r0, r0
	...

08000d10 <getLinear>:
 * @param bits The ADC reading.
 * @param slope The slope (volts per unit).
 * @param offset The offset (volts at zero).
 * @return The physical measurement.
 */
float getLinear(uint32_t bits, float slope, float offset) {
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d1c:	edc7 0a01 	vstr	s1, [r7, #4]
    // Convert ADC reading to voltage
    float voltage = (float) bits * (3.27 / 4095.0); // Assuming 12-bit ADC and 3.3V reference
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d2e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000d70 <getLinear+0x60>
 8000d32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d3a:	edc7 7a05 	vstr	s15, [r7, #20]

    // Convert voltage to physical measurement
    float measurement = (voltage - offset) / slope;
 8000d3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d42:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d46:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000d4a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d52:	edc7 7a04 	vstr	s15, [r7, #16]

    return measurement;
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	ee07 3a90 	vmov	s15, r3
}
 8000d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d60:	371c      	adds	r7, #28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	f3af 8000 	nop.w
 8000d70:	6c161d8b 	.word	0x6c161d8b
 8000d74:	3f4a2a98 	.word	0x3f4a2a98

08000d78 <enablePWM>:


void enablePWM(TIM_HandleTypeDef htimX, float duty){
 8000d78:	b084      	sub	sp, #16
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	f107 0c10 	add.w	ip, r7, #16
 8000d84:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000d88:	ed87 0a01 	vstr	s0, [r7, #4]

	//Reset the counter
//	htimX.Instance->CNT=0;

	htimX.Instance->CCMR1 = 0x6868; // Set Channel 1 and Channel 2 Output Compare mode to PWM Mode
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	f646 0268 	movw	r2, #26728	; 0x6868
 8000d92:	619a      	str	r2, [r3, #24]

	//	htim1.Instance->CCER = 0x888;
	htimX.Instance->CCER = 0x10555;
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4a1c      	ldr	r2, [pc, #112]	; (8000e08 <enablePWM+0x90>)
 8000d98:	621a      	str	r2, [r3, #32]

	//Enable Main Output
	htimX.Instance->BDTR |=(1<<15);
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000da4:	645a      	str	r2, [r3, #68]	; 0x44

	//Enable Counter
	htimX.Instance->CR1 |=1;
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	f042 0201 	orr.w	r2, r2, #1
 8000db0:	601a      	str	r2, [r3, #0]

	htimX.Instance->CCR2 = (duty)*htimX.Instance->ARR;
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	ee07 3a90 	vmov	s15, r3
 8000dba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dcc:	ee17 2a90 	vmov	r2, s15
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38
	htimX.Instance->CCR1 = (1-duty)*htimX.Instance->ARR;
 8000dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000dd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de2:	ee07 3a90 	vmov	s15, r3
 8000de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000df4:	ee17 2a90 	vmov	r2, s15
 8000df8:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	b004      	add	sp, #16
 8000e06:	4770      	bx	lr
 8000e08:	00010555 	.word	0x00010555

08000e0c <disablePWM>:

void disablePWM(TIM_HandleTypeDef htimX){
 8000e0c:	b084      	sub	sp, #16
 8000e0e:	b490      	push	{r4, r7}
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	f107 0408 	add.w	r4, r7, #8
 8000e16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//Disable outputs and select the polarity of each output
	htimX.Instance->CNT=0;
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24


	htimX.Instance->CCER = 0xCCC;
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	f640 42cc 	movw	r2, #3276	; 0xccc
 8000e26:	621a      	str	r2, [r3, #32]
	//	htim1.Instance->CCER |= 0x555;

	//Disable Main Output
	htimX.Instance->BDTR &= 0xFFFF7FFF;
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e32:	645a      	str	r2, [r3, #68]	; 0x44
	//	htim1.Instance->BDTR &=(0<<15);

}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc90      	pop	{r4, r7}
 8000e3a:	b004      	add	sp, #16
 8000e3c:	4770      	bx	lr
	...

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_MspInit+0x38>)
 8000e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_MspInit+0x38>)
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_MspInit+0x38>)
 8000e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	210f      	movs	r1, #15
 8000e68:	f06f 0001 	mvn.w	r0, #1
 8000e6c:	f002 f956 	bl	800311c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	58024400 	.word	0x58024400

08000e7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b090      	sub	sp, #64	; 0x40
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b0f      	cmp	r3, #15
 8000e88:	d827      	bhi.n	8000eda <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	2036      	movs	r0, #54	; 0x36
 8000e90:	f002 f944 	bl	800311c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e94:	2036      	movs	r0, #54	; 0x36
 8000e96:	f002 f95b 	bl	8003150 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000e9a:	4a29      	ldr	r2, [pc, #164]	; (8000f40 <HAL_InitTick+0xc4>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ea0:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <HAL_InitTick+0xc8>)
 8000ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ea6:	4a27      	ldr	r2, [pc, #156]	; (8000f44 <HAL_InitTick+0xc8>)
 8000ea8:	f043 0310 	orr.w	r3, r3, #16
 8000eac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <HAL_InitTick+0xc8>)
 8000eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ebe:	f107 0210 	add.w	r2, r7, #16
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f005 fc13 	bl	80066f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d106      	bne.n	8000ee6 <HAL_InitTick+0x6a>
 8000ed8:	e001      	b.n	8000ede <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e02b      	b.n	8000f36 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ede:	f005 fbf3 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 8000ee2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000ee4:	e004      	b.n	8000ef0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ee6:	f005 fbef 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 8000eea:	4603      	mov	r3, r0
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ef2:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <HAL_InitTick+0xcc>)
 8000ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef8:	0c9b      	lsrs	r3, r3, #18
 8000efa:	3b01      	subs	r3, #1
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <HAL_InitTick+0xd0>)
 8000f00:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <HAL_InitTick+0xd4>)
 8000f02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_InitTick+0xd0>)
 8000f06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f0c:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <HAL_InitTick+0xd0>)
 8000f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_InitTick+0xd0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_InitTick+0xd0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000f1e:	480b      	ldr	r0, [pc, #44]	; (8000f4c <HAL_InitTick+0xd0>)
 8000f20:	f008 f928 	bl	8009174 <HAL_TIM_Base_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d104      	bne.n	8000f34 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000f2a:	4808      	ldr	r0, [pc, #32]	; (8000f4c <HAL_InitTick+0xd0>)
 8000f2c:	f008 f9ea 	bl	8009304 <HAL_TIM_Base_Start_IT>
 8000f30:	4603      	mov	r3, r0
 8000f32:	e000      	b.n	8000f36 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3740      	adds	r7, #64	; 0x40
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	24004018 	.word	0x24004018
 8000f44:	58024400 	.word	0x58024400
 8000f48:	431bde83 	.word	0x431bde83
 8000f4c:	240041b4 	.word	0x240041b4
 8000f50:	40001000 	.word	0x40001000

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f58:	e7fe      	b.n	8000f58 <NMI_Handler+0x4>

08000f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <MemManage_Handler+0x4>

08000f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <DMA1_Stream0_IRQHandler+0x10>)
 8000f86:	f002 feb7 	bl	8003cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	240040f4 	.word	0x240040f4

08000f94 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <TIM1_BRK_IRQHandler+0x10>)
 8000f9a:	f008 fa8c 	bl	80094b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	24004200 	.word	0x24004200

08000fa8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <TIM1_UP_IRQHandler+0x10>)
 8000fae:	f008 fa82 	bl	80094b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	24004200 	.word	0x24004200

08000fbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <TIM6_DAC_IRQHandler+0x10>)
 8000fc2:	f008 fa78 	bl	80094b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	240041b4 	.word	0x240041b4

08000fd0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <ADC3_IRQHandler+0x10>)
 8000fd6:	f000 fee5 	bl	8001da4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	24004090 	.word	0x24004090

08000fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <SystemInit+0xe4>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fee:	4a36      	ldr	r2, [pc, #216]	; (80010c8 <SystemInit+0xe4>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ff8:	4b34      	ldr	r3, [pc, #208]	; (80010cc <SystemInit+0xe8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 030f 	and.w	r3, r3, #15
 8001000:	2b06      	cmp	r3, #6
 8001002:	d807      	bhi.n	8001014 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001004:	4b31      	ldr	r3, [pc, #196]	; (80010cc <SystemInit+0xe8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f023 030f 	bic.w	r3, r3, #15
 800100c:	4a2f      	ldr	r2, [pc, #188]	; (80010cc <SystemInit+0xe8>)
 800100e:	f043 0307 	orr.w	r3, r3, #7
 8001012:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001014:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <SystemInit+0xec>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a2d      	ldr	r2, [pc, #180]	; (80010d0 <SystemInit+0xec>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <SystemInit+0xec>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001026:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <SystemInit+0xec>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4929      	ldr	r1, [pc, #164]	; (80010d0 <SystemInit+0xec>)
 800102c:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <SystemInit+0xf0>)
 800102e:	4013      	ands	r3, r2
 8001030:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <SystemInit+0xe8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	2b00      	cmp	r3, #0
 800103c:	d007      	beq.n	800104e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800103e:	4b23      	ldr	r3, [pc, #140]	; (80010cc <SystemInit+0xe8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f023 030f 	bic.w	r3, r3, #15
 8001046:	4a21      	ldr	r2, [pc, #132]	; (80010cc <SystemInit+0xe8>)
 8001048:	f043 0307 	orr.w	r3, r3, #7
 800104c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <SystemInit+0xec>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <SystemInit+0xec>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <SystemInit+0xec>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <SystemInit+0xec>)
 8001062:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <SystemInit+0xf4>)
 8001064:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <SystemInit+0xec>)
 8001068:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <SystemInit+0xf8>)
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <SystemInit+0xec>)
 800106e:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <SystemInit+0xfc>)
 8001070:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <SystemInit+0xec>)
 8001074:	2200      	movs	r2, #0
 8001076:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <SystemInit+0xec>)
 800107a:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <SystemInit+0xfc>)
 800107c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <SystemInit+0xec>)
 8001080:	2200      	movs	r2, #0
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <SystemInit+0xec>)
 8001086:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <SystemInit+0xfc>)
 8001088:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <SystemInit+0xec>)
 800108c:	2200      	movs	r2, #0
 800108e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <SystemInit+0xec>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <SystemInit+0xec>)
 8001096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <SystemInit+0xec>)
 800109e:	2200      	movs	r2, #0
 80010a0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <SystemInit+0x100>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <SystemInit+0x104>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010ae:	d202      	bcs.n	80010b6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <SystemInit+0x108>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <SystemInit+0x10c>)
 80010b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010bc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00
 80010cc:	52002000 	.word	0x52002000
 80010d0:	58024400 	.word	0x58024400
 80010d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80010d8:	02020200 	.word	0x02020200
 80010dc:	01ff0000 	.word	0x01ff0000
 80010e0:	01010280 	.word	0x01010280
 80010e4:	5c001000 	.word	0x5c001000
 80010e8:	ffff0000 	.word	0xffff0000
 80010ec:	51008108 	.word	0x51008108
 80010f0:	52004000 	.word	0x52004000

080010f4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b09a      	sub	sp, #104	; 0x68
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001114:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
 8001124:	615a      	str	r2, [r3, #20]
 8001126:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	222c      	movs	r2, #44	; 0x2c
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f00c fa2c 	bl	800d58c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001134:	4b45      	ldr	r3, [pc, #276]	; (800124c <MX_TIM1_Init+0x158>)
 8001136:	4a46      	ldr	r2, [pc, #280]	; (8001250 <MX_TIM1_Init+0x15c>)
 8001138:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800113a:	4b44      	ldr	r3, [pc, #272]	; (800124c <MX_TIM1_Init+0x158>)
 800113c:	2200      	movs	r2, #0
 800113e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001140:	4b42      	ldr	r3, [pc, #264]	; (800124c <MX_TIM1_Init+0x158>)
 8001142:	2220      	movs	r2, #32
 8001144:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (480000000/(FSW*4))-1;
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <MX_TIM1_Init+0x158>)
 8001148:	f642 62df 	movw	r2, #11999	; 0x2edf
 800114c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <MX_TIM1_Init+0x158>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001154:	4b3d      	ldr	r3, [pc, #244]	; (800124c <MX_TIM1_Init+0x158>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800115a:	4b3c      	ldr	r3, [pc, #240]	; (800124c <MX_TIM1_Init+0x158>)
 800115c:	2280      	movs	r2, #128	; 0x80
 800115e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001160:	483a      	ldr	r0, [pc, #232]	; (800124c <MX_TIM1_Init+0x158>)
 8001162:	f008 f807 	bl	8009174 <HAL_TIM_Base_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800116c:	f7ff fdc8 	bl	8000d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001174:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001176:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800117a:	4619      	mov	r1, r3
 800117c:	4833      	ldr	r0, [pc, #204]	; (800124c <MX_TIM1_Init+0x158>)
 800117e:	f008 fbcd 	bl	800991c <HAL_TIM_ConfigClockSource>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001188:	f7ff fdba 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800118c:	482f      	ldr	r0, [pc, #188]	; (800124c <MX_TIM1_Init+0x158>)
 800118e:	f008 f931 	bl	80093f4 <HAL_TIM_PWM_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001198:	f7ff fdb2 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800119c:	2320      	movs	r3, #32
 800119e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011a0:	2300      	movs	r3, #0
 80011a2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ac:	4619      	mov	r1, r3
 80011ae:	4827      	ldr	r0, [pc, #156]	; (800124c <MX_TIM1_Init+0x158>)
 80011b0:	f009 f8e2 	bl	800a378 <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011ba:	f7ff fda1 	bl	8000d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011be:	2360      	movs	r3, #96	; 0x60
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c6:	2300      	movs	r3, #0
 80011c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80011ca:	2308      	movs	r3, #8
 80011cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80011d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	4819      	ldr	r0, [pc, #100]	; (800124c <MX_TIM1_Init+0x158>)
 80011e6:	f008 fa85 	bl	80096f4 <HAL_TIM_PWM_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80011f0:	f7ff fd86 	bl	8000d00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 80011fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001200:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = DEAD_TIME*480000000*8;
 8001202:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001206:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800120c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001210:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800121a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4807      	ldr	r0, [pc, #28]	; (800124c <MX_TIM1_Init+0x158>)
 800122e:	f009 f931 	bl	800a494 <HAL_TIMEx_ConfigBreakDeadTime>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001238:	f7ff fd62 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <MX_TIM1_Init+0x158>)
 800123e:	f000 f839 	bl	80012b4 <HAL_TIM_MspPostInit>

}
 8001242:	bf00      	nop
 8001244:	3768      	adds	r7, #104	; 0x68
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	24004200 	.word	0x24004200
 8001250:	40010000 	.word	0x40010000

08001254 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <HAL_TIM_Base_MspInit+0x58>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d11e      	bne.n	80012a4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_TIM_Base_MspInit+0x5c>)
 8001268:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800126c:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <HAL_TIM_Base_MspInit+0x5c>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_TIM_Base_MspInit+0x5c>)
 8001278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2105      	movs	r1, #5
 8001288:	2018      	movs	r0, #24
 800128a:	f001 ff47 	bl	800311c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800128e:	2018      	movs	r0, #24
 8001290:	f001 ff5e 	bl	8003150 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	2105      	movs	r1, #5
 8001298:	2019      	movs	r0, #25
 800129a:	f001 ff3f 	bl	800311c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800129e:	2019      	movs	r0, #25
 80012a0:	f001 ff56 	bl	8003150 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40010000 	.word	0x40010000
 80012b0:	58024400 	.word	0x58024400

080012b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a13      	ldr	r2, [pc, #76]	; (8001320 <HAL_TIM_MspPostInit+0x6c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d11f      	bne.n	8001316 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_TIM_MspPostInit+0x70>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012dc:	4a11      	ldr	r2, [pc, #68]	; (8001324 <HAL_TIM_MspPostInit+0x70>)
 80012de:	f043 0310 	orr.w	r3, r3, #16
 80012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_TIM_MspPostInit+0x70>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	f003 0310 	and.w	r3, r3, #16
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001306:	2301      	movs	r3, #1
 8001308:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_TIM_MspPostInit+0x74>)
 8001312:	f004 f803 	bl	800531c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3720      	adds	r7, #32
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40010000 	.word	0x40010000
 8001324:	58024400 	.word	0x58024400
 8001328:	58021000 	.word	0x58021000

0800132c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800132c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001364 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001330:	f7ff fe58 	bl	8000fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001336:	490d      	ldr	r1, [pc, #52]	; (800136c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800134c:	4c0a      	ldr	r4, [pc, #40]	; (8001378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135a:	f00c f975 	bl	800d648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135e:	f7ff fbe5 	bl	8000b2c <main>
  bx  lr
 8001362:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001364:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001368:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800136c:	24004074 	.word	0x24004074
  ldr r2, =_sidata
 8001370:	0800d888 	.word	0x0800d888
  ldr r2, =_sbss
 8001374:	24004074 	.word	0x24004074
  ldr r4, =_ebss
 8001378:	24008d88 	.word	0x24008d88

0800137c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC_IRQHandler>
	...

08001380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001386:	2003      	movs	r0, #3
 8001388:	f001 febd 	bl	8003106 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800138c:	f004 fff2 	bl	8006374 <HAL_RCC_GetSysClockFreq>
 8001390:	4602      	mov	r2, r0
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_Init+0x68>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	0a1b      	lsrs	r3, r3, #8
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	4913      	ldr	r1, [pc, #76]	; (80013ec <HAL_Init+0x6c>)
 800139e:	5ccb      	ldrb	r3, [r1, r3]
 80013a0:	f003 031f 	and.w	r3, r3, #31
 80013a4:	fa22 f303 	lsr.w	r3, r2, r3
 80013a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_Init+0x68>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <HAL_Init+0x6c>)
 80013b4:	5cd3      	ldrb	r3, [r2, r3]
 80013b6:	f003 031f 	and.w	r3, r3, #31
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	fa22 f303 	lsr.w	r3, r2, r3
 80013c0:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <HAL_Init+0x70>)
 80013c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013c4:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <HAL_Init+0x74>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ca:	200f      	movs	r0, #15
 80013cc:	f7ff fd56 	bl	8000e7c <HAL_InitTick>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e002      	b.n	80013e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013da:	f7ff fd31 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	58024400 	.word	0x58024400
 80013ec:	0800d868 	.word	0x0800d868
 80013f0:	24004014 	.word	0x24004014
 80013f4:	24004010 	.word	0x24004010

080013f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x20>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x24>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <HAL_IncTick+0x24>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	2400401c 	.word	0x2400401c
 800141c:	2400424c 	.word	0x2400424c

08001420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return uwTick;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <HAL_GetTick+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	2400424c 	.word	0x2400424c

08001438 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <HAL_GetREVID+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	0c1b      	lsrs	r3, r3, #16
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	5c001000 	.word	0x5c001000

08001450 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	43db      	mvns	r3, r3
 8001462:	401a      	ands	r2, r3
 8001464:	4904      	ldr	r1, [pc, #16]	; (8001478 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	58000400 	.word	0x58000400

0800147c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	609a      	str	r2, [r3, #8]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
 80014f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3360      	adds	r3, #96	; 0x60
 80014f6:	461a      	mov	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	430b      	orrs	r3, r1
 8001512:	431a      	orrs	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001518:	bf00      	nop
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	431a      	orrs	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	611a      	str	r2, [r3, #16]
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001556:	b480      	push	{r7}
 8001558:	b087      	sub	sp, #28
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3360      	adds	r3, #96	; 0x60
 8001566:	461a      	mov	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	431a      	orrs	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	601a      	str	r2, [r3, #0]
  }
}
 8001580:	bf00      	nop
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b087      	sub	sp, #28
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3330      	adds	r3, #48	; 0x30
 80015c2:	461a      	mov	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	4413      	add	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	211f      	movs	r1, #31
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	401a      	ands	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	0e9b      	lsrs	r3, r3, #26
 80015ea:	f003 011f 	and.w	r1, r3, #31
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	f003 031f 	and.w	r3, r3, #31
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	431a      	orrs	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015fe:	bf00      	nop
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f023 0203 	bic.w	r2, r3, #3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	60da      	str	r2, [r3, #12]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001656:	b480      	push	{r7}
 8001658:	b087      	sub	sp, #28
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3314      	adds	r3, #20
 8001666:	461a      	mov	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	0e5b      	lsrs	r3, r3, #25
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	4413      	add	r3, r2
 8001674:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	0d1b      	lsrs	r3, r3, #20
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	2107      	movs	r1, #7
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	401a      	ands	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	0d1b      	lsrs	r3, r3, #20
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	431a      	orrs	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016a0:	bf00      	nop
 80016a2:	371c      	adds	r7, #28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016c4:	43db      	mvns	r3, r3
 80016c6:	401a      	ands	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0318 	and.w	r3, r3, #24
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016d0:	40d9      	lsrs	r1, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	400b      	ands	r3, r1
 80016d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016da:	431a      	orrs	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	000fffff 	.word	0x000fffff

080016f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 031f 	and.w	r3, r3, #31
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <LL_ADC_DisableDeepPowerDown+0x20>)
 800173a:	4013      	ands	r3, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6093      	str	r3, [r2, #8]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	5fffffc0 	.word	0x5fffffc0

08001750 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001764:	d101      	bne.n	800176a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <LL_ADC_EnableInternalRegulator+0x24>)
 8001786:	4013      	ands	r3, r2
 8001788:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	6fffffc0 	.word	0x6fffffc0

080017a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017b4:	d101      	bne.n	80017ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <LL_ADC_Enable+0x24>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	f043 0201 	orr.w	r2, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	7fffffc0 	.word	0x7fffffc0

080017f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <LL_ADC_Disable+0x24>)
 80017fe:	4013      	ands	r3, r2
 8001800:	f043 0202 	orr.w	r2, r3, #2
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	7fffffc0 	.word	0x7fffffc0

08001818 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <LL_ADC_IsEnabled+0x18>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <LL_ADC_IsEnabled+0x1a>
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b02      	cmp	r3, #2
 8001850:	d101      	bne.n	8001856 <LL_ADC_IsDisableOngoing+0x18>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <LL_ADC_IsDisableOngoing+0x1a>
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <LL_ADC_REG_StartConversion+0x24>)
 8001872:	4013      	ands	r3, r2
 8001874:	f043 0204 	orr.w	r2, r3, #4
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	7fffffc0 	.word	0x7fffffc0

0800188c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b04      	cmp	r3, #4
 800189e:	d101      	bne.n	80018a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d101      	bne.n	80018ca <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e18f      	b.n	8001c12 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d109      	bne.n	8001914 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7fe fd79 	bl	80003f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff19 	bl	8001750 <LL_ADC_IsDeepPowerDownEnabled>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff feff 	bl	800172c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ff34 	bl	80017a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d114      	bne.n	8001968 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff18 	bl	8001778 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001948:	4b87      	ldr	r3, [pc, #540]	; (8001b68 <HAL_ADC_Init+0x290>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	099b      	lsrs	r3, r3, #6
 800194e:	4a87      	ldr	r2, [pc, #540]	; (8001b6c <HAL_ADC_Init+0x294>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	099b      	lsrs	r3, r3, #6
 8001956:	3301      	adds	r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800195a:	e002      	b.n	8001962 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	3b01      	subs	r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f9      	bne.n	800195c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff17 	bl	80017a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10d      	bne.n	8001994 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	f043 0210 	orr.w	r2, r3, #16
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	f043 0201 	orr.w	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff77 	bl	800188c <LL_ADC_REG_IsConversionOngoing>
 800199e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f040 8129 	bne.w	8001c00 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f040 8125 	bne.w	8001c00 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019be:	f043 0202 	orr.w	r2, r3, #2
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff24 	bl	8001818 <LL_ADC_IsEnabled>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d136      	bne.n	8001a44 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a65      	ldr	r2, [pc, #404]	; (8001b70 <HAL_ADC_Init+0x298>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d004      	beq.n	80019ea <HAL_ADC_Init+0x112>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a63      	ldr	r2, [pc, #396]	; (8001b74 <HAL_ADC_Init+0x29c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d10e      	bne.n	8001a08 <HAL_ADC_Init+0x130>
 80019ea:	4861      	ldr	r0, [pc, #388]	; (8001b70 <HAL_ADC_Init+0x298>)
 80019ec:	f7ff ff14 	bl	8001818 <LL_ADC_IsEnabled>
 80019f0:	4604      	mov	r4, r0
 80019f2:	4860      	ldr	r0, [pc, #384]	; (8001b74 <HAL_ADC_Init+0x29c>)
 80019f4:	f7ff ff10 	bl	8001818 <LL_ADC_IsEnabled>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4323      	orrs	r3, r4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	e008      	b.n	8001a1a <HAL_ADC_Init+0x142>
 8001a08:	485b      	ldr	r0, [pc, #364]	; (8001b78 <HAL_ADC_Init+0x2a0>)
 8001a0a:	f7ff ff05 	bl	8001818 <LL_ADC_IsEnabled>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf0c      	ite	eq
 8001a14:	2301      	moveq	r3, #1
 8001a16:	2300      	movne	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d012      	beq.n	8001a44 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a53      	ldr	r2, [pc, #332]	; (8001b70 <HAL_ADC_Init+0x298>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d004      	beq.n	8001a32 <HAL_ADC_Init+0x15a>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a51      	ldr	r2, [pc, #324]	; (8001b74 <HAL_ADC_Init+0x29c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Init+0x15e>
 8001a32:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_ADC_Init+0x2a4>)
 8001a34:	e000      	b.n	8001a38 <HAL_ADC_Init+0x160>
 8001a36:	4a52      	ldr	r2, [pc, #328]	; (8001b80 <HAL_ADC_Init+0x2a8>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4610      	mov	r0, r2
 8001a40:	f7ff fd1c 	bl	800147c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a44:	f7ff fcf8 	bl	8001438 <HAL_GetREVID>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d914      	bls.n	8001a7c <HAL_ADC_Init+0x1a4>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d110      	bne.n	8001a7c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7d5b      	ldrb	r3, [r3, #21]
 8001a5e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a64:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a6a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7f1b      	ldrb	r3, [r3, #28]
 8001a70:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a72:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a74:	f043 030c 	orr.w	r3, r3, #12
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	e00d      	b.n	8001a98 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7d5b      	ldrb	r3, [r3, #21]
 8001a80:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a86:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a8c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7f1b      	ldrb	r3, [r3, #28]
 8001a92:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7f1b      	ldrb	r3, [r3, #28]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d106      	bne.n	8001aae <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	045b      	lsls	r3, r3, #17
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <HAL_ADC_Init+0x2ac>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	69b9      	ldr	r1, [r7, #24]
 8001ada:	430b      	orrs	r3, r1
 8001adc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fed2 	bl	800188c <LL_ADC_REG_IsConversionOngoing>
 8001ae8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fedf 	bl	80018b2 <LL_ADC_INJ_IsConversionOngoing>
 8001af4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d15f      	bne.n	8001bbc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d15c      	bne.n	8001bbc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7d1b      	ldrb	r3, [r3, #20]
 8001b06:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <HAL_ADC_Init+0x2b0>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	69b9      	ldr	r1, [r7, #24]
 8001b20:	430b      	orrs	r3, r1
 8001b22:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d130      	bne.n	8001b90 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_ADC_Init+0x2b4>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b42:	3a01      	subs	r2, #1
 8001b44:	0411      	lsls	r1, r2, #16
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b4a:	4311      	orrs	r1, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b50:	4311      	orrs	r1, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b56:	430a      	orrs	r2, r1
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	611a      	str	r2, [r3, #16]
 8001b64:	e01c      	b.n	8001ba0 <HAL_ADC_Init+0x2c8>
 8001b66:	bf00      	nop
 8001b68:	24004010 	.word	0x24004010
 8001b6c:	053e2d63 	.word	0x053e2d63
 8001b70:	40022000 	.word	0x40022000
 8001b74:	40022100 	.word	0x40022100
 8001b78:	58026000 	.word	0x58026000
 8001b7c:	40022300 	.word	0x40022300
 8001b80:	58026300 	.word	0x58026300
 8001b84:	fff0c003 	.word	0xfff0c003
 8001b88:	ffffbffc 	.word	0xffffbffc
 8001b8c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f001 f824 	bl	8002c04 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d10c      	bne.n	8001bde <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f023 010f 	bic.w	r1, r3, #15
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	1e5a      	subs	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
 8001bdc:	e007      	b.n	8001bee <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 020f 	bic.w	r2, r2, #15
 8001bec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	f023 0303 	bic.w	r3, r3, #3
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	655a      	str	r2, [r3, #84]	; 0x54
 8001bfe:	e007      	b.n	8001c10 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c04:	f043 0210 	orr.w	r2, r3, #16
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c10:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd90      	pop	{r4, r7, pc}
 8001c1a:	bf00      	nop

08001c1c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a55      	ldr	r2, [pc, #340]	; (8001d84 <HAL_ADC_Start_DMA+0x168>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d004      	beq.n	8001c3c <HAL_ADC_Start_DMA+0x20>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a54      	ldr	r2, [pc, #336]	; (8001d88 <HAL_ADC_Start_DMA+0x16c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_Start_DMA+0x24>
 8001c3c:	4b53      	ldr	r3, [pc, #332]	; (8001d8c <HAL_ADC_Start_DMA+0x170>)
 8001c3e:	e000      	b.n	8001c42 <HAL_ADC_Start_DMA+0x26>
 8001c40:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <HAL_ADC_Start_DMA+0x174>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fd56 	bl	80016f4 <LL_ADC_GetMultimode>
 8001c48:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fe1c 	bl	800188c <LL_ADC_REG_IsConversionOngoing>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f040 808c 	bne.w	8001d74 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_Start_DMA+0x4e>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e087      	b.n	8001d7a <HAL_ADC_Start_DMA+0x15e>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d002      	beq.n	8001c84 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b09      	cmp	r3, #9
 8001c82:	d170      	bne.n	8001d66 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 fe3f 	bl	8002908 <ADC_Enable>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c8e:	7dfb      	ldrb	r3, [r7, #23]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d163      	bne.n	8001d5c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c98:	4b3e      	ldr	r3, [pc, #248]	; (8001d94 <HAL_ADC_Start_DMA+0x178>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a37      	ldr	r2, [pc, #220]	; (8001d88 <HAL_ADC_Start_DMA+0x16c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d002      	beq.n	8001cb4 <HAL_ADC_Start_DMA+0x98>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	e000      	b.n	8001cb6 <HAL_ADC_Start_DMA+0x9a>
 8001cb4:	4b33      	ldr	r3, [pc, #204]	; (8001d84 <HAL_ADC_Start_DMA+0x168>)
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d002      	beq.n	8001cc4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	f023 0206 	bic.w	r2, r3, #6
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ce8:	e002      	b.n	8001cf0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf4:	4a28      	ldr	r2, [pc, #160]	; (8001d98 <HAL_ADC_Start_DMA+0x17c>)
 8001cf6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfc:	4a27      	ldr	r2, [pc, #156]	; (8001d9c <HAL_ADC_Start_DMA+0x180>)
 8001cfe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d04:	4a26      	ldr	r2, [pc, #152]	; (8001da0 <HAL_ADC_Start_DMA+0x184>)
 8001d06:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	221c      	movs	r2, #28
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0210 	orr.w	r2, r2, #16
 8001d26:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	4619      	mov	r1, r3
 8001d32:	4610      	mov	r0, r2
 8001d34:	f7ff fc69 	bl	800160a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	3340      	adds	r3, #64	; 0x40
 8001d42:	4619      	mov	r1, r3
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f001 fd6c 	bl	8003824 <HAL_DMA_Start_IT>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fd85 	bl	8001864 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001d5a:	e00d      	b.n	8001d78 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001d64:	e008      	b.n	8001d78 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d72:	e001      	b.n	8001d78 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d74:	2302      	movs	r3, #2
 8001d76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40022000 	.word	0x40022000
 8001d88:	40022100 	.word	0x40022100
 8001d8c:	40022300 	.word	0x40022300
 8001d90:	58026300 	.word	0x58026300
 8001d94:	fffff0fe 	.word	0xfffff0fe
 8001d98:	08002adb 	.word	0x08002adb
 8001d9c:	08002bb3 	.word	0x08002bb3
 8001da0:	08002bcf 	.word	0x08002bcf

08001da4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001dac:	2300      	movs	r3, #0
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a87      	ldr	r2, [pc, #540]	; (8001fe4 <HAL_ADC_IRQHandler+0x240>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d004      	beq.n	8001dd4 <HAL_ADC_IRQHandler+0x30>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a86      	ldr	r2, [pc, #536]	; (8001fe8 <HAL_ADC_IRQHandler+0x244>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_IRQHandler+0x34>
 8001dd4:	4b85      	ldr	r3, [pc, #532]	; (8001fec <HAL_ADC_IRQHandler+0x248>)
 8001dd6:	e000      	b.n	8001dda <HAL_ADC_IRQHandler+0x36>
 8001dd8:	4b85      	ldr	r3, [pc, #532]	; (8001ff0 <HAL_ADC_IRQHandler+0x24c>)
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fc8a 	bl	80016f4 <LL_ADC_GetMultimode>
 8001de0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d017      	beq.n	8001e1c <HAL_ADC_IRQHandler+0x78>
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d012      	beq.n	8001e1c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e06:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f001 f8c2 	bl	8002f98 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d004      	beq.n	8001e30 <HAL_ADC_IRQHandler+0x8c>
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10a      	bne.n	8001e46 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8083 	beq.w	8001f42 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d07d      	beq.n	8001f42 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d105      	bne.n	8001e5e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fb92 	bl	800158c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d062      	beq.n	8001f34 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a5d      	ldr	r2, [pc, #372]	; (8001fe8 <HAL_ADC_IRQHandler+0x244>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d002      	beq.n	8001e7e <HAL_ADC_IRQHandler+0xda>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	e000      	b.n	8001e80 <HAL_ADC_IRQHandler+0xdc>
 8001e7e:	4b59      	ldr	r3, [pc, #356]	; (8001fe4 <HAL_ADC_IRQHandler+0x240>)
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d008      	beq.n	8001e9a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d002      	beq.n	8001e9a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b09      	cmp	r3, #9
 8001e98:	d104      	bne.n	8001ea4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	623b      	str	r3, [r7, #32]
 8001ea2:	e00c      	b.n	8001ebe <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a4f      	ldr	r2, [pc, #316]	; (8001fe8 <HAL_ADC_IRQHandler+0x244>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d002      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0x110>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	e000      	b.n	8001eb6 <HAL_ADC_IRQHandler+0x112>
 8001eb4:	4b4b      	ldr	r3, [pc, #300]	; (8001fe4 <HAL_ADC_IRQHandler+0x240>)
 8001eb6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d135      	bne.n	8001f34 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d12e      	bne.n	8001f34 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fcd6 	bl	800188c <LL_ADC_REG_IsConversionOngoing>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d11a      	bne.n	8001f1c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 020c 	bic.w	r2, r2, #12
 8001ef4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d112      	bne.n	8001f34 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
 8001f1a:	e00b      	b.n	8001f34 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	f043 0210 	orr.w	r2, r3, #16
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f96f 	bl	8002218 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	220c      	movs	r2, #12
 8001f40:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0320 	and.w	r3, r3, #32
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d004      	beq.n	8001f56 <HAL_ADC_IRQHandler+0x1b2>
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	f003 0320 	and.w	r3, r3, #32
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10b      	bne.n	8001f6e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80a0 	beq.w	80020a2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 809a 	beq.w	80020a2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d105      	bne.n	8001f86 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fb50 	bl	8001630 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001f90:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff faf8 	bl	800158c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f9c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <HAL_ADC_IRQHandler+0x244>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d002      	beq.n	8001fae <HAL_ADC_IRQHandler+0x20a>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	e000      	b.n	8001fb0 <HAL_ADC_IRQHandler+0x20c>
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_ADC_IRQHandler+0x240>)
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d008      	beq.n	8001fca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b06      	cmp	r3, #6
 8001fc2:	d002      	beq.n	8001fca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b07      	cmp	r3, #7
 8001fc8:	d104      	bne.n	8001fd4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	623b      	str	r3, [r7, #32]
 8001fd2:	e014      	b.n	8001ffe <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a03      	ldr	r2, [pc, #12]	; (8001fe8 <HAL_ADC_IRQHandler+0x244>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_ADC_IRQHandler+0x250>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	e008      	b.n	8001ff6 <HAL_ADC_IRQHandler+0x252>
 8001fe4:	40022000 	.word	0x40022000
 8001fe8:	40022100 	.word	0x40022100
 8001fec:	40022300 	.word	0x40022300
 8001ff0:	58026300 	.word	0x58026300
 8001ff4:	4b84      	ldr	r3, [pc, #528]	; (8002208 <HAL_ADC_IRQHandler+0x464>)
 8001ff6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d047      	beq.n	8002094 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d007      	beq.n	800201e <HAL_ADC_IRQHandler+0x27a>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d03f      	beq.n	8002094 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800201a:	2b00      	cmp	r3, #0
 800201c:	d13a      	bne.n	8002094 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002028:	2b40      	cmp	r3, #64	; 0x40
 800202a:	d133      	bne.n	8002094 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d12e      	bne.n	8002094 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fc39 	bl	80018b2 <LL_ADC_INJ_IsConversionOngoing>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d11a      	bne.n	800207c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002054:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d112      	bne.n	8002094 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
 800207a:	e00b      	b.n	8002094 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	f043 0210 	orr.w	r2, r3, #16
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	f043 0201 	orr.w	r2, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 ff57 	bl	8002f48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2260      	movs	r2, #96	; 0x60
 80020a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d011      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x32c>
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00c      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8bc 	bl	8002240 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d012      	beq.n	8002100 <HAL_ADC_IRQHandler+0x35c>
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00d      	beq.n	8002100 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 ff3d 	bl	8002f70 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002106:	2b00      	cmp	r3, #0
 8002108:	d012      	beq.n	8002130 <HAL_ADC_IRQHandler+0x38c>
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00d      	beq.n	8002130 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 ff2f 	bl	8002f84 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800212e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b00      	cmp	r3, #0
 8002138:	d043      	beq.n	80021c2 <HAL_ADC_IRQHandler+0x41e>
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2b00      	cmp	r3, #0
 8002142:	d03e      	beq.n	80021c2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800214c:	2301      	movs	r3, #1
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
 8002150:	e021      	b.n	8002196 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d015      	beq.n	8002184 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a2a      	ldr	r2, [pc, #168]	; (8002208 <HAL_ADC_IRQHandler+0x464>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d004      	beq.n	800216c <HAL_ADC_IRQHandler+0x3c8>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a29      	ldr	r2, [pc, #164]	; (800220c <HAL_ADC_IRQHandler+0x468>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d101      	bne.n	8002170 <HAL_ADC_IRQHandler+0x3cc>
 800216c:	4b28      	ldr	r3, [pc, #160]	; (8002210 <HAL_ADC_IRQHandler+0x46c>)
 800216e:	e000      	b.n	8002172 <HAL_ADC_IRQHandler+0x3ce>
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <HAL_ADC_IRQHandler+0x470>)
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff facc 	bl	8001710 <LL_ADC_GetMultiDMATransfer>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00b      	beq.n	8002196 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800217e:	2301      	movs	r3, #1
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
 8002182:	e008      	b.n	8002196 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002192:	2301      	movs	r3, #1
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	2b01      	cmp	r3, #1
 800219a:	d10e      	bne.n	80021ba <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	f043 0202 	orr.w	r2, r3, #2
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f84d 	bl	8002254 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2210      	movs	r2, #16
 80021c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d018      	beq.n	80021fe <HAL_ADC_IRQHandler+0x45a>
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d013      	beq.n	80021fe <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021da:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	f043 0208 	orr.w	r2, r3, #8
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021f6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 feaf 	bl	8002f5c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80021fe:	bf00      	nop
 8002200:	3728      	adds	r7, #40	; 0x28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40022000 	.word	0x40022000
 800220c:	40022100 	.word	0x40022100
 8002210:	40022300 	.word	0x40022300
 8002214:	58026300 	.word	0x58026300

08002218 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002268:	b590      	push	{r4, r7, lr}
 800226a:	b0a1      	sub	sp, #132	; 0x84
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a9d      	ldr	r2, [pc, #628]	; (80024f8 <HAL_ADC_ConfigChannel+0x290>)
 8002282:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x2a>
 800228e:	2302      	movs	r3, #2
 8002290:	e321      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x66e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff faf4 	bl	800188c <LL_ADC_REG_IsConversionOngoing>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f040 8306 	bne.w	80028b8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d108      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x62>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0e9b      	lsrs	r3, r3, #26
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	2201      	movs	r2, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	e016      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x90>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022da:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80022e2:	2320      	movs	r3, #32
 80022e4:	e003      	b.n	80022ee <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80022e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	2201      	movs	r2, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	69d1      	ldr	r1, [r2, #28]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	430b      	orrs	r3, r1
 8002304:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6859      	ldr	r1, [r3, #4]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	f7ff f94d 	bl	80015b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fab5 	bl	800188c <LL_ADC_REG_IsConversionOngoing>
 8002322:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fac2 	bl	80018b2 <LL_ADC_INJ_IsConversionOngoing>
 800232e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 80b3 	bne.w	800249e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 80af 	bne.w	800249e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6819      	ldr	r1, [r3, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	461a      	mov	r2, r3
 800234e:	f7ff f982 	bl	8001656 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002352:	4b6a      	ldr	r3, [pc, #424]	; (80024fc <HAL_ADC_ConfigChannel+0x294>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800235a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800235e:	d10b      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x110>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	e01d      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x14c>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10b      	bne.n	800239e <HAL_ADC_ConfigChannel+0x136>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	e00a      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x14c>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d027      	beq.n	800240e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6919      	ldr	r1, [r3, #16]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023cc:	f7ff f88a 	bl	80014e4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6919      	ldr	r1, [r3, #16]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	7e5b      	ldrb	r3, [r3, #25]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d102      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x17e>
 80023e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80023e4:	e000      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x180>
 80023e6:	2300      	movs	r3, #0
 80023e8:	461a      	mov	r2, r3
 80023ea:	f7ff f8b4 	bl	8001556 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6919      	ldr	r1, [r3, #16]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	7e1b      	ldrb	r3, [r3, #24]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d102      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x19c>
 80023fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002402:	e000      	b.n	8002406 <HAL_ADC_ConfigChannel+0x19e>
 8002404:	2300      	movs	r3, #0
 8002406:	461a      	mov	r2, r3
 8002408:	f7ff f88c 	bl	8001524 <LL_ADC_SetDataRightShift>
 800240c:	e047      	b.n	800249e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002414:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	069b      	lsls	r3, r3, #26
 800241e:	429a      	cmp	r2, r3
 8002420:	d107      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002430:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002438:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	069b      	lsls	r3, r3, #26
 8002442:	429a      	cmp	r2, r3
 8002444:	d107      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002454:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800245c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	069b      	lsls	r3, r3, #26
 8002466:	429a      	cmp	r2, r3
 8002468:	d107      	bne.n	800247a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002478:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002480:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	069b      	lsls	r3, r3, #26
 800248a:	429a      	cmp	r2, r3
 800248c:	d107      	bne.n	800249e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800249c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff f9b8 	bl	8001818 <LL_ADC_IsEnabled>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 820d 	bne.w	80028ca <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6819      	ldr	r1, [r3, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	461a      	mov	r2, r3
 80024be:	f7ff f8f5 	bl	80016ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	4a0c      	ldr	r2, [pc, #48]	; (80024f8 <HAL_ADC_ConfigChannel+0x290>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	f040 8133 	bne.w	8002734 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d110      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x298>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0e9b      	lsrs	r3, r3, #26
 80024e4:	3301      	adds	r3, #1
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	2b09      	cmp	r3, #9
 80024ec:	bf94      	ite	ls
 80024ee:	2301      	movls	r3, #1
 80024f0:	2300      	movhi	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	e01e      	b.n	8002534 <HAL_ADC_ConfigChannel+0x2cc>
 80024f6:	bf00      	nop
 80024f8:	47ff0000 	.word	0x47ff0000
 80024fc:	5c001000 	.word	0x5c001000
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800250e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002510:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002518:	2320      	movs	r3, #32
 800251a:	e003      	b.n	8002524 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800251c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	2b09      	cmp	r3, #9
 800252c:	bf94      	ite	ls
 800252e:	2301      	movls	r3, #1
 8002530:	2300      	movhi	r3, #0
 8002532:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002534:	2b00      	cmp	r3, #0
 8002536:	d079      	beq.n	800262c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x2ec>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	3301      	adds	r3, #1
 800254c:	069b      	lsls	r3, r3, #26
 800254e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002552:	e015      	b.n	8002580 <HAL_ADC_ConfigChannel+0x318>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002564:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e003      	b.n	8002578 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	3301      	adds	r3, #1
 800257a:	069b      	lsls	r3, r3, #26
 800257c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x338>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0e9b      	lsrs	r3, r3, #26
 8002592:	3301      	adds	r3, #1
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	e017      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x368>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80025ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80025b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80025b8:	2320      	movs	r3, #32
 80025ba:	e003      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80025bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	ea42 0103 	orr.w	r1, r2, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x38e>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	3301      	adds	r3, #1
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	051b      	lsls	r3, r3, #20
 80025f4:	e018      	b.n	8002628 <HAL_ADC_ConfigChannel+0x3c0>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002606:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800260e:	2320      	movs	r3, #32
 8002610:	e003      	b.n	800261a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	fab3 f383 	clz	r3, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	3301      	adds	r3, #1
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002628:	430b      	orrs	r3, r1
 800262a:	e07e      	b.n	800272a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002634:	2b00      	cmp	r3, #0
 8002636:	d107      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x3e0>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	0e9b      	lsrs	r3, r3, #26
 800263e:	3301      	adds	r3, #1
 8002640:	069b      	lsls	r3, r3, #26
 8002642:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002646:	e015      	b.n	8002674 <HAL_ADC_ConfigChannel+0x40c>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002660:	2320      	movs	r3, #32
 8002662:	e003      	b.n	800266c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	3301      	adds	r3, #1
 800266e:	069b      	lsls	r3, r3, #26
 8002670:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800267c:	2b00      	cmp	r3, #0
 800267e:	d109      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x42c>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0e9b      	lsrs	r3, r3, #26
 8002686:	3301      	adds	r3, #1
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2101      	movs	r1, #1
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	e017      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x45c>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	61bb      	str	r3, [r7, #24]
  return result;
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80026ac:	2320      	movs	r3, #32
 80026ae:	e003      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	3301      	adds	r3, #1
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	ea42 0103 	orr.w	r1, r2, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10d      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x488>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	0e9b      	lsrs	r3, r3, #26
 80026da:	3301      	adds	r3, #1
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	3b1e      	subs	r3, #30
 80026e8:	051b      	lsls	r3, r3, #20
 80026ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ee:	e01b      	b.n	8002728 <HAL_ADC_ConfigChannel+0x4c0>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	60fb      	str	r3, [r7, #12]
  return result;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e003      	b.n	8002714 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	3301      	adds	r3, #1
 8002716:	f003 021f 	and.w	r2, r3, #31
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	3b1e      	subs	r3, #30
 8002722:	051b      	lsls	r3, r3, #20
 8002724:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002728:	430b      	orrs	r3, r1
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	6892      	ldr	r2, [r2, #8]
 800272e:	4619      	mov	r1, r3
 8002730:	f7fe ff91 	bl	8001656 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	f280 80c6 	bge.w	80028ca <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a67      	ldr	r2, [pc, #412]	; (80028e0 <HAL_ADC_ConfigChannel+0x678>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d004      	beq.n	8002752 <HAL_ADC_ConfigChannel+0x4ea>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a65      	ldr	r2, [pc, #404]	; (80028e4 <HAL_ADC_ConfigChannel+0x67c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x4ee>
 8002752:	4b65      	ldr	r3, [pc, #404]	; (80028e8 <HAL_ADC_ConfigChannel+0x680>)
 8002754:	e000      	b.n	8002758 <HAL_ADC_ConfigChannel+0x4f0>
 8002756:	4b65      	ldr	r3, [pc, #404]	; (80028ec <HAL_ADC_ConfigChannel+0x684>)
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe feb5 	bl	80014c8 <LL_ADC_GetCommonPathInternalCh>
 800275e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a5e      	ldr	r2, [pc, #376]	; (80028e0 <HAL_ADC_ConfigChannel+0x678>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d004      	beq.n	8002774 <HAL_ADC_ConfigChannel+0x50c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a5d      	ldr	r2, [pc, #372]	; (80028e4 <HAL_ADC_ConfigChannel+0x67c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d10e      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x52a>
 8002774:	485a      	ldr	r0, [pc, #360]	; (80028e0 <HAL_ADC_ConfigChannel+0x678>)
 8002776:	f7ff f84f 	bl	8001818 <LL_ADC_IsEnabled>
 800277a:	4604      	mov	r4, r0
 800277c:	4859      	ldr	r0, [pc, #356]	; (80028e4 <HAL_ADC_ConfigChannel+0x67c>)
 800277e:	f7ff f84b 	bl	8001818 <LL_ADC_IsEnabled>
 8002782:	4603      	mov	r3, r0
 8002784:	4323      	orrs	r3, r4
 8002786:	2b00      	cmp	r3, #0
 8002788:	bf0c      	ite	eq
 800278a:	2301      	moveq	r3, #1
 800278c:	2300      	movne	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	e008      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x53c>
 8002792:	4857      	ldr	r0, [pc, #348]	; (80028f0 <HAL_ADC_ConfigChannel+0x688>)
 8002794:	f7ff f840 	bl	8001818 <LL_ADC_IsEnabled>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	bf0c      	ite	eq
 800279e:	2301      	moveq	r3, #1
 80027a0:	2300      	movne	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d07d      	beq.n	80028a4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a51      	ldr	r2, [pc, #324]	; (80028f4 <HAL_ADC_ConfigChannel+0x68c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d130      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x5ac>
 80027b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d12b      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a4b      	ldr	r2, [pc, #300]	; (80028f0 <HAL_ADC_ConfigChannel+0x688>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	f040 8081 	bne.w	80028ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a44      	ldr	r2, [pc, #272]	; (80028e0 <HAL_ADC_ConfigChannel+0x678>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d004      	beq.n	80027dc <HAL_ADC_ConfigChannel+0x574>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a43      	ldr	r2, [pc, #268]	; (80028e4 <HAL_ADC_ConfigChannel+0x67c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d101      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x578>
 80027dc:	4a42      	ldr	r2, [pc, #264]	; (80028e8 <HAL_ADC_ConfigChannel+0x680>)
 80027de:	e000      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x57a>
 80027e0:	4a42      	ldr	r2, [pc, #264]	; (80028ec <HAL_ADC_ConfigChannel+0x684>)
 80027e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027e8:	4619      	mov	r1, r3
 80027ea:	4610      	mov	r0, r2
 80027ec:	f7fe fe59 	bl	80014a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f0:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <HAL_ADC_ConfigChannel+0x690>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	099b      	lsrs	r3, r3, #6
 80027f6:	4a41      	ldr	r2, [pc, #260]	; (80028fc <HAL_ADC_ConfigChannel+0x694>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	099b      	lsrs	r3, r3, #6
 80027fe:	3301      	adds	r3, #1
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002804:	e002      	b.n	800280c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	3b01      	subs	r3, #1
 800280a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f9      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002812:	e05a      	b.n	80028ca <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a39      	ldr	r2, [pc, #228]	; (8002900 <HAL_ADC_ConfigChannel+0x698>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d11e      	bne.n	800285c <HAL_ADC_ConfigChannel+0x5f4>
 800281e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d119      	bne.n	800285c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a30      	ldr	r2, [pc, #192]	; (80028f0 <HAL_ADC_ConfigChannel+0x688>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d14b      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2a      	ldr	r2, [pc, #168]	; (80028e0 <HAL_ADC_ConfigChannel+0x678>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d004      	beq.n	8002846 <HAL_ADC_ConfigChannel+0x5de>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a28      	ldr	r2, [pc, #160]	; (80028e4 <HAL_ADC_ConfigChannel+0x67c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d101      	bne.n	800284a <HAL_ADC_ConfigChannel+0x5e2>
 8002846:	4a28      	ldr	r2, [pc, #160]	; (80028e8 <HAL_ADC_ConfigChannel+0x680>)
 8002848:	e000      	b.n	800284c <HAL_ADC_ConfigChannel+0x5e4>
 800284a:	4a28      	ldr	r2, [pc, #160]	; (80028ec <HAL_ADC_ConfigChannel+0x684>)
 800284c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002852:	4619      	mov	r1, r3
 8002854:	4610      	mov	r0, r2
 8002856:	f7fe fe24 	bl	80014a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800285a:	e036      	b.n	80028ca <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a28      	ldr	r2, [pc, #160]	; (8002904 <HAL_ADC_ConfigChannel+0x69c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d131      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x662>
 8002866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d12c      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1e      	ldr	r2, [pc, #120]	; (80028f0 <HAL_ADC_ConfigChannel+0x688>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d127      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a18      	ldr	r2, [pc, #96]	; (80028e0 <HAL_ADC_ConfigChannel+0x678>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d004      	beq.n	800288e <HAL_ADC_ConfigChannel+0x626>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a16      	ldr	r2, [pc, #88]	; (80028e4 <HAL_ADC_ConfigChannel+0x67c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d101      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x62a>
 800288e:	4a16      	ldr	r2, [pc, #88]	; (80028e8 <HAL_ADC_ConfigChannel+0x680>)
 8002890:	e000      	b.n	8002894 <HAL_ADC_ConfigChannel+0x62c>
 8002892:	4a16      	ldr	r2, [pc, #88]	; (80028ec <HAL_ADC_ConfigChannel+0x684>)
 8002894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002896:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800289a:	4619      	mov	r1, r3
 800289c:	4610      	mov	r0, r2
 800289e:	f7fe fe00 	bl	80014a2 <LL_ADC_SetCommonPathInternalCh>
 80028a2:	e012      	b.n	80028ca <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80028b6:	e008      	b.n	80028ca <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3784      	adds	r7, #132	; 0x84
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd90      	pop	{r4, r7, pc}
 80028de:	bf00      	nop
 80028e0:	40022000 	.word	0x40022000
 80028e4:	40022100 	.word	0x40022100
 80028e8:	40022300 	.word	0x40022300
 80028ec:	58026300 	.word	0x58026300
 80028f0:	58026000 	.word	0x58026000
 80028f4:	cb840000 	.word	0xcb840000
 80028f8:	24004010 	.word	0x24004010
 80028fc:	053e2d63 	.word	0x053e2d63
 8002900:	c7520000 	.word	0xc7520000
 8002904:	cfb80000 	.word	0xcfb80000

08002908 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe ff7f 	bl	8001818 <LL_ADC_IsEnabled>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d16e      	bne.n	80029fe <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <ADC_Enable+0x100>)
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00d      	beq.n	800294a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002932:	f043 0210 	orr.w	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	f043 0201 	orr.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e05a      	b.n	8002a00 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe ff3a 	bl	80017c8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002954:	f7fe fd64 	bl	8001420 <HAL_GetTick>
 8002958:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a2b      	ldr	r2, [pc, #172]	; (8002a0c <ADC_Enable+0x104>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d004      	beq.n	800296e <ADC_Enable+0x66>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a29      	ldr	r2, [pc, #164]	; (8002a10 <ADC_Enable+0x108>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d101      	bne.n	8002972 <ADC_Enable+0x6a>
 800296e:	4b29      	ldr	r3, [pc, #164]	; (8002a14 <ADC_Enable+0x10c>)
 8002970:	e000      	b.n	8002974 <ADC_Enable+0x6c>
 8002972:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <ADC_Enable+0x110>)
 8002974:	4618      	mov	r0, r3
 8002976:	f7fe febd 	bl	80016f4 <LL_ADC_GetMultimode>
 800297a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a23      	ldr	r2, [pc, #140]	; (8002a10 <ADC_Enable+0x108>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d002      	beq.n	800298c <ADC_Enable+0x84>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	e000      	b.n	800298e <ADC_Enable+0x86>
 800298c:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <ADC_Enable+0x104>)
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	4293      	cmp	r3, r2
 8002994:	d02c      	beq.n	80029f0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d130      	bne.n	80029fe <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800299c:	e028      	b.n	80029f0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe ff38 	bl	8001818 <LL_ADC_IsEnabled>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d104      	bne.n	80029b8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe ff08 	bl	80017c8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029b8:	f7fe fd32 	bl	8001420 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d914      	bls.n	80029f0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d00d      	beq.n	80029f0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d8:	f043 0210 	orr.w	r2, r3, #16
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	f043 0201 	orr.w	r2, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e007      	b.n	8002a00 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d1cf      	bne.n	800299e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	8000003f 	.word	0x8000003f
 8002a0c:	40022000 	.word	0x40022000
 8002a10:	40022100 	.word	0x40022100
 8002a14:	40022300 	.word	0x40022300
 8002a18:	58026300 	.word	0x58026300

08002a1c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe ff08 	bl	800183e <LL_ADC_IsDisableOngoing>
 8002a2e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe feef 	bl	8001818 <LL_ADC_IsEnabled>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d047      	beq.n	8002ad0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d144      	bne.n	8002ad0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 030d 	and.w	r3, r3, #13
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d10c      	bne.n	8002a6e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe fec9 	bl	80017f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2203      	movs	r2, #3
 8002a64:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a66:	f7fe fcdb 	bl	8001420 <HAL_GetTick>
 8002a6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a6c:	e029      	b.n	8002ac2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	f043 0210 	orr.w	r2, r3, #16
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	f043 0201 	orr.w	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e023      	b.n	8002ad2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a8a:	f7fe fcc9 	bl	8001420 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d914      	bls.n	8002ac2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00d      	beq.n	8002ac2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	f043 0210 	orr.w	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab6:	f043 0201 	orr.w	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e007      	b.n	8002ad2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1dc      	bne.n	8002a8a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d14b      	bne.n	8002b8c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d021      	beq.n	8002b52 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe fd3a 	bl	800158c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d032      	beq.n	8002b84 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d12b      	bne.n	8002b84 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d11f      	bne.n	8002b84 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b48:	f043 0201 	orr.w	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	655a      	str	r2, [r3, #84]	; 0x54
 8002b50:	e018      	b.n	8002b84 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d111      	bne.n	8002b84 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d105      	bne.n	8002b84 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f7ff fb47 	bl	8002218 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b8a:	e00e      	b.n	8002baa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f7ff fb5b 	bl	8002254 <HAL_ADC_ErrorCallback>
}
 8002b9e:	e004      	b.n	8002baa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7ff fb33 	bl	800222c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	f043 0204 	orr.w	r2, r3, #4
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f7ff fb2d 	bl	8002254 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a7a      	ldr	r2, [pc, #488]	; (8002dfc <ADC_ConfigureBoostMode+0x1f8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <ADC_ConfigureBoostMode+0x1c>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a79      	ldr	r2, [pc, #484]	; (8002e00 <ADC_ConfigureBoostMode+0x1fc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d109      	bne.n	8002c34 <ADC_ConfigureBoostMode+0x30>
 8002c20:	4b78      	ldr	r3, [pc, #480]	; (8002e04 <ADC_ConfigureBoostMode+0x200>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e008      	b.n	8002c46 <ADC_ConfigureBoostMode+0x42>
 8002c34:	4b74      	ldr	r3, [pc, #464]	; (8002e08 <ADC_ConfigureBoostMode+0x204>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01c      	beq.n	8002c84 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002c4a:	f003 fd0d 	bl	8006668 <HAL_RCC_GetHCLKFreq>
 8002c4e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c58:	d010      	beq.n	8002c7c <ADC_ConfigureBoostMode+0x78>
 8002c5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c5e:	d873      	bhi.n	8002d48 <ADC_ConfigureBoostMode+0x144>
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c64:	d002      	beq.n	8002c6c <ADC_ConfigureBoostMode+0x68>
 8002c66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c6a:	d16d      	bne.n	8002d48 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	0c1b      	lsrs	r3, r3, #16
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	60fb      	str	r3, [r7, #12]
        break;
 8002c7a:	e068      	b.n	8002d4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	60fb      	str	r3, [r7, #12]
        break;
 8002c82:	e064      	b.n	8002d4e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002c84:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c88:	f04f 0100 	mov.w	r1, #0
 8002c8c:	f004 ff7e 	bl	8007b8c <HAL_RCCEx_GetPeriphCLKFreq>
 8002c90:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c9a:	d051      	beq.n	8002d40 <ADC_ConfigureBoostMode+0x13c>
 8002c9c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002ca0:	d854      	bhi.n	8002d4c <ADC_ConfigureBoostMode+0x148>
 8002ca2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002ca6:	d047      	beq.n	8002d38 <ADC_ConfigureBoostMode+0x134>
 8002ca8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002cac:	d84e      	bhi.n	8002d4c <ADC_ConfigureBoostMode+0x148>
 8002cae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002cb2:	d03d      	beq.n	8002d30 <ADC_ConfigureBoostMode+0x12c>
 8002cb4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002cb8:	d848      	bhi.n	8002d4c <ADC_ConfigureBoostMode+0x148>
 8002cba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cbe:	d033      	beq.n	8002d28 <ADC_ConfigureBoostMode+0x124>
 8002cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cc4:	d842      	bhi.n	8002d4c <ADC_ConfigureBoostMode+0x148>
 8002cc6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002cca:	d029      	beq.n	8002d20 <ADC_ConfigureBoostMode+0x11c>
 8002ccc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002cd0:	d83c      	bhi.n	8002d4c <ADC_ConfigureBoostMode+0x148>
 8002cd2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002cd6:	d01a      	beq.n	8002d0e <ADC_ConfigureBoostMode+0x10a>
 8002cd8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002cdc:	d836      	bhi.n	8002d4c <ADC_ConfigureBoostMode+0x148>
 8002cde:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ce2:	d014      	beq.n	8002d0e <ADC_ConfigureBoostMode+0x10a>
 8002ce4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ce8:	d830      	bhi.n	8002d4c <ADC_ConfigureBoostMode+0x148>
 8002cea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cee:	d00e      	beq.n	8002d0e <ADC_ConfigureBoostMode+0x10a>
 8002cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cf4:	d82a      	bhi.n	8002d4c <ADC_ConfigureBoostMode+0x148>
 8002cf6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cfa:	d008      	beq.n	8002d0e <ADC_ConfigureBoostMode+0x10a>
 8002cfc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d00:	d824      	bhi.n	8002d4c <ADC_ConfigureBoostMode+0x148>
 8002d02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d06:	d002      	beq.n	8002d0e <ADC_ConfigureBoostMode+0x10a>
 8002d08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d0c:	d11e      	bne.n	8002d4c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	0c9b      	lsrs	r3, r3, #18
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	60fb      	str	r3, [r7, #12]
        break;
 8002d1e:	e016      	b.n	8002d4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	60fb      	str	r3, [r7, #12]
        break;
 8002d26:	e012      	b.n	8002d4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	60fb      	str	r3, [r7, #12]
        break;
 8002d2e:	e00e      	b.n	8002d4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	60fb      	str	r3, [r7, #12]
        break;
 8002d36:	e00a      	b.n	8002d4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	09db      	lsrs	r3, r3, #7
 8002d3c:	60fb      	str	r3, [r7, #12]
        break;
 8002d3e:	e006      	b.n	8002d4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	60fb      	str	r3, [r7, #12]
        break;
 8002d46:	e002      	b.n	8002d4e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002d48:	bf00      	nop
 8002d4a:	e000      	b.n	8002d4e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002d4c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002d4e:	f7fe fb73 	bl	8001438 <HAL_GetREVID>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d815      	bhi.n	8002d88 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4a2b      	ldr	r2, [pc, #172]	; (8002e0c <ADC_ConfigureBoostMode+0x208>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d908      	bls.n	8002d76 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d72:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002d74:	e03e      	b.n	8002df4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d84:	609a      	str	r2, [r3, #8]
}
 8002d86:	e035      	b.n	8002df4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4a1f      	ldr	r2, [pc, #124]	; (8002e10 <ADC_ConfigureBoostMode+0x20c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d808      	bhi.n	8002da8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002da4:	609a      	str	r2, [r3, #8]
}
 8002da6:	e025      	b.n	8002df4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a1a      	ldr	r2, [pc, #104]	; (8002e14 <ADC_ConfigureBoostMode+0x210>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d80a      	bhi.n	8002dc6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dc2:	609a      	str	r2, [r3, #8]
}
 8002dc4:	e016      	b.n	8002df4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <ADC_ConfigureBoostMode+0x214>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d80a      	bhi.n	8002de4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de0:	609a      	str	r2, [r3, #8]
}
 8002de2:	e007      	b.n	8002df4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002df2:	609a      	str	r2, [r3, #8]
}
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40022000 	.word	0x40022000
 8002e00:	40022100 	.word	0x40022100
 8002e04:	40022300 	.word	0x40022300
 8002e08:	58026300 	.word	0x58026300
 8002e0c:	01312d00 	.word	0x01312d00
 8002e10:	005f5e10 	.word	0x005f5e10
 8002e14:	00bebc20 	.word	0x00bebc20
 8002e18:	017d7840 	.word	0x017d7840

08002e1c <LL_ADC_StartCalibration>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <LL_ADC_StartCalibration+0x38>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	609a      	str	r2, [r3, #8]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	3ffeffc0 	.word	0x3ffeffc0

08002e58 <LL_ADC_IsCalibrationOnGoing>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e6c:	d101      	bne.n	8002e72 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_ADCEx_Calibration_Start+0x1e>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e04c      	b.n	8002f38 <HAL_ADCEx_Calibration_Start+0xb8>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f7ff fdb8 	bl	8002a1c <ADC_Disable>
 8002eac:	4603      	mov	r3, r0
 8002eae:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d135      	bne.n	8002f22 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eba:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	f043 0202 	orr.w	r2, r3, #2
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff ffa4 	bl	8002e1c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ed4:	e014      	b.n	8002f00 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4a19      	ldr	r2, [pc, #100]	; (8002f44 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d30d      	bcc.n	8002f00 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	f023 0312 	bic.w	r3, r3, #18
 8002eec:	f043 0210 	orr.w	r2, r3, #16
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e01b      	b.n	8002f38 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ffa7 	bl	8002e58 <LL_ADC_IsCalibrationOnGoing>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e2      	bne.n	8002ed6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	f023 0303 	bic.w	r3, r3, #3
 8002f18:	f043 0201 	orr.w	r2, r3, #1
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54
 8002f20:	e005      	b.n	8002f2e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f26:	f043 0210 	orr.w	r2, r3, #16
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	ffffeefd 	.word	0xffffeefd
 8002f44:	25c3f800 	.word	0x25c3f800

08002f48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <__NVIC_SetPriorityGrouping+0x40>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fda:	4a04      	ldr	r2, [pc, #16]	; (8002fec <__NVIC_SetPriorityGrouping+0x40>)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	60d3      	str	r3, [r2, #12]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00
 8002ff0:	05fa0000 	.word	0x05fa0000

08002ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <__NVIC_GetPriorityGrouping+0x18>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	0a1b      	lsrs	r3, r3, #8
 8002ffe:	f003 0307 	and.w	r3, r3, #7
}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800301a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800301e:	2b00      	cmp	r3, #0
 8003020:	db0b      	blt.n	800303a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	f003 021f 	and.w	r2, r3, #31
 8003028:	4907      	ldr	r1, [pc, #28]	; (8003048 <__NVIC_EnableIRQ+0x38>)
 800302a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	2001      	movs	r0, #1
 8003032:	fa00 f202 	lsl.w	r2, r0, r2
 8003036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e000e100 	.word	0xe000e100

0800304c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	6039      	str	r1, [r7, #0]
 8003056:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003058:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800305c:	2b00      	cmp	r3, #0
 800305e:	db0a      	blt.n	8003076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	b2da      	uxtb	r2, r3
 8003064:	490c      	ldr	r1, [pc, #48]	; (8003098 <__NVIC_SetPriority+0x4c>)
 8003066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800306a:	0112      	lsls	r2, r2, #4
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	440b      	add	r3, r1
 8003070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003074:	e00a      	b.n	800308c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	4908      	ldr	r1, [pc, #32]	; (800309c <__NVIC_SetPriority+0x50>)
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	3b04      	subs	r3, #4
 8003084:	0112      	lsls	r2, r2, #4
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	440b      	add	r3, r1
 800308a:	761a      	strb	r2, [r3, #24]
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000e100 	.word	0xe000e100
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b089      	sub	sp, #36	; 0x24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f1c3 0307 	rsb	r3, r3, #7
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	bf28      	it	cs
 80030be:	2304      	movcs	r3, #4
 80030c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3304      	adds	r3, #4
 80030c6:	2b06      	cmp	r3, #6
 80030c8:	d902      	bls.n	80030d0 <NVIC_EncodePriority+0x30>
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3b03      	subs	r3, #3
 80030ce:	e000      	b.n	80030d2 <NVIC_EncodePriority+0x32>
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	f04f 32ff 	mov.w	r2, #4294967295
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43da      	mvns	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	401a      	ands	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e8:	f04f 31ff 	mov.w	r1, #4294967295
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	fa01 f303 	lsl.w	r3, r1, r3
 80030f2:	43d9      	mvns	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f8:	4313      	orrs	r3, r2
         );
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3724      	adds	r7, #36	; 0x24
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ff4c 	bl	8002fac <__NVIC_SetPriorityGrouping>
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800312a:	f7ff ff63 	bl	8002ff4 <__NVIC_GetPriorityGrouping>
 800312e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	6978      	ldr	r0, [r7, #20]
 8003136:	f7ff ffb3 	bl	80030a0 <NVIC_EncodePriority>
 800313a:	4602      	mov	r2, r0
 800313c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003140:	4611      	mov	r1, r2
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff ff82 	bl	800304c <__NVIC_SetPriority>
}
 8003148:	bf00      	nop
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800315a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ff56 	bl	8003010 <__NVIC_EnableIRQ>
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003174:	f7fe f954 	bl	8001420 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e316      	b.n	80037b2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a66      	ldr	r2, [pc, #408]	; (8003324 <HAL_DMA_Init+0x1b8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d04a      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a65      	ldr	r2, [pc, #404]	; (8003328 <HAL_DMA_Init+0x1bc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d045      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a63      	ldr	r2, [pc, #396]	; (800332c <HAL_DMA_Init+0x1c0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d040      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a62      	ldr	r2, [pc, #392]	; (8003330 <HAL_DMA_Init+0x1c4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d03b      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a60      	ldr	r2, [pc, #384]	; (8003334 <HAL_DMA_Init+0x1c8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d036      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a5f      	ldr	r2, [pc, #380]	; (8003338 <HAL_DMA_Init+0x1cc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d031      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a5d      	ldr	r2, [pc, #372]	; (800333c <HAL_DMA_Init+0x1d0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d02c      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a5c      	ldr	r2, [pc, #368]	; (8003340 <HAL_DMA_Init+0x1d4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d027      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a5a      	ldr	r2, [pc, #360]	; (8003344 <HAL_DMA_Init+0x1d8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d022      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a59      	ldr	r2, [pc, #356]	; (8003348 <HAL_DMA_Init+0x1dc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d01d      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a57      	ldr	r2, [pc, #348]	; (800334c <HAL_DMA_Init+0x1e0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d018      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a56      	ldr	r2, [pc, #344]	; (8003350 <HAL_DMA_Init+0x1e4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d013      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a54      	ldr	r2, [pc, #336]	; (8003354 <HAL_DMA_Init+0x1e8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00e      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a53      	ldr	r2, [pc, #332]	; (8003358 <HAL_DMA_Init+0x1ec>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d009      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a51      	ldr	r2, [pc, #324]	; (800335c <HAL_DMA_Init+0x1f0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a50      	ldr	r2, [pc, #320]	; (8003360 <HAL_DMA_Init+0x1f4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_DMA_Init+0xbc>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <HAL_DMA_Init+0xbe>
 8003228:	2300      	movs	r3, #0
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 813b 	beq.w	80034a6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a37      	ldr	r2, [pc, #220]	; (8003324 <HAL_DMA_Init+0x1b8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d04a      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a36      	ldr	r2, [pc, #216]	; (8003328 <HAL_DMA_Init+0x1bc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d045      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a34      	ldr	r2, [pc, #208]	; (800332c <HAL_DMA_Init+0x1c0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d040      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a33      	ldr	r2, [pc, #204]	; (8003330 <HAL_DMA_Init+0x1c4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d03b      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a31      	ldr	r2, [pc, #196]	; (8003334 <HAL_DMA_Init+0x1c8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d036      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a30      	ldr	r2, [pc, #192]	; (8003338 <HAL_DMA_Init+0x1cc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d031      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a2e      	ldr	r2, [pc, #184]	; (800333c <HAL_DMA_Init+0x1d0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d02c      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a2d      	ldr	r2, [pc, #180]	; (8003340 <HAL_DMA_Init+0x1d4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d027      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a2b      	ldr	r2, [pc, #172]	; (8003344 <HAL_DMA_Init+0x1d8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d022      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2a      	ldr	r2, [pc, #168]	; (8003348 <HAL_DMA_Init+0x1dc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d01d      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a28      	ldr	r2, [pc, #160]	; (800334c <HAL_DMA_Init+0x1e0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d018      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a27      	ldr	r2, [pc, #156]	; (8003350 <HAL_DMA_Init+0x1e4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d013      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a25      	ldr	r2, [pc, #148]	; (8003354 <HAL_DMA_Init+0x1e8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00e      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a24      	ldr	r2, [pc, #144]	; (8003358 <HAL_DMA_Init+0x1ec>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d009      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a22      	ldr	r2, [pc, #136]	; (800335c <HAL_DMA_Init+0x1f0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d004      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a21      	ldr	r2, [pc, #132]	; (8003360 <HAL_DMA_Init+0x1f4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d108      	bne.n	80032f2 <HAL_DMA_Init+0x186>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	e007      	b.n	8003302 <HAL_DMA_Init+0x196>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0201 	bic.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003302:	e02f      	b.n	8003364 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003304:	f7fe f88c 	bl	8001420 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b05      	cmp	r3, #5
 8003310:	d928      	bls.n	8003364 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2203      	movs	r2, #3
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e246      	b.n	80037b2 <HAL_DMA_Init+0x646>
 8003324:	40020010 	.word	0x40020010
 8003328:	40020028 	.word	0x40020028
 800332c:	40020040 	.word	0x40020040
 8003330:	40020058 	.word	0x40020058
 8003334:	40020070 	.word	0x40020070
 8003338:	40020088 	.word	0x40020088
 800333c:	400200a0 	.word	0x400200a0
 8003340:	400200b8 	.word	0x400200b8
 8003344:	40020410 	.word	0x40020410
 8003348:	40020428 	.word	0x40020428
 800334c:	40020440 	.word	0x40020440
 8003350:	40020458 	.word	0x40020458
 8003354:	40020470 	.word	0x40020470
 8003358:	40020488 	.word	0x40020488
 800335c:	400204a0 	.word	0x400204a0
 8003360:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1c8      	bne.n	8003304 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4b83      	ldr	r3, [pc, #524]	; (800358c <HAL_DMA_Init+0x420>)
 800337e:	4013      	ands	r3, r2
 8003380:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800338a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003396:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d107      	bne.n	80033c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	4313      	orrs	r3, r2
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80033c8:	4b71      	ldr	r3, [pc, #452]	; (8003590 <HAL_DMA_Init+0x424>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b71      	ldr	r3, [pc, #452]	; (8003594 <HAL_DMA_Init+0x428>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033d4:	d328      	bcc.n	8003428 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b28      	cmp	r3, #40	; 0x28
 80033dc:	d903      	bls.n	80033e6 <HAL_DMA_Init+0x27a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b2e      	cmp	r3, #46	; 0x2e
 80033e4:	d917      	bls.n	8003416 <HAL_DMA_Init+0x2aa>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b3e      	cmp	r3, #62	; 0x3e
 80033ec:	d903      	bls.n	80033f6 <HAL_DMA_Init+0x28a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b42      	cmp	r3, #66	; 0x42
 80033f4:	d90f      	bls.n	8003416 <HAL_DMA_Init+0x2aa>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b46      	cmp	r3, #70	; 0x46
 80033fc:	d903      	bls.n	8003406 <HAL_DMA_Init+0x29a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b48      	cmp	r3, #72	; 0x48
 8003404:	d907      	bls.n	8003416 <HAL_DMA_Init+0x2aa>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b4e      	cmp	r3, #78	; 0x4e
 800340c:	d905      	bls.n	800341a <HAL_DMA_Init+0x2ae>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b52      	cmp	r3, #82	; 0x52
 8003414:	d801      	bhi.n	800341a <HAL_DMA_Init+0x2ae>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_DMA_Init+0x2b0>
 800341a:	2300      	movs	r3, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003426:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f023 0307 	bic.w	r3, r3, #7
 800343e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2b04      	cmp	r3, #4
 8003450:	d117      	bne.n	8003482 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00e      	beq.n	8003482 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f001 fdcf 	bl	8005008 <DMA_CheckFifoParam>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2240      	movs	r2, #64	; 0x40
 8003474:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e197      	b.n	80037b2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f001 fd0a 	bl	8004ea4 <DMA_CalcBaseAndBitshift>
 8003490:	4603      	mov	r3, r0
 8003492:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	223f      	movs	r2, #63	; 0x3f
 800349e:	409a      	lsls	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	e0cd      	b.n	8003642 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a3b      	ldr	r2, [pc, #236]	; (8003598 <HAL_DMA_Init+0x42c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d022      	beq.n	80034f6 <HAL_DMA_Init+0x38a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a39      	ldr	r2, [pc, #228]	; (800359c <HAL_DMA_Init+0x430>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01d      	beq.n	80034f6 <HAL_DMA_Init+0x38a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a38      	ldr	r2, [pc, #224]	; (80035a0 <HAL_DMA_Init+0x434>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d018      	beq.n	80034f6 <HAL_DMA_Init+0x38a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a36      	ldr	r2, [pc, #216]	; (80035a4 <HAL_DMA_Init+0x438>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <HAL_DMA_Init+0x38a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a35      	ldr	r2, [pc, #212]	; (80035a8 <HAL_DMA_Init+0x43c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00e      	beq.n	80034f6 <HAL_DMA_Init+0x38a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a33      	ldr	r2, [pc, #204]	; (80035ac <HAL_DMA_Init+0x440>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d009      	beq.n	80034f6 <HAL_DMA_Init+0x38a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a32      	ldr	r2, [pc, #200]	; (80035b0 <HAL_DMA_Init+0x444>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d004      	beq.n	80034f6 <HAL_DMA_Init+0x38a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a30      	ldr	r2, [pc, #192]	; (80035b4 <HAL_DMA_Init+0x448>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d101      	bne.n	80034fa <HAL_DMA_Init+0x38e>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <HAL_DMA_Init+0x390>
 80034fa:	2300      	movs	r3, #0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8097 	beq.w	8003630 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a24      	ldr	r2, [pc, #144]	; (8003598 <HAL_DMA_Init+0x42c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d021      	beq.n	8003550 <HAL_DMA_Init+0x3e4>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a22      	ldr	r2, [pc, #136]	; (800359c <HAL_DMA_Init+0x430>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01c      	beq.n	8003550 <HAL_DMA_Init+0x3e4>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <HAL_DMA_Init+0x434>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d017      	beq.n	8003550 <HAL_DMA_Init+0x3e4>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1f      	ldr	r2, [pc, #124]	; (80035a4 <HAL_DMA_Init+0x438>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d012      	beq.n	8003550 <HAL_DMA_Init+0x3e4>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <HAL_DMA_Init+0x43c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00d      	beq.n	8003550 <HAL_DMA_Init+0x3e4>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1c      	ldr	r2, [pc, #112]	; (80035ac <HAL_DMA_Init+0x440>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d008      	beq.n	8003550 <HAL_DMA_Init+0x3e4>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1b      	ldr	r2, [pc, #108]	; (80035b0 <HAL_DMA_Init+0x444>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d003      	beq.n	8003550 <HAL_DMA_Init+0x3e4>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a19      	ldr	r2, [pc, #100]	; (80035b4 <HAL_DMA_Init+0x448>)
 800354e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <HAL_DMA_Init+0x44c>)
 800356c:	4013      	ands	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b40      	cmp	r3, #64	; 0x40
 8003576:	d021      	beq.n	80035bc <HAL_DMA_Init+0x450>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b80      	cmp	r3, #128	; 0x80
 800357e:	d102      	bne.n	8003586 <HAL_DMA_Init+0x41a>
 8003580:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003584:	e01b      	b.n	80035be <HAL_DMA_Init+0x452>
 8003586:	2300      	movs	r3, #0
 8003588:	e019      	b.n	80035be <HAL_DMA_Init+0x452>
 800358a:	bf00      	nop
 800358c:	fe10803f 	.word	0xfe10803f
 8003590:	5c001000 	.word	0x5c001000
 8003594:	ffff0000 	.word	0xffff0000
 8003598:	58025408 	.word	0x58025408
 800359c:	5802541c 	.word	0x5802541c
 80035a0:	58025430 	.word	0x58025430
 80035a4:	58025444 	.word	0x58025444
 80035a8:	58025458 	.word	0x58025458
 80035ac:	5802546c 	.word	0x5802546c
 80035b0:	58025480 	.word	0x58025480
 80035b4:	58025494 	.word	0x58025494
 80035b8:	fffe000f 	.word	0xfffe000f
 80035bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68d2      	ldr	r2, [r2, #12]
 80035c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	4b6e      	ldr	r3, [pc, #440]	; (80037bc <HAL_DMA_Init+0x650>)
 8003604:	4413      	add	r3, r2
 8003606:	4a6e      	ldr	r2, [pc, #440]	; (80037c0 <HAL_DMA_Init+0x654>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	009a      	lsls	r2, r3, #2
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f001 fc45 	bl	8004ea4 <DMA_CalcBaseAndBitshift>
 800361a:	4603      	mov	r3, r0
 800361c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	2201      	movs	r2, #1
 8003628:	409a      	lsls	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	e008      	b.n	8003642 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2240      	movs	r2, #64	; 0x40
 8003634:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2203      	movs	r2, #3
 800363a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e0b7      	b.n	80037b2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a5f      	ldr	r2, [pc, #380]	; (80037c4 <HAL_DMA_Init+0x658>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d072      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a5d      	ldr	r2, [pc, #372]	; (80037c8 <HAL_DMA_Init+0x65c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d06d      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a5c      	ldr	r2, [pc, #368]	; (80037cc <HAL_DMA_Init+0x660>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d068      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a5a      	ldr	r2, [pc, #360]	; (80037d0 <HAL_DMA_Init+0x664>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d063      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a59      	ldr	r2, [pc, #356]	; (80037d4 <HAL_DMA_Init+0x668>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d05e      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a57      	ldr	r2, [pc, #348]	; (80037d8 <HAL_DMA_Init+0x66c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d059      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a56      	ldr	r2, [pc, #344]	; (80037dc <HAL_DMA_Init+0x670>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d054      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a54      	ldr	r2, [pc, #336]	; (80037e0 <HAL_DMA_Init+0x674>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d04f      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a53      	ldr	r2, [pc, #332]	; (80037e4 <HAL_DMA_Init+0x678>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d04a      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a51      	ldr	r2, [pc, #324]	; (80037e8 <HAL_DMA_Init+0x67c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d045      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a50      	ldr	r2, [pc, #320]	; (80037ec <HAL_DMA_Init+0x680>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d040      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a4e      	ldr	r2, [pc, #312]	; (80037f0 <HAL_DMA_Init+0x684>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d03b      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a4d      	ldr	r2, [pc, #308]	; (80037f4 <HAL_DMA_Init+0x688>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d036      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a4b      	ldr	r2, [pc, #300]	; (80037f8 <HAL_DMA_Init+0x68c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d031      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a4a      	ldr	r2, [pc, #296]	; (80037fc <HAL_DMA_Init+0x690>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d02c      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a48      	ldr	r2, [pc, #288]	; (8003800 <HAL_DMA_Init+0x694>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d027      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a47      	ldr	r2, [pc, #284]	; (8003804 <HAL_DMA_Init+0x698>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d022      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a45      	ldr	r2, [pc, #276]	; (8003808 <HAL_DMA_Init+0x69c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01d      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a44      	ldr	r2, [pc, #272]	; (800380c <HAL_DMA_Init+0x6a0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d018      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a42      	ldr	r2, [pc, #264]	; (8003810 <HAL_DMA_Init+0x6a4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d013      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a41      	ldr	r2, [pc, #260]	; (8003814 <HAL_DMA_Init+0x6a8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00e      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a3f      	ldr	r2, [pc, #252]	; (8003818 <HAL_DMA_Init+0x6ac>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a3e      	ldr	r2, [pc, #248]	; (800381c <HAL_DMA_Init+0x6b0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d004      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a3c      	ldr	r2, [pc, #240]	; (8003820 <HAL_DMA_Init+0x6b4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_DMA_Init+0x5ca>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_DMA_Init+0x5cc>
 8003736:	2300      	movs	r3, #0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d032      	beq.n	80037a2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f001 fcdf 	bl	8005100 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b80      	cmp	r3, #128	; 0x80
 8003748:	d102      	bne.n	8003750 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003764:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d010      	beq.n	8003790 <HAL_DMA_Init+0x624>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b08      	cmp	r3, #8
 8003774:	d80c      	bhi.n	8003790 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f001 fd5c 	bl	8005234 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	e008      	b.n	80037a2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	a7fdabf8 	.word	0xa7fdabf8
 80037c0:	cccccccd 	.word	0xcccccccd
 80037c4:	40020010 	.word	0x40020010
 80037c8:	40020028 	.word	0x40020028
 80037cc:	40020040 	.word	0x40020040
 80037d0:	40020058 	.word	0x40020058
 80037d4:	40020070 	.word	0x40020070
 80037d8:	40020088 	.word	0x40020088
 80037dc:	400200a0 	.word	0x400200a0
 80037e0:	400200b8 	.word	0x400200b8
 80037e4:	40020410 	.word	0x40020410
 80037e8:	40020428 	.word	0x40020428
 80037ec:	40020440 	.word	0x40020440
 80037f0:	40020458 	.word	0x40020458
 80037f4:	40020470 	.word	0x40020470
 80037f8:	40020488 	.word	0x40020488
 80037fc:	400204a0 	.word	0x400204a0
 8003800:	400204b8 	.word	0x400204b8
 8003804:	58025408 	.word	0x58025408
 8003808:	5802541c 	.word	0x5802541c
 800380c:	58025430 	.word	0x58025430
 8003810:	58025444 	.word	0x58025444
 8003814:	58025458 	.word	0x58025458
 8003818:	5802546c 	.word	0x5802546c
 800381c:	58025480 	.word	0x58025480
 8003820:	58025494 	.word	0x58025494

08003824 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e226      	b.n	8003c8e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_DMA_Start_IT+0x2a>
 800384a:	2302      	movs	r3, #2
 800384c:	e21f      	b.n	8003c8e <HAL_DMA_Start_IT+0x46a>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b01      	cmp	r3, #1
 8003860:	f040 820a 	bne.w	8003c78 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a68      	ldr	r2, [pc, #416]	; (8003a18 <HAL_DMA_Start_IT+0x1f4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d04a      	beq.n	8003912 <HAL_DMA_Start_IT+0xee>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a66      	ldr	r2, [pc, #408]	; (8003a1c <HAL_DMA_Start_IT+0x1f8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d045      	beq.n	8003912 <HAL_DMA_Start_IT+0xee>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a65      	ldr	r2, [pc, #404]	; (8003a20 <HAL_DMA_Start_IT+0x1fc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d040      	beq.n	8003912 <HAL_DMA_Start_IT+0xee>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a63      	ldr	r2, [pc, #396]	; (8003a24 <HAL_DMA_Start_IT+0x200>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d03b      	beq.n	8003912 <HAL_DMA_Start_IT+0xee>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a62      	ldr	r2, [pc, #392]	; (8003a28 <HAL_DMA_Start_IT+0x204>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d036      	beq.n	8003912 <HAL_DMA_Start_IT+0xee>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a60      	ldr	r2, [pc, #384]	; (8003a2c <HAL_DMA_Start_IT+0x208>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d031      	beq.n	8003912 <HAL_DMA_Start_IT+0xee>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a5f      	ldr	r2, [pc, #380]	; (8003a30 <HAL_DMA_Start_IT+0x20c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d02c      	beq.n	8003912 <HAL_DMA_Start_IT+0xee>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a5d      	ldr	r2, [pc, #372]	; (8003a34 <HAL_DMA_Start_IT+0x210>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d027      	beq.n	8003912 <HAL_DMA_Start_IT+0xee>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a5c      	ldr	r2, [pc, #368]	; (8003a38 <HAL_DMA_Start_IT+0x214>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d022      	beq.n	8003912 <HAL_DMA_Start_IT+0xee>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a5a      	ldr	r2, [pc, #360]	; (8003a3c <HAL_DMA_Start_IT+0x218>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d01d      	beq.n	8003912 <HAL_DMA_Start_IT+0xee>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a59      	ldr	r2, [pc, #356]	; (8003a40 <HAL_DMA_Start_IT+0x21c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d018      	beq.n	8003912 <HAL_DMA_Start_IT+0xee>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a57      	ldr	r2, [pc, #348]	; (8003a44 <HAL_DMA_Start_IT+0x220>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <HAL_DMA_Start_IT+0xee>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a56      	ldr	r2, [pc, #344]	; (8003a48 <HAL_DMA_Start_IT+0x224>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00e      	beq.n	8003912 <HAL_DMA_Start_IT+0xee>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a54      	ldr	r2, [pc, #336]	; (8003a4c <HAL_DMA_Start_IT+0x228>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d009      	beq.n	8003912 <HAL_DMA_Start_IT+0xee>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a53      	ldr	r2, [pc, #332]	; (8003a50 <HAL_DMA_Start_IT+0x22c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d004      	beq.n	8003912 <HAL_DMA_Start_IT+0xee>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a51      	ldr	r2, [pc, #324]	; (8003a54 <HAL_DMA_Start_IT+0x230>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d108      	bne.n	8003924 <HAL_DMA_Start_IT+0x100>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	e007      	b.n	8003934 <HAL_DMA_Start_IT+0x110>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f001 f906 	bl	8004b4c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a34      	ldr	r2, [pc, #208]	; (8003a18 <HAL_DMA_Start_IT+0x1f4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d04a      	beq.n	80039e0 <HAL_DMA_Start_IT+0x1bc>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a33      	ldr	r2, [pc, #204]	; (8003a1c <HAL_DMA_Start_IT+0x1f8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d045      	beq.n	80039e0 <HAL_DMA_Start_IT+0x1bc>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a31      	ldr	r2, [pc, #196]	; (8003a20 <HAL_DMA_Start_IT+0x1fc>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d040      	beq.n	80039e0 <HAL_DMA_Start_IT+0x1bc>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a30      	ldr	r2, [pc, #192]	; (8003a24 <HAL_DMA_Start_IT+0x200>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d03b      	beq.n	80039e0 <HAL_DMA_Start_IT+0x1bc>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a2e      	ldr	r2, [pc, #184]	; (8003a28 <HAL_DMA_Start_IT+0x204>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d036      	beq.n	80039e0 <HAL_DMA_Start_IT+0x1bc>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a2d      	ldr	r2, [pc, #180]	; (8003a2c <HAL_DMA_Start_IT+0x208>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d031      	beq.n	80039e0 <HAL_DMA_Start_IT+0x1bc>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a2b      	ldr	r2, [pc, #172]	; (8003a30 <HAL_DMA_Start_IT+0x20c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d02c      	beq.n	80039e0 <HAL_DMA_Start_IT+0x1bc>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2a      	ldr	r2, [pc, #168]	; (8003a34 <HAL_DMA_Start_IT+0x210>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d027      	beq.n	80039e0 <HAL_DMA_Start_IT+0x1bc>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a28      	ldr	r2, [pc, #160]	; (8003a38 <HAL_DMA_Start_IT+0x214>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d022      	beq.n	80039e0 <HAL_DMA_Start_IT+0x1bc>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a27      	ldr	r2, [pc, #156]	; (8003a3c <HAL_DMA_Start_IT+0x218>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d01d      	beq.n	80039e0 <HAL_DMA_Start_IT+0x1bc>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a25      	ldr	r2, [pc, #148]	; (8003a40 <HAL_DMA_Start_IT+0x21c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d018      	beq.n	80039e0 <HAL_DMA_Start_IT+0x1bc>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a24      	ldr	r2, [pc, #144]	; (8003a44 <HAL_DMA_Start_IT+0x220>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d013      	beq.n	80039e0 <HAL_DMA_Start_IT+0x1bc>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a22      	ldr	r2, [pc, #136]	; (8003a48 <HAL_DMA_Start_IT+0x224>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00e      	beq.n	80039e0 <HAL_DMA_Start_IT+0x1bc>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a21      	ldr	r2, [pc, #132]	; (8003a4c <HAL_DMA_Start_IT+0x228>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d009      	beq.n	80039e0 <HAL_DMA_Start_IT+0x1bc>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <HAL_DMA_Start_IT+0x22c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <HAL_DMA_Start_IT+0x1bc>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1e      	ldr	r2, [pc, #120]	; (8003a54 <HAL_DMA_Start_IT+0x230>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d101      	bne.n	80039e4 <HAL_DMA_Start_IT+0x1c0>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <HAL_DMA_Start_IT+0x1c2>
 80039e4:	2300      	movs	r3, #0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d036      	beq.n	8003a58 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f023 021e 	bic.w	r2, r3, #30
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0216 	orr.w	r2, r2, #22
 80039fc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d03e      	beq.n	8003a84 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0208 	orr.w	r2, r2, #8
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	e035      	b.n	8003a84 <HAL_DMA_Start_IT+0x260>
 8003a18:	40020010 	.word	0x40020010
 8003a1c:	40020028 	.word	0x40020028
 8003a20:	40020040 	.word	0x40020040
 8003a24:	40020058 	.word	0x40020058
 8003a28:	40020070 	.word	0x40020070
 8003a2c:	40020088 	.word	0x40020088
 8003a30:	400200a0 	.word	0x400200a0
 8003a34:	400200b8 	.word	0x400200b8
 8003a38:	40020410 	.word	0x40020410
 8003a3c:	40020428 	.word	0x40020428
 8003a40:	40020440 	.word	0x40020440
 8003a44:	40020458 	.word	0x40020458
 8003a48:	40020470 	.word	0x40020470
 8003a4c:	40020488 	.word	0x40020488
 8003a50:	400204a0 	.word	0x400204a0
 8003a54:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 020e 	bic.w	r2, r3, #14
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 020a 	orr.w	r2, r2, #10
 8003a6a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0204 	orr.w	r2, r2, #4
 8003a82:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a83      	ldr	r2, [pc, #524]	; (8003c98 <HAL_DMA_Start_IT+0x474>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d072      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a82      	ldr	r2, [pc, #520]	; (8003c9c <HAL_DMA_Start_IT+0x478>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d06d      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a80      	ldr	r2, [pc, #512]	; (8003ca0 <HAL_DMA_Start_IT+0x47c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d068      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a7f      	ldr	r2, [pc, #508]	; (8003ca4 <HAL_DMA_Start_IT+0x480>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d063      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a7d      	ldr	r2, [pc, #500]	; (8003ca8 <HAL_DMA_Start_IT+0x484>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d05e      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a7c      	ldr	r2, [pc, #496]	; (8003cac <HAL_DMA_Start_IT+0x488>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d059      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a7a      	ldr	r2, [pc, #488]	; (8003cb0 <HAL_DMA_Start_IT+0x48c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d054      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a79      	ldr	r2, [pc, #484]	; (8003cb4 <HAL_DMA_Start_IT+0x490>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d04f      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a77      	ldr	r2, [pc, #476]	; (8003cb8 <HAL_DMA_Start_IT+0x494>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d04a      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a76      	ldr	r2, [pc, #472]	; (8003cbc <HAL_DMA_Start_IT+0x498>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d045      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a74      	ldr	r2, [pc, #464]	; (8003cc0 <HAL_DMA_Start_IT+0x49c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d040      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a73      	ldr	r2, [pc, #460]	; (8003cc4 <HAL_DMA_Start_IT+0x4a0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d03b      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a71      	ldr	r2, [pc, #452]	; (8003cc8 <HAL_DMA_Start_IT+0x4a4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d036      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a70      	ldr	r2, [pc, #448]	; (8003ccc <HAL_DMA_Start_IT+0x4a8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d031      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a6e      	ldr	r2, [pc, #440]	; (8003cd0 <HAL_DMA_Start_IT+0x4ac>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d02c      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a6d      	ldr	r2, [pc, #436]	; (8003cd4 <HAL_DMA_Start_IT+0x4b0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d027      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a6b      	ldr	r2, [pc, #428]	; (8003cd8 <HAL_DMA_Start_IT+0x4b4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d022      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a6a      	ldr	r2, [pc, #424]	; (8003cdc <HAL_DMA_Start_IT+0x4b8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d01d      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a68      	ldr	r2, [pc, #416]	; (8003ce0 <HAL_DMA_Start_IT+0x4bc>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d018      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a67      	ldr	r2, [pc, #412]	; (8003ce4 <HAL_DMA_Start_IT+0x4c0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d013      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a65      	ldr	r2, [pc, #404]	; (8003ce8 <HAL_DMA_Start_IT+0x4c4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00e      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a64      	ldr	r2, [pc, #400]	; (8003cec <HAL_DMA_Start_IT+0x4c8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d009      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a62      	ldr	r2, [pc, #392]	; (8003cf0 <HAL_DMA_Start_IT+0x4cc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d004      	beq.n	8003b74 <HAL_DMA_Start_IT+0x350>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a61      	ldr	r2, [pc, #388]	; (8003cf4 <HAL_DMA_Start_IT+0x4d0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d101      	bne.n	8003b78 <HAL_DMA_Start_IT+0x354>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <HAL_DMA_Start_IT+0x356>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01a      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d007      	beq.n	8003b9c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b9a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bb2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a37      	ldr	r2, [pc, #220]	; (8003c98 <HAL_DMA_Start_IT+0x474>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d04a      	beq.n	8003c54 <HAL_DMA_Start_IT+0x430>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a36      	ldr	r2, [pc, #216]	; (8003c9c <HAL_DMA_Start_IT+0x478>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d045      	beq.n	8003c54 <HAL_DMA_Start_IT+0x430>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a34      	ldr	r2, [pc, #208]	; (8003ca0 <HAL_DMA_Start_IT+0x47c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d040      	beq.n	8003c54 <HAL_DMA_Start_IT+0x430>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a33      	ldr	r2, [pc, #204]	; (8003ca4 <HAL_DMA_Start_IT+0x480>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d03b      	beq.n	8003c54 <HAL_DMA_Start_IT+0x430>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a31      	ldr	r2, [pc, #196]	; (8003ca8 <HAL_DMA_Start_IT+0x484>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d036      	beq.n	8003c54 <HAL_DMA_Start_IT+0x430>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a30      	ldr	r2, [pc, #192]	; (8003cac <HAL_DMA_Start_IT+0x488>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d031      	beq.n	8003c54 <HAL_DMA_Start_IT+0x430>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a2e      	ldr	r2, [pc, #184]	; (8003cb0 <HAL_DMA_Start_IT+0x48c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d02c      	beq.n	8003c54 <HAL_DMA_Start_IT+0x430>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a2d      	ldr	r2, [pc, #180]	; (8003cb4 <HAL_DMA_Start_IT+0x490>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d027      	beq.n	8003c54 <HAL_DMA_Start_IT+0x430>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a2b      	ldr	r2, [pc, #172]	; (8003cb8 <HAL_DMA_Start_IT+0x494>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d022      	beq.n	8003c54 <HAL_DMA_Start_IT+0x430>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a2a      	ldr	r2, [pc, #168]	; (8003cbc <HAL_DMA_Start_IT+0x498>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d01d      	beq.n	8003c54 <HAL_DMA_Start_IT+0x430>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a28      	ldr	r2, [pc, #160]	; (8003cc0 <HAL_DMA_Start_IT+0x49c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d018      	beq.n	8003c54 <HAL_DMA_Start_IT+0x430>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a27      	ldr	r2, [pc, #156]	; (8003cc4 <HAL_DMA_Start_IT+0x4a0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d013      	beq.n	8003c54 <HAL_DMA_Start_IT+0x430>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a25      	ldr	r2, [pc, #148]	; (8003cc8 <HAL_DMA_Start_IT+0x4a4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00e      	beq.n	8003c54 <HAL_DMA_Start_IT+0x430>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a24      	ldr	r2, [pc, #144]	; (8003ccc <HAL_DMA_Start_IT+0x4a8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d009      	beq.n	8003c54 <HAL_DMA_Start_IT+0x430>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a22      	ldr	r2, [pc, #136]	; (8003cd0 <HAL_DMA_Start_IT+0x4ac>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d004      	beq.n	8003c54 <HAL_DMA_Start_IT+0x430>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a21      	ldr	r2, [pc, #132]	; (8003cd4 <HAL_DMA_Start_IT+0x4b0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d108      	bne.n	8003c66 <HAL_DMA_Start_IT+0x442>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e012      	b.n	8003c8c <HAL_DMA_Start_IT+0x468>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0201 	orr.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e009      	b.n	8003c8c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40020010 	.word	0x40020010
 8003c9c:	40020028 	.word	0x40020028
 8003ca0:	40020040 	.word	0x40020040
 8003ca4:	40020058 	.word	0x40020058
 8003ca8:	40020070 	.word	0x40020070
 8003cac:	40020088 	.word	0x40020088
 8003cb0:	400200a0 	.word	0x400200a0
 8003cb4:	400200b8 	.word	0x400200b8
 8003cb8:	40020410 	.word	0x40020410
 8003cbc:	40020428 	.word	0x40020428
 8003cc0:	40020440 	.word	0x40020440
 8003cc4:	40020458 	.word	0x40020458
 8003cc8:	40020470 	.word	0x40020470
 8003ccc:	40020488 	.word	0x40020488
 8003cd0:	400204a0 	.word	0x400204a0
 8003cd4:	400204b8 	.word	0x400204b8
 8003cd8:	58025408 	.word	0x58025408
 8003cdc:	5802541c 	.word	0x5802541c
 8003ce0:	58025430 	.word	0x58025430
 8003ce4:	58025444 	.word	0x58025444
 8003ce8:	58025458 	.word	0x58025458
 8003cec:	5802546c 	.word	0x5802546c
 8003cf0:	58025480 	.word	0x58025480
 8003cf4:	58025494 	.word	0x58025494

08003cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d04:	4b67      	ldr	r3, [pc, #412]	; (8003ea4 <HAL_DMA_IRQHandler+0x1ac>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a67      	ldr	r2, [pc, #412]	; (8003ea8 <HAL_DMA_IRQHandler+0x1b0>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	0a9b      	lsrs	r3, r3, #10
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d16:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a5f      	ldr	r2, [pc, #380]	; (8003eac <HAL_DMA_IRQHandler+0x1b4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d04a      	beq.n	8003dca <HAL_DMA_IRQHandler+0xd2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a5d      	ldr	r2, [pc, #372]	; (8003eb0 <HAL_DMA_IRQHandler+0x1b8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d045      	beq.n	8003dca <HAL_DMA_IRQHandler+0xd2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a5c      	ldr	r2, [pc, #368]	; (8003eb4 <HAL_DMA_IRQHandler+0x1bc>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d040      	beq.n	8003dca <HAL_DMA_IRQHandler+0xd2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a5a      	ldr	r2, [pc, #360]	; (8003eb8 <HAL_DMA_IRQHandler+0x1c0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d03b      	beq.n	8003dca <HAL_DMA_IRQHandler+0xd2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a59      	ldr	r2, [pc, #356]	; (8003ebc <HAL_DMA_IRQHandler+0x1c4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d036      	beq.n	8003dca <HAL_DMA_IRQHandler+0xd2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a57      	ldr	r2, [pc, #348]	; (8003ec0 <HAL_DMA_IRQHandler+0x1c8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d031      	beq.n	8003dca <HAL_DMA_IRQHandler+0xd2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a56      	ldr	r2, [pc, #344]	; (8003ec4 <HAL_DMA_IRQHandler+0x1cc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d02c      	beq.n	8003dca <HAL_DMA_IRQHandler+0xd2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a54      	ldr	r2, [pc, #336]	; (8003ec8 <HAL_DMA_IRQHandler+0x1d0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d027      	beq.n	8003dca <HAL_DMA_IRQHandler+0xd2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a53      	ldr	r2, [pc, #332]	; (8003ecc <HAL_DMA_IRQHandler+0x1d4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d022      	beq.n	8003dca <HAL_DMA_IRQHandler+0xd2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a51      	ldr	r2, [pc, #324]	; (8003ed0 <HAL_DMA_IRQHandler+0x1d8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01d      	beq.n	8003dca <HAL_DMA_IRQHandler+0xd2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a50      	ldr	r2, [pc, #320]	; (8003ed4 <HAL_DMA_IRQHandler+0x1dc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d018      	beq.n	8003dca <HAL_DMA_IRQHandler+0xd2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a4e      	ldr	r2, [pc, #312]	; (8003ed8 <HAL_DMA_IRQHandler+0x1e0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d013      	beq.n	8003dca <HAL_DMA_IRQHandler+0xd2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a4d      	ldr	r2, [pc, #308]	; (8003edc <HAL_DMA_IRQHandler+0x1e4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00e      	beq.n	8003dca <HAL_DMA_IRQHandler+0xd2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a4b      	ldr	r2, [pc, #300]	; (8003ee0 <HAL_DMA_IRQHandler+0x1e8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d009      	beq.n	8003dca <HAL_DMA_IRQHandler+0xd2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a4a      	ldr	r2, [pc, #296]	; (8003ee4 <HAL_DMA_IRQHandler+0x1ec>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d004      	beq.n	8003dca <HAL_DMA_IRQHandler+0xd2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a48      	ldr	r2, [pc, #288]	; (8003ee8 <HAL_DMA_IRQHandler+0x1f0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d101      	bne.n	8003dce <HAL_DMA_IRQHandler+0xd6>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <HAL_DMA_IRQHandler+0xd8>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 842b 	beq.w	800462c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2208      	movs	r2, #8
 8003de0:	409a      	lsls	r2, r3
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80a2 	beq.w	8003f30 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a2e      	ldr	r2, [pc, #184]	; (8003eac <HAL_DMA_IRQHandler+0x1b4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d04a      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x194>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a2d      	ldr	r2, [pc, #180]	; (8003eb0 <HAL_DMA_IRQHandler+0x1b8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d045      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x194>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a2b      	ldr	r2, [pc, #172]	; (8003eb4 <HAL_DMA_IRQHandler+0x1bc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d040      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x194>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2a      	ldr	r2, [pc, #168]	; (8003eb8 <HAL_DMA_IRQHandler+0x1c0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d03b      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x194>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a28      	ldr	r2, [pc, #160]	; (8003ebc <HAL_DMA_IRQHandler+0x1c4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d036      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x194>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a27      	ldr	r2, [pc, #156]	; (8003ec0 <HAL_DMA_IRQHandler+0x1c8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d031      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x194>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a25      	ldr	r2, [pc, #148]	; (8003ec4 <HAL_DMA_IRQHandler+0x1cc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d02c      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x194>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a24      	ldr	r2, [pc, #144]	; (8003ec8 <HAL_DMA_IRQHandler+0x1d0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d027      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x194>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a22      	ldr	r2, [pc, #136]	; (8003ecc <HAL_DMA_IRQHandler+0x1d4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d022      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x194>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a21      	ldr	r2, [pc, #132]	; (8003ed0 <HAL_DMA_IRQHandler+0x1d8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d01d      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x194>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <HAL_DMA_IRQHandler+0x1dc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d018      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x194>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <HAL_DMA_IRQHandler+0x1e0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x194>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1c      	ldr	r2, [pc, #112]	; (8003edc <HAL_DMA_IRQHandler+0x1e4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00e      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x194>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <HAL_DMA_IRQHandler+0x1e8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d009      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x194>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a19      	ldr	r2, [pc, #100]	; (8003ee4 <HAL_DMA_IRQHandler+0x1ec>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x194>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a18      	ldr	r2, [pc, #96]	; (8003ee8 <HAL_DMA_IRQHandler+0x1f0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d12f      	bne.n	8003eec <HAL_DMA_IRQHandler+0x1f4>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bf14      	ite	ne
 8003e9a:	2301      	movne	r3, #1
 8003e9c:	2300      	moveq	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	e02e      	b.n	8003f00 <HAL_DMA_IRQHandler+0x208>
 8003ea2:	bf00      	nop
 8003ea4:	24004010 	.word	0x24004010
 8003ea8:	1b4e81b5 	.word	0x1b4e81b5
 8003eac:	40020010 	.word	0x40020010
 8003eb0:	40020028 	.word	0x40020028
 8003eb4:	40020040 	.word	0x40020040
 8003eb8:	40020058 	.word	0x40020058
 8003ebc:	40020070 	.word	0x40020070
 8003ec0:	40020088 	.word	0x40020088
 8003ec4:	400200a0 	.word	0x400200a0
 8003ec8:	400200b8 	.word	0x400200b8
 8003ecc:	40020410 	.word	0x40020410
 8003ed0:	40020428 	.word	0x40020428
 8003ed4:	40020440 	.word	0x40020440
 8003ed8:	40020458 	.word	0x40020458
 8003edc:	40020470 	.word	0x40020470
 8003ee0:	40020488 	.word	0x40020488
 8003ee4:	400204a0 	.word	0x400204a0
 8003ee8:	400204b8 	.word	0x400204b8
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bf14      	ite	ne
 8003efa:	2301      	movne	r3, #1
 8003efc:	2300      	moveq	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d015      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0204 	bic.w	r2, r2, #4
 8003f12:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	2208      	movs	r2, #8
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	f043 0201 	orr.w	r2, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d06e      	beq.n	8004024 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a69      	ldr	r2, [pc, #420]	; (80040f0 <HAL_DMA_IRQHandler+0x3f8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d04a      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x2ee>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a67      	ldr	r2, [pc, #412]	; (80040f4 <HAL_DMA_IRQHandler+0x3fc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d045      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x2ee>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a66      	ldr	r2, [pc, #408]	; (80040f8 <HAL_DMA_IRQHandler+0x400>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d040      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x2ee>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a64      	ldr	r2, [pc, #400]	; (80040fc <HAL_DMA_IRQHandler+0x404>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d03b      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x2ee>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a63      	ldr	r2, [pc, #396]	; (8004100 <HAL_DMA_IRQHandler+0x408>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d036      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x2ee>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a61      	ldr	r2, [pc, #388]	; (8004104 <HAL_DMA_IRQHandler+0x40c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d031      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x2ee>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a60      	ldr	r2, [pc, #384]	; (8004108 <HAL_DMA_IRQHandler+0x410>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d02c      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x2ee>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a5e      	ldr	r2, [pc, #376]	; (800410c <HAL_DMA_IRQHandler+0x414>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d027      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x2ee>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a5d      	ldr	r2, [pc, #372]	; (8004110 <HAL_DMA_IRQHandler+0x418>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d022      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x2ee>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a5b      	ldr	r2, [pc, #364]	; (8004114 <HAL_DMA_IRQHandler+0x41c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01d      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x2ee>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a5a      	ldr	r2, [pc, #360]	; (8004118 <HAL_DMA_IRQHandler+0x420>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d018      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x2ee>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a58      	ldr	r2, [pc, #352]	; (800411c <HAL_DMA_IRQHandler+0x424>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d013      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x2ee>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a57      	ldr	r2, [pc, #348]	; (8004120 <HAL_DMA_IRQHandler+0x428>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00e      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x2ee>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a55      	ldr	r2, [pc, #340]	; (8004124 <HAL_DMA_IRQHandler+0x42c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d009      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x2ee>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a54      	ldr	r2, [pc, #336]	; (8004128 <HAL_DMA_IRQHandler+0x430>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d004      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x2ee>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a52      	ldr	r2, [pc, #328]	; (800412c <HAL_DMA_IRQHandler+0x434>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d10a      	bne.n	8003ffc <HAL_DMA_IRQHandler+0x304>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bf14      	ite	ne
 8003ff4:	2301      	movne	r3, #1
 8003ff6:	2300      	moveq	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	e003      	b.n	8004004 <HAL_DMA_IRQHandler+0x30c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2300      	movs	r3, #0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	2201      	movs	r2, #1
 8004012:	409a      	lsls	r2, r3
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401c:	f043 0202 	orr.w	r2, r3, #2
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	2204      	movs	r2, #4
 800402e:	409a      	lsls	r2, r3
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	4013      	ands	r3, r2
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 808f 	beq.w	8004158 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a2c      	ldr	r2, [pc, #176]	; (80040f0 <HAL_DMA_IRQHandler+0x3f8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d04a      	beq.n	80040da <HAL_DMA_IRQHandler+0x3e2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <HAL_DMA_IRQHandler+0x3fc>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d045      	beq.n	80040da <HAL_DMA_IRQHandler+0x3e2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a29      	ldr	r2, [pc, #164]	; (80040f8 <HAL_DMA_IRQHandler+0x400>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d040      	beq.n	80040da <HAL_DMA_IRQHandler+0x3e2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a27      	ldr	r2, [pc, #156]	; (80040fc <HAL_DMA_IRQHandler+0x404>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d03b      	beq.n	80040da <HAL_DMA_IRQHandler+0x3e2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a26      	ldr	r2, [pc, #152]	; (8004100 <HAL_DMA_IRQHandler+0x408>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d036      	beq.n	80040da <HAL_DMA_IRQHandler+0x3e2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a24      	ldr	r2, [pc, #144]	; (8004104 <HAL_DMA_IRQHandler+0x40c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d031      	beq.n	80040da <HAL_DMA_IRQHandler+0x3e2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a23      	ldr	r2, [pc, #140]	; (8004108 <HAL_DMA_IRQHandler+0x410>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d02c      	beq.n	80040da <HAL_DMA_IRQHandler+0x3e2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a21      	ldr	r2, [pc, #132]	; (800410c <HAL_DMA_IRQHandler+0x414>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d027      	beq.n	80040da <HAL_DMA_IRQHandler+0x3e2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a20      	ldr	r2, [pc, #128]	; (8004110 <HAL_DMA_IRQHandler+0x418>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d022      	beq.n	80040da <HAL_DMA_IRQHandler+0x3e2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1e      	ldr	r2, [pc, #120]	; (8004114 <HAL_DMA_IRQHandler+0x41c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d01d      	beq.n	80040da <HAL_DMA_IRQHandler+0x3e2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1d      	ldr	r2, [pc, #116]	; (8004118 <HAL_DMA_IRQHandler+0x420>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d018      	beq.n	80040da <HAL_DMA_IRQHandler+0x3e2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a1b      	ldr	r2, [pc, #108]	; (800411c <HAL_DMA_IRQHandler+0x424>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d013      	beq.n	80040da <HAL_DMA_IRQHandler+0x3e2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1a      	ldr	r2, [pc, #104]	; (8004120 <HAL_DMA_IRQHandler+0x428>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00e      	beq.n	80040da <HAL_DMA_IRQHandler+0x3e2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a18      	ldr	r2, [pc, #96]	; (8004124 <HAL_DMA_IRQHandler+0x42c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d009      	beq.n	80040da <HAL_DMA_IRQHandler+0x3e2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a17      	ldr	r2, [pc, #92]	; (8004128 <HAL_DMA_IRQHandler+0x430>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d004      	beq.n	80040da <HAL_DMA_IRQHandler+0x3e2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a15      	ldr	r2, [pc, #84]	; (800412c <HAL_DMA_IRQHandler+0x434>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d12a      	bne.n	8004130 <HAL_DMA_IRQHandler+0x438>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	bf14      	ite	ne
 80040e8:	2301      	movne	r3, #1
 80040ea:	2300      	moveq	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	e023      	b.n	8004138 <HAL_DMA_IRQHandler+0x440>
 80040f0:	40020010 	.word	0x40020010
 80040f4:	40020028 	.word	0x40020028
 80040f8:	40020040 	.word	0x40020040
 80040fc:	40020058 	.word	0x40020058
 8004100:	40020070 	.word	0x40020070
 8004104:	40020088 	.word	0x40020088
 8004108:	400200a0 	.word	0x400200a0
 800410c:	400200b8 	.word	0x400200b8
 8004110:	40020410 	.word	0x40020410
 8004114:	40020428 	.word	0x40020428
 8004118:	40020440 	.word	0x40020440
 800411c:	40020458 	.word	0x40020458
 8004120:	40020470 	.word	0x40020470
 8004124:	40020488 	.word	0x40020488
 8004128:	400204a0 	.word	0x400204a0
 800412c:	400204b8 	.word	0x400204b8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2300      	movs	r3, #0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00d      	beq.n	8004158 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004140:	f003 031f 	and.w	r3, r3, #31
 8004144:	2204      	movs	r2, #4
 8004146:	409a      	lsls	r2, r3
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004150:	f043 0204 	orr.w	r2, r3, #4
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	2210      	movs	r2, #16
 8004162:	409a      	lsls	r2, r3
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	4013      	ands	r3, r2
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80a6 	beq.w	80042ba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a85      	ldr	r2, [pc, #532]	; (8004388 <HAL_DMA_IRQHandler+0x690>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d04a      	beq.n	800420e <HAL_DMA_IRQHandler+0x516>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a83      	ldr	r2, [pc, #524]	; (800438c <HAL_DMA_IRQHandler+0x694>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d045      	beq.n	800420e <HAL_DMA_IRQHandler+0x516>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a82      	ldr	r2, [pc, #520]	; (8004390 <HAL_DMA_IRQHandler+0x698>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d040      	beq.n	800420e <HAL_DMA_IRQHandler+0x516>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a80      	ldr	r2, [pc, #512]	; (8004394 <HAL_DMA_IRQHandler+0x69c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d03b      	beq.n	800420e <HAL_DMA_IRQHandler+0x516>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a7f      	ldr	r2, [pc, #508]	; (8004398 <HAL_DMA_IRQHandler+0x6a0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d036      	beq.n	800420e <HAL_DMA_IRQHandler+0x516>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a7d      	ldr	r2, [pc, #500]	; (800439c <HAL_DMA_IRQHandler+0x6a4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d031      	beq.n	800420e <HAL_DMA_IRQHandler+0x516>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a7c      	ldr	r2, [pc, #496]	; (80043a0 <HAL_DMA_IRQHandler+0x6a8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d02c      	beq.n	800420e <HAL_DMA_IRQHandler+0x516>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a7a      	ldr	r2, [pc, #488]	; (80043a4 <HAL_DMA_IRQHandler+0x6ac>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d027      	beq.n	800420e <HAL_DMA_IRQHandler+0x516>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a79      	ldr	r2, [pc, #484]	; (80043a8 <HAL_DMA_IRQHandler+0x6b0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d022      	beq.n	800420e <HAL_DMA_IRQHandler+0x516>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a77      	ldr	r2, [pc, #476]	; (80043ac <HAL_DMA_IRQHandler+0x6b4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d01d      	beq.n	800420e <HAL_DMA_IRQHandler+0x516>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a76      	ldr	r2, [pc, #472]	; (80043b0 <HAL_DMA_IRQHandler+0x6b8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d018      	beq.n	800420e <HAL_DMA_IRQHandler+0x516>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a74      	ldr	r2, [pc, #464]	; (80043b4 <HAL_DMA_IRQHandler+0x6bc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <HAL_DMA_IRQHandler+0x516>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a73      	ldr	r2, [pc, #460]	; (80043b8 <HAL_DMA_IRQHandler+0x6c0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00e      	beq.n	800420e <HAL_DMA_IRQHandler+0x516>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a71      	ldr	r2, [pc, #452]	; (80043bc <HAL_DMA_IRQHandler+0x6c4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d009      	beq.n	800420e <HAL_DMA_IRQHandler+0x516>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a70      	ldr	r2, [pc, #448]	; (80043c0 <HAL_DMA_IRQHandler+0x6c8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d004      	beq.n	800420e <HAL_DMA_IRQHandler+0x516>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6e      	ldr	r2, [pc, #440]	; (80043c4 <HAL_DMA_IRQHandler+0x6cc>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d10a      	bne.n	8004224 <HAL_DMA_IRQHandler+0x52c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	bf14      	ite	ne
 800421c:	2301      	movne	r3, #1
 800421e:	2300      	moveq	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	e009      	b.n	8004238 <HAL_DMA_IRQHandler+0x540>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	bf14      	ite	ne
 8004232:	2301      	movne	r3, #1
 8004234:	2300      	moveq	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d03e      	beq.n	80042ba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2210      	movs	r2, #16
 8004246:	409a      	lsls	r2, r3
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d018      	beq.n	800428c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d108      	bne.n	800427a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d024      	beq.n	80042ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4798      	blx	r3
 8004278:	e01f      	b.n	80042ba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427e:	2b00      	cmp	r3, #0
 8004280:	d01b      	beq.n	80042ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	4798      	blx	r3
 800428a:	e016      	b.n	80042ba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004296:	2b00      	cmp	r3, #0
 8004298:	d107      	bne.n	80042aa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0208 	bic.w	r2, r2, #8
 80042a8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	2220      	movs	r2, #32
 80042c4:	409a      	lsls	r2, r3
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8110 	beq.w	80044f0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2c      	ldr	r2, [pc, #176]	; (8004388 <HAL_DMA_IRQHandler+0x690>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d04a      	beq.n	8004370 <HAL_DMA_IRQHandler+0x678>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a2b      	ldr	r2, [pc, #172]	; (800438c <HAL_DMA_IRQHandler+0x694>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d045      	beq.n	8004370 <HAL_DMA_IRQHandler+0x678>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a29      	ldr	r2, [pc, #164]	; (8004390 <HAL_DMA_IRQHandler+0x698>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d040      	beq.n	8004370 <HAL_DMA_IRQHandler+0x678>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a28      	ldr	r2, [pc, #160]	; (8004394 <HAL_DMA_IRQHandler+0x69c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d03b      	beq.n	8004370 <HAL_DMA_IRQHandler+0x678>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a26      	ldr	r2, [pc, #152]	; (8004398 <HAL_DMA_IRQHandler+0x6a0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d036      	beq.n	8004370 <HAL_DMA_IRQHandler+0x678>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a25      	ldr	r2, [pc, #148]	; (800439c <HAL_DMA_IRQHandler+0x6a4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d031      	beq.n	8004370 <HAL_DMA_IRQHandler+0x678>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a23      	ldr	r2, [pc, #140]	; (80043a0 <HAL_DMA_IRQHandler+0x6a8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d02c      	beq.n	8004370 <HAL_DMA_IRQHandler+0x678>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a22      	ldr	r2, [pc, #136]	; (80043a4 <HAL_DMA_IRQHandler+0x6ac>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d027      	beq.n	8004370 <HAL_DMA_IRQHandler+0x678>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a20      	ldr	r2, [pc, #128]	; (80043a8 <HAL_DMA_IRQHandler+0x6b0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d022      	beq.n	8004370 <HAL_DMA_IRQHandler+0x678>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a1f      	ldr	r2, [pc, #124]	; (80043ac <HAL_DMA_IRQHandler+0x6b4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d01d      	beq.n	8004370 <HAL_DMA_IRQHandler+0x678>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <HAL_DMA_IRQHandler+0x6b8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d018      	beq.n	8004370 <HAL_DMA_IRQHandler+0x678>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1c      	ldr	r2, [pc, #112]	; (80043b4 <HAL_DMA_IRQHandler+0x6bc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d013      	beq.n	8004370 <HAL_DMA_IRQHandler+0x678>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1a      	ldr	r2, [pc, #104]	; (80043b8 <HAL_DMA_IRQHandler+0x6c0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00e      	beq.n	8004370 <HAL_DMA_IRQHandler+0x678>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a19      	ldr	r2, [pc, #100]	; (80043bc <HAL_DMA_IRQHandler+0x6c4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d009      	beq.n	8004370 <HAL_DMA_IRQHandler+0x678>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <HAL_DMA_IRQHandler+0x6c8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d004      	beq.n	8004370 <HAL_DMA_IRQHandler+0x678>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a16      	ldr	r2, [pc, #88]	; (80043c4 <HAL_DMA_IRQHandler+0x6cc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d12b      	bne.n	80043c8 <HAL_DMA_IRQHandler+0x6d0>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0310 	and.w	r3, r3, #16
 800437a:	2b00      	cmp	r3, #0
 800437c:	bf14      	ite	ne
 800437e:	2301      	movne	r3, #1
 8004380:	2300      	moveq	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	e02a      	b.n	80043dc <HAL_DMA_IRQHandler+0x6e4>
 8004386:	bf00      	nop
 8004388:	40020010 	.word	0x40020010
 800438c:	40020028 	.word	0x40020028
 8004390:	40020040 	.word	0x40020040
 8004394:	40020058 	.word	0x40020058
 8004398:	40020070 	.word	0x40020070
 800439c:	40020088 	.word	0x40020088
 80043a0:	400200a0 	.word	0x400200a0
 80043a4:	400200b8 	.word	0x400200b8
 80043a8:	40020410 	.word	0x40020410
 80043ac:	40020428 	.word	0x40020428
 80043b0:	40020440 	.word	0x40020440
 80043b4:	40020458 	.word	0x40020458
 80043b8:	40020470 	.word	0x40020470
 80043bc:	40020488 	.word	0x40020488
 80043c0:	400204a0 	.word	0x400204a0
 80043c4:	400204b8 	.word	0x400204b8
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bf14      	ite	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	2300      	moveq	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 8087 	beq.w	80044f0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	2220      	movs	r2, #32
 80043ec:	409a      	lsls	r2, r3
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d139      	bne.n	8004472 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0216 	bic.w	r2, r2, #22
 800440c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695a      	ldr	r2, [r3, #20]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800441c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <HAL_DMA_IRQHandler+0x736>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0208 	bic.w	r2, r2, #8
 800443c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	223f      	movs	r2, #63	; 0x3f
 8004448:	409a      	lsls	r2, r3
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 834a 	beq.w	8004afc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4798      	blx	r3
          }
          return;
 8004470:	e344      	b.n	8004afc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d018      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d108      	bne.n	80044a0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	2b00      	cmp	r3, #0
 8004494:	d02c      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	4798      	blx	r3
 800449e:	e027      	b.n	80044f0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d023      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4798      	blx	r3
 80044b0:	e01e      	b.n	80044f0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10f      	bne.n	80044e0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0210 	bic.w	r2, r2, #16
 80044ce:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8306 	beq.w	8004b06 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8088 	beq.w	8004618 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2204      	movs	r2, #4
 800450c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a7a      	ldr	r2, [pc, #488]	; (8004700 <HAL_DMA_IRQHandler+0xa08>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d04a      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x8b8>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a79      	ldr	r2, [pc, #484]	; (8004704 <HAL_DMA_IRQHandler+0xa0c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d045      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x8b8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a77      	ldr	r2, [pc, #476]	; (8004708 <HAL_DMA_IRQHandler+0xa10>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d040      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x8b8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a76      	ldr	r2, [pc, #472]	; (800470c <HAL_DMA_IRQHandler+0xa14>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d03b      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x8b8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a74      	ldr	r2, [pc, #464]	; (8004710 <HAL_DMA_IRQHandler+0xa18>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d036      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x8b8>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a73      	ldr	r2, [pc, #460]	; (8004714 <HAL_DMA_IRQHandler+0xa1c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d031      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x8b8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a71      	ldr	r2, [pc, #452]	; (8004718 <HAL_DMA_IRQHandler+0xa20>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d02c      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x8b8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a70      	ldr	r2, [pc, #448]	; (800471c <HAL_DMA_IRQHandler+0xa24>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d027      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x8b8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a6e      	ldr	r2, [pc, #440]	; (8004720 <HAL_DMA_IRQHandler+0xa28>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d022      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x8b8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a6d      	ldr	r2, [pc, #436]	; (8004724 <HAL_DMA_IRQHandler+0xa2c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d01d      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x8b8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a6b      	ldr	r2, [pc, #428]	; (8004728 <HAL_DMA_IRQHandler+0xa30>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d018      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x8b8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a6a      	ldr	r2, [pc, #424]	; (800472c <HAL_DMA_IRQHandler+0xa34>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d013      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x8b8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a68      	ldr	r2, [pc, #416]	; (8004730 <HAL_DMA_IRQHandler+0xa38>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00e      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x8b8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a67      	ldr	r2, [pc, #412]	; (8004734 <HAL_DMA_IRQHandler+0xa3c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d009      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x8b8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a65      	ldr	r2, [pc, #404]	; (8004738 <HAL_DMA_IRQHandler+0xa40>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d004      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x8b8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a64      	ldr	r2, [pc, #400]	; (800473c <HAL_DMA_IRQHandler+0xa44>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d108      	bne.n	80045c2 <HAL_DMA_IRQHandler+0x8ca>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0201 	bic.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	e007      	b.n	80045d2 <HAL_DMA_IRQHandler+0x8da>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3301      	adds	r3, #1
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045da:	429a      	cmp	r2, r3
 80045dc:	d307      	bcc.n	80045ee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f2      	bne.n	80045d2 <HAL_DMA_IRQHandler+0x8da>
 80045ec:	e000      	b.n	80045f0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80045ee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2203      	movs	r2, #3
 8004602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004606:	e003      	b.n	8004610 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8272 	beq.w	8004b06 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	4798      	blx	r3
 800462a:	e26c      	b.n	8004b06 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a43      	ldr	r2, [pc, #268]	; (8004740 <HAL_DMA_IRQHandler+0xa48>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d022      	beq.n	800467c <HAL_DMA_IRQHandler+0x984>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a42      	ldr	r2, [pc, #264]	; (8004744 <HAL_DMA_IRQHandler+0xa4c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d01d      	beq.n	800467c <HAL_DMA_IRQHandler+0x984>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a40      	ldr	r2, [pc, #256]	; (8004748 <HAL_DMA_IRQHandler+0xa50>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d018      	beq.n	800467c <HAL_DMA_IRQHandler+0x984>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a3f      	ldr	r2, [pc, #252]	; (800474c <HAL_DMA_IRQHandler+0xa54>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d013      	beq.n	800467c <HAL_DMA_IRQHandler+0x984>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a3d      	ldr	r2, [pc, #244]	; (8004750 <HAL_DMA_IRQHandler+0xa58>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00e      	beq.n	800467c <HAL_DMA_IRQHandler+0x984>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a3c      	ldr	r2, [pc, #240]	; (8004754 <HAL_DMA_IRQHandler+0xa5c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d009      	beq.n	800467c <HAL_DMA_IRQHandler+0x984>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a3a      	ldr	r2, [pc, #232]	; (8004758 <HAL_DMA_IRQHandler+0xa60>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d004      	beq.n	800467c <HAL_DMA_IRQHandler+0x984>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a39      	ldr	r2, [pc, #228]	; (800475c <HAL_DMA_IRQHandler+0xa64>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d101      	bne.n	8004680 <HAL_DMA_IRQHandler+0x988>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <HAL_DMA_IRQHandler+0x98a>
 8004680:	2300      	movs	r3, #0
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 823f 	beq.w	8004b06 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	2204      	movs	r2, #4
 800469a:	409a      	lsls	r2, r3
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	4013      	ands	r3, r2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80cd 	beq.w	8004840 <HAL_DMA_IRQHandler+0xb48>
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80c7 	beq.w	8004840 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b6:	f003 031f 	and.w	r3, r3, #31
 80046ba:	2204      	movs	r2, #4
 80046bc:	409a      	lsls	r2, r3
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d049      	beq.n	8004760 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 8210 	beq.w	8004b00 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046e8:	e20a      	b.n	8004b00 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8206 	beq.w	8004b00 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046fc:	e200      	b.n	8004b00 <HAL_DMA_IRQHandler+0xe08>
 80046fe:	bf00      	nop
 8004700:	40020010 	.word	0x40020010
 8004704:	40020028 	.word	0x40020028
 8004708:	40020040 	.word	0x40020040
 800470c:	40020058 	.word	0x40020058
 8004710:	40020070 	.word	0x40020070
 8004714:	40020088 	.word	0x40020088
 8004718:	400200a0 	.word	0x400200a0
 800471c:	400200b8 	.word	0x400200b8
 8004720:	40020410 	.word	0x40020410
 8004724:	40020428 	.word	0x40020428
 8004728:	40020440 	.word	0x40020440
 800472c:	40020458 	.word	0x40020458
 8004730:	40020470 	.word	0x40020470
 8004734:	40020488 	.word	0x40020488
 8004738:	400204a0 	.word	0x400204a0
 800473c:	400204b8 	.word	0x400204b8
 8004740:	58025408 	.word	0x58025408
 8004744:	5802541c 	.word	0x5802541c
 8004748:	58025430 	.word	0x58025430
 800474c:	58025444 	.word	0x58025444
 8004750:	58025458 	.word	0x58025458
 8004754:	5802546c 	.word	0x5802546c
 8004758:	58025480 	.word	0x58025480
 800475c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b00      	cmp	r3, #0
 8004768:	d160      	bne.n	800482c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a7f      	ldr	r2, [pc, #508]	; (800496c <HAL_DMA_IRQHandler+0xc74>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d04a      	beq.n	800480a <HAL_DMA_IRQHandler+0xb12>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a7d      	ldr	r2, [pc, #500]	; (8004970 <HAL_DMA_IRQHandler+0xc78>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d045      	beq.n	800480a <HAL_DMA_IRQHandler+0xb12>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a7c      	ldr	r2, [pc, #496]	; (8004974 <HAL_DMA_IRQHandler+0xc7c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d040      	beq.n	800480a <HAL_DMA_IRQHandler+0xb12>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a7a      	ldr	r2, [pc, #488]	; (8004978 <HAL_DMA_IRQHandler+0xc80>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d03b      	beq.n	800480a <HAL_DMA_IRQHandler+0xb12>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a79      	ldr	r2, [pc, #484]	; (800497c <HAL_DMA_IRQHandler+0xc84>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d036      	beq.n	800480a <HAL_DMA_IRQHandler+0xb12>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a77      	ldr	r2, [pc, #476]	; (8004980 <HAL_DMA_IRQHandler+0xc88>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d031      	beq.n	800480a <HAL_DMA_IRQHandler+0xb12>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a76      	ldr	r2, [pc, #472]	; (8004984 <HAL_DMA_IRQHandler+0xc8c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d02c      	beq.n	800480a <HAL_DMA_IRQHandler+0xb12>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a74      	ldr	r2, [pc, #464]	; (8004988 <HAL_DMA_IRQHandler+0xc90>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d027      	beq.n	800480a <HAL_DMA_IRQHandler+0xb12>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a73      	ldr	r2, [pc, #460]	; (800498c <HAL_DMA_IRQHandler+0xc94>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d022      	beq.n	800480a <HAL_DMA_IRQHandler+0xb12>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a71      	ldr	r2, [pc, #452]	; (8004990 <HAL_DMA_IRQHandler+0xc98>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d01d      	beq.n	800480a <HAL_DMA_IRQHandler+0xb12>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a70      	ldr	r2, [pc, #448]	; (8004994 <HAL_DMA_IRQHandler+0xc9c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d018      	beq.n	800480a <HAL_DMA_IRQHandler+0xb12>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a6e      	ldr	r2, [pc, #440]	; (8004998 <HAL_DMA_IRQHandler+0xca0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <HAL_DMA_IRQHandler+0xb12>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a6d      	ldr	r2, [pc, #436]	; (800499c <HAL_DMA_IRQHandler+0xca4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00e      	beq.n	800480a <HAL_DMA_IRQHandler+0xb12>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a6b      	ldr	r2, [pc, #428]	; (80049a0 <HAL_DMA_IRQHandler+0xca8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d009      	beq.n	800480a <HAL_DMA_IRQHandler+0xb12>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a6a      	ldr	r2, [pc, #424]	; (80049a4 <HAL_DMA_IRQHandler+0xcac>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d004      	beq.n	800480a <HAL_DMA_IRQHandler+0xb12>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a68      	ldr	r2, [pc, #416]	; (80049a8 <HAL_DMA_IRQHandler+0xcb0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d108      	bne.n	800481c <HAL_DMA_IRQHandler+0xb24>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0208 	bic.w	r2, r2, #8
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e007      	b.n	800482c <HAL_DMA_IRQHandler+0xb34>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0204 	bic.w	r2, r2, #4
 800482a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8165 	beq.w	8004b00 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800483e:	e15f      	b.n	8004b00 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004844:	f003 031f 	and.w	r3, r3, #31
 8004848:	2202      	movs	r2, #2
 800484a:	409a      	lsls	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	4013      	ands	r3, r2
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80c5 	beq.w	80049e0 <HAL_DMA_IRQHandler+0xce8>
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 80bf 	beq.w	80049e0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	2202      	movs	r2, #2
 800486c:	409a      	lsls	r2, r3
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d018      	beq.n	80048ae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 813a 	beq.w	8004b04 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004898:	e134      	b.n	8004b04 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 8130 	beq.w	8004b04 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ac:	e12a      	b.n	8004b04 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f040 8089 	bne.w	80049cc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a2b      	ldr	r2, [pc, #172]	; (800496c <HAL_DMA_IRQHandler+0xc74>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d04a      	beq.n	800495a <HAL_DMA_IRQHandler+0xc62>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a29      	ldr	r2, [pc, #164]	; (8004970 <HAL_DMA_IRQHandler+0xc78>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d045      	beq.n	800495a <HAL_DMA_IRQHandler+0xc62>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a28      	ldr	r2, [pc, #160]	; (8004974 <HAL_DMA_IRQHandler+0xc7c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d040      	beq.n	800495a <HAL_DMA_IRQHandler+0xc62>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a26      	ldr	r2, [pc, #152]	; (8004978 <HAL_DMA_IRQHandler+0xc80>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d03b      	beq.n	800495a <HAL_DMA_IRQHandler+0xc62>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a25      	ldr	r2, [pc, #148]	; (800497c <HAL_DMA_IRQHandler+0xc84>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d036      	beq.n	800495a <HAL_DMA_IRQHandler+0xc62>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a23      	ldr	r2, [pc, #140]	; (8004980 <HAL_DMA_IRQHandler+0xc88>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d031      	beq.n	800495a <HAL_DMA_IRQHandler+0xc62>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a22      	ldr	r2, [pc, #136]	; (8004984 <HAL_DMA_IRQHandler+0xc8c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d02c      	beq.n	800495a <HAL_DMA_IRQHandler+0xc62>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a20      	ldr	r2, [pc, #128]	; (8004988 <HAL_DMA_IRQHandler+0xc90>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d027      	beq.n	800495a <HAL_DMA_IRQHandler+0xc62>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a1f      	ldr	r2, [pc, #124]	; (800498c <HAL_DMA_IRQHandler+0xc94>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d022      	beq.n	800495a <HAL_DMA_IRQHandler+0xc62>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1d      	ldr	r2, [pc, #116]	; (8004990 <HAL_DMA_IRQHandler+0xc98>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d01d      	beq.n	800495a <HAL_DMA_IRQHandler+0xc62>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1c      	ldr	r2, [pc, #112]	; (8004994 <HAL_DMA_IRQHandler+0xc9c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d018      	beq.n	800495a <HAL_DMA_IRQHandler+0xc62>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1a      	ldr	r2, [pc, #104]	; (8004998 <HAL_DMA_IRQHandler+0xca0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d013      	beq.n	800495a <HAL_DMA_IRQHandler+0xc62>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a19      	ldr	r2, [pc, #100]	; (800499c <HAL_DMA_IRQHandler+0xca4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00e      	beq.n	800495a <HAL_DMA_IRQHandler+0xc62>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <HAL_DMA_IRQHandler+0xca8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d009      	beq.n	800495a <HAL_DMA_IRQHandler+0xc62>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a16      	ldr	r2, [pc, #88]	; (80049a4 <HAL_DMA_IRQHandler+0xcac>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d004      	beq.n	800495a <HAL_DMA_IRQHandler+0xc62>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a14      	ldr	r2, [pc, #80]	; (80049a8 <HAL_DMA_IRQHandler+0xcb0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d128      	bne.n	80049ac <HAL_DMA_IRQHandler+0xcb4>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0214 	bic.w	r2, r2, #20
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e027      	b.n	80049bc <HAL_DMA_IRQHandler+0xcc4>
 800496c:	40020010 	.word	0x40020010
 8004970:	40020028 	.word	0x40020028
 8004974:	40020040 	.word	0x40020040
 8004978:	40020058 	.word	0x40020058
 800497c:	40020070 	.word	0x40020070
 8004980:	40020088 	.word	0x40020088
 8004984:	400200a0 	.word	0x400200a0
 8004988:	400200b8 	.word	0x400200b8
 800498c:	40020410 	.word	0x40020410
 8004990:	40020428 	.word	0x40020428
 8004994:	40020440 	.word	0x40020440
 8004998:	40020458 	.word	0x40020458
 800499c:	40020470 	.word	0x40020470
 80049a0:	40020488 	.word	0x40020488
 80049a4:	400204a0 	.word	0x400204a0
 80049a8:	400204b8 	.word	0x400204b8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 020a 	bic.w	r2, r2, #10
 80049ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8097 	beq.w	8004b04 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049de:	e091      	b.n	8004b04 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e4:	f003 031f 	and.w	r3, r3, #31
 80049e8:	2208      	movs	r2, #8
 80049ea:	409a      	lsls	r2, r3
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8088 	beq.w	8004b06 <HAL_DMA_IRQHandler+0xe0e>
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 8082 	beq.w	8004b06 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a41      	ldr	r2, [pc, #260]	; (8004b0c <HAL_DMA_IRQHandler+0xe14>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d04a      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xdaa>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a3f      	ldr	r2, [pc, #252]	; (8004b10 <HAL_DMA_IRQHandler+0xe18>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d045      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xdaa>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a3e      	ldr	r2, [pc, #248]	; (8004b14 <HAL_DMA_IRQHandler+0xe1c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d040      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xdaa>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a3c      	ldr	r2, [pc, #240]	; (8004b18 <HAL_DMA_IRQHandler+0xe20>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d03b      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xdaa>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a3b      	ldr	r2, [pc, #236]	; (8004b1c <HAL_DMA_IRQHandler+0xe24>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d036      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xdaa>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a39      	ldr	r2, [pc, #228]	; (8004b20 <HAL_DMA_IRQHandler+0xe28>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d031      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xdaa>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a38      	ldr	r2, [pc, #224]	; (8004b24 <HAL_DMA_IRQHandler+0xe2c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d02c      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xdaa>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a36      	ldr	r2, [pc, #216]	; (8004b28 <HAL_DMA_IRQHandler+0xe30>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d027      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xdaa>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a35      	ldr	r2, [pc, #212]	; (8004b2c <HAL_DMA_IRQHandler+0xe34>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d022      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xdaa>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a33      	ldr	r2, [pc, #204]	; (8004b30 <HAL_DMA_IRQHandler+0xe38>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d01d      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xdaa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a32      	ldr	r2, [pc, #200]	; (8004b34 <HAL_DMA_IRQHandler+0xe3c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d018      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xdaa>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a30      	ldr	r2, [pc, #192]	; (8004b38 <HAL_DMA_IRQHandler+0xe40>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d013      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xdaa>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a2f      	ldr	r2, [pc, #188]	; (8004b3c <HAL_DMA_IRQHandler+0xe44>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00e      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xdaa>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a2d      	ldr	r2, [pc, #180]	; (8004b40 <HAL_DMA_IRQHandler+0xe48>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d009      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xdaa>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a2c      	ldr	r2, [pc, #176]	; (8004b44 <HAL_DMA_IRQHandler+0xe4c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d004      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xdaa>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a2a      	ldr	r2, [pc, #168]	; (8004b48 <HAL_DMA_IRQHandler+0xe50>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d108      	bne.n	8004ab4 <HAL_DMA_IRQHandler+0xdbc>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 021c 	bic.w	r2, r2, #28
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	e007      	b.n	8004ac4 <HAL_DMA_IRQHandler+0xdcc>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 020e 	bic.w	r2, r2, #14
 8004ac2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac8:	f003 031f 	and.w	r3, r3, #31
 8004acc:	2201      	movs	r2, #1
 8004ace:	409a      	lsls	r2, r3
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	4798      	blx	r3
 8004afa:	e004      	b.n	8004b06 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004afc:	bf00      	nop
 8004afe:	e002      	b.n	8004b06 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b00:	bf00      	nop
 8004b02:	e000      	b.n	8004b06 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b04:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b06:	3728      	adds	r7, #40	; 0x28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40020010 	.word	0x40020010
 8004b10:	40020028 	.word	0x40020028
 8004b14:	40020040 	.word	0x40020040
 8004b18:	40020058 	.word	0x40020058
 8004b1c:	40020070 	.word	0x40020070
 8004b20:	40020088 	.word	0x40020088
 8004b24:	400200a0 	.word	0x400200a0
 8004b28:	400200b8 	.word	0x400200b8
 8004b2c:	40020410 	.word	0x40020410
 8004b30:	40020428 	.word	0x40020428
 8004b34:	40020440 	.word	0x40020440
 8004b38:	40020458 	.word	0x40020458
 8004b3c:	40020470 	.word	0x40020470
 8004b40:	40020488 	.word	0x40020488
 8004b44:	400204a0 	.word	0x400204a0
 8004b48:	400204b8 	.word	0x400204b8

08004b4c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b64:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a7f      	ldr	r2, [pc, #508]	; (8004d68 <DMA_SetConfig+0x21c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d072      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a7d      	ldr	r2, [pc, #500]	; (8004d6c <DMA_SetConfig+0x220>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d06d      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a7c      	ldr	r2, [pc, #496]	; (8004d70 <DMA_SetConfig+0x224>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d068      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a7a      	ldr	r2, [pc, #488]	; (8004d74 <DMA_SetConfig+0x228>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d063      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a79      	ldr	r2, [pc, #484]	; (8004d78 <DMA_SetConfig+0x22c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d05e      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a77      	ldr	r2, [pc, #476]	; (8004d7c <DMA_SetConfig+0x230>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d059      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a76      	ldr	r2, [pc, #472]	; (8004d80 <DMA_SetConfig+0x234>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d054      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a74      	ldr	r2, [pc, #464]	; (8004d84 <DMA_SetConfig+0x238>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d04f      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a73      	ldr	r2, [pc, #460]	; (8004d88 <DMA_SetConfig+0x23c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d04a      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a71      	ldr	r2, [pc, #452]	; (8004d8c <DMA_SetConfig+0x240>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d045      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a70      	ldr	r2, [pc, #448]	; (8004d90 <DMA_SetConfig+0x244>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d040      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a6e      	ldr	r2, [pc, #440]	; (8004d94 <DMA_SetConfig+0x248>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d03b      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a6d      	ldr	r2, [pc, #436]	; (8004d98 <DMA_SetConfig+0x24c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d036      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a6b      	ldr	r2, [pc, #428]	; (8004d9c <DMA_SetConfig+0x250>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d031      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a6a      	ldr	r2, [pc, #424]	; (8004da0 <DMA_SetConfig+0x254>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d02c      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a68      	ldr	r2, [pc, #416]	; (8004da4 <DMA_SetConfig+0x258>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d027      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a67      	ldr	r2, [pc, #412]	; (8004da8 <DMA_SetConfig+0x25c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d022      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a65      	ldr	r2, [pc, #404]	; (8004dac <DMA_SetConfig+0x260>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d01d      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a64      	ldr	r2, [pc, #400]	; (8004db0 <DMA_SetConfig+0x264>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d018      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a62      	ldr	r2, [pc, #392]	; (8004db4 <DMA_SetConfig+0x268>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a61      	ldr	r2, [pc, #388]	; (8004db8 <DMA_SetConfig+0x26c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00e      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a5f      	ldr	r2, [pc, #380]	; (8004dbc <DMA_SetConfig+0x270>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d009      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a5e      	ldr	r2, [pc, #376]	; (8004dc0 <DMA_SetConfig+0x274>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d004      	beq.n	8004c56 <DMA_SetConfig+0x10a>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a5c      	ldr	r2, [pc, #368]	; (8004dc4 <DMA_SetConfig+0x278>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d101      	bne.n	8004c5a <DMA_SetConfig+0x10e>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <DMA_SetConfig+0x110>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00d      	beq.n	8004c7c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c68:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d004      	beq.n	8004c7c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c7a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a39      	ldr	r2, [pc, #228]	; (8004d68 <DMA_SetConfig+0x21c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d04a      	beq.n	8004d1c <DMA_SetConfig+0x1d0>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a38      	ldr	r2, [pc, #224]	; (8004d6c <DMA_SetConfig+0x220>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d045      	beq.n	8004d1c <DMA_SetConfig+0x1d0>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a36      	ldr	r2, [pc, #216]	; (8004d70 <DMA_SetConfig+0x224>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d040      	beq.n	8004d1c <DMA_SetConfig+0x1d0>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a35      	ldr	r2, [pc, #212]	; (8004d74 <DMA_SetConfig+0x228>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d03b      	beq.n	8004d1c <DMA_SetConfig+0x1d0>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a33      	ldr	r2, [pc, #204]	; (8004d78 <DMA_SetConfig+0x22c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d036      	beq.n	8004d1c <DMA_SetConfig+0x1d0>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a32      	ldr	r2, [pc, #200]	; (8004d7c <DMA_SetConfig+0x230>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d031      	beq.n	8004d1c <DMA_SetConfig+0x1d0>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a30      	ldr	r2, [pc, #192]	; (8004d80 <DMA_SetConfig+0x234>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d02c      	beq.n	8004d1c <DMA_SetConfig+0x1d0>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a2f      	ldr	r2, [pc, #188]	; (8004d84 <DMA_SetConfig+0x238>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d027      	beq.n	8004d1c <DMA_SetConfig+0x1d0>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a2d      	ldr	r2, [pc, #180]	; (8004d88 <DMA_SetConfig+0x23c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d022      	beq.n	8004d1c <DMA_SetConfig+0x1d0>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a2c      	ldr	r2, [pc, #176]	; (8004d8c <DMA_SetConfig+0x240>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d01d      	beq.n	8004d1c <DMA_SetConfig+0x1d0>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a2a      	ldr	r2, [pc, #168]	; (8004d90 <DMA_SetConfig+0x244>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d018      	beq.n	8004d1c <DMA_SetConfig+0x1d0>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a29      	ldr	r2, [pc, #164]	; (8004d94 <DMA_SetConfig+0x248>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d013      	beq.n	8004d1c <DMA_SetConfig+0x1d0>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a27      	ldr	r2, [pc, #156]	; (8004d98 <DMA_SetConfig+0x24c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00e      	beq.n	8004d1c <DMA_SetConfig+0x1d0>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a26      	ldr	r2, [pc, #152]	; (8004d9c <DMA_SetConfig+0x250>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d009      	beq.n	8004d1c <DMA_SetConfig+0x1d0>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a24      	ldr	r2, [pc, #144]	; (8004da0 <DMA_SetConfig+0x254>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d004      	beq.n	8004d1c <DMA_SetConfig+0x1d0>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a23      	ldr	r2, [pc, #140]	; (8004da4 <DMA_SetConfig+0x258>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d101      	bne.n	8004d20 <DMA_SetConfig+0x1d4>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <DMA_SetConfig+0x1d6>
 8004d20:	2300      	movs	r3, #0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d059      	beq.n	8004dda <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	223f      	movs	r2, #63	; 0x3f
 8004d30:	409a      	lsls	r2, r3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d44:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	2b40      	cmp	r3, #64	; 0x40
 8004d54:	d138      	bne.n	8004dc8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d66:	e086      	b.n	8004e76 <DMA_SetConfig+0x32a>
 8004d68:	40020010 	.word	0x40020010
 8004d6c:	40020028 	.word	0x40020028
 8004d70:	40020040 	.word	0x40020040
 8004d74:	40020058 	.word	0x40020058
 8004d78:	40020070 	.word	0x40020070
 8004d7c:	40020088 	.word	0x40020088
 8004d80:	400200a0 	.word	0x400200a0
 8004d84:	400200b8 	.word	0x400200b8
 8004d88:	40020410 	.word	0x40020410
 8004d8c:	40020428 	.word	0x40020428
 8004d90:	40020440 	.word	0x40020440
 8004d94:	40020458 	.word	0x40020458
 8004d98:	40020470 	.word	0x40020470
 8004d9c:	40020488 	.word	0x40020488
 8004da0:	400204a0 	.word	0x400204a0
 8004da4:	400204b8 	.word	0x400204b8
 8004da8:	58025408 	.word	0x58025408
 8004dac:	5802541c 	.word	0x5802541c
 8004db0:	58025430 	.word	0x58025430
 8004db4:	58025444 	.word	0x58025444
 8004db8:	58025458 	.word	0x58025458
 8004dbc:	5802546c 	.word	0x5802546c
 8004dc0:	58025480 	.word	0x58025480
 8004dc4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	60da      	str	r2, [r3, #12]
}
 8004dd8:	e04d      	b.n	8004e76 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a29      	ldr	r2, [pc, #164]	; (8004e84 <DMA_SetConfig+0x338>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d022      	beq.n	8004e2a <DMA_SetConfig+0x2de>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a27      	ldr	r2, [pc, #156]	; (8004e88 <DMA_SetConfig+0x33c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01d      	beq.n	8004e2a <DMA_SetConfig+0x2de>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a26      	ldr	r2, [pc, #152]	; (8004e8c <DMA_SetConfig+0x340>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d018      	beq.n	8004e2a <DMA_SetConfig+0x2de>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a24      	ldr	r2, [pc, #144]	; (8004e90 <DMA_SetConfig+0x344>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <DMA_SetConfig+0x2de>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a23      	ldr	r2, [pc, #140]	; (8004e94 <DMA_SetConfig+0x348>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <DMA_SetConfig+0x2de>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a21      	ldr	r2, [pc, #132]	; (8004e98 <DMA_SetConfig+0x34c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d009      	beq.n	8004e2a <DMA_SetConfig+0x2de>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a20      	ldr	r2, [pc, #128]	; (8004e9c <DMA_SetConfig+0x350>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <DMA_SetConfig+0x2de>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1e      	ldr	r2, [pc, #120]	; (8004ea0 <DMA_SetConfig+0x354>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d101      	bne.n	8004e2e <DMA_SetConfig+0x2e2>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <DMA_SetConfig+0x2e4>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d020      	beq.n	8004e76 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e38:	f003 031f 	and.w	r3, r3, #31
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	409a      	lsls	r2, r3
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b40      	cmp	r3, #64	; 0x40
 8004e52:	d108      	bne.n	8004e66 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	60da      	str	r2, [r3, #12]
}
 8004e64:	e007      	b.n	8004e76 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	60da      	str	r2, [r3, #12]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	58025408 	.word	0x58025408
 8004e88:	5802541c 	.word	0x5802541c
 8004e8c:	58025430 	.word	0x58025430
 8004e90:	58025444 	.word	0x58025444
 8004e94:	58025458 	.word	0x58025458
 8004e98:	5802546c 	.word	0x5802546c
 8004e9c:	58025480 	.word	0x58025480
 8004ea0:	58025494 	.word	0x58025494

08004ea4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a42      	ldr	r2, [pc, #264]	; (8004fbc <DMA_CalcBaseAndBitshift+0x118>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d04a      	beq.n	8004f4c <DMA_CalcBaseAndBitshift+0xa8>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a41      	ldr	r2, [pc, #260]	; (8004fc0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d045      	beq.n	8004f4c <DMA_CalcBaseAndBitshift+0xa8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a3f      	ldr	r2, [pc, #252]	; (8004fc4 <DMA_CalcBaseAndBitshift+0x120>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d040      	beq.n	8004f4c <DMA_CalcBaseAndBitshift+0xa8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a3e      	ldr	r2, [pc, #248]	; (8004fc8 <DMA_CalcBaseAndBitshift+0x124>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d03b      	beq.n	8004f4c <DMA_CalcBaseAndBitshift+0xa8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a3c      	ldr	r2, [pc, #240]	; (8004fcc <DMA_CalcBaseAndBitshift+0x128>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d036      	beq.n	8004f4c <DMA_CalcBaseAndBitshift+0xa8>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a3b      	ldr	r2, [pc, #236]	; (8004fd0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d031      	beq.n	8004f4c <DMA_CalcBaseAndBitshift+0xa8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a39      	ldr	r2, [pc, #228]	; (8004fd4 <DMA_CalcBaseAndBitshift+0x130>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d02c      	beq.n	8004f4c <DMA_CalcBaseAndBitshift+0xa8>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a38      	ldr	r2, [pc, #224]	; (8004fd8 <DMA_CalcBaseAndBitshift+0x134>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d027      	beq.n	8004f4c <DMA_CalcBaseAndBitshift+0xa8>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a36      	ldr	r2, [pc, #216]	; (8004fdc <DMA_CalcBaseAndBitshift+0x138>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d022      	beq.n	8004f4c <DMA_CalcBaseAndBitshift+0xa8>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a35      	ldr	r2, [pc, #212]	; (8004fe0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d01d      	beq.n	8004f4c <DMA_CalcBaseAndBitshift+0xa8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a33      	ldr	r2, [pc, #204]	; (8004fe4 <DMA_CalcBaseAndBitshift+0x140>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d018      	beq.n	8004f4c <DMA_CalcBaseAndBitshift+0xa8>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a32      	ldr	r2, [pc, #200]	; (8004fe8 <DMA_CalcBaseAndBitshift+0x144>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d013      	beq.n	8004f4c <DMA_CalcBaseAndBitshift+0xa8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a30      	ldr	r2, [pc, #192]	; (8004fec <DMA_CalcBaseAndBitshift+0x148>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00e      	beq.n	8004f4c <DMA_CalcBaseAndBitshift+0xa8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a2f      	ldr	r2, [pc, #188]	; (8004ff0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d009      	beq.n	8004f4c <DMA_CalcBaseAndBitshift+0xa8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ff4 <DMA_CalcBaseAndBitshift+0x150>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <DMA_CalcBaseAndBitshift+0xa8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a2c      	ldr	r2, [pc, #176]	; (8004ff8 <DMA_CalcBaseAndBitshift+0x154>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d101      	bne.n	8004f50 <DMA_CalcBaseAndBitshift+0xac>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <DMA_CalcBaseAndBitshift+0xae>
 8004f50:	2300      	movs	r3, #0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d024      	beq.n	8004fa0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	3b10      	subs	r3, #16
 8004f5e:	4a27      	ldr	r2, [pc, #156]	; (8004ffc <DMA_CalcBaseAndBitshift+0x158>)
 8004f60:	fba2 2303 	umull	r2, r3, r2, r3
 8004f64:	091b      	lsrs	r3, r3, #4
 8004f66:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	4a24      	ldr	r2, [pc, #144]	; (8005000 <DMA_CalcBaseAndBitshift+0x15c>)
 8004f70:	5cd3      	ldrb	r3, [r2, r3]
 8004f72:	461a      	mov	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d908      	bls.n	8004f90 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	4b1f      	ldr	r3, [pc, #124]	; (8005004 <DMA_CalcBaseAndBitshift+0x160>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	1d1a      	adds	r2, r3, #4
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	659a      	str	r2, [r3, #88]	; 0x58
 8004f8e:	e00d      	b.n	8004fac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	4b1b      	ldr	r3, [pc, #108]	; (8005004 <DMA_CalcBaseAndBitshift+0x160>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f9e:	e005      	b.n	8004fac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	40020010 	.word	0x40020010
 8004fc0:	40020028 	.word	0x40020028
 8004fc4:	40020040 	.word	0x40020040
 8004fc8:	40020058 	.word	0x40020058
 8004fcc:	40020070 	.word	0x40020070
 8004fd0:	40020088 	.word	0x40020088
 8004fd4:	400200a0 	.word	0x400200a0
 8004fd8:	400200b8 	.word	0x400200b8
 8004fdc:	40020410 	.word	0x40020410
 8004fe0:	40020428 	.word	0x40020428
 8004fe4:	40020440 	.word	0x40020440
 8004fe8:	40020458 	.word	0x40020458
 8004fec:	40020470 	.word	0x40020470
 8004ff0:	40020488 	.word	0x40020488
 8004ff4:	400204a0 	.word	0x400204a0
 8004ff8:	400204b8 	.word	0x400204b8
 8004ffc:	aaaaaaab 	.word	0xaaaaaaab
 8005000:	0800d878 	.word	0x0800d878
 8005004:	fffffc00 	.word	0xfffffc00

08005008 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d120      	bne.n	800505e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	2b03      	cmp	r3, #3
 8005022:	d858      	bhi.n	80050d6 <DMA_CheckFifoParam+0xce>
 8005024:	a201      	add	r2, pc, #4	; (adr r2, 800502c <DMA_CheckFifoParam+0x24>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	0800503d 	.word	0x0800503d
 8005030:	0800504f 	.word	0x0800504f
 8005034:	0800503d 	.word	0x0800503d
 8005038:	080050d7 	.word	0x080050d7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d048      	beq.n	80050da <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800504c:	e045      	b.n	80050da <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005056:	d142      	bne.n	80050de <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800505c:	e03f      	b.n	80050de <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005066:	d123      	bne.n	80050b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	2b03      	cmp	r3, #3
 800506e:	d838      	bhi.n	80050e2 <DMA_CheckFifoParam+0xda>
 8005070:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <DMA_CheckFifoParam+0x70>)
 8005072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005076:	bf00      	nop
 8005078:	08005089 	.word	0x08005089
 800507c:	0800508f 	.word	0x0800508f
 8005080:	08005089 	.word	0x08005089
 8005084:	080050a1 	.word	0x080050a1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
        break;
 800508c:	e030      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d025      	beq.n	80050e6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800509e:	e022      	b.n	80050e6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050a8:	d11f      	bne.n	80050ea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050ae:	e01c      	b.n	80050ea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d902      	bls.n	80050be <DMA_CheckFifoParam+0xb6>
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d003      	beq.n	80050c4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80050bc:	e018      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	73fb      	strb	r3, [r7, #15]
        break;
 80050c2:	e015      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00e      	beq.n	80050ee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
    break;
 80050d4:	e00b      	b.n	80050ee <DMA_CheckFifoParam+0xe6>
        break;
 80050d6:	bf00      	nop
 80050d8:	e00a      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
        break;
 80050da:	bf00      	nop
 80050dc:	e008      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
        break;
 80050de:	bf00      	nop
 80050e0:	e006      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
        break;
 80050e2:	bf00      	nop
 80050e4:	e004      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
        break;
 80050e6:	bf00      	nop
 80050e8:	e002      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
        break;
 80050ea:	bf00      	nop
 80050ec:	e000      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
    break;
 80050ee:	bf00      	nop
    }
  }

  return status;
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop

08005100 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a38      	ldr	r2, [pc, #224]	; (80051f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d022      	beq.n	800515e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a36      	ldr	r2, [pc, #216]	; (80051f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01d      	beq.n	800515e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a35      	ldr	r2, [pc, #212]	; (80051fc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d018      	beq.n	800515e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a33      	ldr	r2, [pc, #204]	; (8005200 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a32      	ldr	r2, [pc, #200]	; (8005204 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00e      	beq.n	800515e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a30      	ldr	r2, [pc, #192]	; (8005208 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d009      	beq.n	800515e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2f      	ldr	r2, [pc, #188]	; (800520c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a2d      	ldr	r2, [pc, #180]	; (8005210 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d101      	bne.n	8005162 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005162:	2300      	movs	r3, #0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01a      	beq.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	3b08      	subs	r3, #8
 8005170:	4a28      	ldr	r2, [pc, #160]	; (8005214 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	091b      	lsrs	r3, r3, #4
 8005178:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	4b26      	ldr	r3, [pc, #152]	; (8005218 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800517e:	4413      	add	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	461a      	mov	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a24      	ldr	r2, [pc, #144]	; (800521c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800518c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f003 031f 	and.w	r3, r3, #31
 8005194:	2201      	movs	r2, #1
 8005196:	409a      	lsls	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800519c:	e024      	b.n	80051e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	3b10      	subs	r3, #16
 80051a6:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80051a8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4a1c      	ldr	r2, [pc, #112]	; (8005224 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d806      	bhi.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4a1b      	ldr	r2, [pc, #108]	; (8005228 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d902      	bls.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3308      	adds	r3, #8
 80051c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4b18      	ldr	r3, [pc, #96]	; (800522c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	461a      	mov	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a16      	ldr	r2, [pc, #88]	; (8005230 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80051d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f003 031f 	and.w	r3, r3, #31
 80051e0:	2201      	movs	r2, #1
 80051e2:	409a      	lsls	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80051e8:	bf00      	nop
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	58025408 	.word	0x58025408
 80051f8:	5802541c 	.word	0x5802541c
 80051fc:	58025430 	.word	0x58025430
 8005200:	58025444 	.word	0x58025444
 8005204:	58025458 	.word	0x58025458
 8005208:	5802546c 	.word	0x5802546c
 800520c:	58025480 	.word	0x58025480
 8005210:	58025494 	.word	0x58025494
 8005214:	cccccccd 	.word	0xcccccccd
 8005218:	16009600 	.word	0x16009600
 800521c:	58025880 	.word	0x58025880
 8005220:	aaaaaaab 	.word	0xaaaaaaab
 8005224:	400204b8 	.word	0x400204b8
 8005228:	4002040f 	.word	0x4002040f
 800522c:	10008200 	.word	0x10008200
 8005230:	40020880 	.word	0x40020880

08005234 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	b2db      	uxtb	r3, r3
 8005242:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d04a      	beq.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b08      	cmp	r3, #8
 800524e:	d847      	bhi.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a25      	ldr	r2, [pc, #148]	; (80052ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d022      	beq.n	80052a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a24      	ldr	r2, [pc, #144]	; (80052f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d01d      	beq.n	80052a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a22      	ldr	r2, [pc, #136]	; (80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d018      	beq.n	80052a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a21      	ldr	r2, [pc, #132]	; (80052f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d013      	beq.n	80052a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1f      	ldr	r2, [pc, #124]	; (80052fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00e      	beq.n	80052a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d009      	beq.n	80052a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1c      	ldr	r2, [pc, #112]	; (8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d004      	beq.n	80052a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1b      	ldr	r2, [pc, #108]	; (8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d101      	bne.n	80052a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80052a0:	2301      	movs	r3, #1
 80052a2:	e000      	b.n	80052a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80052a4:	2300      	movs	r3, #0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4b17      	ldr	r3, [pc, #92]	; (800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	461a      	mov	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a15      	ldr	r2, [pc, #84]	; (8005310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80052bc:	671a      	str	r2, [r3, #112]	; 0x70
 80052be:	e009      	b.n	80052d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4b14      	ldr	r3, [pc, #80]	; (8005314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	461a      	mov	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a11      	ldr	r2, [pc, #68]	; (8005318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80052d2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	2201      	movs	r2, #1
 80052da:	409a      	lsls	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80052e0:	bf00      	nop
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	58025408 	.word	0x58025408
 80052f0:	5802541c 	.word	0x5802541c
 80052f4:	58025430 	.word	0x58025430
 80052f8:	58025444 	.word	0x58025444
 80052fc:	58025458 	.word	0x58025458
 8005300:	5802546c 	.word	0x5802546c
 8005304:	58025480 	.word	0x58025480
 8005308:	58025494 	.word	0x58025494
 800530c:	1600963f 	.word	0x1600963f
 8005310:	58025940 	.word	0x58025940
 8005314:	1000823f 	.word	0x1000823f
 8005318:	40020940 	.word	0x40020940

0800531c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800531c:	b480      	push	{r7}
 800531e:	b089      	sub	sp, #36	; 0x24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005326:	2300      	movs	r3, #0
 8005328:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800532a:	4b89      	ldr	r3, [pc, #548]	; (8005550 <HAL_GPIO_Init+0x234>)
 800532c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800532e:	e194      	b.n	800565a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	2101      	movs	r1, #1
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	fa01 f303 	lsl.w	r3, r1, r3
 800533c:	4013      	ands	r3, r2
 800533e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8186 	beq.w	8005654 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	2b01      	cmp	r3, #1
 8005352:	d005      	beq.n	8005360 <HAL_GPIO_Init+0x44>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d130      	bne.n	80053c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	2203      	movs	r2, #3
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	43db      	mvns	r3, r3
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	4013      	ands	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005396:	2201      	movs	r2, #1
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	43db      	mvns	r3, r3
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	4013      	ands	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	091b      	lsrs	r3, r3, #4
 80053ac:	f003 0201 	and.w	r2, r3, #1
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	d017      	beq.n	80053fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	2203      	movs	r2, #3
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	43db      	mvns	r3, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4013      	ands	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d123      	bne.n	8005452 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	08da      	lsrs	r2, r3, #3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3208      	adds	r2, #8
 8005412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	220f      	movs	r2, #15
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43db      	mvns	r3, r3
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	4013      	ands	r3, r2
 800542c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	4313      	orrs	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	08da      	lsrs	r2, r3, #3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3208      	adds	r2, #8
 800544c:	69b9      	ldr	r1, [r7, #24]
 800544e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	2203      	movs	r2, #3
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	43db      	mvns	r3, r3
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	4013      	ands	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f003 0203 	and.w	r2, r3, #3
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	4313      	orrs	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 80e0 	beq.w	8005654 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005494:	4b2f      	ldr	r3, [pc, #188]	; (8005554 <HAL_GPIO_Init+0x238>)
 8005496:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800549a:	4a2e      	ldr	r2, [pc, #184]	; (8005554 <HAL_GPIO_Init+0x238>)
 800549c:	f043 0302 	orr.w	r3, r3, #2
 80054a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80054a4:	4b2b      	ldr	r3, [pc, #172]	; (8005554 <HAL_GPIO_Init+0x238>)
 80054a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054b2:	4a29      	ldr	r2, [pc, #164]	; (8005558 <HAL_GPIO_Init+0x23c>)
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	089b      	lsrs	r3, r3, #2
 80054b8:	3302      	adds	r3, #2
 80054ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	220f      	movs	r2, #15
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	43db      	mvns	r3, r3
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	4013      	ands	r3, r2
 80054d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a20      	ldr	r2, [pc, #128]	; (800555c <HAL_GPIO_Init+0x240>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d052      	beq.n	8005584 <HAL_GPIO_Init+0x268>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a1f      	ldr	r2, [pc, #124]	; (8005560 <HAL_GPIO_Init+0x244>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d031      	beq.n	800554a <HAL_GPIO_Init+0x22e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a1e      	ldr	r2, [pc, #120]	; (8005564 <HAL_GPIO_Init+0x248>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d02b      	beq.n	8005546 <HAL_GPIO_Init+0x22a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a1d      	ldr	r2, [pc, #116]	; (8005568 <HAL_GPIO_Init+0x24c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d025      	beq.n	8005542 <HAL_GPIO_Init+0x226>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a1c      	ldr	r2, [pc, #112]	; (800556c <HAL_GPIO_Init+0x250>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d01f      	beq.n	800553e <HAL_GPIO_Init+0x222>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a1b      	ldr	r2, [pc, #108]	; (8005570 <HAL_GPIO_Init+0x254>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d019      	beq.n	800553a <HAL_GPIO_Init+0x21e>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a1a      	ldr	r2, [pc, #104]	; (8005574 <HAL_GPIO_Init+0x258>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <HAL_GPIO_Init+0x21a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a19      	ldr	r2, [pc, #100]	; (8005578 <HAL_GPIO_Init+0x25c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00d      	beq.n	8005532 <HAL_GPIO_Init+0x216>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a18      	ldr	r2, [pc, #96]	; (800557c <HAL_GPIO_Init+0x260>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d007      	beq.n	800552e <HAL_GPIO_Init+0x212>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a17      	ldr	r2, [pc, #92]	; (8005580 <HAL_GPIO_Init+0x264>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d101      	bne.n	800552a <HAL_GPIO_Init+0x20e>
 8005526:	2309      	movs	r3, #9
 8005528:	e02d      	b.n	8005586 <HAL_GPIO_Init+0x26a>
 800552a:	230a      	movs	r3, #10
 800552c:	e02b      	b.n	8005586 <HAL_GPIO_Init+0x26a>
 800552e:	2308      	movs	r3, #8
 8005530:	e029      	b.n	8005586 <HAL_GPIO_Init+0x26a>
 8005532:	2307      	movs	r3, #7
 8005534:	e027      	b.n	8005586 <HAL_GPIO_Init+0x26a>
 8005536:	2306      	movs	r3, #6
 8005538:	e025      	b.n	8005586 <HAL_GPIO_Init+0x26a>
 800553a:	2305      	movs	r3, #5
 800553c:	e023      	b.n	8005586 <HAL_GPIO_Init+0x26a>
 800553e:	2304      	movs	r3, #4
 8005540:	e021      	b.n	8005586 <HAL_GPIO_Init+0x26a>
 8005542:	2303      	movs	r3, #3
 8005544:	e01f      	b.n	8005586 <HAL_GPIO_Init+0x26a>
 8005546:	2302      	movs	r3, #2
 8005548:	e01d      	b.n	8005586 <HAL_GPIO_Init+0x26a>
 800554a:	2301      	movs	r3, #1
 800554c:	e01b      	b.n	8005586 <HAL_GPIO_Init+0x26a>
 800554e:	bf00      	nop
 8005550:	58000080 	.word	0x58000080
 8005554:	58024400 	.word	0x58024400
 8005558:	58000400 	.word	0x58000400
 800555c:	58020000 	.word	0x58020000
 8005560:	58020400 	.word	0x58020400
 8005564:	58020800 	.word	0x58020800
 8005568:	58020c00 	.word	0x58020c00
 800556c:	58021000 	.word	0x58021000
 8005570:	58021400 	.word	0x58021400
 8005574:	58021800 	.word	0x58021800
 8005578:	58021c00 	.word	0x58021c00
 800557c:	58022000 	.word	0x58022000
 8005580:	58022400 	.word	0x58022400
 8005584:	2300      	movs	r3, #0
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	f002 0203 	and.w	r2, r2, #3
 800558c:	0092      	lsls	r2, r2, #2
 800558e:	4093      	lsls	r3, r2
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4313      	orrs	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005596:	4938      	ldr	r1, [pc, #224]	; (8005678 <HAL_GPIO_Init+0x35c>)
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	089b      	lsrs	r3, r3, #2
 800559c:	3302      	adds	r3, #2
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	43db      	mvns	r3, r3
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	4013      	ands	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80055ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80055d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	43db      	mvns	r3, r3
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	4013      	ands	r3, r2
 80055e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80055f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	43db      	mvns	r3, r3
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4013      	ands	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	43db      	mvns	r3, r3
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	4013      	ands	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	3301      	adds	r3, #1
 8005658:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	fa22 f303 	lsr.w	r3, r2, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	f47f ae63 	bne.w	8005330 <HAL_GPIO_Init+0x14>
  }
}
 800566a:	bf00      	nop
 800566c:	bf00      	nop
 800566e:	3724      	adds	r7, #36	; 0x24
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	58000400 	.word	0x58000400

0800567c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	887b      	ldrh	r3, [r7, #2]
 800568e:	4013      	ands	r3, r2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005694:	2301      	movs	r3, #1
 8005696:	73fb      	strb	r3, [r7, #15]
 8005698:	e001      	b.n	800569e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800569a:	2300      	movs	r3, #0
 800569c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800569e:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	807b      	strh	r3, [r7, #2]
 80056b8:	4613      	mov	r3, r2
 80056ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056bc:	787b      	ldrb	r3, [r7, #1]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056c2:	887a      	ldrh	r2, [r7, #2]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80056c8:	e003      	b.n	80056d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80056ca:	887b      	ldrh	r3, [r7, #2]
 80056cc:	041a      	lsls	r2, r3, #16
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	619a      	str	r2, [r3, #24]
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80056e8:	4b19      	ldr	r3, [pc, #100]	; (8005750 <HAL_PWREx_ConfigSupply+0x70>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d00a      	beq.n	800570a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80056f4:	4b16      	ldr	r3, [pc, #88]	; (8005750 <HAL_PWREx_ConfigSupply+0x70>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d001      	beq.n	8005706 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e01f      	b.n	8005746 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	e01d      	b.n	8005746 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800570a:	4b11      	ldr	r3, [pc, #68]	; (8005750 <HAL_PWREx_ConfigSupply+0x70>)
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f023 0207 	bic.w	r2, r3, #7
 8005712:	490f      	ldr	r1, [pc, #60]	; (8005750 <HAL_PWREx_ConfigSupply+0x70>)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4313      	orrs	r3, r2
 8005718:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800571a:	f7fb fe81 	bl	8001420 <HAL_GetTick>
 800571e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005720:	e009      	b.n	8005736 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005722:	f7fb fe7d 	bl	8001420 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005730:	d901      	bls.n	8005736 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e007      	b.n	8005746 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005736:	4b06      	ldr	r3, [pc, #24]	; (8005750 <HAL_PWREx_ConfigSupply+0x70>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800573e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005742:	d1ee      	bne.n	8005722 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	58024800 	.word	0x58024800

08005754 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08c      	sub	sp, #48	; 0x30
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	f000 bc48 	b.w	8005ff8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8088 	beq.w	8005886 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005776:	4b99      	ldr	r3, [pc, #612]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800577e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005780:	4b96      	ldr	r3, [pc, #600]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005784:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005788:	2b10      	cmp	r3, #16
 800578a:	d007      	beq.n	800579c <HAL_RCC_OscConfig+0x48>
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	2b18      	cmp	r3, #24
 8005790:	d111      	bne.n	80057b6 <HAL_RCC_OscConfig+0x62>
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d10c      	bne.n	80057b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800579c:	4b8f      	ldr	r3, [pc, #572]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d06d      	beq.n	8005884 <HAL_RCC_OscConfig+0x130>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d169      	bne.n	8005884 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f000 bc21 	b.w	8005ff8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057be:	d106      	bne.n	80057ce <HAL_RCC_OscConfig+0x7a>
 80057c0:	4b86      	ldr	r3, [pc, #536]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a85      	ldr	r2, [pc, #532]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 80057c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	e02e      	b.n	800582c <HAL_RCC_OscConfig+0xd8>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10c      	bne.n	80057f0 <HAL_RCC_OscConfig+0x9c>
 80057d6:	4b81      	ldr	r3, [pc, #516]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a80      	ldr	r2, [pc, #512]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 80057dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	4b7e      	ldr	r3, [pc, #504]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a7d      	ldr	r2, [pc, #500]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 80057e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	e01d      	b.n	800582c <HAL_RCC_OscConfig+0xd8>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057f8:	d10c      	bne.n	8005814 <HAL_RCC_OscConfig+0xc0>
 80057fa:	4b78      	ldr	r3, [pc, #480]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a77      	ldr	r2, [pc, #476]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	4b75      	ldr	r3, [pc, #468]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a74      	ldr	r2, [pc, #464]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 800580c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	e00b      	b.n	800582c <HAL_RCC_OscConfig+0xd8>
 8005814:	4b71      	ldr	r3, [pc, #452]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a70      	ldr	r2, [pc, #448]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 800581a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	4b6e      	ldr	r3, [pc, #440]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a6d      	ldr	r2, [pc, #436]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800582a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d013      	beq.n	800585c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7fb fdf4 	bl	8001420 <HAL_GetTick>
 8005838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800583c:	f7fb fdf0 	bl	8001420 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b64      	cmp	r3, #100	; 0x64
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e3d4      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800584e:	4b63      	ldr	r3, [pc, #396]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0xe8>
 800585a:	e014      	b.n	8005886 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585c:	f7fb fde0 	bl	8001420 <HAL_GetTick>
 8005860:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005864:	f7fb fddc 	bl	8001420 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b64      	cmp	r3, #100	; 0x64
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e3c0      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005876:	4b59      	ldr	r3, [pc, #356]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f0      	bne.n	8005864 <HAL_RCC_OscConfig+0x110>
 8005882:	e000      	b.n	8005886 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80ca 	beq.w	8005a28 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005894:	4b51      	ldr	r3, [pc, #324]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800589c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800589e:	4b4f      	ldr	r3, [pc, #316]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 80058a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d007      	beq.n	80058ba <HAL_RCC_OscConfig+0x166>
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	2b18      	cmp	r3, #24
 80058ae:	d156      	bne.n	800595e <HAL_RCC_OscConfig+0x20a>
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d151      	bne.n	800595e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058ba:	4b48      	ldr	r3, [pc, #288]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_RCC_OscConfig+0x17e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e392      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058d2:	4b42      	ldr	r3, [pc, #264]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f023 0219 	bic.w	r2, r3, #25
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	493f      	ldr	r1, [pc, #252]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e4:	f7fb fd9c 	bl	8001420 <HAL_GetTick>
 80058e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ec:	f7fb fd98 	bl	8001420 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e37c      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058fe:	4b37      	ldr	r3, [pc, #220]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590a:	f7fb fd95 	bl	8001438 <HAL_GetREVID>
 800590e:	4603      	mov	r3, r0
 8005910:	f241 0203 	movw	r2, #4099	; 0x1003
 8005914:	4293      	cmp	r3, r2
 8005916:	d817      	bhi.n	8005948 <HAL_RCC_OscConfig+0x1f4>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b40      	cmp	r3, #64	; 0x40
 800591e:	d108      	bne.n	8005932 <HAL_RCC_OscConfig+0x1de>
 8005920:	4b2e      	ldr	r3, [pc, #184]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005928:	4a2c      	ldr	r2, [pc, #176]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 800592a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800592e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005930:	e07a      	b.n	8005a28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005932:	4b2a      	ldr	r3, [pc, #168]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	031b      	lsls	r3, r3, #12
 8005940:	4926      	ldr	r1, [pc, #152]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005942:	4313      	orrs	r3, r2
 8005944:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005946:	e06f      	b.n	8005a28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005948:	4b24      	ldr	r3, [pc, #144]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	061b      	lsls	r3, r3, #24
 8005956:	4921      	ldr	r1, [pc, #132]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005958:	4313      	orrs	r3, r2
 800595a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800595c:	e064      	b.n	8005a28 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d047      	beq.n	80059f6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005966:	4b1d      	ldr	r3, [pc, #116]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f023 0219 	bic.w	r2, r3, #25
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	491a      	ldr	r1, [pc, #104]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005974:	4313      	orrs	r3, r2
 8005976:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005978:	f7fb fd52 	bl	8001420 <HAL_GetTick>
 800597c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005980:	f7fb fd4e 	bl	8001420 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e332      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005992:	4b12      	ldr	r3, [pc, #72]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599e:	f7fb fd4b 	bl	8001438 <HAL_GetREVID>
 80059a2:	4603      	mov	r3, r0
 80059a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d819      	bhi.n	80059e0 <HAL_RCC_OscConfig+0x28c>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	2b40      	cmp	r3, #64	; 0x40
 80059b2:	d108      	bne.n	80059c6 <HAL_RCC_OscConfig+0x272>
 80059b4:	4b09      	ldr	r3, [pc, #36]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80059bc:	4a07      	ldr	r2, [pc, #28]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 80059be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059c2:	6053      	str	r3, [r2, #4]
 80059c4:	e030      	b.n	8005a28 <HAL_RCC_OscConfig+0x2d4>
 80059c6:	4b05      	ldr	r3, [pc, #20]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	031b      	lsls	r3, r3, #12
 80059d4:	4901      	ldr	r1, [pc, #4]	; (80059dc <HAL_RCC_OscConfig+0x288>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	604b      	str	r3, [r1, #4]
 80059da:	e025      	b.n	8005a28 <HAL_RCC_OscConfig+0x2d4>
 80059dc:	58024400 	.word	0x58024400
 80059e0:	4b9a      	ldr	r3, [pc, #616]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	061b      	lsls	r3, r3, #24
 80059ee:	4997      	ldr	r1, [pc, #604]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	604b      	str	r3, [r1, #4]
 80059f4:	e018      	b.n	8005a28 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059f6:	4b95      	ldr	r3, [pc, #596]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a94      	ldr	r2, [pc, #592]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 80059fc:	f023 0301 	bic.w	r3, r3, #1
 8005a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a02:	f7fb fd0d 	bl	8001420 <HAL_GetTick>
 8005a06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a0a:	f7fb fd09 	bl	8001420 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e2ed      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a1c:	4b8b      	ldr	r3, [pc, #556]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f0      	bne.n	8005a0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80a9 	beq.w	8005b88 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a36:	4b85      	ldr	r3, [pc, #532]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a3e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a40:	4b82      	ldr	r3, [pc, #520]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d007      	beq.n	8005a5c <HAL_RCC_OscConfig+0x308>
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	2b18      	cmp	r3, #24
 8005a50:	d13a      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x374>
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d135      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a5c:	4b7b      	ldr	r3, [pc, #492]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <HAL_RCC_OscConfig+0x320>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	2b80      	cmp	r3, #128	; 0x80
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e2c1      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a74:	f7fb fce0 	bl	8001438 <HAL_GetREVID>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d817      	bhi.n	8005ab2 <HAL_RCC_OscConfig+0x35e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	2b20      	cmp	r3, #32
 8005a88:	d108      	bne.n	8005a9c <HAL_RCC_OscConfig+0x348>
 8005a8a:	4b70      	ldr	r3, [pc, #448]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005a92:	4a6e      	ldr	r2, [pc, #440]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005a94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a98:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a9a:	e075      	b.n	8005b88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a9c:	4b6b      	ldr	r3, [pc, #428]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	069b      	lsls	r3, r3, #26
 8005aaa:	4968      	ldr	r1, [pc, #416]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ab0:	e06a      	b.n	8005b88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ab2:	4b66      	ldr	r3, [pc, #408]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	061b      	lsls	r3, r3, #24
 8005ac0:	4962      	ldr	r1, [pc, #392]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ac6:	e05f      	b.n	8005b88 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d042      	beq.n	8005b56 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ad0:	4b5e      	ldr	r3, [pc, #376]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a5d      	ldr	r2, [pc, #372]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005adc:	f7fb fca0 	bl	8001420 <HAL_GetTick>
 8005ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ae4:	f7fb fc9c 	bl	8001420 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e280      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005af6:	4b55      	ldr	r3, [pc, #340]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0f0      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b02:	f7fb fc99 	bl	8001438 <HAL_GetREVID>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d817      	bhi.n	8005b40 <HAL_RCC_OscConfig+0x3ec>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	d108      	bne.n	8005b2a <HAL_RCC_OscConfig+0x3d6>
 8005b18:	4b4c      	ldr	r3, [pc, #304]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005b20:	4a4a      	ldr	r2, [pc, #296]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005b22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b26:	6053      	str	r3, [r2, #4]
 8005b28:	e02e      	b.n	8005b88 <HAL_RCC_OscConfig+0x434>
 8005b2a:	4b48      	ldr	r3, [pc, #288]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	069b      	lsls	r3, r3, #26
 8005b38:	4944      	ldr	r1, [pc, #272]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	604b      	str	r3, [r1, #4]
 8005b3e:	e023      	b.n	8005b88 <HAL_RCC_OscConfig+0x434>
 8005b40:	4b42      	ldr	r3, [pc, #264]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	061b      	lsls	r3, r3, #24
 8005b4e:	493f      	ldr	r1, [pc, #252]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60cb      	str	r3, [r1, #12]
 8005b54:	e018      	b.n	8005b88 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b56:	4b3d      	ldr	r3, [pc, #244]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a3c      	ldr	r2, [pc, #240]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b62:	f7fb fc5d 	bl	8001420 <HAL_GetTick>
 8005b66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b6a:	f7fb fc59 	bl	8001420 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e23d      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b7c:	4b33      	ldr	r3, [pc, #204]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1f0      	bne.n	8005b6a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0308 	and.w	r3, r3, #8
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d036      	beq.n	8005c02 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d019      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b9c:	4b2b      	ldr	r3, [pc, #172]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba0:	4a2a      	ldr	r2, [pc, #168]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005ba2:	f043 0301 	orr.w	r3, r3, #1
 8005ba6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba8:	f7fb fc3a 	bl	8001420 <HAL_GetTick>
 8005bac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bb0:	f7fb fc36 	bl	8001420 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e21a      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bc2:	4b22      	ldr	r3, [pc, #136]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0f0      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x45c>
 8005bce:	e018      	b.n	8005c02 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bd0:	4b1e      	ldr	r3, [pc, #120]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd4:	4a1d      	ldr	r2, [pc, #116]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005bd6:	f023 0301 	bic.w	r3, r3, #1
 8005bda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bdc:	f7fb fc20 	bl	8001420 <HAL_GetTick>
 8005be0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005be4:	f7fb fc1c 	bl	8001420 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e200      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bf6:	4b15      	ldr	r3, [pc, #84]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f0      	bne.n	8005be4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d039      	beq.n	8005c82 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d01c      	beq.n	8005c50 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c16:	4b0d      	ldr	r3, [pc, #52]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a0c      	ldr	r2, [pc, #48]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c22:	f7fb fbfd 	bl	8001420 <HAL_GetTick>
 8005c26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c2a:	f7fb fbf9 	bl	8001420 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e1dd      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c3c:	4b03      	ldr	r3, [pc, #12]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0f0      	beq.n	8005c2a <HAL_RCC_OscConfig+0x4d6>
 8005c48:	e01b      	b.n	8005c82 <HAL_RCC_OscConfig+0x52e>
 8005c4a:	bf00      	nop
 8005c4c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c50:	4b9b      	ldr	r3, [pc, #620]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a9a      	ldr	r2, [pc, #616]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005c56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c5c:	f7fb fbe0 	bl	8001420 <HAL_GetTick>
 8005c60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c64:	f7fb fbdc 	bl	8001420 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e1c0      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c76:	4b92      	ldr	r3, [pc, #584]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1f0      	bne.n	8005c64 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 8081 	beq.w	8005d92 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c90:	4b8c      	ldr	r3, [pc, #560]	; (8005ec4 <HAL_RCC_OscConfig+0x770>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a8b      	ldr	r2, [pc, #556]	; (8005ec4 <HAL_RCC_OscConfig+0x770>)
 8005c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c9c:	f7fb fbc0 	bl	8001420 <HAL_GetTick>
 8005ca0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ca4:	f7fb fbbc 	bl	8001420 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b64      	cmp	r3, #100	; 0x64
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e1a0      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cb6:	4b83      	ldr	r3, [pc, #524]	; (8005ec4 <HAL_RCC_OscConfig+0x770>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d106      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x584>
 8005cca:	4b7d      	ldr	r3, [pc, #500]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cce:	4a7c      	ldr	r2, [pc, #496]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8005cd6:	e02d      	b.n	8005d34 <HAL_RCC_OscConfig+0x5e0>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10c      	bne.n	8005cfa <HAL_RCC_OscConfig+0x5a6>
 8005ce0:	4b77      	ldr	r3, [pc, #476]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce4:	4a76      	ldr	r2, [pc, #472]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	6713      	str	r3, [r2, #112]	; 0x70
 8005cec:	4b74      	ldr	r3, [pc, #464]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf0:	4a73      	ldr	r2, [pc, #460]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005cf2:	f023 0304 	bic.w	r3, r3, #4
 8005cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf8:	e01c      	b.n	8005d34 <HAL_RCC_OscConfig+0x5e0>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2b05      	cmp	r3, #5
 8005d00:	d10c      	bne.n	8005d1c <HAL_RCC_OscConfig+0x5c8>
 8005d02:	4b6f      	ldr	r3, [pc, #444]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d06:	4a6e      	ldr	r2, [pc, #440]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005d08:	f043 0304 	orr.w	r3, r3, #4
 8005d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d0e:	4b6c      	ldr	r3, [pc, #432]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d12:	4a6b      	ldr	r2, [pc, #428]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005d14:	f043 0301 	orr.w	r3, r3, #1
 8005d18:	6713      	str	r3, [r2, #112]	; 0x70
 8005d1a:	e00b      	b.n	8005d34 <HAL_RCC_OscConfig+0x5e0>
 8005d1c:	4b68      	ldr	r3, [pc, #416]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d20:	4a67      	ldr	r2, [pc, #412]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005d22:	f023 0301 	bic.w	r3, r3, #1
 8005d26:	6713      	str	r3, [r2, #112]	; 0x70
 8005d28:	4b65      	ldr	r3, [pc, #404]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2c:	4a64      	ldr	r2, [pc, #400]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005d2e:	f023 0304 	bic.w	r3, r3, #4
 8005d32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d015      	beq.n	8005d68 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d3c:	f7fb fb70 	bl	8001420 <HAL_GetTick>
 8005d40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d42:	e00a      	b.n	8005d5a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d44:	f7fb fb6c 	bl	8001420 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e14e      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d5a:	4b59      	ldr	r3, [pc, #356]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0ee      	beq.n	8005d44 <HAL_RCC_OscConfig+0x5f0>
 8005d66:	e014      	b.n	8005d92 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d68:	f7fb fb5a 	bl	8001420 <HAL_GetTick>
 8005d6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d6e:	e00a      	b.n	8005d86 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d70:	f7fb fb56 	bl	8001420 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e138      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d86:	4b4e      	ldr	r3, [pc, #312]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1ee      	bne.n	8005d70 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 812d 	beq.w	8005ff6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005d9c:	4b48      	ldr	r3, [pc, #288]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005da4:	2b18      	cmp	r3, #24
 8005da6:	f000 80bd 	beq.w	8005f24 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	f040 809e 	bne.w	8005ef0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db4:	4b42      	ldr	r3, [pc, #264]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a41      	ldr	r2, [pc, #260]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc0:	f7fb fb2e 	bl	8001420 <HAL_GetTick>
 8005dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc8:	f7fb fb2a 	bl	8001420 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e10e      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dda:	4b39      	ldr	r3, [pc, #228]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f0      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005de6:	4b36      	ldr	r3, [pc, #216]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dea:	4b37      	ldr	r3, [pc, #220]	; (8005ec8 <HAL_RCC_OscConfig+0x774>)
 8005dec:	4013      	ands	r3, r2
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005df6:	0112      	lsls	r2, r2, #4
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	4931      	ldr	r1, [pc, #196]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	628b      	str	r3, [r1, #40]	; 0x28
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	3b01      	subs	r3, #1
 8005e06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	025b      	lsls	r3, r3, #9
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	041b      	lsls	r3, r3, #16
 8005e1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	061b      	lsls	r3, r3, #24
 8005e2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e30:	4923      	ldr	r1, [pc, #140]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005e36:	4b22      	ldr	r3, [pc, #136]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	4a21      	ldr	r2, [pc, #132]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005e3c:	f023 0301 	bic.w	r3, r3, #1
 8005e40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e42:	4b1f      	ldr	r3, [pc, #124]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e46:	4b21      	ldr	r3, [pc, #132]	; (8005ecc <HAL_RCC_OscConfig+0x778>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e4e:	00d2      	lsls	r2, r2, #3
 8005e50:	491b      	ldr	r1, [pc, #108]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e56:	4b1a      	ldr	r3, [pc, #104]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5a:	f023 020c 	bic.w	r2, r3, #12
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	4917      	ldr	r1, [pc, #92]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e68:	4b15      	ldr	r3, [pc, #84]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	f023 0202 	bic.w	r2, r3, #2
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e74:	4912      	ldr	r1, [pc, #72]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e7a:	4b11      	ldr	r3, [pc, #68]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	4a10      	ldr	r2, [pc, #64]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e86:	4b0e      	ldr	r3, [pc, #56]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	4a0d      	ldr	r2, [pc, #52]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e92:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	4a0a      	ldr	r2, [pc, #40]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005e9e:	4b08      	ldr	r3, [pc, #32]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea2:	4a07      	ldr	r2, [pc, #28]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005ea4:	f043 0301 	orr.w	r3, r3, #1
 8005ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eaa:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a04      	ldr	r2, [pc, #16]	; (8005ec0 <HAL_RCC_OscConfig+0x76c>)
 8005eb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb6:	f7fb fab3 	bl	8001420 <HAL_GetTick>
 8005eba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ebc:	e011      	b.n	8005ee2 <HAL_RCC_OscConfig+0x78e>
 8005ebe:	bf00      	nop
 8005ec0:	58024400 	.word	0x58024400
 8005ec4:	58024800 	.word	0x58024800
 8005ec8:	fffffc0c 	.word	0xfffffc0c
 8005ecc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ed0:	f7fb faa6 	bl	8001420 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e08a      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ee2:	4b47      	ldr	r3, [pc, #284]	; (8006000 <HAL_RCC_OscConfig+0x8ac>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x77c>
 8005eee:	e082      	b.n	8005ff6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef0:	4b43      	ldr	r3, [pc, #268]	; (8006000 <HAL_RCC_OscConfig+0x8ac>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a42      	ldr	r2, [pc, #264]	; (8006000 <HAL_RCC_OscConfig+0x8ac>)
 8005ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efc:	f7fb fa90 	bl	8001420 <HAL_GetTick>
 8005f00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f04:	f7fb fa8c 	bl	8001420 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e070      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f16:	4b3a      	ldr	r3, [pc, #232]	; (8006000 <HAL_RCC_OscConfig+0x8ac>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f0      	bne.n	8005f04 <HAL_RCC_OscConfig+0x7b0>
 8005f22:	e068      	b.n	8005ff6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f24:	4b36      	ldr	r3, [pc, #216]	; (8006000 <HAL_RCC_OscConfig+0x8ac>)
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f2a:	4b35      	ldr	r3, [pc, #212]	; (8006000 <HAL_RCC_OscConfig+0x8ac>)
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d031      	beq.n	8005f9c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f003 0203 	and.w	r2, r3, #3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d12a      	bne.n	8005f9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	091b      	lsrs	r3, r3, #4
 8005f4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d122      	bne.n	8005f9c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d11a      	bne.n	8005f9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	0a5b      	lsrs	r3, r3, #9
 8005f6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f72:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d111      	bne.n	8005f9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	0c1b      	lsrs	r3, r3, #16
 8005f7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d108      	bne.n	8005f9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	0e1b      	lsrs	r3, r3, #24
 8005f8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d001      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e02b      	b.n	8005ff8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005fa0:	4b17      	ldr	r3, [pc, #92]	; (8006000 <HAL_RCC_OscConfig+0x8ac>)
 8005fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa4:	08db      	lsrs	r3, r3, #3
 8005fa6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005faa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d01f      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005fb6:	4b12      	ldr	r3, [pc, #72]	; (8006000 <HAL_RCC_OscConfig+0x8ac>)
 8005fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fba:	4a11      	ldr	r2, [pc, #68]	; (8006000 <HAL_RCC_OscConfig+0x8ac>)
 8005fbc:	f023 0301 	bic.w	r3, r3, #1
 8005fc0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fc2:	f7fb fa2d 	bl	8001420 <HAL_GetTick>
 8005fc6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005fc8:	bf00      	nop
 8005fca:	f7fb fa29 	bl	8001420 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d0f9      	beq.n	8005fca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005fd6:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <HAL_RCC_OscConfig+0x8ac>)
 8005fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fda:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <HAL_RCC_OscConfig+0x8b0>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005fe2:	00d2      	lsls	r2, r2, #3
 8005fe4:	4906      	ldr	r1, [pc, #24]	; (8006000 <HAL_RCC_OscConfig+0x8ac>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005fea:	4b05      	ldr	r3, [pc, #20]	; (8006000 <HAL_RCC_OscConfig+0x8ac>)
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	4a04      	ldr	r2, [pc, #16]	; (8006000 <HAL_RCC_OscConfig+0x8ac>)
 8005ff0:	f043 0301 	orr.w	r3, r3, #1
 8005ff4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3730      	adds	r7, #48	; 0x30
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	58024400 	.word	0x58024400
 8006004:	ffff0007 	.word	0xffff0007

08006008 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e19c      	b.n	8006356 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800601c:	4b8a      	ldr	r3, [pc, #552]	; (8006248 <HAL_RCC_ClockConfig+0x240>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 030f 	and.w	r3, r3, #15
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d910      	bls.n	800604c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800602a:	4b87      	ldr	r3, [pc, #540]	; (8006248 <HAL_RCC_ClockConfig+0x240>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f023 020f 	bic.w	r2, r3, #15
 8006032:	4985      	ldr	r1, [pc, #532]	; (8006248 <HAL_RCC_ClockConfig+0x240>)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	4313      	orrs	r3, r2
 8006038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800603a:	4b83      	ldr	r3, [pc, #524]	; (8006248 <HAL_RCC_ClockConfig+0x240>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d001      	beq.n	800604c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e184      	b.n	8006356 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0304 	and.w	r3, r3, #4
 8006054:	2b00      	cmp	r3, #0
 8006056:	d010      	beq.n	800607a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691a      	ldr	r2, [r3, #16]
 800605c:	4b7b      	ldr	r3, [pc, #492]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006064:	429a      	cmp	r2, r3
 8006066:	d908      	bls.n	800607a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006068:	4b78      	ldr	r3, [pc, #480]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	4975      	ldr	r1, [pc, #468]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 8006076:	4313      	orrs	r3, r2
 8006078:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d010      	beq.n	80060a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	695a      	ldr	r2, [r3, #20]
 800608a:	4b70      	ldr	r3, [pc, #448]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006092:	429a      	cmp	r2, r3
 8006094:	d908      	bls.n	80060a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006096:	4b6d      	ldr	r3, [pc, #436]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	496a      	ldr	r1, [pc, #424]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d010      	beq.n	80060d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	699a      	ldr	r2, [r3, #24]
 80060b8:	4b64      	ldr	r3, [pc, #400]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d908      	bls.n	80060d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060c4:	4b61      	ldr	r3, [pc, #388]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	495e      	ldr	r1, [pc, #376]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d010      	beq.n	8006104 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69da      	ldr	r2, [r3, #28]
 80060e6:	4b59      	ldr	r3, [pc, #356]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d908      	bls.n	8006104 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060f2:	4b56      	ldr	r3, [pc, #344]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	4953      	ldr	r1, [pc, #332]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 8006100:	4313      	orrs	r3, r2
 8006102:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d010      	beq.n	8006132 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	4b4d      	ldr	r3, [pc, #308]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	429a      	cmp	r2, r3
 800611e:	d908      	bls.n	8006132 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006120:	4b4a      	ldr	r3, [pc, #296]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	f023 020f 	bic.w	r2, r3, #15
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	4947      	ldr	r1, [pc, #284]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 800612e:	4313      	orrs	r3, r2
 8006130:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d055      	beq.n	80061ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800613e:	4b43      	ldr	r3, [pc, #268]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	4940      	ldr	r1, [pc, #256]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 800614c:	4313      	orrs	r3, r2
 800614e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	2b02      	cmp	r3, #2
 8006156:	d107      	bne.n	8006168 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006158:	4b3c      	ldr	r3, [pc, #240]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d121      	bne.n	80061a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e0f6      	b.n	8006356 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2b03      	cmp	r3, #3
 800616e:	d107      	bne.n	8006180 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006170:	4b36      	ldr	r3, [pc, #216]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d115      	bne.n	80061a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e0ea      	b.n	8006356 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d107      	bne.n	8006198 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006188:	4b30      	ldr	r3, [pc, #192]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006190:	2b00      	cmp	r3, #0
 8006192:	d109      	bne.n	80061a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e0de      	b.n	8006356 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006198:	4b2c      	ldr	r3, [pc, #176]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0d6      	b.n	8006356 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061a8:	4b28      	ldr	r3, [pc, #160]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	f023 0207 	bic.w	r2, r3, #7
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	4925      	ldr	r1, [pc, #148]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ba:	f7fb f931 	bl	8001420 <HAL_GetTick>
 80061be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c0:	e00a      	b.n	80061d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061c2:	f7fb f92d 	bl	8001420 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d901      	bls.n	80061d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e0be      	b.n	8006356 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061d8:	4b1c      	ldr	r3, [pc, #112]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	00db      	lsls	r3, r3, #3
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d1eb      	bne.n	80061c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d010      	beq.n	8006218 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	4b14      	ldr	r3, [pc, #80]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	429a      	cmp	r2, r3
 8006204:	d208      	bcs.n	8006218 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006206:	4b11      	ldr	r3, [pc, #68]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f023 020f 	bic.w	r2, r3, #15
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	490e      	ldr	r1, [pc, #56]	; (800624c <HAL_RCC_ClockConfig+0x244>)
 8006214:	4313      	orrs	r3, r2
 8006216:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006218:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <HAL_RCC_ClockConfig+0x240>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 030f 	and.w	r3, r3, #15
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d214      	bcs.n	8006250 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006226:	4b08      	ldr	r3, [pc, #32]	; (8006248 <HAL_RCC_ClockConfig+0x240>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f023 020f 	bic.w	r2, r3, #15
 800622e:	4906      	ldr	r1, [pc, #24]	; (8006248 <HAL_RCC_ClockConfig+0x240>)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	4313      	orrs	r3, r2
 8006234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006236:	4b04      	ldr	r3, [pc, #16]	; (8006248 <HAL_RCC_ClockConfig+0x240>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d005      	beq.n	8006250 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e086      	b.n	8006356 <HAL_RCC_ClockConfig+0x34e>
 8006248:	52002000 	.word	0x52002000
 800624c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b00      	cmp	r3, #0
 800625a:	d010      	beq.n	800627e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	4b3f      	ldr	r3, [pc, #252]	; (8006360 <HAL_RCC_ClockConfig+0x358>)
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006268:	429a      	cmp	r2, r3
 800626a:	d208      	bcs.n	800627e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800626c:	4b3c      	ldr	r3, [pc, #240]	; (8006360 <HAL_RCC_ClockConfig+0x358>)
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	4939      	ldr	r1, [pc, #228]	; (8006360 <HAL_RCC_ClockConfig+0x358>)
 800627a:	4313      	orrs	r3, r2
 800627c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d010      	beq.n	80062ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	695a      	ldr	r2, [r3, #20]
 800628e:	4b34      	ldr	r3, [pc, #208]	; (8006360 <HAL_RCC_ClockConfig+0x358>)
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006296:	429a      	cmp	r2, r3
 8006298:	d208      	bcs.n	80062ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800629a:	4b31      	ldr	r3, [pc, #196]	; (8006360 <HAL_RCC_ClockConfig+0x358>)
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	492e      	ldr	r1, [pc, #184]	; (8006360 <HAL_RCC_ClockConfig+0x358>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d010      	beq.n	80062da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	699a      	ldr	r2, [r3, #24]
 80062bc:	4b28      	ldr	r3, [pc, #160]	; (8006360 <HAL_RCC_ClockConfig+0x358>)
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d208      	bcs.n	80062da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062c8:	4b25      	ldr	r3, [pc, #148]	; (8006360 <HAL_RCC_ClockConfig+0x358>)
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	4922      	ldr	r1, [pc, #136]	; (8006360 <HAL_RCC_ClockConfig+0x358>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0320 	and.w	r3, r3, #32
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d010      	beq.n	8006308 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69da      	ldr	r2, [r3, #28]
 80062ea:	4b1d      	ldr	r3, [pc, #116]	; (8006360 <HAL_RCC_ClockConfig+0x358>)
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d208      	bcs.n	8006308 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062f6:	4b1a      	ldr	r3, [pc, #104]	; (8006360 <HAL_RCC_ClockConfig+0x358>)
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	4917      	ldr	r1, [pc, #92]	; (8006360 <HAL_RCC_ClockConfig+0x358>)
 8006304:	4313      	orrs	r3, r2
 8006306:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006308:	f000 f834 	bl	8006374 <HAL_RCC_GetSysClockFreq>
 800630c:	4602      	mov	r2, r0
 800630e:	4b14      	ldr	r3, [pc, #80]	; (8006360 <HAL_RCC_ClockConfig+0x358>)
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	0a1b      	lsrs	r3, r3, #8
 8006314:	f003 030f 	and.w	r3, r3, #15
 8006318:	4912      	ldr	r1, [pc, #72]	; (8006364 <HAL_RCC_ClockConfig+0x35c>)
 800631a:	5ccb      	ldrb	r3, [r1, r3]
 800631c:	f003 031f 	and.w	r3, r3, #31
 8006320:	fa22 f303 	lsr.w	r3, r2, r3
 8006324:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006326:	4b0e      	ldr	r3, [pc, #56]	; (8006360 <HAL_RCC_ClockConfig+0x358>)
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	4a0d      	ldr	r2, [pc, #52]	; (8006364 <HAL_RCC_ClockConfig+0x35c>)
 8006330:	5cd3      	ldrb	r3, [r2, r3]
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	fa22 f303 	lsr.w	r3, r2, r3
 800633c:	4a0a      	ldr	r2, [pc, #40]	; (8006368 <HAL_RCC_ClockConfig+0x360>)
 800633e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006340:	4a0a      	ldr	r2, [pc, #40]	; (800636c <HAL_RCC_ClockConfig+0x364>)
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006346:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <HAL_RCC_ClockConfig+0x368>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f7fa fd96 	bl	8000e7c <HAL_InitTick>
 8006350:	4603      	mov	r3, r0
 8006352:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006354:	7bfb      	ldrb	r3, [r7, #15]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	58024400 	.word	0x58024400
 8006364:	0800d868 	.word	0x0800d868
 8006368:	24004014 	.word	0x24004014
 800636c:	24004010 	.word	0x24004010
 8006370:	24004018 	.word	0x24004018

08006374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006374:	b480      	push	{r7}
 8006376:	b089      	sub	sp, #36	; 0x24
 8006378:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800637a:	4bb3      	ldr	r3, [pc, #716]	; (8006648 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006382:	2b18      	cmp	r3, #24
 8006384:	f200 8155 	bhi.w	8006632 <HAL_RCC_GetSysClockFreq+0x2be>
 8006388:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <HAL_RCC_GetSysClockFreq+0x1c>)
 800638a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638e:	bf00      	nop
 8006390:	080063f5 	.word	0x080063f5
 8006394:	08006633 	.word	0x08006633
 8006398:	08006633 	.word	0x08006633
 800639c:	08006633 	.word	0x08006633
 80063a0:	08006633 	.word	0x08006633
 80063a4:	08006633 	.word	0x08006633
 80063a8:	08006633 	.word	0x08006633
 80063ac:	08006633 	.word	0x08006633
 80063b0:	0800641b 	.word	0x0800641b
 80063b4:	08006633 	.word	0x08006633
 80063b8:	08006633 	.word	0x08006633
 80063bc:	08006633 	.word	0x08006633
 80063c0:	08006633 	.word	0x08006633
 80063c4:	08006633 	.word	0x08006633
 80063c8:	08006633 	.word	0x08006633
 80063cc:	08006633 	.word	0x08006633
 80063d0:	08006421 	.word	0x08006421
 80063d4:	08006633 	.word	0x08006633
 80063d8:	08006633 	.word	0x08006633
 80063dc:	08006633 	.word	0x08006633
 80063e0:	08006633 	.word	0x08006633
 80063e4:	08006633 	.word	0x08006633
 80063e8:	08006633 	.word	0x08006633
 80063ec:	08006633 	.word	0x08006633
 80063f0:	08006427 	.word	0x08006427
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063f4:	4b94      	ldr	r3, [pc, #592]	; (8006648 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0320 	and.w	r3, r3, #32
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d009      	beq.n	8006414 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006400:	4b91      	ldr	r3, [pc, #580]	; (8006648 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	08db      	lsrs	r3, r3, #3
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	4a90      	ldr	r2, [pc, #576]	; (800664c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800640c:	fa22 f303 	lsr.w	r3, r2, r3
 8006410:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006412:	e111      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006414:	4b8d      	ldr	r3, [pc, #564]	; (800664c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006416:	61bb      	str	r3, [r7, #24]
      break;
 8006418:	e10e      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800641a:	4b8d      	ldr	r3, [pc, #564]	; (8006650 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800641c:	61bb      	str	r3, [r7, #24]
      break;
 800641e:	e10b      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006420:	4b8c      	ldr	r3, [pc, #560]	; (8006654 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006422:	61bb      	str	r3, [r7, #24]
      break;
 8006424:	e108      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006426:	4b88      	ldr	r3, [pc, #544]	; (8006648 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006430:	4b85      	ldr	r3, [pc, #532]	; (8006648 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006434:	091b      	lsrs	r3, r3, #4
 8006436:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800643a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800643c:	4b82      	ldr	r3, [pc, #520]	; (8006648 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006446:	4b80      	ldr	r3, [pc, #512]	; (8006648 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644a:	08db      	lsrs	r3, r3, #3
 800644c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	fb02 f303 	mul.w	r3, r2, r3
 8006456:	ee07 3a90 	vmov	s15, r3
 800645a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800645e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 80e1 	beq.w	800662c <HAL_RCC_GetSysClockFreq+0x2b8>
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b02      	cmp	r3, #2
 800646e:	f000 8083 	beq.w	8006578 <HAL_RCC_GetSysClockFreq+0x204>
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b02      	cmp	r3, #2
 8006476:	f200 80a1 	bhi.w	80065bc <HAL_RCC_GetSysClockFreq+0x248>
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <HAL_RCC_GetSysClockFreq+0x114>
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d056      	beq.n	8006534 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006486:	e099      	b.n	80065bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006488:	4b6f      	ldr	r3, [pc, #444]	; (8006648 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0320 	and.w	r3, r3, #32
 8006490:	2b00      	cmp	r3, #0
 8006492:	d02d      	beq.n	80064f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006494:	4b6c      	ldr	r3, [pc, #432]	; (8006648 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	08db      	lsrs	r3, r3, #3
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	4a6b      	ldr	r2, [pc, #428]	; (800664c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064a0:	fa22 f303 	lsr.w	r3, r2, r3
 80064a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	ee07 3a90 	vmov	s15, r3
 80064ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064be:	4b62      	ldr	r3, [pc, #392]	; (8006648 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c6:	ee07 3a90 	vmov	s15, r3
 80064ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80064d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006658 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80064ee:	e087      	b.n	8006600 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	ee07 3a90 	vmov	s15, r3
 80064f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800665c <HAL_RCC_GetSysClockFreq+0x2e8>
 80064fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006502:	4b51      	ldr	r3, [pc, #324]	; (8006648 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650a:	ee07 3a90 	vmov	s15, r3
 800650e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006512:	ed97 6a02 	vldr	s12, [r7, #8]
 8006516:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006658 <HAL_RCC_GetSysClockFreq+0x2e4>
 800651a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800651e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800652a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006532:	e065      	b.n	8006600 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800653e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006660 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006546:	4b40      	ldr	r3, [pc, #256]	; (8006648 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654e:	ee07 3a90 	vmov	s15, r3
 8006552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006556:	ed97 6a02 	vldr	s12, [r7, #8]
 800655a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006658 <HAL_RCC_GetSysClockFreq+0x2e4>
 800655e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800656a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800656e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006572:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006576:	e043      	b.n	8006600 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006582:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006664 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800658a:	4b2f      	ldr	r3, [pc, #188]	; (8006648 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800659a:	ed97 6a02 	vldr	s12, [r7, #8]
 800659e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006658 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065ba:	e021      	b.n	8006600 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	ee07 3a90 	vmov	s15, r3
 80065c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006660 <HAL_RCC_GetSysClockFreq+0x2ec>
 80065ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ce:	4b1e      	ldr	r3, [pc, #120]	; (8006648 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d6:	ee07 3a90 	vmov	s15, r3
 80065da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065de:	ed97 6a02 	vldr	s12, [r7, #8]
 80065e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006658 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006600:	4b11      	ldr	r3, [pc, #68]	; (8006648 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006604:	0a5b      	lsrs	r3, r3, #9
 8006606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800660a:	3301      	adds	r3, #1
 800660c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	ee07 3a90 	vmov	s15, r3
 8006614:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006618:	edd7 6a07 	vldr	s13, [r7, #28]
 800661c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006624:	ee17 3a90 	vmov	r3, s15
 8006628:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800662a:	e005      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	61bb      	str	r3, [r7, #24]
      break;
 8006630:	e002      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006632:	4b07      	ldr	r3, [pc, #28]	; (8006650 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006634:	61bb      	str	r3, [r7, #24]
      break;
 8006636:	bf00      	nop
  }

  return sysclockfreq;
 8006638:	69bb      	ldr	r3, [r7, #24]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3724      	adds	r7, #36	; 0x24
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	58024400 	.word	0x58024400
 800664c:	03d09000 	.word	0x03d09000
 8006650:	003d0900 	.word	0x003d0900
 8006654:	007a1200 	.word	0x007a1200
 8006658:	46000000 	.word	0x46000000
 800665c:	4c742400 	.word	0x4c742400
 8006660:	4a742400 	.word	0x4a742400
 8006664:	4af42400 	.word	0x4af42400

08006668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800666e:	f7ff fe81 	bl	8006374 <HAL_RCC_GetSysClockFreq>
 8006672:	4602      	mov	r2, r0
 8006674:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	0a1b      	lsrs	r3, r3, #8
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	490f      	ldr	r1, [pc, #60]	; (80066bc <HAL_RCC_GetHCLKFreq+0x54>)
 8006680:	5ccb      	ldrb	r3, [r1, r3]
 8006682:	f003 031f 	and.w	r3, r3, #31
 8006686:	fa22 f303 	lsr.w	r3, r2, r3
 800668a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	f003 030f 	and.w	r3, r3, #15
 8006694:	4a09      	ldr	r2, [pc, #36]	; (80066bc <HAL_RCC_GetHCLKFreq+0x54>)
 8006696:	5cd3      	ldrb	r3, [r2, r3]
 8006698:	f003 031f 	and.w	r3, r3, #31
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	fa22 f303 	lsr.w	r3, r2, r3
 80066a2:	4a07      	ldr	r2, [pc, #28]	; (80066c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80066a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066a6:	4a07      	ldr	r2, [pc, #28]	; (80066c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80066ac:	4b04      	ldr	r3, [pc, #16]	; (80066c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80066ae:	681b      	ldr	r3, [r3, #0]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	58024400 	.word	0x58024400
 80066bc:	0800d868 	.word	0x0800d868
 80066c0:	24004014 	.word	0x24004014
 80066c4:	24004010 	.word	0x24004010

080066c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80066cc:	f7ff ffcc 	bl	8006668 <HAL_RCC_GetHCLKFreq>
 80066d0:	4602      	mov	r2, r0
 80066d2:	4b06      	ldr	r3, [pc, #24]	; (80066ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	091b      	lsrs	r3, r3, #4
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	4904      	ldr	r1, [pc, #16]	; (80066f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80066de:	5ccb      	ldrb	r3, [r1, r3]
 80066e0:	f003 031f 	and.w	r3, r3, #31
 80066e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	58024400 	.word	0x58024400
 80066f0:	0800d868 	.word	0x0800d868

080066f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	223f      	movs	r2, #63	; 0x3f
 8006702:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006704:	4b1a      	ldr	r3, [pc, #104]	; (8006770 <HAL_RCC_GetClockConfig+0x7c>)
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	f003 0207 	and.w	r2, r3, #7
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006710:	4b17      	ldr	r3, [pc, #92]	; (8006770 <HAL_RCC_GetClockConfig+0x7c>)
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800671c:	4b14      	ldr	r3, [pc, #80]	; (8006770 <HAL_RCC_GetClockConfig+0x7c>)
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	f003 020f 	and.w	r2, r3, #15
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006728:	4b11      	ldr	r3, [pc, #68]	; (8006770 <HAL_RCC_GetClockConfig+0x7c>)
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006734:	4b0e      	ldr	r3, [pc, #56]	; (8006770 <HAL_RCC_GetClockConfig+0x7c>)
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006740:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <HAL_RCC_GetClockConfig+0x7c>)
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800674c:	4b08      	ldr	r3, [pc, #32]	; (8006770 <HAL_RCC_GetClockConfig+0x7c>)
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006758:	4b06      	ldr	r3, [pc, #24]	; (8006774 <HAL_RCC_GetClockConfig+0x80>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 020f 	and.w	r2, r3, #15
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	601a      	str	r2, [r3, #0]
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	58024400 	.word	0x58024400
 8006774:	52002000 	.word	0x52002000

08006778 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800677c:	b0ca      	sub	sp, #296	; 0x128
 800677e:	af00      	add	r7, sp, #0
 8006780:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006784:	2300      	movs	r3, #0
 8006786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800678a:	2300      	movs	r3, #0
 800678c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800679c:	2500      	movs	r5, #0
 800679e:	ea54 0305 	orrs.w	r3, r4, r5
 80067a2:	d049      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80067a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067ae:	d02f      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80067b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067b4:	d828      	bhi.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80067b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067ba:	d01a      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80067bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067c0:	d822      	bhi.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80067c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ca:	d007      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80067cc:	e01c      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ce:	4bb8      	ldr	r3, [pc, #736]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d2:	4ab7      	ldr	r2, [pc, #732]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067da:	e01a      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067e0:	3308      	adds	r3, #8
 80067e2:	2102      	movs	r1, #2
 80067e4:	4618      	mov	r0, r3
 80067e6:	f002 fb61 	bl	8008eac <RCCEx_PLL2_Config>
 80067ea:	4603      	mov	r3, r0
 80067ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067f0:	e00f      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f6:	3328      	adds	r3, #40	; 0x28
 80067f8:	2102      	movs	r1, #2
 80067fa:	4618      	mov	r0, r3
 80067fc:	f002 fc08 	bl	8009010 <RCCEx_PLL3_Config>
 8006800:	4603      	mov	r3, r0
 8006802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006806:	e004      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800680e:	e000      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10a      	bne.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800681a:	4ba5      	ldr	r3, [pc, #660]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800681c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006828:	4aa1      	ldr	r2, [pc, #644]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800682a:	430b      	orrs	r3, r1
 800682c:	6513      	str	r3, [r2, #80]	; 0x50
 800682e:	e003      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006830:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006834:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006844:	f04f 0900 	mov.w	r9, #0
 8006848:	ea58 0309 	orrs.w	r3, r8, r9
 800684c:	d047      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800684e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006854:	2b04      	cmp	r3, #4
 8006856:	d82a      	bhi.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006858:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	08006875 	.word	0x08006875
 8006864:	08006883 	.word	0x08006883
 8006868:	08006899 	.word	0x08006899
 800686c:	080068b7 	.word	0x080068b7
 8006870:	080068b7 	.word	0x080068b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006874:	4b8e      	ldr	r3, [pc, #568]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	4a8d      	ldr	r2, [pc, #564]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800687a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800687e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006880:	e01a      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006886:	3308      	adds	r3, #8
 8006888:	2100      	movs	r1, #0
 800688a:	4618      	mov	r0, r3
 800688c:	f002 fb0e 	bl	8008eac <RCCEx_PLL2_Config>
 8006890:	4603      	mov	r3, r0
 8006892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006896:	e00f      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800689c:	3328      	adds	r3, #40	; 0x28
 800689e:	2100      	movs	r1, #0
 80068a0:	4618      	mov	r0, r3
 80068a2:	f002 fbb5 	bl	8009010 <RCCEx_PLL3_Config>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068ac:	e004      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068b4:	e000      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80068b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10a      	bne.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068c0:	4b7b      	ldr	r3, [pc, #492]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c4:	f023 0107 	bic.w	r1, r3, #7
 80068c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ce:	4a78      	ldr	r2, [pc, #480]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068d0:	430b      	orrs	r3, r1
 80068d2:	6513      	str	r3, [r2, #80]	; 0x50
 80068d4:	e003      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80068de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80068ea:	f04f 0b00 	mov.w	fp, #0
 80068ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80068f2:	d04c      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068fe:	d030      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006904:	d829      	bhi.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006906:	2bc0      	cmp	r3, #192	; 0xc0
 8006908:	d02d      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800690a:	2bc0      	cmp	r3, #192	; 0xc0
 800690c:	d825      	bhi.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800690e:	2b80      	cmp	r3, #128	; 0x80
 8006910:	d018      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006912:	2b80      	cmp	r3, #128	; 0x80
 8006914:	d821      	bhi.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800691a:	2b40      	cmp	r3, #64	; 0x40
 800691c:	d007      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800691e:	e01c      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006920:	4b63      	ldr	r3, [pc, #396]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	4a62      	ldr	r2, [pc, #392]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800692a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800692c:	e01c      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006932:	3308      	adds	r3, #8
 8006934:	2100      	movs	r1, #0
 8006936:	4618      	mov	r0, r3
 8006938:	f002 fab8 	bl	8008eac <RCCEx_PLL2_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006942:	e011      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006948:	3328      	adds	r3, #40	; 0x28
 800694a:	2100      	movs	r1, #0
 800694c:	4618      	mov	r0, r3
 800694e:	f002 fb5f 	bl	8009010 <RCCEx_PLL3_Config>
 8006952:	4603      	mov	r3, r0
 8006954:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006958:	e006      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006960:	e002      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006962:	bf00      	nop
 8006964:	e000      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006968:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006970:	4b4f      	ldr	r3, [pc, #316]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006974:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800697c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697e:	4a4c      	ldr	r2, [pc, #304]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006980:	430b      	orrs	r3, r1
 8006982:	6513      	str	r3, [r2, #80]	; 0x50
 8006984:	e003      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006986:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800698a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800699a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800699e:	2300      	movs	r3, #0
 80069a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80069a4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80069a8:	460b      	mov	r3, r1
 80069aa:	4313      	orrs	r3, r2
 80069ac:	d053      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80069ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80069b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069ba:	d035      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80069bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069c0:	d82e      	bhi.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80069c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069c6:	d031      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80069c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069cc:	d828      	bhi.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80069ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069d2:	d01a      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80069d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069d8:	d822      	bhi.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80069de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069e2:	d007      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80069e4:	e01c      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e6:	4b32      	ldr	r3, [pc, #200]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	4a31      	ldr	r2, [pc, #196]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069f2:	e01c      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069f8:	3308      	adds	r3, #8
 80069fa:	2100      	movs	r1, #0
 80069fc:	4618      	mov	r0, r3
 80069fe:	f002 fa55 	bl	8008eac <RCCEx_PLL2_Config>
 8006a02:	4603      	mov	r3, r0
 8006a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a08:	e011      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a0e:	3328      	adds	r3, #40	; 0x28
 8006a10:	2100      	movs	r1, #0
 8006a12:	4618      	mov	r0, r3
 8006a14:	f002 fafc 	bl	8009010 <RCCEx_PLL3_Config>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a1e:	e006      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a26:	e002      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006a28:	bf00      	nop
 8006a2a:	e000      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10b      	bne.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a36:	4b1e      	ldr	r3, [pc, #120]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a46:	4a1a      	ldr	r2, [pc, #104]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8006a4c:	e003      	b.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006a62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a66:	2300      	movs	r3, #0
 8006a68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a6c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006a70:	460b      	mov	r3, r1
 8006a72:	4313      	orrs	r3, r2
 8006a74:	d056      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a82:	d038      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006a84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a88:	d831      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a8e:	d034      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006a90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a94:	d82b      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a9a:	d01d      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006aa0:	d825      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d006      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006aa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006aaa:	d00a      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006aac:	e01f      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006aae:	bf00      	nop
 8006ab0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ab4:	4ba2      	ldr	r3, [pc, #648]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	4aa1      	ldr	r2, [pc, #644]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006abe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ac0:	e01c      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	2100      	movs	r1, #0
 8006aca:	4618      	mov	r0, r3
 8006acc:	f002 f9ee 	bl	8008eac <RCCEx_PLL2_Config>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ad6:	e011      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006adc:	3328      	adds	r3, #40	; 0x28
 8006ade:	2100      	movs	r1, #0
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f002 fa95 	bl	8009010 <RCCEx_PLL3_Config>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006aec:	e006      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006af4:	e002      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006af6:	bf00      	nop
 8006af8:	e000      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006afc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10b      	bne.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006b04:	4b8e      	ldr	r3, [pc, #568]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b08:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b14:	4a8a      	ldr	r2, [pc, #552]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b16:	430b      	orrs	r3, r1
 8006b18:	6593      	str	r3, [r2, #88]	; 0x58
 8006b1a:	e003      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006b30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b34:	2300      	movs	r3, #0
 8006b36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4313      	orrs	r3, r2
 8006b42:	d03a      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4a:	2b30      	cmp	r3, #48	; 0x30
 8006b4c:	d01f      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006b4e:	2b30      	cmp	r3, #48	; 0x30
 8006b50:	d819      	bhi.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d00c      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d815      	bhi.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d019      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006b5e:	2b10      	cmp	r3, #16
 8006b60:	d111      	bne.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b62:	4b77      	ldr	r3, [pc, #476]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b66:	4a76      	ldr	r2, [pc, #472]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b6e:	e011      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b74:	3308      	adds	r3, #8
 8006b76:	2102      	movs	r1, #2
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f002 f997 	bl	8008eac <RCCEx_PLL2_Config>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b84:	e006      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b8c:	e002      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b8e:	bf00      	nop
 8006b90:	e000      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b9c:	4b68      	ldr	r3, [pc, #416]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006baa:	4a65      	ldr	r2, [pc, #404]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bac:	430b      	orrs	r3, r1
 8006bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bb0:	e003      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006bc6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bd0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	d051      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006be4:	d035      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006be6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bea:	d82e      	bhi.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006bec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bf0:	d031      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006bf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bf6:	d828      	bhi.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bfc:	d01a      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c02:	d822      	bhi.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0c:	d007      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006c0e:	e01c      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c10:	4b4b      	ldr	r3, [pc, #300]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	4a4a      	ldr	r2, [pc, #296]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c1c:	e01c      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c22:	3308      	adds	r3, #8
 8006c24:	2100      	movs	r1, #0
 8006c26:	4618      	mov	r0, r3
 8006c28:	f002 f940 	bl	8008eac <RCCEx_PLL2_Config>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c32:	e011      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c38:	3328      	adds	r3, #40	; 0x28
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f002 f9e7 	bl	8009010 <RCCEx_PLL3_Config>
 8006c42:	4603      	mov	r3, r0
 8006c44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c48:	e006      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c50:	e002      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c52:	bf00      	nop
 8006c54:	e000      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c60:	4b37      	ldr	r3, [pc, #220]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c64:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6e:	4a34      	ldr	r2, [pc, #208]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c70:	430b      	orrs	r3, r1
 8006c72:	6513      	str	r3, [r2, #80]	; 0x50
 8006c74:	e003      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	d056      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ca8:	d033      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006caa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cae:	d82c      	bhi.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006cb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cb4:	d02f      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006cb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cba:	d826      	bhi.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006cbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cc0:	d02b      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006cc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cc6:	d820      	bhi.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ccc:	d012      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006cce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cd2:	d81a      	bhi.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d022      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cdc:	d115      	bne.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ce2:	3308      	adds	r3, #8
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f002 f8e0 	bl	8008eac <RCCEx_PLL2_Config>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006cf2:	e015      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf8:	3328      	adds	r3, #40	; 0x28
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f002 f987 	bl	8009010 <RCCEx_PLL3_Config>
 8006d02:	4603      	mov	r3, r0
 8006d04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d08:	e00a      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d10:	e006      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d12:	bf00      	nop
 8006d14:	e004      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d16:	bf00      	nop
 8006d18:	e002      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d1a:	bf00      	nop
 8006d1c:	e000      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10d      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d2c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d36:	4a02      	ldr	r2, [pc, #8]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	6513      	str	r3, [r2, #80]	; 0x50
 8006d3c:	e006      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006d3e:	bf00      	nop
 8006d40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d62:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006d66:	460b      	mov	r3, r1
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	d055      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d78:	d033      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d7e:	d82c      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d84:	d02f      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d8a:	d826      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d90:	d02b      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006d92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d96:	d820      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d9c:	d012      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006da2:	d81a      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d022      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006da8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dac:	d115      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006db2:	3308      	adds	r3, #8
 8006db4:	2101      	movs	r1, #1
 8006db6:	4618      	mov	r0, r3
 8006db8:	f002 f878 	bl	8008eac <RCCEx_PLL2_Config>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006dc2:	e015      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dc8:	3328      	adds	r3, #40	; 0x28
 8006dca:	2101      	movs	r1, #1
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f002 f91f 	bl	8009010 <RCCEx_PLL3_Config>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006dd8:	e00a      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006de0:	e006      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006de2:	bf00      	nop
 8006de4:	e004      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006de6:	bf00      	nop
 8006de8:	e002      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006dea:	bf00      	nop
 8006dec:	e000      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10b      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006df8:	4ba3      	ldr	r3, [pc, #652]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e08:	4a9f      	ldr	r2, [pc, #636]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e0a:	430b      	orrs	r3, r1
 8006e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8006e0e:	e003      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e20:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006e24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e32:	460b      	mov	r3, r1
 8006e34:	4313      	orrs	r3, r2
 8006e36:	d037      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e42:	d00e      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e48:	d816      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d018      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e52:	d111      	bne.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e54:	4b8c      	ldr	r3, [pc, #560]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	4a8b      	ldr	r2, [pc, #556]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e60:	e00f      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e66:	3308      	adds	r3, #8
 8006e68:	2101      	movs	r1, #1
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f002 f81e 	bl	8008eac <RCCEx_PLL2_Config>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e76:	e004      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e7e:	e000      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10a      	bne.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e8a:	4b7f      	ldr	r3, [pc, #508]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e98:	4a7b      	ldr	r2, [pc, #492]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e9a:	430b      	orrs	r3, r1
 8006e9c:	6513      	str	r3, [r2, #80]	; 0x50
 8006e9e:	e003      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ea4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ebe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	d039      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d81c      	bhi.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006ed2:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed8:	08006f15 	.word	0x08006f15
 8006edc:	08006ee9 	.word	0x08006ee9
 8006ee0:	08006ef7 	.word	0x08006ef7
 8006ee4:	08006f15 	.word	0x08006f15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee8:	4b67      	ldr	r3, [pc, #412]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	4a66      	ldr	r2, [pc, #408]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ef4:	e00f      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006efa:	3308      	adds	r3, #8
 8006efc:	2102      	movs	r1, #2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f001 ffd4 	bl	8008eac <RCCEx_PLL2_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f0a:	e004      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f12:	e000      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f1e:	4b5a      	ldr	r3, [pc, #360]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f22:	f023 0103 	bic.w	r1, r3, #3
 8006f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f2c:	4a56      	ldr	r2, [pc, #344]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f32:	e003      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006f48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006f56:	460b      	mov	r3, r1
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	f000 809f 	beq.w	800709c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f5e:	4b4b      	ldr	r3, [pc, #300]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a4a      	ldr	r2, [pc, #296]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f6a:	f7fa fa59 	bl	8001420 <HAL_GetTick>
 8006f6e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f72:	e00b      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f74:	f7fa fa54 	bl	8001420 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b64      	cmp	r3, #100	; 0x64
 8006f82:	d903      	bls.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f8a:	e005      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f8c:	4b3f      	ldr	r3, [pc, #252]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d0ed      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006f98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d179      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006fa0:	4b39      	ldr	r3, [pc, #228]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fac:	4053      	eors	r3, r2
 8006fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d015      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fb6:	4b34      	ldr	r3, [pc, #208]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fbe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fc2:	4b31      	ldr	r3, [pc, #196]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc6:	4a30      	ldr	r2, [pc, #192]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fcc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fce:	4b2e      	ldr	r3, [pc, #184]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd2:	4a2d      	ldr	r2, [pc, #180]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fd8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006fda:	4a2b      	ldr	r2, [pc, #172]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fe0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fe6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fee:	d118      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff0:	f7fa fa16 	bl	8001420 <HAL_GetTick>
 8006ff4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ff8:	e00d      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ffa:	f7fa fa11 	bl	8001420 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007004:	1ad2      	subs	r2, r2, r3
 8007006:	f241 3388 	movw	r3, #5000	; 0x1388
 800700a:	429a      	cmp	r2, r3
 800700c:	d903      	bls.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007014:	e005      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007016:	4b1c      	ldr	r3, [pc, #112]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0eb      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007026:	2b00      	cmp	r3, #0
 8007028:	d129      	bne.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800702a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800702e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800703a:	d10e      	bne.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800703c:	4b12      	ldr	r3, [pc, #72]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007048:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800704c:	091a      	lsrs	r2, r3, #4
 800704e:	4b10      	ldr	r3, [pc, #64]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007050:	4013      	ands	r3, r2
 8007052:	4a0d      	ldr	r2, [pc, #52]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007054:	430b      	orrs	r3, r1
 8007056:	6113      	str	r3, [r2, #16]
 8007058:	e005      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800705a:	4b0b      	ldr	r3, [pc, #44]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	4a0a      	ldr	r2, [pc, #40]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007060:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007064:	6113      	str	r3, [r2, #16]
 8007066:	4b08      	ldr	r3, [pc, #32]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007068:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800706a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800706e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007076:	4a04      	ldr	r2, [pc, #16]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007078:	430b      	orrs	r3, r1
 800707a:	6713      	str	r3, [r2, #112]	; 0x70
 800707c:	e00e      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800707e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007082:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007086:	e009      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007088:	58024400 	.word	0x58024400
 800708c:	58024800 	.word	0x58024800
 8007090:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007094:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007098:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800709c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	f002 0301 	and.w	r3, r2, #1
 80070a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4313      	orrs	r3, r2
 80070ba:	f000 8089 	beq.w	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80070be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070c4:	2b28      	cmp	r3, #40	; 0x28
 80070c6:	d86b      	bhi.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80070c8:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	080071a9 	.word	0x080071a9
 80070d4:	080071a1 	.word	0x080071a1
 80070d8:	080071a1 	.word	0x080071a1
 80070dc:	080071a1 	.word	0x080071a1
 80070e0:	080071a1 	.word	0x080071a1
 80070e4:	080071a1 	.word	0x080071a1
 80070e8:	080071a1 	.word	0x080071a1
 80070ec:	080071a1 	.word	0x080071a1
 80070f0:	08007175 	.word	0x08007175
 80070f4:	080071a1 	.word	0x080071a1
 80070f8:	080071a1 	.word	0x080071a1
 80070fc:	080071a1 	.word	0x080071a1
 8007100:	080071a1 	.word	0x080071a1
 8007104:	080071a1 	.word	0x080071a1
 8007108:	080071a1 	.word	0x080071a1
 800710c:	080071a1 	.word	0x080071a1
 8007110:	0800718b 	.word	0x0800718b
 8007114:	080071a1 	.word	0x080071a1
 8007118:	080071a1 	.word	0x080071a1
 800711c:	080071a1 	.word	0x080071a1
 8007120:	080071a1 	.word	0x080071a1
 8007124:	080071a1 	.word	0x080071a1
 8007128:	080071a1 	.word	0x080071a1
 800712c:	080071a1 	.word	0x080071a1
 8007130:	080071a9 	.word	0x080071a9
 8007134:	080071a1 	.word	0x080071a1
 8007138:	080071a1 	.word	0x080071a1
 800713c:	080071a1 	.word	0x080071a1
 8007140:	080071a1 	.word	0x080071a1
 8007144:	080071a1 	.word	0x080071a1
 8007148:	080071a1 	.word	0x080071a1
 800714c:	080071a1 	.word	0x080071a1
 8007150:	080071a9 	.word	0x080071a9
 8007154:	080071a1 	.word	0x080071a1
 8007158:	080071a1 	.word	0x080071a1
 800715c:	080071a1 	.word	0x080071a1
 8007160:	080071a1 	.word	0x080071a1
 8007164:	080071a1 	.word	0x080071a1
 8007168:	080071a1 	.word	0x080071a1
 800716c:	080071a1 	.word	0x080071a1
 8007170:	080071a9 	.word	0x080071a9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007178:	3308      	adds	r3, #8
 800717a:	2101      	movs	r1, #1
 800717c:	4618      	mov	r0, r3
 800717e:	f001 fe95 	bl	8008eac <RCCEx_PLL2_Config>
 8007182:	4603      	mov	r3, r0
 8007184:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007188:	e00f      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800718a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800718e:	3328      	adds	r3, #40	; 0x28
 8007190:	2101      	movs	r1, #1
 8007192:	4618      	mov	r0, r3
 8007194:	f001 ff3c 	bl	8009010 <RCCEx_PLL3_Config>
 8007198:	4603      	mov	r3, r0
 800719a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800719e:	e004      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071a6:	e000      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80071a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10a      	bne.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80071b2:	4bbf      	ldr	r3, [pc, #764]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80071ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071c0:	4abb      	ldr	r2, [pc, #748]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071c2:	430b      	orrs	r3, r1
 80071c4:	6553      	str	r3, [r2, #84]	; 0x54
 80071c6:	e003      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80071d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	f002 0302 	and.w	r3, r2, #2
 80071dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071e0:	2300      	movs	r3, #0
 80071e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80071e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80071ea:	460b      	mov	r3, r1
 80071ec:	4313      	orrs	r3, r2
 80071ee:	d041      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80071f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071f6:	2b05      	cmp	r3, #5
 80071f8:	d824      	bhi.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80071fa:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80071fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007200:	0800724d 	.word	0x0800724d
 8007204:	08007219 	.word	0x08007219
 8007208:	0800722f 	.word	0x0800722f
 800720c:	0800724d 	.word	0x0800724d
 8007210:	0800724d 	.word	0x0800724d
 8007214:	0800724d 	.word	0x0800724d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800721c:	3308      	adds	r3, #8
 800721e:	2101      	movs	r1, #1
 8007220:	4618      	mov	r0, r3
 8007222:	f001 fe43 	bl	8008eac <RCCEx_PLL2_Config>
 8007226:	4603      	mov	r3, r0
 8007228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800722c:	e00f      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800722e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007232:	3328      	adds	r3, #40	; 0x28
 8007234:	2101      	movs	r1, #1
 8007236:	4618      	mov	r0, r3
 8007238:	f001 feea 	bl	8009010 <RCCEx_PLL3_Config>
 800723c:	4603      	mov	r3, r0
 800723e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007242:	e004      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800724a:	e000      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800724c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800724e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10a      	bne.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007256:	4b96      	ldr	r3, [pc, #600]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725a:	f023 0107 	bic.w	r1, r3, #7
 800725e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007264:	4a92      	ldr	r2, [pc, #584]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007266:	430b      	orrs	r3, r1
 8007268:	6553      	str	r3, [r2, #84]	; 0x54
 800726a:	e003      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007270:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	f002 0304 	and.w	r3, r2, #4
 8007280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007284:	2300      	movs	r3, #0
 8007286:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800728a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800728e:	460b      	mov	r3, r1
 8007290:	4313      	orrs	r3, r2
 8007292:	d044      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800729c:	2b05      	cmp	r3, #5
 800729e:	d825      	bhi.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80072a0:	a201      	add	r2, pc, #4	; (adr r2, 80072a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80072a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a6:	bf00      	nop
 80072a8:	080072f5 	.word	0x080072f5
 80072ac:	080072c1 	.word	0x080072c1
 80072b0:	080072d7 	.word	0x080072d7
 80072b4:	080072f5 	.word	0x080072f5
 80072b8:	080072f5 	.word	0x080072f5
 80072bc:	080072f5 	.word	0x080072f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072c4:	3308      	adds	r3, #8
 80072c6:	2101      	movs	r1, #1
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 fdef 	bl	8008eac <RCCEx_PLL2_Config>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80072d4:	e00f      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072da:	3328      	adds	r3, #40	; 0x28
 80072dc:	2101      	movs	r1, #1
 80072de:	4618      	mov	r0, r3
 80072e0:	f001 fe96 	bl	8009010 <RCCEx_PLL3_Config>
 80072e4:	4603      	mov	r3, r0
 80072e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80072ea:	e004      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072f2:	e000      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80072f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10b      	bne.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072fe:	4b6c      	ldr	r3, [pc, #432]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007302:	f023 0107 	bic.w	r1, r3, #7
 8007306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800730a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800730e:	4a68      	ldr	r2, [pc, #416]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007310:	430b      	orrs	r3, r1
 8007312:	6593      	str	r3, [r2, #88]	; 0x58
 8007314:	e003      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800731a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800731e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	f002 0320 	and.w	r3, r2, #32
 800732a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800732e:	2300      	movs	r3, #0
 8007330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007334:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007338:	460b      	mov	r3, r1
 800733a:	4313      	orrs	r3, r2
 800733c:	d055      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800733e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007346:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800734a:	d033      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800734c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007350:	d82c      	bhi.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007356:	d02f      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800735c:	d826      	bhi.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800735e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007362:	d02b      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007364:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007368:	d820      	bhi.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800736a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800736e:	d012      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007374:	d81a      	bhi.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007376:	2b00      	cmp	r3, #0
 8007378:	d022      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800737a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800737e:	d115      	bne.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007384:	3308      	adds	r3, #8
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f001 fd8f 	bl	8008eac <RCCEx_PLL2_Config>
 800738e:	4603      	mov	r3, r0
 8007390:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007394:	e015      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800739a:	3328      	adds	r3, #40	; 0x28
 800739c:	2102      	movs	r1, #2
 800739e:	4618      	mov	r0, r3
 80073a0:	f001 fe36 	bl	8009010 <RCCEx_PLL3_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80073aa:	e00a      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073b2:	e006      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073b4:	bf00      	nop
 80073b6:	e004      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073b8:	bf00      	nop
 80073ba:	e002      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073bc:	bf00      	nop
 80073be:	e000      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10b      	bne.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073ca:	4b39      	ldr	r3, [pc, #228]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80073d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073da:	4a35      	ldr	r2, [pc, #212]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073dc:	430b      	orrs	r3, r1
 80073de:	6553      	str	r3, [r2, #84]	; 0x54
 80073e0:	e003      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80073ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80073f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073fa:	2300      	movs	r3, #0
 80073fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007400:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007404:	460b      	mov	r3, r1
 8007406:	4313      	orrs	r3, r2
 8007408:	d058      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800740a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800740e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007412:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007416:	d033      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007418:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800741c:	d82c      	bhi.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800741e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007422:	d02f      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007428:	d826      	bhi.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800742a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800742e:	d02b      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007430:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007434:	d820      	bhi.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800743a:	d012      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800743c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007440:	d81a      	bhi.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007442:	2b00      	cmp	r3, #0
 8007444:	d022      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800744a:	d115      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800744c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007450:	3308      	adds	r3, #8
 8007452:	2100      	movs	r1, #0
 8007454:	4618      	mov	r0, r3
 8007456:	f001 fd29 	bl	8008eac <RCCEx_PLL2_Config>
 800745a:	4603      	mov	r3, r0
 800745c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007460:	e015      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007466:	3328      	adds	r3, #40	; 0x28
 8007468:	2102      	movs	r1, #2
 800746a:	4618      	mov	r0, r3
 800746c:	f001 fdd0 	bl	8009010 <RCCEx_PLL3_Config>
 8007470:	4603      	mov	r3, r0
 8007472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007476:	e00a      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800747e:	e006      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007480:	bf00      	nop
 8007482:	e004      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007484:	bf00      	nop
 8007486:	e002      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007488:	bf00      	nop
 800748a:	e000      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800748c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800748e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10e      	bne.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007496:	4b06      	ldr	r3, [pc, #24]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074a6:	4a02      	ldr	r2, [pc, #8]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074a8:	430b      	orrs	r3, r1
 80074aa:	6593      	str	r3, [r2, #88]	; 0x58
 80074ac:	e006      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80074ae:	bf00      	nop
 80074b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80074bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80074c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074cc:	2300      	movs	r3, #0
 80074ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80074d6:	460b      	mov	r3, r1
 80074d8:	4313      	orrs	r3, r2
 80074da:	d055      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80074dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80074e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80074e8:	d033      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80074ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80074ee:	d82c      	bhi.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074f4:	d02f      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80074f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074fa:	d826      	bhi.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007500:	d02b      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007502:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007506:	d820      	bhi.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800750c:	d012      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800750e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007512:	d81a      	bhi.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007514:	2b00      	cmp	r3, #0
 8007516:	d022      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800751c:	d115      	bne.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800751e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007522:	3308      	adds	r3, #8
 8007524:	2100      	movs	r1, #0
 8007526:	4618      	mov	r0, r3
 8007528:	f001 fcc0 	bl	8008eac <RCCEx_PLL2_Config>
 800752c:	4603      	mov	r3, r0
 800752e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007532:	e015      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007538:	3328      	adds	r3, #40	; 0x28
 800753a:	2102      	movs	r1, #2
 800753c:	4618      	mov	r0, r3
 800753e:	f001 fd67 	bl	8009010 <RCCEx_PLL3_Config>
 8007542:	4603      	mov	r3, r0
 8007544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007548:	e00a      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007550:	e006      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007552:	bf00      	nop
 8007554:	e004      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007556:	bf00      	nop
 8007558:	e002      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800755a:	bf00      	nop
 800755c:	e000      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800755e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007560:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10b      	bne.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007568:	4ba1      	ldr	r3, [pc, #644]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800756a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800756c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007574:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007578:	4a9d      	ldr	r2, [pc, #628]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800757a:	430b      	orrs	r3, r1
 800757c:	6593      	str	r3, [r2, #88]	; 0x58
 800757e:	e003      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007580:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007584:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	f002 0308 	and.w	r3, r2, #8
 8007594:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007598:	2300      	movs	r3, #0
 800759a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800759e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80075a2:	460b      	mov	r3, r1
 80075a4:	4313      	orrs	r3, r2
 80075a6:	d01e      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80075a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b4:	d10c      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ba:	3328      	adds	r3, #40	; 0x28
 80075bc:	2102      	movs	r1, #2
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 fd26 	bl	8009010 <RCCEx_PLL3_Config>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80075d0:	4b87      	ldr	r3, [pc, #540]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075e0:	4a83      	ldr	r2, [pc, #524]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075e2:	430b      	orrs	r3, r1
 80075e4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	f002 0310 	and.w	r3, r2, #16
 80075f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075f6:	2300      	movs	r3, #0
 80075f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80075fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007600:	460b      	mov	r3, r1
 8007602:	4313      	orrs	r3, r2
 8007604:	d01e      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800760a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800760e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007612:	d10c      	bne.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007618:	3328      	adds	r3, #40	; 0x28
 800761a:	2102      	movs	r1, #2
 800761c:	4618      	mov	r0, r3
 800761e:	f001 fcf7 	bl	8009010 <RCCEx_PLL3_Config>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800762e:	4b70      	ldr	r3, [pc, #448]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007632:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800763a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800763e:	4a6c      	ldr	r2, [pc, #432]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007640:	430b      	orrs	r3, r1
 8007642:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007654:	2300      	movs	r3, #0
 8007656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800765a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800765e:	460b      	mov	r3, r1
 8007660:	4313      	orrs	r3, r2
 8007662:	d03e      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007668:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800766c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007670:	d022      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007676:	d81b      	bhi.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800767c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007680:	d00b      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007682:	e015      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007688:	3308      	adds	r3, #8
 800768a:	2100      	movs	r1, #0
 800768c:	4618      	mov	r0, r3
 800768e:	f001 fc0d 	bl	8008eac <RCCEx_PLL2_Config>
 8007692:	4603      	mov	r3, r0
 8007694:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007698:	e00f      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800769a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769e:	3328      	adds	r3, #40	; 0x28
 80076a0:	2102      	movs	r1, #2
 80076a2:	4618      	mov	r0, r3
 80076a4:	f001 fcb4 	bl	8009010 <RCCEx_PLL3_Config>
 80076a8:	4603      	mov	r3, r0
 80076aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80076ae:	e004      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076b6:	e000      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80076b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10b      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076c2:	4b4b      	ldr	r3, [pc, #300]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80076ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076d2:	4a47      	ldr	r2, [pc, #284]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076d4:	430b      	orrs	r3, r1
 80076d6:	6593      	str	r3, [r2, #88]	; 0x58
 80076d8:	e003      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80076ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80076f0:	2300      	movs	r3, #0
 80076f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80076f8:	460b      	mov	r3, r1
 80076fa:	4313      	orrs	r3, r2
 80076fc:	d03b      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80076fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007706:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800770a:	d01f      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800770c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007710:	d818      	bhi.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007716:	d003      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007718:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800771c:	d007      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800771e:	e011      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007720:	4b33      	ldr	r3, [pc, #204]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007724:	4a32      	ldr	r2, [pc, #200]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800772a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800772c:	e00f      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800772e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007732:	3328      	adds	r3, #40	; 0x28
 8007734:	2101      	movs	r1, #1
 8007736:	4618      	mov	r0, r3
 8007738:	f001 fc6a 	bl	8009010 <RCCEx_PLL3_Config>
 800773c:	4603      	mov	r3, r0
 800773e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007742:	e004      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800774a:	e000      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800774c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800774e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10b      	bne.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007756:	4b26      	ldr	r3, [pc, #152]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800775e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007766:	4a22      	ldr	r2, [pc, #136]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007768:	430b      	orrs	r3, r1
 800776a:	6553      	str	r3, [r2, #84]	; 0x54
 800776c:	e003      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800776e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007772:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800777a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007782:	673b      	str	r3, [r7, #112]	; 0x70
 8007784:	2300      	movs	r3, #0
 8007786:	677b      	str	r3, [r7, #116]	; 0x74
 8007788:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800778c:	460b      	mov	r3, r1
 800778e:	4313      	orrs	r3, r2
 8007790:	d034      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800779c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a0:	d007      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80077a2:	e011      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077a4:	4b12      	ldr	r3, [pc, #72]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	4a11      	ldr	r2, [pc, #68]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80077b0:	e00e      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077b6:	3308      	adds	r3, #8
 80077b8:	2102      	movs	r1, #2
 80077ba:	4618      	mov	r0, r3
 80077bc:	f001 fb76 	bl	8008eac <RCCEx_PLL2_Config>
 80077c0:	4603      	mov	r3, r0
 80077c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80077c6:	e003      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10d      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80077d8:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e6:	4a02      	ldr	r2, [pc, #8]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077e8:	430b      	orrs	r3, r1
 80077ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077ec:	e006      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80077ee:	bf00      	nop
 80077f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007808:	66bb      	str	r3, [r7, #104]	; 0x68
 800780a:	2300      	movs	r3, #0
 800780c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800780e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007812:	460b      	mov	r3, r1
 8007814:	4313      	orrs	r3, r2
 8007816:	d00c      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800781c:	3328      	adds	r3, #40	; 0x28
 800781e:	2102      	movs	r1, #2
 8007820:	4618      	mov	r0, r3
 8007822:	f001 fbf5 	bl	8009010 <RCCEx_PLL3_Config>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800783e:	663b      	str	r3, [r7, #96]	; 0x60
 8007840:	2300      	movs	r3, #0
 8007842:	667b      	str	r3, [r7, #100]	; 0x64
 8007844:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007848:	460b      	mov	r3, r1
 800784a:	4313      	orrs	r3, r2
 800784c:	d038      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800784e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800785a:	d018      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800785c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007860:	d811      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007866:	d014      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800786c:	d80b      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800786e:	2b00      	cmp	r3, #0
 8007870:	d011      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007876:	d106      	bne.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007878:	4bc3      	ldr	r3, [pc, #780]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787c:	4ac2      	ldr	r2, [pc, #776]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800787e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007884:	e008      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800788c:	e004      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800788e:	bf00      	nop
 8007890:	e002      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007892:	bf00      	nop
 8007894:	e000      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007898:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10b      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078a0:	4bb9      	ldr	r3, [pc, #740]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80078a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078b0:	4ab5      	ldr	r2, [pc, #724]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078b2:	430b      	orrs	r3, r1
 80078b4:	6553      	str	r3, [r2, #84]	; 0x54
 80078b6:	e003      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80078cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80078ce:	2300      	movs	r3, #0
 80078d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80078d6:	460b      	mov	r3, r1
 80078d8:	4313      	orrs	r3, r2
 80078da:	d009      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078dc:	4baa      	ldr	r3, [pc, #680]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80078e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ea:	4aa7      	ldr	r2, [pc, #668]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078ec:	430b      	orrs	r3, r1
 80078ee:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80078f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80078fc:	653b      	str	r3, [r7, #80]	; 0x50
 80078fe:	2300      	movs	r3, #0
 8007900:	657b      	str	r3, [r7, #84]	; 0x54
 8007902:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007906:	460b      	mov	r3, r1
 8007908:	4313      	orrs	r3, r2
 800790a:	d00a      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800790c:	4b9e      	ldr	r3, [pc, #632]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007918:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800791c:	4a9a      	ldr	r2, [pc, #616]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800791e:	430b      	orrs	r3, r1
 8007920:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800792e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007930:	2300      	movs	r3, #0
 8007932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007934:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007938:	460b      	mov	r3, r1
 800793a:	4313      	orrs	r3, r2
 800793c:	d009      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800793e:	4b92      	ldr	r3, [pc, #584]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007942:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800794a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800794c:	4a8e      	ldr	r2, [pc, #568]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800794e:	430b      	orrs	r3, r1
 8007950:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800795e:	643b      	str	r3, [r7, #64]	; 0x40
 8007960:	2300      	movs	r3, #0
 8007962:	647b      	str	r3, [r7, #68]	; 0x44
 8007964:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007968:	460b      	mov	r3, r1
 800796a:	4313      	orrs	r3, r2
 800796c:	d00e      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800796e:	4b86      	ldr	r3, [pc, #536]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	4a85      	ldr	r2, [pc, #532]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007974:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007978:	6113      	str	r3, [r2, #16]
 800797a:	4b83      	ldr	r3, [pc, #524]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800797c:	6919      	ldr	r1, [r3, #16]
 800797e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007982:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007986:	4a80      	ldr	r2, [pc, #512]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007988:	430b      	orrs	r3, r1
 800798a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800798c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007998:	63bb      	str	r3, [r7, #56]	; 0x38
 800799a:	2300      	movs	r3, #0
 800799c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800799e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80079a2:	460b      	mov	r3, r1
 80079a4:	4313      	orrs	r3, r2
 80079a6:	d009      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80079a8:	4b77      	ldr	r3, [pc, #476]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ac:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80079b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b6:	4a74      	ldr	r2, [pc, #464]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079b8:	430b      	orrs	r3, r1
 80079ba:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80079bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80079c8:	633b      	str	r3, [r7, #48]	; 0x30
 80079ca:	2300      	movs	r3, #0
 80079cc:	637b      	str	r3, [r7, #52]	; 0x34
 80079ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80079d2:	460b      	mov	r3, r1
 80079d4:	4313      	orrs	r3, r2
 80079d6:	d00a      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079d8:	4b6b      	ldr	r3, [pc, #428]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079dc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80079e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079e8:	4a67      	ldr	r2, [pc, #412]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079ea:	430b      	orrs	r3, r1
 80079ec:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80079ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f6:	2100      	movs	r1, #0
 80079f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007a04:	460b      	mov	r3, r1
 8007a06:	4313      	orrs	r3, r2
 8007a08:	d011      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0e:	3308      	adds	r3, #8
 8007a10:	2100      	movs	r1, #0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f001 fa4a 	bl	8008eac <RCCEx_PLL2_Config>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	2100      	movs	r1, #0
 8007a38:	6239      	str	r1, [r7, #32]
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a40:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007a44:	460b      	mov	r3, r1
 8007a46:	4313      	orrs	r3, r2
 8007a48:	d011      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a4e:	3308      	adds	r3, #8
 8007a50:	2101      	movs	r1, #1
 8007a52:	4618      	mov	r0, r3
 8007a54:	f001 fa2a 	bl	8008eac <RCCEx_PLL2_Config>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	2100      	movs	r1, #0
 8007a78:	61b9      	str	r1, [r7, #24]
 8007a7a:	f003 0304 	and.w	r3, r3, #4
 8007a7e:	61fb      	str	r3, [r7, #28]
 8007a80:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007a84:	460b      	mov	r3, r1
 8007a86:	4313      	orrs	r3, r2
 8007a88:	d011      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a8e:	3308      	adds	r3, #8
 8007a90:	2102      	movs	r1, #2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f001 fa0a 	bl	8008eac <RCCEx_PLL2_Config>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	6139      	str	r1, [r7, #16]
 8007aba:	f003 0308 	and.w	r3, r3, #8
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	d011      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ace:	3328      	adds	r3, #40	; 0x28
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f001 fa9c 	bl	8009010 <RCCEx_PLL3_Config>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007ade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	2100      	movs	r1, #0
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	f003 0310 	and.w	r3, r3, #16
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007b04:	460b      	mov	r3, r1
 8007b06:	4313      	orrs	r3, r2
 8007b08:	d011      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b0e:	3328      	adds	r3, #40	; 0x28
 8007b10:	2101      	movs	r1, #1
 8007b12:	4618      	mov	r0, r3
 8007b14:	f001 fa7c 	bl	8009010 <RCCEx_PLL3_Config>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b36:	2100      	movs	r1, #0
 8007b38:	6039      	str	r1, [r7, #0]
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	607b      	str	r3, [r7, #4]
 8007b40:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b44:	460b      	mov	r3, r1
 8007b46:	4313      	orrs	r3, r2
 8007b48:	d011      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b4e:	3328      	adds	r3, #40	; 0x28
 8007b50:	2102      	movs	r1, #2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f001 fa5c 	bl	8009010 <RCCEx_PLL3_Config>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007b6e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	e000      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007b82:	46bd      	mov	sp, r7
 8007b84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b88:	58024400 	.word	0x58024400

08007b8c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b090      	sub	sp, #64	; 0x40
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b9a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007b9e:	430b      	orrs	r3, r1
 8007ba0:	f040 8094 	bne.w	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007ba4:	4b9e      	ldr	r3, [pc, #632]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	f200 8087 	bhi.w	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007bb6:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007bd1 	.word	0x08007bd1
 8007bc0:	08007bf9 	.word	0x08007bf9
 8007bc4:	08007c21 	.word	0x08007c21
 8007bc8:	08007cbd 	.word	0x08007cbd
 8007bcc:	08007c49 	.word	0x08007c49
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bd0:	4b93      	ldr	r3, [pc, #588]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bdc:	d108      	bne.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007be2:	4618      	mov	r0, r3
 8007be4:	f001 f810 	bl	8008c08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bec:	f000 bd45 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bf4:	f000 bd41 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bf8:	4b89      	ldr	r3, [pc, #548]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c04:	d108      	bne.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c06:	f107 0318 	add.w	r3, r7, #24
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fd54 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c14:	f000 bd31 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c1c:	f000 bd2d 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c20:	4b7f      	ldr	r3, [pc, #508]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c2c:	d108      	bne.n	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c2e:	f107 030c 	add.w	r3, r7, #12
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 fe94 	bl	8008960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c3c:	f000 bd1d 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c44:	f000 bd19 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c48:	4b75      	ldr	r3, [pc, #468]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c50:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c52:	4b73      	ldr	r3, [pc, #460]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0304 	and.w	r3, r3, #4
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d10c      	bne.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d109      	bne.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c64:	4b6e      	ldr	r3, [pc, #440]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	08db      	lsrs	r3, r3, #3
 8007c6a:	f003 0303 	and.w	r3, r3, #3
 8007c6e:	4a6d      	ldr	r2, [pc, #436]	; (8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c70:	fa22 f303 	lsr.w	r3, r2, r3
 8007c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c76:	e01f      	b.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c78:	4b69      	ldr	r3, [pc, #420]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c84:	d106      	bne.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c8c:	d102      	bne.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c8e:	4b66      	ldr	r3, [pc, #408]	; (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c92:	e011      	b.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c94:	4b62      	ldr	r3, [pc, #392]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ca0:	d106      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ca8:	d102      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007caa:	4b60      	ldr	r3, [pc, #384]	; (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cae:	e003      	b.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007cb4:	f000 bce1 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007cb8:	f000 bcdf 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007cbc:	4b5c      	ldr	r3, [pc, #368]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cc0:	f000 bcdb 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cc8:	f000 bcd7 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007cd4:	430b      	orrs	r3, r1
 8007cd6:	f040 80ad 	bne.w	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007cda:	4b51      	ldr	r3, [pc, #324]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cde:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007ce2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cea:	d056      	beq.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf2:	f200 8090 	bhi.w	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	2bc0      	cmp	r3, #192	; 0xc0
 8007cfa:	f000 8088 	beq.w	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	2bc0      	cmp	r3, #192	; 0xc0
 8007d02:	f200 8088 	bhi.w	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	2b80      	cmp	r3, #128	; 0x80
 8007d0a:	d032      	beq.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0e:	2b80      	cmp	r3, #128	; 0x80
 8007d10:	f200 8081 	bhi.w	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1c:	2b40      	cmp	r3, #64	; 0x40
 8007d1e:	d014      	beq.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007d20:	e079      	b.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d22:	4b3f      	ldr	r3, [pc, #252]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d2e:	d108      	bne.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d34:	4618      	mov	r0, r3
 8007d36:	f000 ff67 	bl	8008c08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d3e:	f000 bc9c 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d42:	2300      	movs	r3, #0
 8007d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d46:	f000 bc98 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d4a:	4b35      	ldr	r3, [pc, #212]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d56:	d108      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d58:	f107 0318 	add.w	r3, r7, #24
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 fcab 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d66:	f000 bc88 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d6e:	f000 bc84 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d72:	4b2b      	ldr	r3, [pc, #172]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d7e:	d108      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d80:	f107 030c 	add.w	r3, r7, #12
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 fdeb 	bl	8008960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d8e:	f000 bc74 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d96:	f000 bc70 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d9a:	4b21      	ldr	r3, [pc, #132]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007da2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007da4:	4b1e      	ldr	r3, [pc, #120]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0304 	and.w	r3, r3, #4
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	d10c      	bne.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d109      	bne.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007db6:	4b1a      	ldr	r3, [pc, #104]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	08db      	lsrs	r3, r3, #3
 8007dbc:	f003 0303 	and.w	r3, r3, #3
 8007dc0:	4a18      	ldr	r2, [pc, #96]	; (8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dc8:	e01f      	b.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dca:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dd6:	d106      	bne.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dde:	d102      	bne.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007de0:	4b11      	ldr	r3, [pc, #68]	; (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007de4:	e011      	b.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007de6:	4b0e      	ldr	r3, [pc, #56]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007df2:	d106      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dfa:	d102      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007dfc:	4b0b      	ldr	r3, [pc, #44]	; (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e00:	e003      	b.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007e06:	f000 bc38 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e0a:	f000 bc36 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e0e:	4b08      	ldr	r3, [pc, #32]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007e10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e12:	f000 bc32 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e1a:	f000 bc2e 	b.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e1e:	bf00      	nop
 8007e20:	58024400 	.word	0x58024400
 8007e24:	03d09000 	.word	0x03d09000
 8007e28:	003d0900 	.word	0x003d0900
 8007e2c:	007a1200 	.word	0x007a1200
 8007e30:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e38:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007e3c:	430b      	orrs	r3, r1
 8007e3e:	f040 809c 	bne.w	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007e42:	4b9e      	ldr	r3, [pc, #632]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e46:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007e4a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e52:	d054      	beq.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e5a:	f200 808b 	bhi.w	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e64:	f000 8083 	beq.w	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e6e:	f200 8081 	bhi.w	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e78:	d02f      	beq.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e80:	d878      	bhi.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d004      	beq.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e8e:	d012      	beq.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007e90:	e070      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e92:	4b8a      	ldr	r3, [pc, #552]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e9e:	d107      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 feaf 	bl	8008c08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eae:	e3e4      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb4:	e3e1      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007eb6:	4b81      	ldr	r3, [pc, #516]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ebe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ec2:	d107      	bne.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ec4:	f107 0318 	add.w	r3, r7, #24
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 fbf5 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ed2:	e3d2      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ed8:	e3cf      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007eda:	4b78      	ldr	r3, [pc, #480]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ee6:	d107      	bne.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ee8:	f107 030c 	add.w	r3, r7, #12
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 fd37 	bl	8008960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ef6:	e3c0      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007efc:	e3bd      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007efe:	4b6f      	ldr	r3, [pc, #444]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f06:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f08:	4b6c      	ldr	r3, [pc, #432]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d10c      	bne.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d109      	bne.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f1a:	4b68      	ldr	r3, [pc, #416]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	08db      	lsrs	r3, r3, #3
 8007f20:	f003 0303 	and.w	r3, r3, #3
 8007f24:	4a66      	ldr	r2, [pc, #408]	; (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007f26:	fa22 f303 	lsr.w	r3, r2, r3
 8007f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f2c:	e01e      	b.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f2e:	4b63      	ldr	r3, [pc, #396]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f3a:	d106      	bne.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f42:	d102      	bne.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f44:	4b5f      	ldr	r3, [pc, #380]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f48:	e010      	b.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f4a:	4b5c      	ldr	r3, [pc, #368]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f56:	d106      	bne.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f5e:	d102      	bne.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f60:	4b59      	ldr	r3, [pc, #356]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f64:	e002      	b.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f66:	2300      	movs	r3, #0
 8007f68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007f6a:	e386      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f6c:	e385      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f6e:	4b57      	ldr	r3, [pc, #348]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f72:	e382      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007f74:	2300      	movs	r3, #0
 8007f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f78:	e37f      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f7e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007f82:	430b      	orrs	r3, r1
 8007f84:	f040 80a7 	bne.w	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007f88:	4b4c      	ldr	r3, [pc, #304]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f8c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007f90:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f98:	d055      	beq.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fa0:	f200 8096 	bhi.w	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007faa:	f000 8084 	beq.w	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fb4:	f200 808c 	bhi.w	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fbe:	d030      	beq.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fc6:	f200 8083 	bhi.w	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d004      	beq.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fd6:	d012      	beq.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007fd8:	e07a      	b.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fda:	4b38      	ldr	r3, [pc, #224]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fe6:	d107      	bne.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 fe0b 	bl	8008c08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ff6:	e340      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ffc:	e33d      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ffe:	4b2f      	ldr	r3, [pc, #188]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800800a:	d107      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800800c:	f107 0318 	add.w	r3, r7, #24
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fb51 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800801a:	e32e      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008020:	e32b      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008022:	4b26      	ldr	r3, [pc, #152]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800802a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800802e:	d107      	bne.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008030:	f107 030c 	add.w	r3, r7, #12
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fc93 	bl	8008960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800803e:	e31c      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008040:	2300      	movs	r3, #0
 8008042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008044:	e319      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008046:	4b1d      	ldr	r3, [pc, #116]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800804a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800804e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008050:	4b1a      	ldr	r3, [pc, #104]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0304 	and.w	r3, r3, #4
 8008058:	2b04      	cmp	r3, #4
 800805a:	d10c      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800805c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800805e:	2b00      	cmp	r3, #0
 8008060:	d109      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008062:	4b16      	ldr	r3, [pc, #88]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	08db      	lsrs	r3, r3, #3
 8008068:	f003 0303 	and.w	r3, r3, #3
 800806c:	4a14      	ldr	r2, [pc, #80]	; (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800806e:	fa22 f303 	lsr.w	r3, r2, r3
 8008072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008074:	e01e      	b.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008076:	4b11      	ldr	r3, [pc, #68]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800807e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008082:	d106      	bne.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800808a:	d102      	bne.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800808c:	4b0d      	ldr	r3, [pc, #52]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800808e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008090:	e010      	b.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008092:	4b0a      	ldr	r3, [pc, #40]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800809a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800809e:	d106      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80080a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080a6:	d102      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80080a8:	4b07      	ldr	r3, [pc, #28]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80080aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080ac:	e002      	b.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80080b2:	e2e2      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080b4:	e2e1      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80080b6:	4b05      	ldr	r3, [pc, #20]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80080b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080ba:	e2de      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080bc:	58024400 	.word	0x58024400
 80080c0:	03d09000 	.word	0x03d09000
 80080c4:	003d0900 	.word	0x003d0900
 80080c8:	007a1200 	.word	0x007a1200
 80080cc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080d4:	e2d1      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80080d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080da:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80080de:	430b      	orrs	r3, r1
 80080e0:	f040 809c 	bne.w	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80080e4:	4b93      	ldr	r3, [pc, #588]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80080e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80080ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80080ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080f4:	d054      	beq.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80080f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080fc:	f200 808b 	bhi.w	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008106:	f000 8083 	beq.w	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800810a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008110:	f200 8081 	bhi.w	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800811a:	d02f      	beq.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800811c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008122:	d878      	bhi.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	2b00      	cmp	r3, #0
 8008128:	d004      	beq.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800812a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008130:	d012      	beq.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008132:	e070      	b.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008134:	4b7f      	ldr	r3, [pc, #508]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800813c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008140:	d107      	bne.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008146:	4618      	mov	r0, r3
 8008148:	f000 fd5e 	bl	8008c08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008150:	e293      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008152:	2300      	movs	r3, #0
 8008154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008156:	e290      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008158:	4b76      	ldr	r3, [pc, #472]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008164:	d107      	bne.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008166:	f107 0318 	add.w	r3, r7, #24
 800816a:	4618      	mov	r0, r3
 800816c:	f000 faa4 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008174:	e281      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800817a:	e27e      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800817c:	4b6d      	ldr	r3, [pc, #436]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008188:	d107      	bne.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800818a:	f107 030c 	add.w	r3, r7, #12
 800818e:	4618      	mov	r0, r3
 8008190:	f000 fbe6 	bl	8008960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008198:	e26f      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800819a:	2300      	movs	r3, #0
 800819c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800819e:	e26c      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081a0:	4b64      	ldr	r3, [pc, #400]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081a8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081aa:	4b62      	ldr	r3, [pc, #392]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	2b04      	cmp	r3, #4
 80081b4:	d10c      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80081b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d109      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081bc:	4b5d      	ldr	r3, [pc, #372]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	08db      	lsrs	r3, r3, #3
 80081c2:	f003 0303 	and.w	r3, r3, #3
 80081c6:	4a5c      	ldr	r2, [pc, #368]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80081c8:	fa22 f303 	lsr.w	r3, r2, r3
 80081cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081ce:	e01e      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081d0:	4b58      	ldr	r3, [pc, #352]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081dc:	d106      	bne.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80081de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081e4:	d102      	bne.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081e6:	4b55      	ldr	r3, [pc, #340]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80081e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081ea:	e010      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081ec:	4b51      	ldr	r3, [pc, #324]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081f8:	d106      	bne.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80081fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008200:	d102      	bne.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008202:	4b4f      	ldr	r3, [pc, #316]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008206:	e002      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008208:	2300      	movs	r3, #0
 800820a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800820c:	e235      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800820e:	e234      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008210:	4b4c      	ldr	r3, [pc, #304]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008214:	e231      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800821a:	e22e      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800821c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008220:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008224:	430b      	orrs	r3, r1
 8008226:	f040 808f 	bne.w	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800822a:	4b42      	ldr	r3, [pc, #264]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800822c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008232:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008236:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800823a:	d06b      	beq.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008242:	d874      	bhi.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008246:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800824a:	d056      	beq.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800824c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008252:	d86c      	bhi.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008256:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800825a:	d03b      	beq.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008262:	d864      	bhi.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800826a:	d021      	beq.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800826c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008272:	d85c      	bhi.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008276:	2b00      	cmp	r3, #0
 8008278:	d004      	beq.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008280:	d004      	beq.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008282:	e054      	b.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008284:	f7fe fa20 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 8008288:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800828a:	e1f6      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800828c:	4b29      	ldr	r3, [pc, #164]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008298:	d107      	bne.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800829a:	f107 0318 	add.w	r3, r7, #24
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fa0a 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082a8:	e1e7      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ae:	e1e4      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082b0:	4b20      	ldr	r3, [pc, #128]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082bc:	d107      	bne.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082be:	f107 030c 	add.w	r3, r7, #12
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fb4c 	bl	8008960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082cc:	e1d5      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082d2:	e1d2      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082d4:	4b17      	ldr	r3, [pc, #92]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	2b04      	cmp	r3, #4
 80082de:	d109      	bne.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082e0:	4b14      	ldr	r3, [pc, #80]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	08db      	lsrs	r3, r3, #3
 80082e6:	f003 0303 	and.w	r3, r3, #3
 80082ea:	4a13      	ldr	r2, [pc, #76]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80082ec:	fa22 f303 	lsr.w	r3, r2, r3
 80082f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082f2:	e1c2      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082f8:	e1bf      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80082fa:	4b0e      	ldr	r3, [pc, #56]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008306:	d102      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008308:	4b0c      	ldr	r3, [pc, #48]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800830a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800830c:	e1b5      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008312:	e1b2      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008314:	4b07      	ldr	r3, [pc, #28]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800831c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008320:	d102      	bne.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008322:	4b07      	ldr	r3, [pc, #28]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008324:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008326:	e1a8      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800832c:	e1a5      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800832e:	2300      	movs	r3, #0
 8008330:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008332:	e1a2      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008334:	58024400 	.word	0x58024400
 8008338:	03d09000 	.word	0x03d09000
 800833c:	003d0900 	.word	0x003d0900
 8008340:	007a1200 	.word	0x007a1200
 8008344:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800834c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008350:	430b      	orrs	r3, r1
 8008352:	d173      	bne.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008354:	4b9c      	ldr	r3, [pc, #624]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800835c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800835e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008364:	d02f      	beq.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800836c:	d863      	bhi.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008370:	2b00      	cmp	r3, #0
 8008372:	d004      	beq.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800837a:	d012      	beq.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800837c:	e05b      	b.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800837e:	4b92      	ldr	r3, [pc, #584]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800838a:	d107      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800838c:	f107 0318 	add.w	r3, r7, #24
 8008390:	4618      	mov	r0, r3
 8008392:	f000 f991 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800839a:	e16e      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083a0:	e16b      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083a2:	4b89      	ldr	r3, [pc, #548]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ae:	d107      	bne.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083b0:	f107 030c 	add.w	r3, r7, #12
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 fad3 	bl	8008960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083be:	e15c      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083c0:	2300      	movs	r3, #0
 80083c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c4:	e159      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083c6:	4b80      	ldr	r3, [pc, #512]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083d0:	4b7d      	ldr	r3, [pc, #500]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d10c      	bne.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80083dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d109      	bne.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083e2:	4b79      	ldr	r3, [pc, #484]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	08db      	lsrs	r3, r3, #3
 80083e8:	f003 0303 	and.w	r3, r3, #3
 80083ec:	4a77      	ldr	r2, [pc, #476]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80083ee:	fa22 f303 	lsr.w	r3, r2, r3
 80083f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083f4:	e01e      	b.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083f6:	4b74      	ldr	r3, [pc, #464]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008402:	d106      	bne.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800840a:	d102      	bne.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800840c:	4b70      	ldr	r3, [pc, #448]	; (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800840e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008410:	e010      	b.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008412:	4b6d      	ldr	r3, [pc, #436]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800841a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800841e:	d106      	bne.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008426:	d102      	bne.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008428:	4b6a      	ldr	r3, [pc, #424]	; (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800842a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800842c:	e002      	b.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800842e:	2300      	movs	r3, #0
 8008430:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008432:	e122      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008434:	e121      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008436:	2300      	movs	r3, #0
 8008438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800843a:	e11e      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800843c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008440:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008444:	430b      	orrs	r3, r1
 8008446:	d133      	bne.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008448:	4b5f      	ldr	r3, [pc, #380]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800844a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800844c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008450:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008454:	2b00      	cmp	r3, #0
 8008456:	d004      	beq.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800845e:	d012      	beq.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008460:	e023      	b.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008462:	4b59      	ldr	r3, [pc, #356]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800846a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800846e:	d107      	bne.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008474:	4618      	mov	r0, r3
 8008476:	f000 fbc7 	bl	8008c08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800847e:	e0fc      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008484:	e0f9      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008486:	4b50      	ldr	r3, [pc, #320]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800848e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008492:	d107      	bne.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008494:	f107 0318 	add.w	r3, r7, #24
 8008498:	4618      	mov	r0, r3
 800849a:	f000 f90d 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084a2:	e0ea      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084a4:	2300      	movs	r3, #0
 80084a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084a8:	e0e7      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80084aa:	2300      	movs	r3, #0
 80084ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084ae:	e0e4      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80084b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084b4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80084b8:	430b      	orrs	r3, r1
 80084ba:	f040 808d 	bne.w	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80084be:	4b42      	ldr	r3, [pc, #264]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80084c6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80084c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084ce:	d06b      	beq.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80084d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084d6:	d874      	bhi.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084de:	d056      	beq.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80084e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e6:	d86c      	bhi.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084ee:	d03b      	beq.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80084f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084f6:	d864      	bhi.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084fe:	d021      	beq.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008506:	d85c      	bhi.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	2b00      	cmp	r3, #0
 800850c:	d004      	beq.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008510:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008514:	d004      	beq.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008516:	e054      	b.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008518:	f000 f8b8 	bl	800868c <HAL_RCCEx_GetD3PCLK1Freq>
 800851c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800851e:	e0ac      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008520:	4b29      	ldr	r3, [pc, #164]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800852c:	d107      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800852e:	f107 0318 	add.w	r3, r7, #24
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f8c0 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800853c:	e09d      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008542:	e09a      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008544:	4b20      	ldr	r3, [pc, #128]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800854c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008550:	d107      	bne.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008552:	f107 030c 	add.w	r3, r7, #12
 8008556:	4618      	mov	r0, r3
 8008558:	f000 fa02 	bl	8008960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008560:	e08b      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008566:	e088      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008568:	4b17      	ldr	r3, [pc, #92]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0304 	and.w	r3, r3, #4
 8008570:	2b04      	cmp	r3, #4
 8008572:	d109      	bne.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008574:	4b14      	ldr	r3, [pc, #80]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	08db      	lsrs	r3, r3, #3
 800857a:	f003 0303 	and.w	r3, r3, #3
 800857e:	4a13      	ldr	r2, [pc, #76]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008580:	fa22 f303 	lsr.w	r3, r2, r3
 8008584:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008586:	e078      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008588:	2300      	movs	r3, #0
 800858a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800858c:	e075      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800858e:	4b0e      	ldr	r3, [pc, #56]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800859a:	d102      	bne.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800859c:	4b0c      	ldr	r3, [pc, #48]	; (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800859e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085a0:	e06b      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085a6:	e068      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80085a8:	4b07      	ldr	r3, [pc, #28]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085b4:	d102      	bne.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80085b6:	4b07      	ldr	r3, [pc, #28]	; (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80085b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085ba:	e05e      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085c0:	e05b      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80085c2:	2300      	movs	r3, #0
 80085c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085c6:	e058      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085c8:	58024400 	.word	0x58024400
 80085cc:	03d09000 	.word	0x03d09000
 80085d0:	003d0900 	.word	0x003d0900
 80085d4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80085d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085dc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80085e0:	430b      	orrs	r3, r1
 80085e2:	d148      	bne.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80085e4:	4b27      	ldr	r3, [pc, #156]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80085e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085f4:	d02a      	beq.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80085f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085fc:	d838      	bhi.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	2b00      	cmp	r3, #0
 8008602:	d004      	beq.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800860a:	d00d      	beq.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800860c:	e030      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800860e:	4b1d      	ldr	r3, [pc, #116]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800861a:	d102      	bne.n	8008622 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800861c:	4b1a      	ldr	r3, [pc, #104]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800861e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008620:	e02b      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008626:	e028      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008628:	4b16      	ldr	r3, [pc, #88]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008634:	d107      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800863a:	4618      	mov	r0, r3
 800863c:	f000 fae4 	bl	8008c08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008644:	e019      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800864a:	e016      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800864c:	4b0d      	ldr	r3, [pc, #52]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008658:	d107      	bne.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800865a:	f107 0318 	add.w	r3, r7, #24
 800865e:	4618      	mov	r0, r3
 8008660:	f000 f82a 	bl	80086b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008668:	e007      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800866e:	e004      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008674:	e001      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800867a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800867c:	4618      	mov	r0, r3
 800867e:	3740      	adds	r7, #64	; 0x40
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	58024400 	.word	0x58024400
 8008688:	007a1200 	.word	0x007a1200

0800868c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008690:	f7fd ffea 	bl	8006668 <HAL_RCC_GetHCLKFreq>
 8008694:	4602      	mov	r2, r0
 8008696:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	091b      	lsrs	r3, r3, #4
 800869c:	f003 0307 	and.w	r3, r3, #7
 80086a0:	4904      	ldr	r1, [pc, #16]	; (80086b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80086a2:	5ccb      	ldrb	r3, [r1, r3]
 80086a4:	f003 031f 	and.w	r3, r3, #31
 80086a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	58024400 	.word	0x58024400
 80086b4:	0800d868 	.word	0x0800d868

080086b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b089      	sub	sp, #36	; 0x24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086c0:	4ba1      	ldr	r3, [pc, #644]	; (8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c4:	f003 0303 	and.w	r3, r3, #3
 80086c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80086ca:	4b9f      	ldr	r3, [pc, #636]	; (8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ce:	0b1b      	lsrs	r3, r3, #12
 80086d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80086d6:	4b9c      	ldr	r3, [pc, #624]	; (8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086da:	091b      	lsrs	r3, r3, #4
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80086e2:	4b99      	ldr	r3, [pc, #612]	; (8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e6:	08db      	lsrs	r3, r3, #3
 80086e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	fb02 f303 	mul.w	r3, r2, r3
 80086f2:	ee07 3a90 	vmov	s15, r3
 80086f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 8111 	beq.w	8008928 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	2b02      	cmp	r3, #2
 800870a:	f000 8083 	beq.w	8008814 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	2b02      	cmp	r3, #2
 8008712:	f200 80a1 	bhi.w	8008858 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d056      	beq.n	80087d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008722:	e099      	b.n	8008858 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008724:	4b88      	ldr	r3, [pc, #544]	; (8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0320 	and.w	r3, r3, #32
 800872c:	2b00      	cmp	r3, #0
 800872e:	d02d      	beq.n	800878c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008730:	4b85      	ldr	r3, [pc, #532]	; (8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	08db      	lsrs	r3, r3, #3
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	4a84      	ldr	r2, [pc, #528]	; (800894c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800873c:	fa22 f303 	lsr.w	r3, r2, r3
 8008740:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	ee07 3a90 	vmov	s15, r3
 8008748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800875a:	4b7b      	ldr	r3, [pc, #492]	; (8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800875c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008762:	ee07 3a90 	vmov	s15, r3
 8008766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800876a:	ed97 6a03 	vldr	s12, [r7, #12]
 800876e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800877a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800877e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008786:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800878a:	e087      	b.n	800889c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	ee07 3a90 	vmov	s15, r3
 8008792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008796:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008954 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800879a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879e:	4b6a      	ldr	r3, [pc, #424]	; (8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a6:	ee07 3a90 	vmov	s15, r3
 80087aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80087b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087ce:	e065      	b.n	800889c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	ee07 3a90 	vmov	s15, r3
 80087d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80087de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e2:	4b59      	ldr	r3, [pc, #356]	; (8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ea:	ee07 3a90 	vmov	s15, r3
 80087ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80087f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800880a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008812:	e043      	b.n	800889c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	ee07 3a90 	vmov	s15, r3
 800881a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800895c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008826:	4b48      	ldr	r3, [pc, #288]	; (8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882e:	ee07 3a90 	vmov	s15, r3
 8008832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008836:	ed97 6a03 	vldr	s12, [r7, #12]
 800883a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800883e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800884a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008856:	e021      	b.n	800889c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008862:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886a:	4b37      	ldr	r3, [pc, #220]	; (8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800886c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887a:	ed97 6a03 	vldr	s12, [r7, #12]
 800887e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800888e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800889a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800889c:	4b2a      	ldr	r3, [pc, #168]	; (8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800889e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a0:	0a5b      	lsrs	r3, r3, #9
 80088a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088a6:	ee07 3a90 	vmov	s15, r3
 80088aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80088ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088c2:	ee17 2a90 	vmov	r2, s15
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80088ca:	4b1f      	ldr	r3, [pc, #124]	; (8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ce:	0c1b      	lsrs	r3, r3, #16
 80088d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d4:	ee07 3a90 	vmov	s15, r3
 80088d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80088e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088f0:	ee17 2a90 	vmov	r2, s15
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80088f8:	4b13      	ldr	r3, [pc, #76]	; (8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fc:	0e1b      	lsrs	r3, r3, #24
 80088fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008902:	ee07 3a90 	vmov	s15, r3
 8008906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800890e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008912:	edd7 6a07 	vldr	s13, [r7, #28]
 8008916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800891a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800891e:	ee17 2a90 	vmov	r2, s15
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008926:	e008      	b.n	800893a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	609a      	str	r2, [r3, #8]
}
 800893a:	bf00      	nop
 800893c:	3724      	adds	r7, #36	; 0x24
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	58024400 	.word	0x58024400
 800894c:	03d09000 	.word	0x03d09000
 8008950:	46000000 	.word	0x46000000
 8008954:	4c742400 	.word	0x4c742400
 8008958:	4a742400 	.word	0x4a742400
 800895c:	4af42400 	.word	0x4af42400

08008960 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008960:	b480      	push	{r7}
 8008962:	b089      	sub	sp, #36	; 0x24
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008968:	4ba1      	ldr	r3, [pc, #644]	; (8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800896a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896c:	f003 0303 	and.w	r3, r3, #3
 8008970:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008972:	4b9f      	ldr	r3, [pc, #636]	; (8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008976:	0d1b      	lsrs	r3, r3, #20
 8008978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800897c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800897e:	4b9c      	ldr	r3, [pc, #624]	; (8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008982:	0a1b      	lsrs	r3, r3, #8
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800898a:	4b99      	ldr	r3, [pc, #612]	; (8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800898c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800898e:	08db      	lsrs	r3, r3, #3
 8008990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	fb02 f303 	mul.w	r3, r2, r3
 800899a:	ee07 3a90 	vmov	s15, r3
 800899e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 8111 	beq.w	8008bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	f000 8083 	beq.w	8008abc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	f200 80a1 	bhi.w	8008b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d003      	beq.n	80089cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d056      	beq.n	8008a78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80089ca:	e099      	b.n	8008b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089cc:	4b88      	ldr	r3, [pc, #544]	; (8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0320 	and.w	r3, r3, #32
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d02d      	beq.n	8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089d8:	4b85      	ldr	r3, [pc, #532]	; (8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	08db      	lsrs	r3, r3, #3
 80089de:	f003 0303 	and.w	r3, r3, #3
 80089e2:	4a84      	ldr	r2, [pc, #528]	; (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80089e4:	fa22 f303 	lsr.w	r3, r2, r3
 80089e8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	ee07 3a90 	vmov	s15, r3
 80089f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a02:	4b7b      	ldr	r3, [pc, #492]	; (8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a0a:	ee07 3a90 	vmov	s15, r3
 8008a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a32:	e087      	b.n	8008b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	ee07 3a90 	vmov	s15, r3
 8008a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008bfc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a46:	4b6a      	ldr	r3, [pc, #424]	; (8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a76:	e065      	b.n	8008b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	ee07 3a90 	vmov	s15, r3
 8008a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a8a:	4b59      	ldr	r3, [pc, #356]	; (8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a92:	ee07 3a90 	vmov	s15, r3
 8008a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aba:	e043      	b.n	8008b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	ee07 3a90 	vmov	s15, r3
 8008ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008c04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ace:	4b48      	ldr	r3, [pc, #288]	; (8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad6:	ee07 3a90 	vmov	s15, r3
 8008ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ae2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008afe:	e021      	b.n	8008b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	ee07 3a90 	vmov	s15, r3
 8008b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b12:	4b37      	ldr	r3, [pc, #220]	; (8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b1a:	ee07 3a90 	vmov	s15, r3
 8008b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008b44:	4b2a      	ldr	r3, [pc, #168]	; (8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b48:	0a5b      	lsrs	r3, r3, #9
 8008b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b4e:	ee07 3a90 	vmov	s15, r3
 8008b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b6a:	ee17 2a90 	vmov	r2, s15
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008b72:	4b1f      	ldr	r3, [pc, #124]	; (8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b76:	0c1b      	lsrs	r3, r3, #16
 8008b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b7c:	ee07 3a90 	vmov	s15, r3
 8008b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b98:	ee17 2a90 	vmov	r2, s15
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008ba0:	4b13      	ldr	r3, [pc, #76]	; (8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba4:	0e1b      	lsrs	r3, r3, #24
 8008ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008baa:	ee07 3a90 	vmov	s15, r3
 8008bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bc6:	ee17 2a90 	vmov	r2, s15
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008bce:	e008      	b.n	8008be2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	609a      	str	r2, [r3, #8]
}
 8008be2:	bf00      	nop
 8008be4:	3724      	adds	r7, #36	; 0x24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	58024400 	.word	0x58024400
 8008bf4:	03d09000 	.word	0x03d09000
 8008bf8:	46000000 	.word	0x46000000
 8008bfc:	4c742400 	.word	0x4c742400
 8008c00:	4a742400 	.word	0x4a742400
 8008c04:	4af42400 	.word	0x4af42400

08008c08 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b089      	sub	sp, #36	; 0x24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c10:	4ba0      	ldr	r3, [pc, #640]	; (8008e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c14:	f003 0303 	and.w	r3, r3, #3
 8008c18:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008c1a:	4b9e      	ldr	r3, [pc, #632]	; (8008e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1e:	091b      	lsrs	r3, r3, #4
 8008c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c24:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008c26:	4b9b      	ldr	r3, [pc, #620]	; (8008e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008c30:	4b98      	ldr	r3, [pc, #608]	; (8008e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c34:	08db      	lsrs	r3, r3, #3
 8008c36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	fb02 f303 	mul.w	r3, r2, r3
 8008c40:	ee07 3a90 	vmov	s15, r3
 8008c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c48:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f000 8111 	beq.w	8008e76 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	f000 8083 	beq.w	8008d62 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	f200 80a1 	bhi.w	8008da6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d056      	beq.n	8008d1e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008c70:	e099      	b.n	8008da6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c72:	4b88      	ldr	r3, [pc, #544]	; (8008e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0320 	and.w	r3, r3, #32
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d02d      	beq.n	8008cda <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c7e:	4b85      	ldr	r3, [pc, #532]	; (8008e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	08db      	lsrs	r3, r3, #3
 8008c84:	f003 0303 	and.w	r3, r3, #3
 8008c88:	4a83      	ldr	r2, [pc, #524]	; (8008e98 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c8e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	ee07 3a90 	vmov	s15, r3
 8008ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca8:	4b7a      	ldr	r3, [pc, #488]	; (8008e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb0:	ee07 3a90 	vmov	s15, r3
 8008cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cbc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008e9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cd4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cd8:	e087      	b.n	8008dea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	ee07 3a90 	vmov	s15, r3
 8008ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008ea0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cec:	4b69      	ldr	r3, [pc, #420]	; (8008e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf4:	ee07 3a90 	vmov	s15, r3
 8008cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d00:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008e9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d1c:	e065      	b.n	8008dea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	ee07 3a90 	vmov	s15, r3
 8008d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d28:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008d2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d30:	4b58      	ldr	r3, [pc, #352]	; (8008e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d38:	ee07 3a90 	vmov	s15, r3
 8008d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d40:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d44:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008e9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d60:	e043      	b.n	8008dea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	ee07 3a90 	vmov	s15, r3
 8008d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008ea8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d74:	4b47      	ldr	r3, [pc, #284]	; (8008e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7c:	ee07 3a90 	vmov	s15, r3
 8008d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d84:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d88:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008e9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008da4:	e021      	b.n	8008dea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	ee07 3a90 	vmov	s15, r3
 8008dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008ea0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db8:	4b36      	ldr	r3, [pc, #216]	; (8008e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc0:	ee07 3a90 	vmov	s15, r3
 8008dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dcc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008e9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008dd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008de8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008dea:	4b2a      	ldr	r3, [pc, #168]	; (8008e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dee:	0a5b      	lsrs	r3, r3, #9
 8008df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df4:	ee07 3a90 	vmov	s15, r3
 8008df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e04:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e10:	ee17 2a90 	vmov	r2, s15
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008e18:	4b1e      	ldr	r3, [pc, #120]	; (8008e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1c:	0c1b      	lsrs	r3, r3, #16
 8008e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e22:	ee07 3a90 	vmov	s15, r3
 8008e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e32:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e3e:	ee17 2a90 	vmov	r2, s15
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008e46:	4b13      	ldr	r3, [pc, #76]	; (8008e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4a:	0e1b      	lsrs	r3, r3, #24
 8008e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e50:	ee07 3a90 	vmov	s15, r3
 8008e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e60:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e6c:	ee17 2a90 	vmov	r2, s15
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008e74:	e008      	b.n	8008e88 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	609a      	str	r2, [r3, #8]
}
 8008e88:	bf00      	nop
 8008e8a:	3724      	adds	r7, #36	; 0x24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	58024400 	.word	0x58024400
 8008e98:	03d09000 	.word	0x03d09000
 8008e9c:	46000000 	.word	0x46000000
 8008ea0:	4c742400 	.word	0x4c742400
 8008ea4:	4a742400 	.word	0x4a742400
 8008ea8:	4af42400 	.word	0x4af42400

08008eac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008eba:	4b53      	ldr	r3, [pc, #332]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebe:	f003 0303 	and.w	r3, r3, #3
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d101      	bne.n	8008eca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e099      	b.n	8008ffe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008eca:	4b4f      	ldr	r3, [pc, #316]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a4e      	ldr	r2, [pc, #312]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008ed0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ed6:	f7f8 faa3 	bl	8001420 <HAL_GetTick>
 8008eda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008edc:	e008      	b.n	8008ef0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ede:	f7f8 fa9f 	bl	8001420 <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d901      	bls.n	8008ef0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e086      	b.n	8008ffe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ef0:	4b45      	ldr	r3, [pc, #276]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1f0      	bne.n	8008ede <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008efc:	4b42      	ldr	r3, [pc, #264]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	031b      	lsls	r3, r3, #12
 8008f0a:	493f      	ldr	r1, [pc, #252]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	628b      	str	r3, [r1, #40]	; 0x28
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	3b01      	subs	r3, #1
 8008f16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	025b      	lsls	r3, r3, #9
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	431a      	orrs	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	041b      	lsls	r3, r3, #16
 8008f2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f32:	431a      	orrs	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	061b      	lsls	r3, r3, #24
 8008f3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f40:	4931      	ldr	r1, [pc, #196]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f46:	4b30      	ldr	r3, [pc, #192]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	492d      	ldr	r1, [pc, #180]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f54:	4313      	orrs	r3, r2
 8008f56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f58:	4b2b      	ldr	r3, [pc, #172]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5c:	f023 0220 	bic.w	r2, r3, #32
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	4928      	ldr	r1, [pc, #160]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f6a:	4b27      	ldr	r3, [pc, #156]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6e:	4a26      	ldr	r2, [pc, #152]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f70:	f023 0310 	bic.w	r3, r3, #16
 8008f74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f76:	4b24      	ldr	r3, [pc, #144]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f7a:	4b24      	ldr	r3, [pc, #144]	; (800900c <RCCEx_PLL2_Config+0x160>)
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	69d2      	ldr	r2, [r2, #28]
 8008f82:	00d2      	lsls	r2, r2, #3
 8008f84:	4920      	ldr	r1, [pc, #128]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f8a:	4b1f      	ldr	r3, [pc, #124]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8e:	4a1e      	ldr	r2, [pc, #120]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f90:	f043 0310 	orr.w	r3, r3, #16
 8008f94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d106      	bne.n	8008faa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f9c:	4b1a      	ldr	r3, [pc, #104]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa0:	4a19      	ldr	r2, [pc, #100]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008fa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008fa8:	e00f      	b.n	8008fca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d106      	bne.n	8008fbe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008fb0:	4b15      	ldr	r3, [pc, #84]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb4:	4a14      	ldr	r2, [pc, #80]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008fbc:	e005      	b.n	8008fca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008fbe:	4b12      	ldr	r3, [pc, #72]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc2:	4a11      	ldr	r2, [pc, #68]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008fc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008fc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008fca:	4b0f      	ldr	r3, [pc, #60]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a0e      	ldr	r2, [pc, #56]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008fd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fd6:	f7f8 fa23 	bl	8001420 <HAL_GetTick>
 8008fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fdc:	e008      	b.n	8008ff0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fde:	f7f8 fa1f 	bl	8001420 <HAL_GetTick>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d901      	bls.n	8008ff0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e006      	b.n	8008ffe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ff0:	4b05      	ldr	r3, [pc, #20]	; (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d0f0      	beq.n	8008fde <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	58024400 	.word	0x58024400
 800900c:	ffff0007 	.word	0xffff0007

08009010 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800901e:	4b53      	ldr	r3, [pc, #332]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 8009020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	2b03      	cmp	r3, #3
 8009028:	d101      	bne.n	800902e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e099      	b.n	8009162 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800902e:	4b4f      	ldr	r3, [pc, #316]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a4e      	ldr	r2, [pc, #312]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 8009034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800903a:	f7f8 f9f1 	bl	8001420 <HAL_GetTick>
 800903e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009040:	e008      	b.n	8009054 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009042:	f7f8 f9ed 	bl	8001420 <HAL_GetTick>
 8009046:	4602      	mov	r2, r0
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	2b02      	cmp	r3, #2
 800904e:	d901      	bls.n	8009054 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e086      	b.n	8009162 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009054:	4b45      	ldr	r3, [pc, #276]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1f0      	bne.n	8009042 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009060:	4b42      	ldr	r3, [pc, #264]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 8009062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009064:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	051b      	lsls	r3, r3, #20
 800906e:	493f      	ldr	r1, [pc, #252]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 8009070:	4313      	orrs	r3, r2
 8009072:	628b      	str	r3, [r1, #40]	; 0x28
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	3b01      	subs	r3, #1
 800907a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	3b01      	subs	r3, #1
 8009084:	025b      	lsls	r3, r3, #9
 8009086:	b29b      	uxth	r3, r3
 8009088:	431a      	orrs	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	3b01      	subs	r3, #1
 8009090:	041b      	lsls	r3, r3, #16
 8009092:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009096:	431a      	orrs	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	3b01      	subs	r3, #1
 800909e:	061b      	lsls	r3, r3, #24
 80090a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80090a4:	4931      	ldr	r1, [pc, #196]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80090aa:	4b30      	ldr	r3, [pc, #192]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 80090ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	492d      	ldr	r1, [pc, #180]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80090bc:	4b2b      	ldr	r3, [pc, #172]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 80090be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	4928      	ldr	r1, [pc, #160]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 80090ca:	4313      	orrs	r3, r2
 80090cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80090ce:	4b27      	ldr	r3, [pc, #156]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 80090d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d2:	4a26      	ldr	r2, [pc, #152]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 80090d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80090da:	4b24      	ldr	r3, [pc, #144]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 80090dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090de:	4b24      	ldr	r3, [pc, #144]	; (8009170 <RCCEx_PLL3_Config+0x160>)
 80090e0:	4013      	ands	r3, r2
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	69d2      	ldr	r2, [r2, #28]
 80090e6:	00d2      	lsls	r2, r2, #3
 80090e8:	4920      	ldr	r1, [pc, #128]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80090ee:	4b1f      	ldr	r3, [pc, #124]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 80090f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f2:	4a1e      	ldr	r2, [pc, #120]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 80090f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d106      	bne.n	800910e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009100:	4b1a      	ldr	r3, [pc, #104]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 8009102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009104:	4a19      	ldr	r2, [pc, #100]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 8009106:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800910a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800910c:	e00f      	b.n	800912e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d106      	bne.n	8009122 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009114:	4b15      	ldr	r3, [pc, #84]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 8009116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009118:	4a14      	ldr	r2, [pc, #80]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 800911a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800911e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009120:	e005      	b.n	800912e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009122:	4b12      	ldr	r3, [pc, #72]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 8009124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009126:	4a11      	ldr	r2, [pc, #68]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 8009128:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800912c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800912e:	4b0f      	ldr	r3, [pc, #60]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a0e      	ldr	r2, [pc, #56]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 8009134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800913a:	f7f8 f971 	bl	8001420 <HAL_GetTick>
 800913e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009140:	e008      	b.n	8009154 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009142:	f7f8 f96d 	bl	8001420 <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	2b02      	cmp	r3, #2
 800914e:	d901      	bls.n	8009154 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e006      	b.n	8009162 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009154:	4b05      	ldr	r3, [pc, #20]	; (800916c <RCCEx_PLL3_Config+0x15c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d0f0      	beq.n	8009142 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009160:	7bfb      	ldrb	r3, [r7, #15]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	58024400 	.word	0x58024400
 8009170:	ffff0007 	.word	0xffff0007

08009174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e049      	b.n	800921a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d106      	bne.n	80091a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7f8 f85a 	bl	8001254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2202      	movs	r2, #2
 80091a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	3304      	adds	r3, #4
 80091b0:	4619      	mov	r1, r3
 80091b2:	4610      	mov	r0, r2
 80091b4:	f000 fcd2 	bl	8009b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b01      	cmp	r3, #1
 8009236:	d001      	beq.n	800923c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e04c      	b.n	80092d6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2202      	movs	r2, #2
 8009240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a26      	ldr	r2, [pc, #152]	; (80092e4 <HAL_TIM_Base_Start+0xc0>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d022      	beq.n	8009294 <HAL_TIM_Base_Start+0x70>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009256:	d01d      	beq.n	8009294 <HAL_TIM_Base_Start+0x70>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a22      	ldr	r2, [pc, #136]	; (80092e8 <HAL_TIM_Base_Start+0xc4>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d018      	beq.n	8009294 <HAL_TIM_Base_Start+0x70>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a21      	ldr	r2, [pc, #132]	; (80092ec <HAL_TIM_Base_Start+0xc8>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d013      	beq.n	8009294 <HAL_TIM_Base_Start+0x70>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a1f      	ldr	r2, [pc, #124]	; (80092f0 <HAL_TIM_Base_Start+0xcc>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d00e      	beq.n	8009294 <HAL_TIM_Base_Start+0x70>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a1e      	ldr	r2, [pc, #120]	; (80092f4 <HAL_TIM_Base_Start+0xd0>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d009      	beq.n	8009294 <HAL_TIM_Base_Start+0x70>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a1c      	ldr	r2, [pc, #112]	; (80092f8 <HAL_TIM_Base_Start+0xd4>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d004      	beq.n	8009294 <HAL_TIM_Base_Start+0x70>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a1b      	ldr	r2, [pc, #108]	; (80092fc <HAL_TIM_Base_Start+0xd8>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d115      	bne.n	80092c0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	689a      	ldr	r2, [r3, #8]
 800929a:	4b19      	ldr	r3, [pc, #100]	; (8009300 <HAL_TIM_Base_Start+0xdc>)
 800929c:	4013      	ands	r3, r2
 800929e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2b06      	cmp	r3, #6
 80092a4:	d015      	beq.n	80092d2 <HAL_TIM_Base_Start+0xae>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092ac:	d011      	beq.n	80092d2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f042 0201 	orr.w	r2, r2, #1
 80092bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092be:	e008      	b.n	80092d2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f042 0201 	orr.w	r2, r2, #1
 80092ce:	601a      	str	r2, [r3, #0]
 80092d0:	e000      	b.n	80092d4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3714      	adds	r7, #20
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	40010000 	.word	0x40010000
 80092e8:	40000400 	.word	0x40000400
 80092ec:	40000800 	.word	0x40000800
 80092f0:	40000c00 	.word	0x40000c00
 80092f4:	40010400 	.word	0x40010400
 80092f8:	40001800 	.word	0x40001800
 80092fc:	40014000 	.word	0x40014000
 8009300:	00010007 	.word	0x00010007

08009304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009312:	b2db      	uxtb	r3, r3
 8009314:	2b01      	cmp	r3, #1
 8009316:	d001      	beq.n	800931c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e054      	b.n	80093c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68da      	ldr	r2, [r3, #12]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f042 0201 	orr.w	r2, r2, #1
 8009332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a26      	ldr	r2, [pc, #152]	; (80093d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d022      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009346:	d01d      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a22      	ldr	r2, [pc, #136]	; (80093d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d018      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a21      	ldr	r2, [pc, #132]	; (80093dc <HAL_TIM_Base_Start_IT+0xd8>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d013      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a1f      	ldr	r2, [pc, #124]	; (80093e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d00e      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a1e      	ldr	r2, [pc, #120]	; (80093e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d009      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a1c      	ldr	r2, [pc, #112]	; (80093e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d004      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a1b      	ldr	r2, [pc, #108]	; (80093ec <HAL_TIM_Base_Start_IT+0xe8>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d115      	bne.n	80093b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	689a      	ldr	r2, [r3, #8]
 800938a:	4b19      	ldr	r3, [pc, #100]	; (80093f0 <HAL_TIM_Base_Start_IT+0xec>)
 800938c:	4013      	ands	r3, r2
 800938e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2b06      	cmp	r3, #6
 8009394:	d015      	beq.n	80093c2 <HAL_TIM_Base_Start_IT+0xbe>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800939c:	d011      	beq.n	80093c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f042 0201 	orr.w	r2, r2, #1
 80093ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ae:	e008      	b.n	80093c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f042 0201 	orr.w	r2, r2, #1
 80093be:	601a      	str	r2, [r3, #0]
 80093c0:	e000      	b.n	80093c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	40010000 	.word	0x40010000
 80093d8:	40000400 	.word	0x40000400
 80093dc:	40000800 	.word	0x40000800
 80093e0:	40000c00 	.word	0x40000c00
 80093e4:	40010400 	.word	0x40010400
 80093e8:	40001800 	.word	0x40001800
 80093ec:	40014000 	.word	0x40014000
 80093f0:	00010007 	.word	0x00010007

080093f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e049      	b.n	800949a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d106      	bne.n	8009420 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f841 	bl	80094a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2202      	movs	r2, #2
 8009424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	3304      	adds	r3, #4
 8009430:	4619      	mov	r1, r3
 8009432:	4610      	mov	r0, r2
 8009434:	f000 fb92 	bl	8009b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b083      	sub	sp, #12
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80094aa:	bf00      	nop
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b082      	sub	sp, #8
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	f003 0302 	and.w	r3, r3, #2
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d122      	bne.n	8009512 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	f003 0302 	and.w	r3, r3, #2
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d11b      	bne.n	8009512 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f06f 0202 	mvn.w	r2, #2
 80094e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	f003 0303 	and.w	r3, r3, #3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d003      	beq.n	8009500 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fb11 	bl	8009b20 <HAL_TIM_IC_CaptureCallback>
 80094fe:	e005      	b.n	800950c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fb03 	bl	8009b0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fb14 	bl	8009b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	f003 0304 	and.w	r3, r3, #4
 800951c:	2b04      	cmp	r3, #4
 800951e:	d122      	bne.n	8009566 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	f003 0304 	and.w	r3, r3, #4
 800952a:	2b04      	cmp	r3, #4
 800952c:	d11b      	bne.n	8009566 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f06f 0204 	mvn.w	r2, #4
 8009536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2202      	movs	r2, #2
 800953c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009548:	2b00      	cmp	r3, #0
 800954a:	d003      	beq.n	8009554 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fae7 	bl	8009b20 <HAL_TIM_IC_CaptureCallback>
 8009552:	e005      	b.n	8009560 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fad9 	bl	8009b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 faea 	bl	8009b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	f003 0308 	and.w	r3, r3, #8
 8009570:	2b08      	cmp	r3, #8
 8009572:	d122      	bne.n	80095ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	f003 0308 	and.w	r3, r3, #8
 800957e:	2b08      	cmp	r3, #8
 8009580:	d11b      	bne.n	80095ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f06f 0208 	mvn.w	r2, #8
 800958a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2204      	movs	r2, #4
 8009590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	f003 0303 	and.w	r3, r3, #3
 800959c:	2b00      	cmp	r3, #0
 800959e:	d003      	beq.n	80095a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fabd 	bl	8009b20 <HAL_TIM_IC_CaptureCallback>
 80095a6:	e005      	b.n	80095b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 faaf 	bl	8009b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fac0 	bl	8009b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	f003 0310 	and.w	r3, r3, #16
 80095c4:	2b10      	cmp	r3, #16
 80095c6:	d122      	bne.n	800960e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	f003 0310 	and.w	r3, r3, #16
 80095d2:	2b10      	cmp	r3, #16
 80095d4:	d11b      	bne.n	800960e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f06f 0210 	mvn.w	r2, #16
 80095de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2208      	movs	r2, #8
 80095e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	69db      	ldr	r3, [r3, #28]
 80095ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d003      	beq.n	80095fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fa93 	bl	8009b20 <HAL_TIM_IC_CaptureCallback>
 80095fa:	e005      	b.n	8009608 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 fa85 	bl	8009b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fa96 	bl	8009b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	f003 0301 	and.w	r3, r3, #1
 8009618:	2b01      	cmp	r3, #1
 800961a:	d10e      	bne.n	800963a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	2b01      	cmp	r3, #1
 8009628:	d107      	bne.n	800963a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f06f 0201 	mvn.w	r2, #1
 8009632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7f7 fb51 	bl	8000cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009644:	2b80      	cmp	r3, #128	; 0x80
 8009646:	d10e      	bne.n	8009666 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009652:	2b80      	cmp	r3, #128	; 0x80
 8009654:	d107      	bne.n	8009666 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800965e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 ff9f 	bl	800a5a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009674:	d10e      	bne.n	8009694 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009680:	2b80      	cmp	r3, #128	; 0x80
 8009682:	d107      	bne.n	8009694 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800968c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 ff92 	bl	800a5b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969e:	2b40      	cmp	r3, #64	; 0x40
 80096a0:	d10e      	bne.n	80096c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ac:	2b40      	cmp	r3, #64	; 0x40
 80096ae:	d107      	bne.n	80096c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80096b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fa44 	bl	8009b48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	f003 0320 	and.w	r3, r3, #32
 80096ca:	2b20      	cmp	r3, #32
 80096cc:	d10e      	bne.n	80096ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	f003 0320 	and.w	r3, r3, #32
 80096d8:	2b20      	cmp	r3, #32
 80096da:	d107      	bne.n	80096ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f06f 0220 	mvn.w	r2, #32
 80096e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 ff52 	bl	800a590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800970a:	2b01      	cmp	r3, #1
 800970c:	d101      	bne.n	8009712 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800970e:	2302      	movs	r3, #2
 8009710:	e0ff      	b.n	8009912 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2b14      	cmp	r3, #20
 800971e:	f200 80f0 	bhi.w	8009902 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009722:	a201      	add	r2, pc, #4	; (adr r2, 8009728 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009728:	0800977d 	.word	0x0800977d
 800972c:	08009903 	.word	0x08009903
 8009730:	08009903 	.word	0x08009903
 8009734:	08009903 	.word	0x08009903
 8009738:	080097bd 	.word	0x080097bd
 800973c:	08009903 	.word	0x08009903
 8009740:	08009903 	.word	0x08009903
 8009744:	08009903 	.word	0x08009903
 8009748:	080097ff 	.word	0x080097ff
 800974c:	08009903 	.word	0x08009903
 8009750:	08009903 	.word	0x08009903
 8009754:	08009903 	.word	0x08009903
 8009758:	0800983f 	.word	0x0800983f
 800975c:	08009903 	.word	0x08009903
 8009760:	08009903 	.word	0x08009903
 8009764:	08009903 	.word	0x08009903
 8009768:	08009881 	.word	0x08009881
 800976c:	08009903 	.word	0x08009903
 8009770:	08009903 	.word	0x08009903
 8009774:	08009903 	.word	0x08009903
 8009778:	080098c1 	.word	0x080098c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68b9      	ldr	r1, [r7, #8]
 8009782:	4618      	mov	r0, r3
 8009784:	f000 fa84 	bl	8009c90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	699a      	ldr	r2, [r3, #24]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f042 0208 	orr.w	r2, r2, #8
 8009796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	699a      	ldr	r2, [r3, #24]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f022 0204 	bic.w	r2, r2, #4
 80097a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6999      	ldr	r1, [r3, #24]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	691a      	ldr	r2, [r3, #16]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	430a      	orrs	r2, r1
 80097b8:	619a      	str	r2, [r3, #24]
      break;
 80097ba:	e0a5      	b.n	8009908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68b9      	ldr	r1, [r7, #8]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 faf4 	bl	8009db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	699a      	ldr	r2, [r3, #24]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	699a      	ldr	r2, [r3, #24]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6999      	ldr	r1, [r3, #24]
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	021a      	lsls	r2, r3, #8
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	430a      	orrs	r2, r1
 80097fa:	619a      	str	r2, [r3, #24]
      break;
 80097fc:	e084      	b.n	8009908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68b9      	ldr	r1, [r7, #8]
 8009804:	4618      	mov	r0, r3
 8009806:	f000 fb5d 	bl	8009ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	69da      	ldr	r2, [r3, #28]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f042 0208 	orr.w	r2, r2, #8
 8009818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	69da      	ldr	r2, [r3, #28]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f022 0204 	bic.w	r2, r2, #4
 8009828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	69d9      	ldr	r1, [r3, #28]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	691a      	ldr	r2, [r3, #16]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	430a      	orrs	r2, r1
 800983a:	61da      	str	r2, [r3, #28]
      break;
 800983c:	e064      	b.n	8009908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68b9      	ldr	r1, [r7, #8]
 8009844:	4618      	mov	r0, r3
 8009846:	f000 fbc5 	bl	8009fd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	69da      	ldr	r2, [r3, #28]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	69da      	ldr	r2, [r3, #28]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	69d9      	ldr	r1, [r3, #28]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	021a      	lsls	r2, r3, #8
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	430a      	orrs	r2, r1
 800987c:	61da      	str	r2, [r3, #28]
      break;
 800987e:	e043      	b.n	8009908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68b9      	ldr	r1, [r7, #8]
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fc0e 	bl	800a0a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0208 	orr.w	r2, r2, #8
 800989a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f022 0204 	bic.w	r2, r2, #4
 80098aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	691a      	ldr	r2, [r3, #16]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80098be:	e023      	b.n	8009908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68b9      	ldr	r1, [r7, #8]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 fc52 	bl	800a170 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	021a      	lsls	r2, r3, #8
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	430a      	orrs	r2, r1
 80098fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009900:	e002      	b.n	8009908 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	75fb      	strb	r3, [r7, #23]
      break;
 8009906:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009910:	7dfb      	ldrb	r3, [r7, #23]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3718      	adds	r7, #24
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop

0800991c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009930:	2b01      	cmp	r3, #1
 8009932:	d101      	bne.n	8009938 <HAL_TIM_ConfigClockSource+0x1c>
 8009934:	2302      	movs	r3, #2
 8009936:	e0dc      	b.n	8009af2 <HAL_TIM_ConfigClockSource+0x1d6>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2202      	movs	r2, #2
 8009944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	4b6a      	ldr	r3, [pc, #424]	; (8009afc <HAL_TIM_ConfigClockSource+0x1e0>)
 8009954:	4013      	ands	r3, r2
 8009956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800995e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a64      	ldr	r2, [pc, #400]	; (8009b00 <HAL_TIM_ConfigClockSource+0x1e4>)
 800996e:	4293      	cmp	r3, r2
 8009970:	f000 80a9 	beq.w	8009ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009974:	4a62      	ldr	r2, [pc, #392]	; (8009b00 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009976:	4293      	cmp	r3, r2
 8009978:	f200 80ae 	bhi.w	8009ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 800997c:	4a61      	ldr	r2, [pc, #388]	; (8009b04 <HAL_TIM_ConfigClockSource+0x1e8>)
 800997e:	4293      	cmp	r3, r2
 8009980:	f000 80a1 	beq.w	8009ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009984:	4a5f      	ldr	r2, [pc, #380]	; (8009b04 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009986:	4293      	cmp	r3, r2
 8009988:	f200 80a6 	bhi.w	8009ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 800998c:	4a5e      	ldr	r2, [pc, #376]	; (8009b08 <HAL_TIM_ConfigClockSource+0x1ec>)
 800998e:	4293      	cmp	r3, r2
 8009990:	f000 8099 	beq.w	8009ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009994:	4a5c      	ldr	r2, [pc, #368]	; (8009b08 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009996:	4293      	cmp	r3, r2
 8009998:	f200 809e 	bhi.w	8009ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 800999c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80099a0:	f000 8091 	beq.w	8009ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 80099a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80099a8:	f200 8096 	bhi.w	8009ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 80099ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099b0:	f000 8089 	beq.w	8009ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 80099b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099b8:	f200 808e 	bhi.w	8009ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 80099bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099c0:	d03e      	beq.n	8009a40 <HAL_TIM_ConfigClockSource+0x124>
 80099c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099c6:	f200 8087 	bhi.w	8009ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 80099ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ce:	f000 8086 	beq.w	8009ade <HAL_TIM_ConfigClockSource+0x1c2>
 80099d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d6:	d87f      	bhi.n	8009ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 80099d8:	2b70      	cmp	r3, #112	; 0x70
 80099da:	d01a      	beq.n	8009a12 <HAL_TIM_ConfigClockSource+0xf6>
 80099dc:	2b70      	cmp	r3, #112	; 0x70
 80099de:	d87b      	bhi.n	8009ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 80099e0:	2b60      	cmp	r3, #96	; 0x60
 80099e2:	d050      	beq.n	8009a86 <HAL_TIM_ConfigClockSource+0x16a>
 80099e4:	2b60      	cmp	r3, #96	; 0x60
 80099e6:	d877      	bhi.n	8009ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 80099e8:	2b50      	cmp	r3, #80	; 0x50
 80099ea:	d03c      	beq.n	8009a66 <HAL_TIM_ConfigClockSource+0x14a>
 80099ec:	2b50      	cmp	r3, #80	; 0x50
 80099ee:	d873      	bhi.n	8009ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 80099f0:	2b40      	cmp	r3, #64	; 0x40
 80099f2:	d058      	beq.n	8009aa6 <HAL_TIM_ConfigClockSource+0x18a>
 80099f4:	2b40      	cmp	r3, #64	; 0x40
 80099f6:	d86f      	bhi.n	8009ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 80099f8:	2b30      	cmp	r3, #48	; 0x30
 80099fa:	d064      	beq.n	8009ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 80099fc:	2b30      	cmp	r3, #48	; 0x30
 80099fe:	d86b      	bhi.n	8009ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a00:	2b20      	cmp	r3, #32
 8009a02:	d060      	beq.n	8009ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a04:	2b20      	cmp	r3, #32
 8009a06:	d867      	bhi.n	8009ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d05c      	beq.n	8009ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a0c:	2b10      	cmp	r3, #16
 8009a0e:	d05a      	beq.n	8009ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a10:	e062      	b.n	8009ad8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a22:	f000 fc89 	bl	800a338 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	609a      	str	r2, [r3, #8]
      break;
 8009a3e:	e04f      	b.n	8009ae0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a50:	f000 fc72 	bl	800a338 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	689a      	ldr	r2, [r3, #8]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a62:	609a      	str	r2, [r3, #8]
      break;
 8009a64:	e03c      	b.n	8009ae0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a72:	461a      	mov	r2, r3
 8009a74:	f000 fbe2 	bl	800a23c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2150      	movs	r1, #80	; 0x50
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 fc3c 	bl	800a2fc <TIM_ITRx_SetConfig>
      break;
 8009a84:	e02c      	b.n	8009ae0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a92:	461a      	mov	r2, r3
 8009a94:	f000 fc01 	bl	800a29a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2160      	movs	r1, #96	; 0x60
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 fc2c 	bl	800a2fc <TIM_ITRx_SetConfig>
      break;
 8009aa4:	e01c      	b.n	8009ae0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	f000 fbc2 	bl	800a23c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2140      	movs	r1, #64	; 0x40
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f000 fc1c 	bl	800a2fc <TIM_ITRx_SetConfig>
      break;
 8009ac4:	e00c      	b.n	8009ae0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4619      	mov	r1, r3
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	f000 fc13 	bl	800a2fc <TIM_ITRx_SetConfig>
      break;
 8009ad6:	e003      	b.n	8009ae0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	73fb      	strb	r3, [r7, #15]
      break;
 8009adc:	e000      	b.n	8009ae0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009ade:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	ffceff88 	.word	0xffceff88
 8009b00:	00100040 	.word	0x00100040
 8009b04:	00100030 	.word	0x00100030
 8009b08:	00100020 	.word	0x00100020

08009b0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a40      	ldr	r2, [pc, #256]	; (8009c70 <TIM_Base_SetConfig+0x114>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d013      	beq.n	8009b9c <TIM_Base_SetConfig+0x40>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b7a:	d00f      	beq.n	8009b9c <TIM_Base_SetConfig+0x40>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a3d      	ldr	r2, [pc, #244]	; (8009c74 <TIM_Base_SetConfig+0x118>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d00b      	beq.n	8009b9c <TIM_Base_SetConfig+0x40>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a3c      	ldr	r2, [pc, #240]	; (8009c78 <TIM_Base_SetConfig+0x11c>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d007      	beq.n	8009b9c <TIM_Base_SetConfig+0x40>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a3b      	ldr	r2, [pc, #236]	; (8009c7c <TIM_Base_SetConfig+0x120>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d003      	beq.n	8009b9c <TIM_Base_SetConfig+0x40>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a3a      	ldr	r2, [pc, #232]	; (8009c80 <TIM_Base_SetConfig+0x124>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d108      	bne.n	8009bae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a2f      	ldr	r2, [pc, #188]	; (8009c70 <TIM_Base_SetConfig+0x114>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d01f      	beq.n	8009bf6 <TIM_Base_SetConfig+0x9a>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bbc:	d01b      	beq.n	8009bf6 <TIM_Base_SetConfig+0x9a>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4a2c      	ldr	r2, [pc, #176]	; (8009c74 <TIM_Base_SetConfig+0x118>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d017      	beq.n	8009bf6 <TIM_Base_SetConfig+0x9a>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a2b      	ldr	r2, [pc, #172]	; (8009c78 <TIM_Base_SetConfig+0x11c>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d013      	beq.n	8009bf6 <TIM_Base_SetConfig+0x9a>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4a2a      	ldr	r2, [pc, #168]	; (8009c7c <TIM_Base_SetConfig+0x120>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d00f      	beq.n	8009bf6 <TIM_Base_SetConfig+0x9a>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a29      	ldr	r2, [pc, #164]	; (8009c80 <TIM_Base_SetConfig+0x124>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d00b      	beq.n	8009bf6 <TIM_Base_SetConfig+0x9a>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4a28      	ldr	r2, [pc, #160]	; (8009c84 <TIM_Base_SetConfig+0x128>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d007      	beq.n	8009bf6 <TIM_Base_SetConfig+0x9a>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4a27      	ldr	r2, [pc, #156]	; (8009c88 <TIM_Base_SetConfig+0x12c>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d003      	beq.n	8009bf6 <TIM_Base_SetConfig+0x9a>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a26      	ldr	r2, [pc, #152]	; (8009c8c <TIM_Base_SetConfig+0x130>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d108      	bne.n	8009c08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	689a      	ldr	r2, [r3, #8]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a10      	ldr	r2, [pc, #64]	; (8009c70 <TIM_Base_SetConfig+0x114>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d00f      	beq.n	8009c54 <TIM_Base_SetConfig+0xf8>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a12      	ldr	r2, [pc, #72]	; (8009c80 <TIM_Base_SetConfig+0x124>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d00b      	beq.n	8009c54 <TIM_Base_SetConfig+0xf8>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a11      	ldr	r2, [pc, #68]	; (8009c84 <TIM_Base_SetConfig+0x128>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d007      	beq.n	8009c54 <TIM_Base_SetConfig+0xf8>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a10      	ldr	r2, [pc, #64]	; (8009c88 <TIM_Base_SetConfig+0x12c>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d003      	beq.n	8009c54 <TIM_Base_SetConfig+0xf8>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a0f      	ldr	r2, [pc, #60]	; (8009c8c <TIM_Base_SetConfig+0x130>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d103      	bne.n	8009c5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	691a      	ldr	r2, [r3, #16]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	615a      	str	r2, [r3, #20]
}
 8009c62:	bf00      	nop
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	40010000 	.word	0x40010000
 8009c74:	40000400 	.word	0x40000400
 8009c78:	40000800 	.word	0x40000800
 8009c7c:	40000c00 	.word	0x40000c00
 8009c80:	40010400 	.word	0x40010400
 8009c84:	40014000 	.word	0x40014000
 8009c88:	40014400 	.word	0x40014400
 8009c8c:	40014800 	.word	0x40014800

08009c90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b087      	sub	sp, #28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a1b      	ldr	r3, [r3, #32]
 8009c9e:	f023 0201 	bic.w	r2, r3, #1
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	4b37      	ldr	r3, [pc, #220]	; (8009d98 <TIM_OC1_SetConfig+0x108>)
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f023 0303 	bic.w	r3, r3, #3
 8009cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f023 0302 	bic.w	r3, r3, #2
 8009cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a2d      	ldr	r2, [pc, #180]	; (8009d9c <TIM_OC1_SetConfig+0x10c>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d00f      	beq.n	8009d0c <TIM_OC1_SetConfig+0x7c>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a2c      	ldr	r2, [pc, #176]	; (8009da0 <TIM_OC1_SetConfig+0x110>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d00b      	beq.n	8009d0c <TIM_OC1_SetConfig+0x7c>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a2b      	ldr	r2, [pc, #172]	; (8009da4 <TIM_OC1_SetConfig+0x114>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d007      	beq.n	8009d0c <TIM_OC1_SetConfig+0x7c>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a2a      	ldr	r2, [pc, #168]	; (8009da8 <TIM_OC1_SetConfig+0x118>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d003      	beq.n	8009d0c <TIM_OC1_SetConfig+0x7c>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a29      	ldr	r2, [pc, #164]	; (8009dac <TIM_OC1_SetConfig+0x11c>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d10c      	bne.n	8009d26 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	f023 0308 	bic.w	r3, r3, #8
 8009d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	697a      	ldr	r2, [r7, #20]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	f023 0304 	bic.w	r3, r3, #4
 8009d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a1c      	ldr	r2, [pc, #112]	; (8009d9c <TIM_OC1_SetConfig+0x10c>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d00f      	beq.n	8009d4e <TIM_OC1_SetConfig+0xbe>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a1b      	ldr	r2, [pc, #108]	; (8009da0 <TIM_OC1_SetConfig+0x110>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d00b      	beq.n	8009d4e <TIM_OC1_SetConfig+0xbe>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a1a      	ldr	r2, [pc, #104]	; (8009da4 <TIM_OC1_SetConfig+0x114>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d007      	beq.n	8009d4e <TIM_OC1_SetConfig+0xbe>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a19      	ldr	r2, [pc, #100]	; (8009da8 <TIM_OC1_SetConfig+0x118>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d003      	beq.n	8009d4e <TIM_OC1_SetConfig+0xbe>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a18      	ldr	r2, [pc, #96]	; (8009dac <TIM_OC1_SetConfig+0x11c>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d111      	bne.n	8009d72 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	695b      	ldr	r3, [r3, #20]
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	699b      	ldr	r3, [r3, #24]
 8009d6c:	693a      	ldr	r2, [r7, #16]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	693a      	ldr	r2, [r7, #16]
 8009d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	685a      	ldr	r2, [r3, #4]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	621a      	str	r2, [r3, #32]
}
 8009d8c:	bf00      	nop
 8009d8e:	371c      	adds	r7, #28
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr
 8009d98:	fffeff8f 	.word	0xfffeff8f
 8009d9c:	40010000 	.word	0x40010000
 8009da0:	40010400 	.word	0x40010400
 8009da4:	40014000 	.word	0x40014000
 8009da8:	40014400 	.word	0x40014400
 8009dac:	40014800 	.word	0x40014800

08009db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b087      	sub	sp, #28
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a1b      	ldr	r3, [r3, #32]
 8009dbe:	f023 0210 	bic.w	r2, r3, #16
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	4b34      	ldr	r3, [pc, #208]	; (8009eac <TIM_OC2_SetConfig+0xfc>)
 8009ddc:	4013      	ands	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	021b      	lsls	r3, r3, #8
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	f023 0320 	bic.w	r3, r3, #32
 8009dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	011b      	lsls	r3, r3, #4
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a29      	ldr	r2, [pc, #164]	; (8009eb0 <TIM_OC2_SetConfig+0x100>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d003      	beq.n	8009e18 <TIM_OC2_SetConfig+0x68>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a28      	ldr	r2, [pc, #160]	; (8009eb4 <TIM_OC2_SetConfig+0x104>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d10d      	bne.n	8009e34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	011b      	lsls	r3, r3, #4
 8009e26:	697a      	ldr	r2, [r7, #20]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a1e      	ldr	r2, [pc, #120]	; (8009eb0 <TIM_OC2_SetConfig+0x100>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d00f      	beq.n	8009e5c <TIM_OC2_SetConfig+0xac>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a1d      	ldr	r2, [pc, #116]	; (8009eb4 <TIM_OC2_SetConfig+0x104>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d00b      	beq.n	8009e5c <TIM_OC2_SetConfig+0xac>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a1c      	ldr	r2, [pc, #112]	; (8009eb8 <TIM_OC2_SetConfig+0x108>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d007      	beq.n	8009e5c <TIM_OC2_SetConfig+0xac>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a1b      	ldr	r2, [pc, #108]	; (8009ebc <TIM_OC2_SetConfig+0x10c>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d003      	beq.n	8009e5c <TIM_OC2_SetConfig+0xac>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a1a      	ldr	r2, [pc, #104]	; (8009ec0 <TIM_OC2_SetConfig+0x110>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d113      	bne.n	8009e84 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	4313      	orrs	r3, r2
 8009e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	699b      	ldr	r3, [r3, #24]
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	621a      	str	r2, [r3, #32]
}
 8009e9e:	bf00      	nop
 8009ea0:	371c      	adds	r7, #28
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	feff8fff 	.word	0xfeff8fff
 8009eb0:	40010000 	.word	0x40010000
 8009eb4:	40010400 	.word	0x40010400
 8009eb8:	40014000 	.word	0x40014000
 8009ebc:	40014400 	.word	0x40014400
 8009ec0:	40014800 	.word	0x40014800

08009ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b087      	sub	sp, #28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a1b      	ldr	r3, [r3, #32]
 8009ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	69db      	ldr	r3, [r3, #28]
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	4b33      	ldr	r3, [pc, #204]	; (8009fbc <TIM_OC3_SetConfig+0xf8>)
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f023 0303 	bic.w	r3, r3, #3
 8009efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	021b      	lsls	r3, r3, #8
 8009f14:	697a      	ldr	r2, [r7, #20]
 8009f16:	4313      	orrs	r3, r2
 8009f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a28      	ldr	r2, [pc, #160]	; (8009fc0 <TIM_OC3_SetConfig+0xfc>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d003      	beq.n	8009f2a <TIM_OC3_SetConfig+0x66>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a27      	ldr	r2, [pc, #156]	; (8009fc4 <TIM_OC3_SetConfig+0x100>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d10d      	bne.n	8009f46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	021b      	lsls	r3, r3, #8
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a1d      	ldr	r2, [pc, #116]	; (8009fc0 <TIM_OC3_SetConfig+0xfc>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d00f      	beq.n	8009f6e <TIM_OC3_SetConfig+0xaa>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a1c      	ldr	r2, [pc, #112]	; (8009fc4 <TIM_OC3_SetConfig+0x100>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d00b      	beq.n	8009f6e <TIM_OC3_SetConfig+0xaa>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a1b      	ldr	r2, [pc, #108]	; (8009fc8 <TIM_OC3_SetConfig+0x104>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d007      	beq.n	8009f6e <TIM_OC3_SetConfig+0xaa>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a1a      	ldr	r2, [pc, #104]	; (8009fcc <TIM_OC3_SetConfig+0x108>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d003      	beq.n	8009f6e <TIM_OC3_SetConfig+0xaa>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	4a19      	ldr	r2, [pc, #100]	; (8009fd0 <TIM_OC3_SetConfig+0x10c>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d113      	bne.n	8009f96 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	695b      	ldr	r3, [r3, #20]
 8009f82:	011b      	lsls	r3, r3, #4
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	011b      	lsls	r3, r3, #4
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	693a      	ldr	r2, [r7, #16]
 8009f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	621a      	str	r2, [r3, #32]
}
 8009fb0:	bf00      	nop
 8009fb2:	371c      	adds	r7, #28
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	fffeff8f 	.word	0xfffeff8f
 8009fc0:	40010000 	.word	0x40010000
 8009fc4:	40010400 	.word	0x40010400
 8009fc8:	40014000 	.word	0x40014000
 8009fcc:	40014400 	.word	0x40014400
 8009fd0:	40014800 	.word	0x40014800

08009fd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a1b      	ldr	r3, [r3, #32]
 8009fe2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a1b      	ldr	r3, [r3, #32]
 8009fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	69db      	ldr	r3, [r3, #28]
 8009ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	4b24      	ldr	r3, [pc, #144]	; (800a090 <TIM_OC4_SetConfig+0xbc>)
 800a000:	4013      	ands	r3, r2
 800a002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a00a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	021b      	lsls	r3, r3, #8
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	4313      	orrs	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a01e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	031b      	lsls	r3, r3, #12
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	4313      	orrs	r3, r2
 800a02a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a19      	ldr	r2, [pc, #100]	; (800a094 <TIM_OC4_SetConfig+0xc0>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d00f      	beq.n	800a054 <TIM_OC4_SetConfig+0x80>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a18      	ldr	r2, [pc, #96]	; (800a098 <TIM_OC4_SetConfig+0xc4>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d00b      	beq.n	800a054 <TIM_OC4_SetConfig+0x80>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a17      	ldr	r2, [pc, #92]	; (800a09c <TIM_OC4_SetConfig+0xc8>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d007      	beq.n	800a054 <TIM_OC4_SetConfig+0x80>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a16      	ldr	r2, [pc, #88]	; (800a0a0 <TIM_OC4_SetConfig+0xcc>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d003      	beq.n	800a054 <TIM_OC4_SetConfig+0x80>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a15      	ldr	r2, [pc, #84]	; (800a0a4 <TIM_OC4_SetConfig+0xd0>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d109      	bne.n	800a068 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a05a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	695b      	ldr	r3, [r3, #20]
 800a060:	019b      	lsls	r3, r3, #6
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	4313      	orrs	r3, r2
 800a066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	621a      	str	r2, [r3, #32]
}
 800a082:	bf00      	nop
 800a084:	371c      	adds	r7, #28
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	feff8fff 	.word	0xfeff8fff
 800a094:	40010000 	.word	0x40010000
 800a098:	40010400 	.word	0x40010400
 800a09c:	40014000 	.word	0x40014000
 800a0a0:	40014400 	.word	0x40014400
 800a0a4:	40014800 	.word	0x40014800

0800a0a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a1b      	ldr	r3, [r3, #32]
 800a0b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	4b21      	ldr	r3, [pc, #132]	; (800a158 <TIM_OC5_SetConfig+0xb0>)
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a0e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	041b      	lsls	r3, r3, #16
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a18      	ldr	r2, [pc, #96]	; (800a15c <TIM_OC5_SetConfig+0xb4>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d00f      	beq.n	800a11e <TIM_OC5_SetConfig+0x76>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a17      	ldr	r2, [pc, #92]	; (800a160 <TIM_OC5_SetConfig+0xb8>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d00b      	beq.n	800a11e <TIM_OC5_SetConfig+0x76>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a16      	ldr	r2, [pc, #88]	; (800a164 <TIM_OC5_SetConfig+0xbc>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d007      	beq.n	800a11e <TIM_OC5_SetConfig+0x76>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a15      	ldr	r2, [pc, #84]	; (800a168 <TIM_OC5_SetConfig+0xc0>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d003      	beq.n	800a11e <TIM_OC5_SetConfig+0x76>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a14      	ldr	r2, [pc, #80]	; (800a16c <TIM_OC5_SetConfig+0xc4>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d109      	bne.n	800a132 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a124:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	695b      	ldr	r3, [r3, #20]
 800a12a:	021b      	lsls	r3, r3, #8
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	4313      	orrs	r3, r2
 800a130:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	685a      	ldr	r2, [r3, #4]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	621a      	str	r2, [r3, #32]
}
 800a14c:	bf00      	nop
 800a14e:	371c      	adds	r7, #28
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	fffeff8f 	.word	0xfffeff8f
 800a15c:	40010000 	.word	0x40010000
 800a160:	40010400 	.word	0x40010400
 800a164:	40014000 	.word	0x40014000
 800a168:	40014400 	.word	0x40014400
 800a16c:	40014800 	.word	0x40014800

0800a170 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a170:	b480      	push	{r7}
 800a172:	b087      	sub	sp, #28
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a1b      	ldr	r3, [r3, #32]
 800a17e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a1b      	ldr	r3, [r3, #32]
 800a18a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	4b22      	ldr	r3, [pc, #136]	; (800a224 <TIM_OC6_SetConfig+0xb4>)
 800a19c:	4013      	ands	r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	021b      	lsls	r3, r3, #8
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a1b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	051b      	lsls	r3, r3, #20
 800a1ba:	693a      	ldr	r2, [r7, #16]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a19      	ldr	r2, [pc, #100]	; (800a228 <TIM_OC6_SetConfig+0xb8>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d00f      	beq.n	800a1e8 <TIM_OC6_SetConfig+0x78>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a18      	ldr	r2, [pc, #96]	; (800a22c <TIM_OC6_SetConfig+0xbc>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d00b      	beq.n	800a1e8 <TIM_OC6_SetConfig+0x78>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a17      	ldr	r2, [pc, #92]	; (800a230 <TIM_OC6_SetConfig+0xc0>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d007      	beq.n	800a1e8 <TIM_OC6_SetConfig+0x78>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a16      	ldr	r2, [pc, #88]	; (800a234 <TIM_OC6_SetConfig+0xc4>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d003      	beq.n	800a1e8 <TIM_OC6_SetConfig+0x78>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a15      	ldr	r2, [pc, #84]	; (800a238 <TIM_OC6_SetConfig+0xc8>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d109      	bne.n	800a1fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	029b      	lsls	r3, r3, #10
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	621a      	str	r2, [r3, #32]
}
 800a216:	bf00      	nop
 800a218:	371c      	adds	r7, #28
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	feff8fff 	.word	0xfeff8fff
 800a228:	40010000 	.word	0x40010000
 800a22c:	40010400 	.word	0x40010400
 800a230:	40014000 	.word	0x40014000
 800a234:	40014400 	.word	0x40014400
 800a238:	40014800 	.word	0x40014800

0800a23c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b087      	sub	sp, #28
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6a1b      	ldr	r3, [r3, #32]
 800a24c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	f023 0201 	bic.w	r2, r3, #1
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	011b      	lsls	r3, r3, #4
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	4313      	orrs	r3, r2
 800a270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f023 030a 	bic.w	r3, r3, #10
 800a278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a27a:	697a      	ldr	r2, [r7, #20]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	4313      	orrs	r3, r2
 800a280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	621a      	str	r2, [r3, #32]
}
 800a28e:	bf00      	nop
 800a290:	371c      	adds	r7, #28
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr

0800a29a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a29a:	b480      	push	{r7}
 800a29c:	b087      	sub	sp, #28
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	60f8      	str	r0, [r7, #12]
 800a2a2:	60b9      	str	r1, [r7, #8]
 800a2a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	f023 0210 	bic.w	r2, r3, #16
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a2c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	031b      	lsls	r3, r3, #12
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a2d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	011b      	lsls	r3, r3, #4
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	621a      	str	r2, [r3, #32]
}
 800a2ee:	bf00      	nop
 800a2f0:	371c      	adds	r7, #28
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
	...

0800a2fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	4b09      	ldr	r3, [pc, #36]	; (800a334 <TIM_ITRx_SetConfig+0x38>)
 800a310:	4013      	ands	r3, r2
 800a312:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	4313      	orrs	r3, r2
 800a31a:	f043 0307 	orr.w	r3, r3, #7
 800a31e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	609a      	str	r2, [r3, #8]
}
 800a326:	bf00      	nop
 800a328:	3714      	adds	r7, #20
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	ffcfff8f 	.word	0xffcfff8f

0800a338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a338:	b480      	push	{r7}
 800a33a:	b087      	sub	sp, #28
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	607a      	str	r2, [r7, #4]
 800a344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	021a      	lsls	r2, r3, #8
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	431a      	orrs	r2, r3
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	4313      	orrs	r3, r2
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	4313      	orrs	r3, r2
 800a364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	697a      	ldr	r2, [r7, #20]
 800a36a:	609a      	str	r2, [r3, #8]
}
 800a36c:	bf00      	nop
 800a36e:	371c      	adds	r7, #28
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d101      	bne.n	800a390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a38c:	2302      	movs	r3, #2
 800a38e:	e06d      	b.n	800a46c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2202      	movs	r2, #2
 800a39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a30      	ldr	r2, [pc, #192]	; (800a478 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d004      	beq.n	800a3c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a2f      	ldr	r2, [pc, #188]	; (800a47c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d108      	bne.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a3ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a20      	ldr	r2, [pc, #128]	; (800a478 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d022      	beq.n	800a440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a402:	d01d      	beq.n	800a440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a1d      	ldr	r2, [pc, #116]	; (800a480 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d018      	beq.n	800a440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a1c      	ldr	r2, [pc, #112]	; (800a484 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d013      	beq.n	800a440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a1a      	ldr	r2, [pc, #104]	; (800a488 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d00e      	beq.n	800a440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a15      	ldr	r2, [pc, #84]	; (800a47c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d009      	beq.n	800a440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a16      	ldr	r2, [pc, #88]	; (800a48c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d004      	beq.n	800a440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a15      	ldr	r2, [pc, #84]	; (800a490 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d10c      	bne.n	800a45a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a446:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	4313      	orrs	r3, r2
 800a450:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	40010000 	.word	0x40010000
 800a47c:	40010400 	.word	0x40010400
 800a480:	40000400 	.word	0x40000400
 800a484:	40000800 	.word	0x40000800
 800a488:	40000c00 	.word	0x40000c00
 800a48c:	40001800 	.word	0x40001800
 800a490:	40014000 	.word	0x40014000

0800a494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d101      	bne.n	800a4b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a4ac:	2302      	movs	r3, #2
 800a4ae:	e065      	b.n	800a57c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	4313      	orrs	r3, r2
 800a50a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a516:	4313      	orrs	r3, r2
 800a518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	699b      	ldr	r3, [r3, #24]
 800a524:	041b      	lsls	r3, r3, #16
 800a526:	4313      	orrs	r3, r2
 800a528:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a16      	ldr	r2, [pc, #88]	; (800a588 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d004      	beq.n	800a53e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a14      	ldr	r2, [pc, #80]	; (800a58c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d115      	bne.n	800a56a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a548:	051b      	lsls	r3, r3, #20
 800a54a:	4313      	orrs	r3, r2
 800a54c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	69db      	ldr	r3, [r3, #28]
 800a558:	4313      	orrs	r3, r2
 800a55a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	4313      	orrs	r3, r2
 800a568:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	40010000 	.word	0x40010000
 800a58c:	40010400 	.word	0x40010400

0800a590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <__NVIC_SetPriority>:
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	6039      	str	r1, [r7, #0]
 800a5d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a5d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	db0a      	blt.n	800a5f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	490c      	ldr	r1, [pc, #48]	; (800a618 <__NVIC_SetPriority+0x4c>)
 800a5e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a5ea:	0112      	lsls	r2, r2, #4
 800a5ec:	b2d2      	uxtb	r2, r2
 800a5ee:	440b      	add	r3, r1
 800a5f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a5f4:	e00a      	b.n	800a60c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	4908      	ldr	r1, [pc, #32]	; (800a61c <__NVIC_SetPriority+0x50>)
 800a5fc:	88fb      	ldrh	r3, [r7, #6]
 800a5fe:	f003 030f 	and.w	r3, r3, #15
 800a602:	3b04      	subs	r3, #4
 800a604:	0112      	lsls	r2, r2, #4
 800a606:	b2d2      	uxtb	r2, r2
 800a608:	440b      	add	r3, r1
 800a60a:	761a      	strb	r2, [r3, #24]
}
 800a60c:	bf00      	nop
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr
 800a618:	e000e100 	.word	0xe000e100
 800a61c:	e000ed00 	.word	0xe000ed00

0800a620 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a624:	4b05      	ldr	r3, [pc, #20]	; (800a63c <SysTick_Handler+0x1c>)
 800a626:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a628:	f001 fefc 	bl	800c424 <xTaskGetSchedulerState>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d001      	beq.n	800a636 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a632:	f002 fd31 	bl	800d098 <xPortSysTickHandler>
  }
}
 800a636:	bf00      	nop
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	e000e010 	.word	0xe000e010

0800a640 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a640:	b580      	push	{r7, lr}
 800a642:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a644:	2100      	movs	r1, #0
 800a646:	f06f 0004 	mvn.w	r0, #4
 800a64a:	f7ff ffbf 	bl	800a5cc <__NVIC_SetPriority>
#endif
}
 800a64e:	bf00      	nop
 800a650:	bd80      	pop	{r7, pc}
	...

0800a654 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a65a:	f3ef 8305 	mrs	r3, IPSR
 800a65e:	603b      	str	r3, [r7, #0]
  return(result);
 800a660:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a662:	2b00      	cmp	r3, #0
 800a664:	d003      	beq.n	800a66e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a666:	f06f 0305 	mvn.w	r3, #5
 800a66a:	607b      	str	r3, [r7, #4]
 800a66c:	e00c      	b.n	800a688 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a66e:	4b0a      	ldr	r3, [pc, #40]	; (800a698 <osKernelInitialize+0x44>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d105      	bne.n	800a682 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a676:	4b08      	ldr	r3, [pc, #32]	; (800a698 <osKernelInitialize+0x44>)
 800a678:	2201      	movs	r2, #1
 800a67a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a67c:	2300      	movs	r3, #0
 800a67e:	607b      	str	r3, [r7, #4]
 800a680:	e002      	b.n	800a688 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a682:	f04f 33ff 	mov.w	r3, #4294967295
 800a686:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a688:	687b      	ldr	r3, [r7, #4]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	370c      	adds	r7, #12
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	24004250 	.word	0x24004250

0800a69c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6a2:	f3ef 8305 	mrs	r3, IPSR
 800a6a6:	603b      	str	r3, [r7, #0]
  return(result);
 800a6a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d003      	beq.n	800a6b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a6ae:	f06f 0305 	mvn.w	r3, #5
 800a6b2:	607b      	str	r3, [r7, #4]
 800a6b4:	e010      	b.n	800a6d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a6b6:	4b0b      	ldr	r3, [pc, #44]	; (800a6e4 <osKernelStart+0x48>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d109      	bne.n	800a6d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a6be:	f7ff ffbf 	bl	800a640 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a6c2:	4b08      	ldr	r3, [pc, #32]	; (800a6e4 <osKernelStart+0x48>)
 800a6c4:	2202      	movs	r2, #2
 800a6c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a6c8:	f001 fa32 	bl	800bb30 <vTaskStartScheduler>
      stat = osOK;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	607b      	str	r3, [r7, #4]
 800a6d0:	e002      	b.n	800a6d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a6d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a6d8:	687b      	ldr	r3, [r7, #4]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	24004250 	.word	0x24004250

0800a6e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b08e      	sub	sp, #56	; 0x38
 800a6ec:	af04      	add	r7, sp, #16
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6f8:	f3ef 8305 	mrs	r3, IPSR
 800a6fc:	617b      	str	r3, [r7, #20]
  return(result);
 800a6fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a700:	2b00      	cmp	r3, #0
 800a702:	d17e      	bne.n	800a802 <osThreadNew+0x11a>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d07b      	beq.n	800a802 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a70a:	2380      	movs	r3, #128	; 0x80
 800a70c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a70e:	2318      	movs	r3, #24
 800a710:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a712:	2300      	movs	r3, #0
 800a714:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a716:	f04f 33ff 	mov.w	r3, #4294967295
 800a71a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d045      	beq.n	800a7ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d002      	beq.n	800a730 <osThreadNew+0x48>
        name = attr->name;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d002      	beq.n	800a73e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	699b      	ldr	r3, [r3, #24]
 800a73c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d008      	beq.n	800a756 <osThreadNew+0x6e>
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	2b38      	cmp	r3, #56	; 0x38
 800a748:	d805      	bhi.n	800a756 <osThreadNew+0x6e>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <osThreadNew+0x72>
        return (NULL);
 800a756:	2300      	movs	r3, #0
 800a758:	e054      	b.n	800a804 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	695b      	ldr	r3, [r3, #20]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d003      	beq.n	800a76a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	089b      	lsrs	r3, r3, #2
 800a768:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00e      	beq.n	800a790 <osThreadNew+0xa8>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	2bab      	cmp	r3, #171	; 0xab
 800a778:	d90a      	bls.n	800a790 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d006      	beq.n	800a790 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	695b      	ldr	r3, [r3, #20]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <osThreadNew+0xa8>
        mem = 1;
 800a78a:	2301      	movs	r3, #1
 800a78c:	61bb      	str	r3, [r7, #24]
 800a78e:	e010      	b.n	800a7b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10c      	bne.n	800a7b2 <osThreadNew+0xca>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d108      	bne.n	800a7b2 <osThreadNew+0xca>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d104      	bne.n	800a7b2 <osThreadNew+0xca>
          mem = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	61bb      	str	r3, [r7, #24]
 800a7ac:	e001      	b.n	800a7b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d110      	bne.n	800a7da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7c0:	9202      	str	r2, [sp, #8]
 800a7c2:	9301      	str	r3, [sp, #4]
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	6a3a      	ldr	r2, [r7, #32]
 800a7cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f000 feb8 	bl	800b544 <xTaskCreateStatic>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	613b      	str	r3, [r7, #16]
 800a7d8:	e013      	b.n	800a802 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d110      	bne.n	800a802 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a7e0:	6a3b      	ldr	r3, [r7, #32]
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	f107 0310 	add.w	r3, r7, #16
 800a7e8:	9301      	str	r3, [sp, #4]
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f000 ff03 	bl	800b5fe <xTaskCreate>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d001      	beq.n	800a802 <osThreadNew+0x11a>
            hTask = NULL;
 800a7fe:	2300      	movs	r3, #0
 800a800:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a802:	693b      	ldr	r3, [r7, #16]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3728      	adds	r7, #40	; 0x28
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a814:	f3ef 8305 	mrs	r3, IPSR
 800a818:	60bb      	str	r3, [r7, #8]
  return(result);
 800a81a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d003      	beq.n	800a828 <osDelay+0x1c>
    stat = osErrorISR;
 800a820:	f06f 0305 	mvn.w	r3, #5
 800a824:	60fb      	str	r3, [r7, #12]
 800a826:	e007      	b.n	800a838 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a828:	2300      	movs	r3, #0
 800a82a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d002      	beq.n	800a838 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f001 f842 	bl	800b8bc <vTaskDelay>
    }
  }

  return (stat);
 800a838:	68fb      	ldr	r3, [r7, #12]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a842:	b580      	push	{r7, lr}
 800a844:	b08a      	sub	sp, #40	; 0x28
 800a846:	af02      	add	r7, sp, #8
 800a848:	60f8      	str	r0, [r7, #12]
 800a84a:	60b9      	str	r1, [r7, #8]
 800a84c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a84e:	2300      	movs	r3, #0
 800a850:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a852:	f3ef 8305 	mrs	r3, IPSR
 800a856:	613b      	str	r3, [r7, #16]
  return(result);
 800a858:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d15f      	bne.n	800a91e <osMessageQueueNew+0xdc>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d05c      	beq.n	800a91e <osMessageQueueNew+0xdc>
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d059      	beq.n	800a91e <osMessageQueueNew+0xdc>
    mem = -1;
 800a86a:	f04f 33ff 	mov.w	r3, #4294967295
 800a86e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d029      	beq.n	800a8ca <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d012      	beq.n	800a8a4 <osMessageQueueNew+0x62>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	2b4f      	cmp	r3, #79	; 0x4f
 800a884:	d90e      	bls.n	800a8a4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00a      	beq.n	800a8a4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	695a      	ldr	r2, [r3, #20]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	68b9      	ldr	r1, [r7, #8]
 800a896:	fb01 f303 	mul.w	r3, r1, r3
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d302      	bcc.n	800a8a4 <osMessageQueueNew+0x62>
        mem = 1;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	61bb      	str	r3, [r7, #24]
 800a8a2:	e014      	b.n	800a8ce <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d110      	bne.n	800a8ce <osMessageQueueNew+0x8c>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10c      	bne.n	800a8ce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d108      	bne.n	800a8ce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	695b      	ldr	r3, [r3, #20]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d104      	bne.n	800a8ce <osMessageQueueNew+0x8c>
          mem = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	61bb      	str	r3, [r7, #24]
 800a8c8:	e001      	b.n	800a8ce <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d10b      	bne.n	800a8ec <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	691a      	ldr	r2, [r3, #16]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	2100      	movs	r1, #0
 800a8de:	9100      	str	r1, [sp, #0]
 800a8e0:	68b9      	ldr	r1, [r7, #8]
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f000 f970 	bl	800abc8 <xQueueGenericCreateStatic>
 800a8e8:	61f8      	str	r0, [r7, #28]
 800a8ea:	e008      	b.n	800a8fe <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d105      	bne.n	800a8fe <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	68b9      	ldr	r1, [r7, #8]
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f000 f9de 	bl	800acb8 <xQueueGenericCreate>
 800a8fc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00c      	beq.n	800a91e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	617b      	str	r3, [r7, #20]
 800a910:	e001      	b.n	800a916 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a912:	2300      	movs	r3, #0
 800a914:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a916:	6979      	ldr	r1, [r7, #20]
 800a918:	69f8      	ldr	r0, [r7, #28]
 800a91a:	f000 fdb5 	bl	800b488 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a91e:	69fb      	ldr	r3, [r7, #28]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3720      	adds	r7, #32
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	4a07      	ldr	r2, [pc, #28]	; (800a954 <vApplicationGetIdleTaskMemory+0x2c>)
 800a938:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	4a06      	ldr	r2, [pc, #24]	; (800a958 <vApplicationGetIdleTaskMemory+0x30>)
 800a93e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2280      	movs	r2, #128	; 0x80
 800a944:	601a      	str	r2, [r3, #0]
}
 800a946:	bf00      	nop
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	24004254 	.word	0x24004254
 800a958:	24004300 	.word	0x24004300

0800a95c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	4a07      	ldr	r2, [pc, #28]	; (800a988 <vApplicationGetTimerTaskMemory+0x2c>)
 800a96c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	4a06      	ldr	r2, [pc, #24]	; (800a98c <vApplicationGetTimerTaskMemory+0x30>)
 800a972:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a97a:	601a      	str	r2, [r3, #0]
}
 800a97c:	bf00      	nop
 800a97e:	3714      	adds	r7, #20
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	24004500 	.word	0x24004500
 800a98c:	240045ac 	.word	0x240045ac

0800a990 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f103 0208 	add.w	r2, r3, #8
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f103 0208 	add.w	r2, r3, #8
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f103 0208 	add.w	r2, r3, #8
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a9de:	bf00      	nop
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	689a      	ldr	r2, [r3, #8]
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	1c5a      	adds	r2, r3, #1
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	601a      	str	r2, [r3, #0]
}
 800aa26:	bf00      	nop
 800aa28:	3714      	adds	r7, #20
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa32:	b480      	push	{r7}
 800aa34:	b085      	sub	sp, #20
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa48:	d103      	bne.n	800aa52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	60fb      	str	r3, [r7, #12]
 800aa50:	e00c      	b.n	800aa6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	3308      	adds	r3, #8
 800aa56:	60fb      	str	r3, [r7, #12]
 800aa58:	e002      	b.n	800aa60 <vListInsert+0x2e>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68ba      	ldr	r2, [r7, #8]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d2f6      	bcs.n	800aa5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	685a      	ldr	r2, [r3, #4]
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	683a      	ldr	r2, [r7, #0]
 800aa7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	1c5a      	adds	r2, r3, #1
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	601a      	str	r2, [r3, #0]
}
 800aa98:	bf00      	nop
 800aa9a:	3714      	adds	r7, #20
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	6892      	ldr	r2, [r2, #8]
 800aaba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	6852      	ldr	r2, [r2, #4]
 800aac4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d103      	bne.n	800aad8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	689a      	ldr	r2, [r3, #8]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	1e5a      	subs	r2, r3, #1
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10a      	bne.n	800ab22 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab1e:	bf00      	nop
 800ab20:	e7fe      	b.n	800ab20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab22:	f002 fa27 	bl	800cf74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab2e:	68f9      	ldr	r1, [r7, #12]
 800ab30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab32:	fb01 f303 	mul.w	r3, r1, r3
 800ab36:	441a      	add	r2, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab52:	3b01      	subs	r3, #1
 800ab54:	68f9      	ldr	r1, [r7, #12]
 800ab56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab58:	fb01 f303 	mul.w	r3, r1, r3
 800ab5c:	441a      	add	r2, r3
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	22ff      	movs	r2, #255	; 0xff
 800ab66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	22ff      	movs	r2, #255	; 0xff
 800ab6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d114      	bne.n	800aba2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d01a      	beq.n	800abb6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	3310      	adds	r3, #16
 800ab84:	4618      	mov	r0, r3
 800ab86:	f001 fa8b 	bl	800c0a0 <xTaskRemoveFromEventList>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d012      	beq.n	800abb6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab90:	4b0c      	ldr	r3, [pc, #48]	; (800abc4 <xQueueGenericReset+0xcc>)
 800ab92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab96:	601a      	str	r2, [r3, #0]
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	e009      	b.n	800abb6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3310      	adds	r3, #16
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7ff fef2 	bl	800a990 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	3324      	adds	r3, #36	; 0x24
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7ff feed 	bl	800a990 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800abb6:	f002 fa0d 	bl	800cfd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800abba:	2301      	movs	r3, #1
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	e000ed04 	.word	0xe000ed04

0800abc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b08e      	sub	sp, #56	; 0x38
 800abcc:	af02      	add	r7, sp, #8
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
 800abd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10a      	bne.n	800abf2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800abee:	bf00      	nop
 800abf0:	e7fe      	b.n	800abf0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10a      	bne.n	800ac0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800abf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfc:	f383 8811 	msr	BASEPRI, r3
 800ac00:	f3bf 8f6f 	isb	sy
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac0a:	bf00      	nop
 800ac0c:	e7fe      	b.n	800ac0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <xQueueGenericCreateStatic+0x52>
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <xQueueGenericCreateStatic+0x56>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e000      	b.n	800ac20 <xQueueGenericCreateStatic+0x58>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10a      	bne.n	800ac3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	623b      	str	r3, [r7, #32]
}
 800ac36:	bf00      	nop
 800ac38:	e7fe      	b.n	800ac38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d102      	bne.n	800ac46 <xQueueGenericCreateStatic+0x7e>
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d101      	bne.n	800ac4a <xQueueGenericCreateStatic+0x82>
 800ac46:	2301      	movs	r3, #1
 800ac48:	e000      	b.n	800ac4c <xQueueGenericCreateStatic+0x84>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10a      	bne.n	800ac66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	61fb      	str	r3, [r7, #28]
}
 800ac62:	bf00      	nop
 800ac64:	e7fe      	b.n	800ac64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac66:	2350      	movs	r3, #80	; 0x50
 800ac68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	2b50      	cmp	r3, #80	; 0x50
 800ac6e:	d00a      	beq.n	800ac86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ac70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac74:	f383 8811 	msr	BASEPRI, r3
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	61bb      	str	r3, [r7, #24]
}
 800ac82:	bf00      	nop
 800ac84:	e7fe      	b.n	800ac84 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ac8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00d      	beq.n	800acae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac94:	2201      	movs	r2, #1
 800ac96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ac9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	4613      	mov	r3, r2
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	68b9      	ldr	r1, [r7, #8]
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f000 f83f 	bl	800ad2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800acae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3730      	adds	r7, #48	; 0x30
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b08a      	sub	sp, #40	; 0x28
 800acbc:	af02      	add	r7, sp, #8
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	4613      	mov	r3, r2
 800acc4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10a      	bne.n	800ace2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	613b      	str	r3, [r7, #16]
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	68ba      	ldr	r2, [r7, #8]
 800ace6:	fb02 f303 	mul.w	r3, r2, r3
 800acea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	3350      	adds	r3, #80	; 0x50
 800acf0:	4618      	mov	r0, r3
 800acf2:	f002 fa61 	bl	800d1b8 <pvPortMalloc>
 800acf6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d011      	beq.n	800ad22 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	3350      	adds	r3, #80	; 0x50
 800ad06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad10:	79fa      	ldrb	r2, [r7, #7]
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	4613      	mov	r3, r2
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	68b9      	ldr	r1, [r7, #8]
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f000 f805 	bl	800ad2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad22:	69bb      	ldr	r3, [r7, #24]
	}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3720      	adds	r7, #32
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
 800ad38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d103      	bne.n	800ad48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	69ba      	ldr	r2, [r7, #24]
 800ad44:	601a      	str	r2, [r3, #0]
 800ad46:	e002      	b.n	800ad4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	69b8      	ldr	r0, [r7, #24]
 800ad5e:	f7ff fecb 	bl	800aaf8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	78fa      	ldrb	r2, [r7, #3]
 800ad66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad6a:	bf00      	nop
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
	...

0800ad74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b08e      	sub	sp, #56	; 0x38
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
 800ad80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad82:	2300      	movs	r3, #0
 800ad84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10a      	bne.n	800ada6 <xQueueGenericSend+0x32>
	__asm volatile
 800ad90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad94:	f383 8811 	msr	BASEPRI, r3
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ada2:	bf00      	nop
 800ada4:	e7fe      	b.n	800ada4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d103      	bne.n	800adb4 <xQueueGenericSend+0x40>
 800adac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <xQueueGenericSend+0x44>
 800adb4:	2301      	movs	r3, #1
 800adb6:	e000      	b.n	800adba <xQueueGenericSend+0x46>
 800adb8:	2300      	movs	r3, #0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10a      	bne.n	800add4 <xQueueGenericSend+0x60>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800add0:	bf00      	nop
 800add2:	e7fe      	b.n	800add2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	2b02      	cmp	r3, #2
 800add8:	d103      	bne.n	800ade2 <xQueueGenericSend+0x6e>
 800adda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800addc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d101      	bne.n	800ade6 <xQueueGenericSend+0x72>
 800ade2:	2301      	movs	r3, #1
 800ade4:	e000      	b.n	800ade8 <xQueueGenericSend+0x74>
 800ade6:	2300      	movs	r3, #0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10a      	bne.n	800ae02 <xQueueGenericSend+0x8e>
	__asm volatile
 800adec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf0:	f383 8811 	msr	BASEPRI, r3
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	623b      	str	r3, [r7, #32]
}
 800adfe:	bf00      	nop
 800ae00:	e7fe      	b.n	800ae00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae02:	f001 fb0f 	bl	800c424 <xTaskGetSchedulerState>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d102      	bne.n	800ae12 <xQueueGenericSend+0x9e>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <xQueueGenericSend+0xa2>
 800ae12:	2301      	movs	r3, #1
 800ae14:	e000      	b.n	800ae18 <xQueueGenericSend+0xa4>
 800ae16:	2300      	movs	r3, #0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10a      	bne.n	800ae32 <xQueueGenericSend+0xbe>
	__asm volatile
 800ae1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae20:	f383 8811 	msr	BASEPRI, r3
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	61fb      	str	r3, [r7, #28]
}
 800ae2e:	bf00      	nop
 800ae30:	e7fe      	b.n	800ae30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae32:	f002 f89f 	bl	800cf74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d302      	bcc.n	800ae48 <xQueueGenericSend+0xd4>
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d129      	bne.n	800ae9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae48:	683a      	ldr	r2, [r7, #0]
 800ae4a:	68b9      	ldr	r1, [r7, #8]
 800ae4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae4e:	f000 fa0b 	bl	800b268 <prvCopyDataToQueue>
 800ae52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d010      	beq.n	800ae7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5e:	3324      	adds	r3, #36	; 0x24
 800ae60:	4618      	mov	r0, r3
 800ae62:	f001 f91d 	bl	800c0a0 <xTaskRemoveFromEventList>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d013      	beq.n	800ae94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae6c:	4b3f      	ldr	r3, [pc, #252]	; (800af6c <xQueueGenericSend+0x1f8>)
 800ae6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	f3bf 8f4f 	dsb	sy
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	e00a      	b.n	800ae94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d007      	beq.n	800ae94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae84:	4b39      	ldr	r3, [pc, #228]	; (800af6c <xQueueGenericSend+0x1f8>)
 800ae86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae8a:	601a      	str	r2, [r3, #0]
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae94:	f002 f89e 	bl	800cfd4 <vPortExitCritical>
				return pdPASS;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e063      	b.n	800af64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d103      	bne.n	800aeaa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aea2:	f002 f897 	bl	800cfd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	e05c      	b.n	800af64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aeaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d106      	bne.n	800aebe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aeb0:	f107 0314 	add.w	r3, r7, #20
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f001 f957 	bl	800c168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aeba:	2301      	movs	r3, #1
 800aebc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aebe:	f002 f889 	bl	800cfd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aec2:	f000 fea7 	bl	800bc14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aec6:	f002 f855 	bl	800cf74 <vPortEnterCritical>
 800aeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aecc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aed0:	b25b      	sxtb	r3, r3
 800aed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed6:	d103      	bne.n	800aee0 <xQueueGenericSend+0x16c>
 800aed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aee6:	b25b      	sxtb	r3, r3
 800aee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeec:	d103      	bne.n	800aef6 <xQueueGenericSend+0x182>
 800aeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aef6:	f002 f86d 	bl	800cfd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aefa:	1d3a      	adds	r2, r7, #4
 800aefc:	f107 0314 	add.w	r3, r7, #20
 800af00:	4611      	mov	r1, r2
 800af02:	4618      	mov	r0, r3
 800af04:	f001 f946 	bl	800c194 <xTaskCheckForTimeOut>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d124      	bne.n	800af58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af10:	f000 faa2 	bl	800b458 <prvIsQueueFull>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d018      	beq.n	800af4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1c:	3310      	adds	r3, #16
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	4611      	mov	r1, r2
 800af22:	4618      	mov	r0, r3
 800af24:	f001 f86c 	bl	800c000 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af2a:	f000 fa2d 	bl	800b388 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af2e:	f000 fe7f 	bl	800bc30 <xTaskResumeAll>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	f47f af7c 	bne.w	800ae32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af3a:	4b0c      	ldr	r3, [pc, #48]	; (800af6c <xQueueGenericSend+0x1f8>)
 800af3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af40:	601a      	str	r2, [r3, #0]
 800af42:	f3bf 8f4f 	dsb	sy
 800af46:	f3bf 8f6f 	isb	sy
 800af4a:	e772      	b.n	800ae32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af4e:	f000 fa1b 	bl	800b388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af52:	f000 fe6d 	bl	800bc30 <xTaskResumeAll>
 800af56:	e76c      	b.n	800ae32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af5a:	f000 fa15 	bl	800b388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af5e:	f000 fe67 	bl	800bc30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af64:	4618      	mov	r0, r3
 800af66:	3738      	adds	r7, #56	; 0x38
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	e000ed04 	.word	0xe000ed04

0800af70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b090      	sub	sp, #64	; 0x40
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800af82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10a      	bne.n	800af9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af9a:	bf00      	nop
 800af9c:	e7fe      	b.n	800af9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d103      	bne.n	800afac <xQueueGenericSendFromISR+0x3c>
 800afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d101      	bne.n	800afb0 <xQueueGenericSendFromISR+0x40>
 800afac:	2301      	movs	r3, #1
 800afae:	e000      	b.n	800afb2 <xQueueGenericSendFromISR+0x42>
 800afb0:	2300      	movs	r3, #0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d10a      	bne.n	800afcc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800afb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afc8:	bf00      	nop
 800afca:	e7fe      	b.n	800afca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d103      	bne.n	800afda <xQueueGenericSendFromISR+0x6a>
 800afd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d101      	bne.n	800afde <xQueueGenericSendFromISR+0x6e>
 800afda:	2301      	movs	r3, #1
 800afdc:	e000      	b.n	800afe0 <xQueueGenericSendFromISR+0x70>
 800afde:	2300      	movs	r3, #0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10a      	bne.n	800affa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800afe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe8:	f383 8811 	msr	BASEPRI, r3
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	f3bf 8f4f 	dsb	sy
 800aff4:	623b      	str	r3, [r7, #32]
}
 800aff6:	bf00      	nop
 800aff8:	e7fe      	b.n	800aff8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800affa:	f002 f89d 	bl	800d138 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800affe:	f3ef 8211 	mrs	r2, BASEPRI
 800b002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b006:	f383 8811 	msr	BASEPRI, r3
 800b00a:	f3bf 8f6f 	isb	sy
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	61fa      	str	r2, [r7, #28]
 800b014:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b016:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b018:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b022:	429a      	cmp	r2, r3
 800b024:	d302      	bcc.n	800b02c <xQueueGenericSendFromISR+0xbc>
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	2b02      	cmp	r3, #2
 800b02a:	d12f      	bne.n	800b08c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b03c:	683a      	ldr	r2, [r7, #0]
 800b03e:	68b9      	ldr	r1, [r7, #8]
 800b040:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b042:	f000 f911 	bl	800b268 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b046:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04e:	d112      	bne.n	800b076 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b054:	2b00      	cmp	r3, #0
 800b056:	d016      	beq.n	800b086 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05a:	3324      	adds	r3, #36	; 0x24
 800b05c:	4618      	mov	r0, r3
 800b05e:	f001 f81f 	bl	800c0a0 <xTaskRemoveFromEventList>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00e      	beq.n	800b086 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00b      	beq.n	800b086 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2201      	movs	r2, #1
 800b072:	601a      	str	r2, [r3, #0]
 800b074:	e007      	b.n	800b086 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b076:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b07a:	3301      	adds	r3, #1
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	b25a      	sxtb	r2, r3
 800b080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b086:	2301      	movs	r3, #1
 800b088:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b08a:	e001      	b.n	800b090 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b08c:	2300      	movs	r3, #0
 800b08e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b092:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b09a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3740      	adds	r7, #64	; 0x40
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
	...

0800b0a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b08c      	sub	sp, #48	; 0x30
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d10a      	bne.n	800b0d8 <xQueueReceive+0x30>
	__asm volatile
 800b0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c6:	f383 8811 	msr	BASEPRI, r3
 800b0ca:	f3bf 8f6f 	isb	sy
 800b0ce:	f3bf 8f4f 	dsb	sy
 800b0d2:	623b      	str	r3, [r7, #32]
}
 800b0d4:	bf00      	nop
 800b0d6:	e7fe      	b.n	800b0d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d103      	bne.n	800b0e6 <xQueueReceive+0x3e>
 800b0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d101      	bne.n	800b0ea <xQueueReceive+0x42>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e000      	b.n	800b0ec <xQueueReceive+0x44>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10a      	bne.n	800b106 <xQueueReceive+0x5e>
	__asm volatile
 800b0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	61fb      	str	r3, [r7, #28]
}
 800b102:	bf00      	nop
 800b104:	e7fe      	b.n	800b104 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b106:	f001 f98d 	bl	800c424 <xTaskGetSchedulerState>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d102      	bne.n	800b116 <xQueueReceive+0x6e>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d101      	bne.n	800b11a <xQueueReceive+0x72>
 800b116:	2301      	movs	r3, #1
 800b118:	e000      	b.n	800b11c <xQueueReceive+0x74>
 800b11a:	2300      	movs	r3, #0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10a      	bne.n	800b136 <xQueueReceive+0x8e>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	61bb      	str	r3, [r7, #24]
}
 800b132:	bf00      	nop
 800b134:	e7fe      	b.n	800b134 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b136:	f001 ff1d 	bl	800cf74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b13e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b142:	2b00      	cmp	r3, #0
 800b144:	d01f      	beq.n	800b186 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b146:	68b9      	ldr	r1, [r7, #8]
 800b148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b14a:	f000 f8f7 	bl	800b33c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	1e5a      	subs	r2, r3, #1
 800b152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b154:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	691b      	ldr	r3, [r3, #16]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00f      	beq.n	800b17e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b160:	3310      	adds	r3, #16
 800b162:	4618      	mov	r0, r3
 800b164:	f000 ff9c 	bl	800c0a0 <xTaskRemoveFromEventList>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d007      	beq.n	800b17e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b16e:	4b3d      	ldr	r3, [pc, #244]	; (800b264 <xQueueReceive+0x1bc>)
 800b170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b174:	601a      	str	r2, [r3, #0]
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b17e:	f001 ff29 	bl	800cfd4 <vPortExitCritical>
				return pdPASS;
 800b182:	2301      	movs	r3, #1
 800b184:	e069      	b.n	800b25a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d103      	bne.n	800b194 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b18c:	f001 ff22 	bl	800cfd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b190:	2300      	movs	r3, #0
 800b192:	e062      	b.n	800b25a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b196:	2b00      	cmp	r3, #0
 800b198:	d106      	bne.n	800b1a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b19a:	f107 0310 	add.w	r3, r7, #16
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f000 ffe2 	bl	800c168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1a8:	f001 ff14 	bl	800cfd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1ac:	f000 fd32 	bl	800bc14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1b0:	f001 fee0 	bl	800cf74 <vPortEnterCritical>
 800b1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1ba:	b25b      	sxtb	r3, r3
 800b1bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1c0:	d103      	bne.n	800b1ca <xQueueReceive+0x122>
 800b1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1d0:	b25b      	sxtb	r3, r3
 800b1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d6:	d103      	bne.n	800b1e0 <xQueueReceive+0x138>
 800b1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1e0:	f001 fef8 	bl	800cfd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1e4:	1d3a      	adds	r2, r7, #4
 800b1e6:	f107 0310 	add.w	r3, r7, #16
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f000 ffd1 	bl	800c194 <xTaskCheckForTimeOut>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d123      	bne.n	800b240 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1fa:	f000 f917 	bl	800b42c <prvIsQueueEmpty>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d017      	beq.n	800b234 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b206:	3324      	adds	r3, #36	; 0x24
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	4611      	mov	r1, r2
 800b20c:	4618      	mov	r0, r3
 800b20e:	f000 fef7 	bl	800c000 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b214:	f000 f8b8 	bl	800b388 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b218:	f000 fd0a 	bl	800bc30 <xTaskResumeAll>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d189      	bne.n	800b136 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b222:	4b10      	ldr	r3, [pc, #64]	; (800b264 <xQueueReceive+0x1bc>)
 800b224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b228:	601a      	str	r2, [r3, #0]
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	f3bf 8f6f 	isb	sy
 800b232:	e780      	b.n	800b136 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b236:	f000 f8a7 	bl	800b388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b23a:	f000 fcf9 	bl	800bc30 <xTaskResumeAll>
 800b23e:	e77a      	b.n	800b136 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b242:	f000 f8a1 	bl	800b388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b246:	f000 fcf3 	bl	800bc30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b24a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b24c:	f000 f8ee 	bl	800b42c <prvIsQueueEmpty>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	f43f af6f 	beq.w	800b136 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b258:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3730      	adds	r7, #48	; 0x30
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	e000ed04 	.word	0xe000ed04

0800b268 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b086      	sub	sp, #24
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b274:	2300      	movs	r3, #0
 800b276:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b282:	2b00      	cmp	r3, #0
 800b284:	d10d      	bne.n	800b2a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d14d      	bne.n	800b32a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	4618      	mov	r0, r3
 800b294:	f001 f8e4 	bl	800c460 <xTaskPriorityDisinherit>
 800b298:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2200      	movs	r2, #0
 800b29e:	609a      	str	r2, [r3, #8]
 800b2a0:	e043      	b.n	800b32a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d119      	bne.n	800b2dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6858      	ldr	r0, [r3, #4]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	68b9      	ldr	r1, [r7, #8]
 800b2b4:	f002 f9ee 	bl	800d694 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c0:	441a      	add	r2, r3
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	685a      	ldr	r2, [r3, #4]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d32b      	bcc.n	800b32a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	605a      	str	r2, [r3, #4]
 800b2da:	e026      	b.n	800b32a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	68d8      	ldr	r0, [r3, #12]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	68b9      	ldr	r1, [r7, #8]
 800b2e8:	f002 f9d4 	bl	800d694 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	68da      	ldr	r2, [r3, #12]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f4:	425b      	negs	r3, r3
 800b2f6:	441a      	add	r2, r3
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	68da      	ldr	r2, [r3, #12]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	429a      	cmp	r2, r3
 800b306:	d207      	bcs.n	800b318 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	689a      	ldr	r2, [r3, #8]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b310:	425b      	negs	r3, r3
 800b312:	441a      	add	r2, r3
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d105      	bne.n	800b32a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	3b01      	subs	r3, #1
 800b328:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	1c5a      	adds	r2, r3, #1
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b332:	697b      	ldr	r3, [r7, #20]
}
 800b334:	4618      	mov	r0, r3
 800b336:	3718      	adds	r7, #24
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d018      	beq.n	800b380 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	68da      	ldr	r2, [r3, #12]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b356:	441a      	add	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	68da      	ldr	r2, [r3, #12]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	429a      	cmp	r2, r3
 800b366:	d303      	bcc.n	800b370 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	68d9      	ldr	r1, [r3, #12]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b378:	461a      	mov	r2, r3
 800b37a:	6838      	ldr	r0, [r7, #0]
 800b37c:	f002 f98a 	bl	800d694 <memcpy>
	}
}
 800b380:	bf00      	nop
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b390:	f001 fdf0 	bl	800cf74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b39a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b39c:	e011      	b.n	800b3c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d012      	beq.n	800b3cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	3324      	adds	r3, #36	; 0x24
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f000 fe78 	bl	800c0a0 <xTaskRemoveFromEventList>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d001      	beq.n	800b3ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b3b6:	f000 ff4f 	bl	800c258 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	dce9      	bgt.n	800b39e <prvUnlockQueue+0x16>
 800b3ca:	e000      	b.n	800b3ce <prvUnlockQueue+0x46>
					break;
 800b3cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	22ff      	movs	r2, #255	; 0xff
 800b3d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b3d6:	f001 fdfd 	bl	800cfd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b3da:	f001 fdcb 	bl	800cf74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3e6:	e011      	b.n	800b40c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d012      	beq.n	800b416 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	3310      	adds	r3, #16
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f000 fe53 	bl	800c0a0 <xTaskRemoveFromEventList>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d001      	beq.n	800b404 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b400:	f000 ff2a 	bl	800c258 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b404:	7bbb      	ldrb	r3, [r7, #14]
 800b406:	3b01      	subs	r3, #1
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b40c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b410:	2b00      	cmp	r3, #0
 800b412:	dce9      	bgt.n	800b3e8 <prvUnlockQueue+0x60>
 800b414:	e000      	b.n	800b418 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b416:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	22ff      	movs	r2, #255	; 0xff
 800b41c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b420:	f001 fdd8 	bl	800cfd4 <vPortExitCritical>
}
 800b424:	bf00      	nop
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b434:	f001 fd9e 	bl	800cf74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d102      	bne.n	800b446 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b440:	2301      	movs	r3, #1
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	e001      	b.n	800b44a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b446:	2300      	movs	r3, #0
 800b448:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b44a:	f001 fdc3 	bl	800cfd4 <vPortExitCritical>

	return xReturn;
 800b44e:	68fb      	ldr	r3, [r7, #12]
}
 800b450:	4618      	mov	r0, r3
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b460:	f001 fd88 	bl	800cf74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d102      	bne.n	800b476 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b470:	2301      	movs	r3, #1
 800b472:	60fb      	str	r3, [r7, #12]
 800b474:	e001      	b.n	800b47a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b476:	2300      	movs	r3, #0
 800b478:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b47a:	f001 fdab 	bl	800cfd4 <vPortExitCritical>

	return xReturn;
 800b47e:	68fb      	ldr	r3, [r7, #12]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b488:	b480      	push	{r7}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b492:	2300      	movs	r3, #0
 800b494:	60fb      	str	r3, [r7, #12]
 800b496:	e014      	b.n	800b4c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b498:	4a0f      	ldr	r2, [pc, #60]	; (800b4d8 <vQueueAddToRegistry+0x50>)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10b      	bne.n	800b4bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b4a4:	490c      	ldr	r1, [pc, #48]	; (800b4d8 <vQueueAddToRegistry+0x50>)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	683a      	ldr	r2, [r7, #0]
 800b4aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b4ae:	4a0a      	ldr	r2, [pc, #40]	; (800b4d8 <vQueueAddToRegistry+0x50>)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	4413      	add	r3, r2
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b4ba:	e006      	b.n	800b4ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	60fb      	str	r3, [r7, #12]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2b07      	cmp	r3, #7
 800b4c6:	d9e7      	bls.n	800b498 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b4c8:	bf00      	nop
 800b4ca:	bf00      	nop
 800b4cc:	3714      	adds	r7, #20
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	240049ac 	.word	0x240049ac

0800b4dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b086      	sub	sp, #24
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b4ec:	f001 fd42 	bl	800cf74 <vPortEnterCritical>
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4f6:	b25b      	sxtb	r3, r3
 800b4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4fc:	d103      	bne.n	800b506 <vQueueWaitForMessageRestricted+0x2a>
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b50c:	b25b      	sxtb	r3, r3
 800b50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b512:	d103      	bne.n	800b51c <vQueueWaitForMessageRestricted+0x40>
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	2200      	movs	r2, #0
 800b518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b51c:	f001 fd5a 	bl	800cfd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b524:	2b00      	cmp	r3, #0
 800b526:	d106      	bne.n	800b536 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	3324      	adds	r3, #36	; 0x24
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	68b9      	ldr	r1, [r7, #8]
 800b530:	4618      	mov	r0, r3
 800b532:	f000 fd89 	bl	800c048 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b536:	6978      	ldr	r0, [r7, #20]
 800b538:	f7ff ff26 	bl	800b388 <prvUnlockQueue>
	}
 800b53c:	bf00      	nop
 800b53e:	3718      	adds	r7, #24
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b544:	b580      	push	{r7, lr}
 800b546:	b08e      	sub	sp, #56	; 0x38
 800b548:	af04      	add	r7, sp, #16
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
 800b550:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b554:	2b00      	cmp	r3, #0
 800b556:	d10a      	bne.n	800b56e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	623b      	str	r3, [r7, #32]
}
 800b56a:	bf00      	nop
 800b56c:	e7fe      	b.n	800b56c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b570:	2b00      	cmp	r3, #0
 800b572:	d10a      	bne.n	800b58a <xTaskCreateStatic+0x46>
	__asm volatile
 800b574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b578:	f383 8811 	msr	BASEPRI, r3
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	61fb      	str	r3, [r7, #28]
}
 800b586:	bf00      	nop
 800b588:	e7fe      	b.n	800b588 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b58a:	23ac      	movs	r3, #172	; 0xac
 800b58c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	2bac      	cmp	r3, #172	; 0xac
 800b592:	d00a      	beq.n	800b5aa <xTaskCreateStatic+0x66>
	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	61bb      	str	r3, [r7, #24]
}
 800b5a6:	bf00      	nop
 800b5a8:	e7fe      	b.n	800b5a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b5aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d01e      	beq.n	800b5f0 <xTaskCreateStatic+0xac>
 800b5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d01b      	beq.n	800b5f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c4:	2202      	movs	r2, #2
 800b5c6:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	9303      	str	r3, [sp, #12]
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	9302      	str	r3, [sp, #8]
 800b5d2:	f107 0314 	add.w	r3, r7, #20
 800b5d6:	9301      	str	r3, [sp, #4]
 800b5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	68b9      	ldr	r1, [r7, #8]
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f000 f850 	bl	800b688 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5ea:	f000 f8f7 	bl	800b7dc <prvAddNewTaskToReadyList>
 800b5ee:	e001      	b.n	800b5f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b5f4:	697b      	ldr	r3, [r7, #20]
	}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3728      	adds	r7, #40	; 0x28
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b08c      	sub	sp, #48	; 0x30
 800b602:	af04      	add	r7, sp, #16
 800b604:	60f8      	str	r0, [r7, #12]
 800b606:	60b9      	str	r1, [r7, #8]
 800b608:	603b      	str	r3, [r7, #0]
 800b60a:	4613      	mov	r3, r2
 800b60c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b60e:	88fb      	ldrh	r3, [r7, #6]
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	4618      	mov	r0, r3
 800b614:	f001 fdd0 	bl	800d1b8 <pvPortMalloc>
 800b618:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d00e      	beq.n	800b63e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b620:	20ac      	movs	r0, #172	; 0xac
 800b622:	f001 fdc9 	bl	800d1b8 <pvPortMalloc>
 800b626:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	697a      	ldr	r2, [r7, #20]
 800b632:	631a      	str	r2, [r3, #48]	; 0x30
 800b634:	e005      	b.n	800b642 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b636:	6978      	ldr	r0, [r7, #20]
 800b638:	f001 fe8a 	bl	800d350 <vPortFree>
 800b63c:	e001      	b.n	800b642 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b63e:	2300      	movs	r3, #0
 800b640:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d017      	beq.n	800b678 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	2200      	movs	r2, #0
 800b64c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b650:	88fa      	ldrh	r2, [r7, #6]
 800b652:	2300      	movs	r3, #0
 800b654:	9303      	str	r3, [sp, #12]
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	9302      	str	r3, [sp, #8]
 800b65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65c:	9301      	str	r3, [sp, #4]
 800b65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b660:	9300      	str	r3, [sp, #0]
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	68b9      	ldr	r1, [r7, #8]
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f000 f80e 	bl	800b688 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b66c:	69f8      	ldr	r0, [r7, #28]
 800b66e:	f000 f8b5 	bl	800b7dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b672:	2301      	movs	r3, #1
 800b674:	61bb      	str	r3, [r7, #24]
 800b676:	e002      	b.n	800b67e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b678:	f04f 33ff 	mov.w	r3, #4294967295
 800b67c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b67e:	69bb      	ldr	r3, [r7, #24]
	}
 800b680:	4618      	mov	r0, r3
 800b682:	3720      	adds	r7, #32
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b088      	sub	sp, #32
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
 800b694:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b698:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	461a      	mov	r2, r3
 800b6a0:	21a5      	movs	r1, #165	; 0xa5
 800b6a2:	f001 ff73 	bl	800d58c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6aa:	6879      	ldr	r1, [r7, #4]
 800b6ac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b6b0:	440b      	add	r3, r1
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	4413      	add	r3, r2
 800b6b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	f023 0307 	bic.w	r3, r3, #7
 800b6be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	f003 0307 	and.w	r3, r3, #7
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00a      	beq.n	800b6e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ce:	f383 8811 	msr	BASEPRI, r3
 800b6d2:	f3bf 8f6f 	isb	sy
 800b6d6:	f3bf 8f4f 	dsb	sy
 800b6da:	617b      	str	r3, [r7, #20]
}
 800b6dc:	bf00      	nop
 800b6de:	e7fe      	b.n	800b6de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d01f      	beq.n	800b726 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	61fb      	str	r3, [r7, #28]
 800b6ea:	e012      	b.n	800b712 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	7819      	ldrb	r1, [r3, #0]
 800b6f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	3334      	adds	r3, #52	; 0x34
 800b6fc:	460a      	mov	r2, r1
 800b6fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	4413      	add	r3, r2
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d006      	beq.n	800b71a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	3301      	adds	r3, #1
 800b710:	61fb      	str	r3, [r7, #28]
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	2b0f      	cmp	r3, #15
 800b716:	d9e9      	bls.n	800b6ec <prvInitialiseNewTask+0x64>
 800b718:	e000      	b.n	800b71c <prvInitialiseNewTask+0x94>
			{
				break;
 800b71a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71e:	2200      	movs	r2, #0
 800b720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b724:	e003      	b.n	800b72e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b730:	2b37      	cmp	r3, #55	; 0x37
 800b732:	d901      	bls.n	800b738 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b734:	2337      	movs	r3, #55	; 0x37
 800b736:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b73c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b742:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	2200      	movs	r2, #0
 800b748:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	3304      	adds	r3, #4
 800b74e:	4618      	mov	r0, r3
 800b750:	f7ff f93e 	bl	800a9d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b756:	3318      	adds	r3, #24
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff f939 	bl	800a9d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b762:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b766:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b772:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	2200      	movs	r2, #0
 800b778:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77c:	2200      	movs	r2, #0
 800b77e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	2200      	movs	r2, #0
 800b786:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78c:	3358      	adds	r3, #88	; 0x58
 800b78e:	224c      	movs	r2, #76	; 0x4c
 800b790:	2100      	movs	r1, #0
 800b792:	4618      	mov	r0, r3
 800b794:	f001 fefa 	bl	800d58c <memset>
 800b798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79a:	4a0d      	ldr	r2, [pc, #52]	; (800b7d0 <prvInitialiseNewTask+0x148>)
 800b79c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a0:	4a0c      	ldr	r2, [pc, #48]	; (800b7d4 <prvInitialiseNewTask+0x14c>)
 800b7a2:	661a      	str	r2, [r3, #96]	; 0x60
 800b7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a6:	4a0c      	ldr	r2, [pc, #48]	; (800b7d8 <prvInitialiseNewTask+0x150>)
 800b7a8:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	68f9      	ldr	r1, [r7, #12]
 800b7ae:	69b8      	ldr	r0, [r7, #24]
 800b7b0:	f001 fab2 	bl	800cd18 <pxPortInitialiseStack>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d002      	beq.n	800b7c6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7c6:	bf00      	nop
 800b7c8:	3720      	adds	r7, #32
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	24008c48 	.word	0x24008c48
 800b7d4:	24008cb0 	.word	0x24008cb0
 800b7d8:	24008d18 	.word	0x24008d18

0800b7dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7e4:	f001 fbc6 	bl	800cf74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7e8:	4b2d      	ldr	r3, [pc, #180]	; (800b8a0 <prvAddNewTaskToReadyList+0xc4>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	4a2c      	ldr	r2, [pc, #176]	; (800b8a0 <prvAddNewTaskToReadyList+0xc4>)
 800b7f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b7f2:	4b2c      	ldr	r3, [pc, #176]	; (800b8a4 <prvAddNewTaskToReadyList+0xc8>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d109      	bne.n	800b80e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b7fa:	4a2a      	ldr	r2, [pc, #168]	; (800b8a4 <prvAddNewTaskToReadyList+0xc8>)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b800:	4b27      	ldr	r3, [pc, #156]	; (800b8a0 <prvAddNewTaskToReadyList+0xc4>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b01      	cmp	r3, #1
 800b806:	d110      	bne.n	800b82a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b808:	f000 fd4a 	bl	800c2a0 <prvInitialiseTaskLists>
 800b80c:	e00d      	b.n	800b82a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b80e:	4b26      	ldr	r3, [pc, #152]	; (800b8a8 <prvAddNewTaskToReadyList+0xcc>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d109      	bne.n	800b82a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b816:	4b23      	ldr	r3, [pc, #140]	; (800b8a4 <prvAddNewTaskToReadyList+0xc8>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b820:	429a      	cmp	r2, r3
 800b822:	d802      	bhi.n	800b82a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b824:	4a1f      	ldr	r2, [pc, #124]	; (800b8a4 <prvAddNewTaskToReadyList+0xc8>)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b82a:	4b20      	ldr	r3, [pc, #128]	; (800b8ac <prvAddNewTaskToReadyList+0xd0>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	3301      	adds	r3, #1
 800b830:	4a1e      	ldr	r2, [pc, #120]	; (800b8ac <prvAddNewTaskToReadyList+0xd0>)
 800b832:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b834:	4b1d      	ldr	r3, [pc, #116]	; (800b8ac <prvAddNewTaskToReadyList+0xd0>)
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b840:	4b1b      	ldr	r3, [pc, #108]	; (800b8b0 <prvAddNewTaskToReadyList+0xd4>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	429a      	cmp	r2, r3
 800b846:	d903      	bls.n	800b850 <prvAddNewTaskToReadyList+0x74>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	4a18      	ldr	r2, [pc, #96]	; (800b8b0 <prvAddNewTaskToReadyList+0xd4>)
 800b84e:	6013      	str	r3, [r2, #0]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b854:	4613      	mov	r3, r2
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	4413      	add	r3, r2
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	4a15      	ldr	r2, [pc, #84]	; (800b8b4 <prvAddNewTaskToReadyList+0xd8>)
 800b85e:	441a      	add	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	3304      	adds	r3, #4
 800b864:	4619      	mov	r1, r3
 800b866:	4610      	mov	r0, r2
 800b868:	f7ff f8bf 	bl	800a9ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b86c:	f001 fbb2 	bl	800cfd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b870:	4b0d      	ldr	r3, [pc, #52]	; (800b8a8 <prvAddNewTaskToReadyList+0xcc>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00e      	beq.n	800b896 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b878:	4b0a      	ldr	r3, [pc, #40]	; (800b8a4 <prvAddNewTaskToReadyList+0xc8>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b882:	429a      	cmp	r2, r3
 800b884:	d207      	bcs.n	800b896 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b886:	4b0c      	ldr	r3, [pc, #48]	; (800b8b8 <prvAddNewTaskToReadyList+0xdc>)
 800b888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b88c:	601a      	str	r2, [r3, #0]
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b896:	bf00      	nop
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	24004ec0 	.word	0x24004ec0
 800b8a4:	240049ec 	.word	0x240049ec
 800b8a8:	24004ecc 	.word	0x24004ecc
 800b8ac:	24004edc 	.word	0x24004edc
 800b8b0:	24004ec8 	.word	0x24004ec8
 800b8b4:	240049f0 	.word	0x240049f0
 800b8b8:	e000ed04 	.word	0xe000ed04

0800b8bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d017      	beq.n	800b8fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b8ce:	4b13      	ldr	r3, [pc, #76]	; (800b91c <vTaskDelay+0x60>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00a      	beq.n	800b8ec <vTaskDelay+0x30>
	__asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	60bb      	str	r3, [r7, #8]
}
 800b8e8:	bf00      	nop
 800b8ea:	e7fe      	b.n	800b8ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b8ec:	f000 f992 	bl	800bc14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 fe6e 	bl	800c5d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b8f8:	f000 f99a 	bl	800bc30 <xTaskResumeAll>
 800b8fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d107      	bne.n	800b914 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b904:	4b06      	ldr	r3, [pc, #24]	; (800b920 <vTaskDelay+0x64>)
 800b906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b90a:	601a      	str	r2, [r3, #0]
 800b90c:	f3bf 8f4f 	dsb	sy
 800b910:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b914:	bf00      	nop
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	24004ee8 	.word	0x24004ee8
 800b920:	e000ed04 	.word	0xe000ed04

0800b924 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b92c:	f001 fb22 	bl	800cf74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d102      	bne.n	800b93c <vTaskSuspend+0x18>
 800b936:	4b30      	ldr	r3, [pc, #192]	; (800b9f8 <vTaskSuspend+0xd4>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	e000      	b.n	800b93e <vTaskSuspend+0x1a>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	3304      	adds	r3, #4
 800b944:	4618      	mov	r0, r3
 800b946:	f7ff f8ad 	bl	800aaa4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d004      	beq.n	800b95c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	3318      	adds	r3, #24
 800b956:	4618      	mov	r0, r3
 800b958:	f7ff f8a4 	bl	800aaa4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	3304      	adds	r3, #4
 800b960:	4619      	mov	r1, r3
 800b962:	4826      	ldr	r0, [pc, #152]	; (800b9fc <vTaskSuspend+0xd8>)
 800b964:	f7ff f841 	bl	800a9ea <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	2b01      	cmp	r3, #1
 800b972:	d103      	bne.n	800b97c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2200      	movs	r2, #0
 800b978:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b97c:	f001 fb2a 	bl	800cfd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b980:	4b1f      	ldr	r3, [pc, #124]	; (800ba00 <vTaskSuspend+0xdc>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d005      	beq.n	800b994 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b988:	f001 faf4 	bl	800cf74 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b98c:	f000 fd2a 	bl	800c3e4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b990:	f001 fb20 	bl	800cfd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b994:	4b18      	ldr	r3, [pc, #96]	; (800b9f8 <vTaskSuspend+0xd4>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d127      	bne.n	800b9ee <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800b99e:	4b18      	ldr	r3, [pc, #96]	; (800ba00 <vTaskSuspend+0xdc>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d017      	beq.n	800b9d6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b9a6:	4b17      	ldr	r3, [pc, #92]	; (800ba04 <vTaskSuspend+0xe0>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00a      	beq.n	800b9c4 <vTaskSuspend+0xa0>
	__asm volatile
 800b9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b2:	f383 8811 	msr	BASEPRI, r3
 800b9b6:	f3bf 8f6f 	isb	sy
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	60bb      	str	r3, [r7, #8]
}
 800b9c0:	bf00      	nop
 800b9c2:	e7fe      	b.n	800b9c2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800b9c4:	4b10      	ldr	r3, [pc, #64]	; (800ba08 <vTaskSuspend+0xe4>)
 800b9c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9ca:	601a      	str	r2, [r3, #0]
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9d4:	e00b      	b.n	800b9ee <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b9d6:	4b09      	ldr	r3, [pc, #36]	; (800b9fc <vTaskSuspend+0xd8>)
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	4b0c      	ldr	r3, [pc, #48]	; (800ba0c <vTaskSuspend+0xe8>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d103      	bne.n	800b9ea <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800b9e2:	4b05      	ldr	r3, [pc, #20]	; (800b9f8 <vTaskSuspend+0xd4>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	601a      	str	r2, [r3, #0]
	}
 800b9e8:	e001      	b.n	800b9ee <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800b9ea:	f000 fa89 	bl	800bf00 <vTaskSwitchContext>
	}
 800b9ee:	bf00      	nop
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	240049ec 	.word	0x240049ec
 800b9fc:	24004eac 	.word	0x24004eac
 800ba00:	24004ecc 	.word	0x24004ecc
 800ba04:	24004ee8 	.word	0x24004ee8
 800ba08:	e000ed04 	.word	0xe000ed04
 800ba0c:	24004ec0 	.word	0x24004ec0

0800ba10 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ba10:	b480      	push	{r7}
 800ba12:	b087      	sub	sp, #28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10a      	bne.n	800ba3c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800ba26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	60fb      	str	r3, [r7, #12]
}
 800ba38:	bf00      	nop
 800ba3a:	e7fe      	b.n	800ba3a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	695b      	ldr	r3, [r3, #20]
 800ba40:	4a0a      	ldr	r2, [pc, #40]	; (800ba6c <prvTaskIsTaskSuspended+0x5c>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d10a      	bne.n	800ba5c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4a:	4a09      	ldr	r2, [pc, #36]	; (800ba70 <prvTaskIsTaskSuspended+0x60>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d005      	beq.n	800ba5c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d101      	bne.n	800ba5c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba5c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ba5e:	4618      	mov	r0, r3
 800ba60:	371c      	adds	r7, #28
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	24004eac 	.word	0x24004eac
 800ba70:	24004e80 	.word	0x24004e80

0800ba74 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d10a      	bne.n	800ba9c <vTaskResume+0x28>
	__asm volatile
 800ba86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	60bb      	str	r3, [r7, #8]
}
 800ba98:	bf00      	nop
 800ba9a:	e7fe      	b.n	800ba9a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800ba9c:	4b20      	ldr	r3, [pc, #128]	; (800bb20 <vTaskResume+0xac>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d038      	beq.n	800bb18 <vTaskResume+0xa4>
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d035      	beq.n	800bb18 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800baac:	f001 fa62 	bl	800cf74 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f7ff ffad 	bl	800ba10 <prvTaskIsTaskSuspended>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d02b      	beq.n	800bb14 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	3304      	adds	r3, #4
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fe ffef 	bl	800aaa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baca:	4b16      	ldr	r3, [pc, #88]	; (800bb24 <vTaskResume+0xb0>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d903      	bls.n	800bada <vTaskResume+0x66>
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad6:	4a13      	ldr	r2, [pc, #76]	; (800bb24 <vTaskResume+0xb0>)
 800bad8:	6013      	str	r3, [r2, #0]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bade:	4613      	mov	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	4413      	add	r3, r2
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4a10      	ldr	r2, [pc, #64]	; (800bb28 <vTaskResume+0xb4>)
 800bae8:	441a      	add	r2, r3
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	3304      	adds	r3, #4
 800baee:	4619      	mov	r1, r3
 800baf0:	4610      	mov	r0, r2
 800baf2:	f7fe ff7a 	bl	800a9ea <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafa:	4b09      	ldr	r3, [pc, #36]	; (800bb20 <vTaskResume+0xac>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d307      	bcc.n	800bb14 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800bb04:	4b09      	ldr	r3, [pc, #36]	; (800bb2c <vTaskResume+0xb8>)
 800bb06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb0a:	601a      	str	r2, [r3, #0]
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800bb14:	f001 fa5e 	bl	800cfd4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb18:	bf00      	nop
 800bb1a:	3710      	adds	r7, #16
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	240049ec 	.word	0x240049ec
 800bb24:	24004ec8 	.word	0x24004ec8
 800bb28:	240049f0 	.word	0x240049f0
 800bb2c:	e000ed04 	.word	0xe000ed04

0800bb30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b08a      	sub	sp, #40	; 0x28
 800bb34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bb36:	2300      	movs	r3, #0
 800bb38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb3e:	463a      	mov	r2, r7
 800bb40:	1d39      	adds	r1, r7, #4
 800bb42:	f107 0308 	add.w	r3, r7, #8
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fe feee 	bl	800a928 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb4c:	6839      	ldr	r1, [r7, #0]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68ba      	ldr	r2, [r7, #8]
 800bb52:	9202      	str	r2, [sp, #8]
 800bb54:	9301      	str	r3, [sp, #4]
 800bb56:	2300      	movs	r3, #0
 800bb58:	9300      	str	r3, [sp, #0]
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	460a      	mov	r2, r1
 800bb5e:	4925      	ldr	r1, [pc, #148]	; (800bbf4 <vTaskStartScheduler+0xc4>)
 800bb60:	4825      	ldr	r0, [pc, #148]	; (800bbf8 <vTaskStartScheduler+0xc8>)
 800bb62:	f7ff fcef 	bl	800b544 <xTaskCreateStatic>
 800bb66:	4603      	mov	r3, r0
 800bb68:	4a24      	ldr	r2, [pc, #144]	; (800bbfc <vTaskStartScheduler+0xcc>)
 800bb6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bb6c:	4b23      	ldr	r3, [pc, #140]	; (800bbfc <vTaskStartScheduler+0xcc>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bb74:	2301      	movs	r3, #1
 800bb76:	617b      	str	r3, [r7, #20]
 800bb78:	e001      	b.n	800bb7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d102      	bne.n	800bb8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bb84:	f000 fd7a 	bl	800c67c <xTimerCreateTimerTask>
 800bb88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d11d      	bne.n	800bbcc <vTaskStartScheduler+0x9c>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb94:	f383 8811 	msr	BASEPRI, r3
 800bb98:	f3bf 8f6f 	isb	sy
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	613b      	str	r3, [r7, #16]
}
 800bba2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bba4:	4b16      	ldr	r3, [pc, #88]	; (800bc00 <vTaskStartScheduler+0xd0>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	3358      	adds	r3, #88	; 0x58
 800bbaa:	4a16      	ldr	r2, [pc, #88]	; (800bc04 <vTaskStartScheduler+0xd4>)
 800bbac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bbae:	4b16      	ldr	r3, [pc, #88]	; (800bc08 <vTaskStartScheduler+0xd8>)
 800bbb0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bbb6:	4b15      	ldr	r3, [pc, #84]	; (800bc0c <vTaskStartScheduler+0xdc>)
 800bbb8:	2201      	movs	r2, #1
 800bbba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bbbc:	4b14      	ldr	r3, [pc, #80]	; (800bc10 <vTaskStartScheduler+0xe0>)
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800bbc2:	f7f4 fcff 	bl	80005c4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bbc6:	f001 f933 	bl	800ce30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bbca:	e00e      	b.n	800bbea <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd2:	d10a      	bne.n	800bbea <vTaskStartScheduler+0xba>
	__asm volatile
 800bbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	60fb      	str	r3, [r7, #12]
}
 800bbe6:	bf00      	nop
 800bbe8:	e7fe      	b.n	800bbe8 <vTaskStartScheduler+0xb8>
}
 800bbea:	bf00      	nop
 800bbec:	3718      	adds	r7, #24
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	0800d7b4 	.word	0x0800d7b4
 800bbf8:	0800c271 	.word	0x0800c271
 800bbfc:	24004ee4 	.word	0x24004ee4
 800bc00:	240049ec 	.word	0x240049ec
 800bc04:	24004070 	.word	0x24004070
 800bc08:	24004ee0 	.word	0x24004ee0
 800bc0c:	24004ecc 	.word	0x24004ecc
 800bc10:	24004ec4 	.word	0x24004ec4

0800bc14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc14:	b480      	push	{r7}
 800bc16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bc18:	4b04      	ldr	r3, [pc, #16]	; (800bc2c <vTaskSuspendAll+0x18>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	4a03      	ldr	r2, [pc, #12]	; (800bc2c <vTaskSuspendAll+0x18>)
 800bc20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bc22:	bf00      	nop
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr
 800bc2c:	24004ee8 	.word	0x24004ee8

0800bc30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc36:	2300      	movs	r3, #0
 800bc38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc3e:	4b42      	ldr	r3, [pc, #264]	; (800bd48 <xTaskResumeAll+0x118>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d10a      	bne.n	800bc5c <xTaskResumeAll+0x2c>
	__asm volatile
 800bc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4a:	f383 8811 	msr	BASEPRI, r3
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	603b      	str	r3, [r7, #0]
}
 800bc58:	bf00      	nop
 800bc5a:	e7fe      	b.n	800bc5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc5c:	f001 f98a 	bl	800cf74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc60:	4b39      	ldr	r3, [pc, #228]	; (800bd48 <xTaskResumeAll+0x118>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	3b01      	subs	r3, #1
 800bc66:	4a38      	ldr	r2, [pc, #224]	; (800bd48 <xTaskResumeAll+0x118>)
 800bc68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc6a:	4b37      	ldr	r3, [pc, #220]	; (800bd48 <xTaskResumeAll+0x118>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d162      	bne.n	800bd38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc72:	4b36      	ldr	r3, [pc, #216]	; (800bd4c <xTaskResumeAll+0x11c>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d05e      	beq.n	800bd38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc7a:	e02f      	b.n	800bcdc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc7c:	4b34      	ldr	r3, [pc, #208]	; (800bd50 <xTaskResumeAll+0x120>)
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	3318      	adds	r3, #24
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7fe ff0b 	bl	800aaa4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	3304      	adds	r3, #4
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fe ff06 	bl	800aaa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc9c:	4b2d      	ldr	r3, [pc, #180]	; (800bd54 <xTaskResumeAll+0x124>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d903      	bls.n	800bcac <xTaskResumeAll+0x7c>
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca8:	4a2a      	ldr	r2, [pc, #168]	; (800bd54 <xTaskResumeAll+0x124>)
 800bcaa:	6013      	str	r3, [r2, #0]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	4413      	add	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4a27      	ldr	r2, [pc, #156]	; (800bd58 <xTaskResumeAll+0x128>)
 800bcba:	441a      	add	r2, r3
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	3304      	adds	r3, #4
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	4610      	mov	r0, r2
 800bcc4:	f7fe fe91 	bl	800a9ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bccc:	4b23      	ldr	r3, [pc, #140]	; (800bd5c <xTaskResumeAll+0x12c>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d302      	bcc.n	800bcdc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bcd6:	4b22      	ldr	r3, [pc, #136]	; (800bd60 <xTaskResumeAll+0x130>)
 800bcd8:	2201      	movs	r2, #1
 800bcda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcdc:	4b1c      	ldr	r3, [pc, #112]	; (800bd50 <xTaskResumeAll+0x120>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1cb      	bne.n	800bc7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bcea:	f000 fb7b 	bl	800c3e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bcee:	4b1d      	ldr	r3, [pc, #116]	; (800bd64 <xTaskResumeAll+0x134>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d010      	beq.n	800bd1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bcfa:	f000 f847 	bl	800bd8c <xTaskIncrementTick>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d002      	beq.n	800bd0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bd04:	4b16      	ldr	r3, [pc, #88]	; (800bd60 <xTaskResumeAll+0x130>)
 800bd06:	2201      	movs	r2, #1
 800bd08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1f1      	bne.n	800bcfa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bd16:	4b13      	ldr	r3, [pc, #76]	; (800bd64 <xTaskResumeAll+0x134>)
 800bd18:	2200      	movs	r2, #0
 800bd1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd1c:	4b10      	ldr	r3, [pc, #64]	; (800bd60 <xTaskResumeAll+0x130>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d009      	beq.n	800bd38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd24:	2301      	movs	r3, #1
 800bd26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd28:	4b0f      	ldr	r3, [pc, #60]	; (800bd68 <xTaskResumeAll+0x138>)
 800bd2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd2e:	601a      	str	r2, [r3, #0]
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd38:	f001 f94c 	bl	800cfd4 <vPortExitCritical>

	return xAlreadyYielded;
 800bd3c:	68bb      	ldr	r3, [r7, #8]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	24004ee8 	.word	0x24004ee8
 800bd4c:	24004ec0 	.word	0x24004ec0
 800bd50:	24004e80 	.word	0x24004e80
 800bd54:	24004ec8 	.word	0x24004ec8
 800bd58:	240049f0 	.word	0x240049f0
 800bd5c:	240049ec 	.word	0x240049ec
 800bd60:	24004ed4 	.word	0x24004ed4
 800bd64:	24004ed0 	.word	0x24004ed0
 800bd68:	e000ed04 	.word	0xe000ed04

0800bd6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bd72:	4b05      	ldr	r3, [pc, #20]	; (800bd88 <xTaskGetTickCount+0x1c>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bd78:	687b      	ldr	r3, [r7, #4]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	370c      	adds	r7, #12
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	24004ec4 	.word	0x24004ec4

0800bd8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b086      	sub	sp, #24
 800bd90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd92:	2300      	movs	r3, #0
 800bd94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd96:	4b4f      	ldr	r3, [pc, #316]	; (800bed4 <xTaskIncrementTick+0x148>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f040 808f 	bne.w	800bebe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bda0:	4b4d      	ldr	r3, [pc, #308]	; (800bed8 <xTaskIncrementTick+0x14c>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	3301      	adds	r3, #1
 800bda6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bda8:	4a4b      	ldr	r2, [pc, #300]	; (800bed8 <xTaskIncrementTick+0x14c>)
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d120      	bne.n	800bdf6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bdb4:	4b49      	ldr	r3, [pc, #292]	; (800bedc <xTaskIncrementTick+0x150>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00a      	beq.n	800bdd4 <xTaskIncrementTick+0x48>
	__asm volatile
 800bdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	603b      	str	r3, [r7, #0]
}
 800bdd0:	bf00      	nop
 800bdd2:	e7fe      	b.n	800bdd2 <xTaskIncrementTick+0x46>
 800bdd4:	4b41      	ldr	r3, [pc, #260]	; (800bedc <xTaskIncrementTick+0x150>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	60fb      	str	r3, [r7, #12]
 800bdda:	4b41      	ldr	r3, [pc, #260]	; (800bee0 <xTaskIncrementTick+0x154>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a3f      	ldr	r2, [pc, #252]	; (800bedc <xTaskIncrementTick+0x150>)
 800bde0:	6013      	str	r3, [r2, #0]
 800bde2:	4a3f      	ldr	r2, [pc, #252]	; (800bee0 <xTaskIncrementTick+0x154>)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6013      	str	r3, [r2, #0]
 800bde8:	4b3e      	ldr	r3, [pc, #248]	; (800bee4 <xTaskIncrementTick+0x158>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	3301      	adds	r3, #1
 800bdee:	4a3d      	ldr	r2, [pc, #244]	; (800bee4 <xTaskIncrementTick+0x158>)
 800bdf0:	6013      	str	r3, [r2, #0]
 800bdf2:	f000 faf7 	bl	800c3e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bdf6:	4b3c      	ldr	r3, [pc, #240]	; (800bee8 <xTaskIncrementTick+0x15c>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	693a      	ldr	r2, [r7, #16]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d349      	bcc.n	800be94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be00:	4b36      	ldr	r3, [pc, #216]	; (800bedc <xTaskIncrementTick+0x150>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d104      	bne.n	800be14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be0a:	4b37      	ldr	r3, [pc, #220]	; (800bee8 <xTaskIncrementTick+0x15c>)
 800be0c:	f04f 32ff 	mov.w	r2, #4294967295
 800be10:	601a      	str	r2, [r3, #0]
					break;
 800be12:	e03f      	b.n	800be94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be14:	4b31      	ldr	r3, [pc, #196]	; (800bedc <xTaskIncrementTick+0x150>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d203      	bcs.n	800be34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be2c:	4a2e      	ldr	r2, [pc, #184]	; (800bee8 <xTaskIncrementTick+0x15c>)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be32:	e02f      	b.n	800be94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	3304      	adds	r3, #4
 800be38:	4618      	mov	r0, r3
 800be3a:	f7fe fe33 	bl	800aaa4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be42:	2b00      	cmp	r3, #0
 800be44:	d004      	beq.n	800be50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	3318      	adds	r3, #24
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7fe fe2a 	bl	800aaa4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be54:	4b25      	ldr	r3, [pc, #148]	; (800beec <xTaskIncrementTick+0x160>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d903      	bls.n	800be64 <xTaskIncrementTick+0xd8>
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be60:	4a22      	ldr	r2, [pc, #136]	; (800beec <xTaskIncrementTick+0x160>)
 800be62:	6013      	str	r3, [r2, #0]
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be68:	4613      	mov	r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4413      	add	r3, r2
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	4a1f      	ldr	r2, [pc, #124]	; (800bef0 <xTaskIncrementTick+0x164>)
 800be72:	441a      	add	r2, r3
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	3304      	adds	r3, #4
 800be78:	4619      	mov	r1, r3
 800be7a:	4610      	mov	r0, r2
 800be7c:	f7fe fdb5 	bl	800a9ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be84:	4b1b      	ldr	r3, [pc, #108]	; (800bef4 <xTaskIncrementTick+0x168>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d3b8      	bcc.n	800be00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800be8e:	2301      	movs	r3, #1
 800be90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be92:	e7b5      	b.n	800be00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be94:	4b17      	ldr	r3, [pc, #92]	; (800bef4 <xTaskIncrementTick+0x168>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be9a:	4915      	ldr	r1, [pc, #84]	; (800bef0 <xTaskIncrementTick+0x164>)
 800be9c:	4613      	mov	r3, r2
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	4413      	add	r3, r2
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	440b      	add	r3, r1
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d901      	bls.n	800beb0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800beac:	2301      	movs	r3, #1
 800beae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800beb0:	4b11      	ldr	r3, [pc, #68]	; (800bef8 <xTaskIncrementTick+0x16c>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d007      	beq.n	800bec8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800beb8:	2301      	movs	r3, #1
 800beba:	617b      	str	r3, [r7, #20]
 800bebc:	e004      	b.n	800bec8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bebe:	4b0f      	ldr	r3, [pc, #60]	; (800befc <xTaskIncrementTick+0x170>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	3301      	adds	r3, #1
 800bec4:	4a0d      	ldr	r2, [pc, #52]	; (800befc <xTaskIncrementTick+0x170>)
 800bec6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bec8:	697b      	ldr	r3, [r7, #20]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3718      	adds	r7, #24
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	24004ee8 	.word	0x24004ee8
 800bed8:	24004ec4 	.word	0x24004ec4
 800bedc:	24004e78 	.word	0x24004e78
 800bee0:	24004e7c 	.word	0x24004e7c
 800bee4:	24004ed8 	.word	0x24004ed8
 800bee8:	24004ee0 	.word	0x24004ee0
 800beec:	24004ec8 	.word	0x24004ec8
 800bef0:	240049f0 	.word	0x240049f0
 800bef4:	240049ec 	.word	0x240049ec
 800bef8:	24004ed4 	.word	0x24004ed4
 800befc:	24004ed0 	.word	0x24004ed0

0800bf00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf06:	4b36      	ldr	r3, [pc, #216]	; (800bfe0 <vTaskSwitchContext+0xe0>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d003      	beq.n	800bf16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf0e:	4b35      	ldr	r3, [pc, #212]	; (800bfe4 <vTaskSwitchContext+0xe4>)
 800bf10:	2201      	movs	r2, #1
 800bf12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf14:	e05f      	b.n	800bfd6 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800bf16:	4b33      	ldr	r3, [pc, #204]	; (800bfe4 <vTaskSwitchContext+0xe4>)
 800bf18:	2200      	movs	r2, #0
 800bf1a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800bf1c:	f7f4 fb59 	bl	80005d2 <getRunTimeCounterValue>
 800bf20:	4603      	mov	r3, r0
 800bf22:	4a31      	ldr	r2, [pc, #196]	; (800bfe8 <vTaskSwitchContext+0xe8>)
 800bf24:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800bf26:	4b30      	ldr	r3, [pc, #192]	; (800bfe8 <vTaskSwitchContext+0xe8>)
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	4b30      	ldr	r3, [pc, #192]	; (800bfec <vTaskSwitchContext+0xec>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d909      	bls.n	800bf46 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800bf32:	4b2f      	ldr	r3, [pc, #188]	; (800bff0 <vTaskSwitchContext+0xf0>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bf38:	4a2b      	ldr	r2, [pc, #172]	; (800bfe8 <vTaskSwitchContext+0xe8>)
 800bf3a:	6810      	ldr	r0, [r2, #0]
 800bf3c:	4a2b      	ldr	r2, [pc, #172]	; (800bfec <vTaskSwitchContext+0xec>)
 800bf3e:	6812      	ldr	r2, [r2, #0]
 800bf40:	1a82      	subs	r2, r0, r2
 800bf42:	440a      	add	r2, r1
 800bf44:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800bf46:	4b28      	ldr	r3, [pc, #160]	; (800bfe8 <vTaskSwitchContext+0xe8>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a28      	ldr	r2, [pc, #160]	; (800bfec <vTaskSwitchContext+0xec>)
 800bf4c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf4e:	4b29      	ldr	r3, [pc, #164]	; (800bff4 <vTaskSwitchContext+0xf4>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	e010      	b.n	800bf78 <vTaskSwitchContext+0x78>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d10a      	bne.n	800bf72 <vTaskSwitchContext+0x72>
	__asm volatile
 800bf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf60:	f383 8811 	msr	BASEPRI, r3
 800bf64:	f3bf 8f6f 	isb	sy
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	607b      	str	r3, [r7, #4]
}
 800bf6e:	bf00      	nop
 800bf70:	e7fe      	b.n	800bf70 <vTaskSwitchContext+0x70>
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	3b01      	subs	r3, #1
 800bf76:	60fb      	str	r3, [r7, #12]
 800bf78:	491f      	ldr	r1, [pc, #124]	; (800bff8 <vTaskSwitchContext+0xf8>)
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	4413      	add	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	440b      	add	r3, r1
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d0e4      	beq.n	800bf56 <vTaskSwitchContext+0x56>
 800bf8c:	68fa      	ldr	r2, [r7, #12]
 800bf8e:	4613      	mov	r3, r2
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	4413      	add	r3, r2
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	4a18      	ldr	r2, [pc, #96]	; (800bff8 <vTaskSwitchContext+0xf8>)
 800bf98:	4413      	add	r3, r2
 800bf9a:	60bb      	str	r3, [r7, #8]
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	685a      	ldr	r2, [r3, #4]
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	605a      	str	r2, [r3, #4]
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	685a      	ldr	r2, [r3, #4]
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	3308      	adds	r3, #8
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d104      	bne.n	800bfbc <vTaskSwitchContext+0xbc>
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	685a      	ldr	r2, [r3, #4]
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	605a      	str	r2, [r3, #4]
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	4a0b      	ldr	r2, [pc, #44]	; (800bff0 <vTaskSwitchContext+0xf0>)
 800bfc4:	6013      	str	r3, [r2, #0]
 800bfc6:	4a0b      	ldr	r2, [pc, #44]	; (800bff4 <vTaskSwitchContext+0xf4>)
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bfcc:	4b08      	ldr	r3, [pc, #32]	; (800bff0 <vTaskSwitchContext+0xf0>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	3358      	adds	r3, #88	; 0x58
 800bfd2:	4a0a      	ldr	r2, [pc, #40]	; (800bffc <vTaskSwitchContext+0xfc>)
 800bfd4:	6013      	str	r3, [r2, #0]
}
 800bfd6:	bf00      	nop
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	24004ee8 	.word	0x24004ee8
 800bfe4:	24004ed4 	.word	0x24004ed4
 800bfe8:	24004ef0 	.word	0x24004ef0
 800bfec:	24004eec 	.word	0x24004eec
 800bff0:	240049ec 	.word	0x240049ec
 800bff4:	24004ec8 	.word	0x24004ec8
 800bff8:	240049f0 	.word	0x240049f0
 800bffc:	24004070 	.word	0x24004070

0800c000 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10a      	bne.n	800c026 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	60fb      	str	r3, [r7, #12]
}
 800c022:	bf00      	nop
 800c024:	e7fe      	b.n	800c024 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c026:	4b07      	ldr	r3, [pc, #28]	; (800c044 <vTaskPlaceOnEventList+0x44>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	3318      	adds	r3, #24
 800c02c:	4619      	mov	r1, r3
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7fe fcff 	bl	800aa32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c034:	2101      	movs	r1, #1
 800c036:	6838      	ldr	r0, [r7, #0]
 800c038:	f000 facc 	bl	800c5d4 <prvAddCurrentTaskToDelayedList>
}
 800c03c:	bf00      	nop
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	240049ec 	.word	0x240049ec

0800c048 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10a      	bne.n	800c070 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	617b      	str	r3, [r7, #20]
}
 800c06c:	bf00      	nop
 800c06e:	e7fe      	b.n	800c06e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c070:	4b0a      	ldr	r3, [pc, #40]	; (800c09c <vTaskPlaceOnEventListRestricted+0x54>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	3318      	adds	r3, #24
 800c076:	4619      	mov	r1, r3
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f7fe fcb6 	bl	800a9ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d002      	beq.n	800c08a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c084:	f04f 33ff 	mov.w	r3, #4294967295
 800c088:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c08a:	6879      	ldr	r1, [r7, #4]
 800c08c:	68b8      	ldr	r0, [r7, #8]
 800c08e:	f000 faa1 	bl	800c5d4 <prvAddCurrentTaskToDelayedList>
	}
 800c092:	bf00      	nop
 800c094:	3718      	adds	r7, #24
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	240049ec 	.word	0x240049ec

0800c0a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b086      	sub	sp, #24
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d10a      	bne.n	800c0cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ba:	f383 8811 	msr	BASEPRI, r3
 800c0be:	f3bf 8f6f 	isb	sy
 800c0c2:	f3bf 8f4f 	dsb	sy
 800c0c6:	60fb      	str	r3, [r7, #12]
}
 800c0c8:	bf00      	nop
 800c0ca:	e7fe      	b.n	800c0ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	3318      	adds	r3, #24
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7fe fce7 	bl	800aaa4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0d6:	4b1e      	ldr	r3, [pc, #120]	; (800c150 <xTaskRemoveFromEventList+0xb0>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d11d      	bne.n	800c11a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fe fcde 	bl	800aaa4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ec:	4b19      	ldr	r3, [pc, #100]	; (800c154 <xTaskRemoveFromEventList+0xb4>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d903      	bls.n	800c0fc <xTaskRemoveFromEventList+0x5c>
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f8:	4a16      	ldr	r2, [pc, #88]	; (800c154 <xTaskRemoveFromEventList+0xb4>)
 800c0fa:	6013      	str	r3, [r2, #0]
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c100:	4613      	mov	r3, r2
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	4413      	add	r3, r2
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	4a13      	ldr	r2, [pc, #76]	; (800c158 <xTaskRemoveFromEventList+0xb8>)
 800c10a:	441a      	add	r2, r3
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	3304      	adds	r3, #4
 800c110:	4619      	mov	r1, r3
 800c112:	4610      	mov	r0, r2
 800c114:	f7fe fc69 	bl	800a9ea <vListInsertEnd>
 800c118:	e005      	b.n	800c126 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	3318      	adds	r3, #24
 800c11e:	4619      	mov	r1, r3
 800c120:	480e      	ldr	r0, [pc, #56]	; (800c15c <xTaskRemoveFromEventList+0xbc>)
 800c122:	f7fe fc62 	bl	800a9ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c12a:	4b0d      	ldr	r3, [pc, #52]	; (800c160 <xTaskRemoveFromEventList+0xc0>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c130:	429a      	cmp	r2, r3
 800c132:	d905      	bls.n	800c140 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c134:	2301      	movs	r3, #1
 800c136:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c138:	4b0a      	ldr	r3, [pc, #40]	; (800c164 <xTaskRemoveFromEventList+0xc4>)
 800c13a:	2201      	movs	r2, #1
 800c13c:	601a      	str	r2, [r3, #0]
 800c13e:	e001      	b.n	800c144 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c140:	2300      	movs	r3, #0
 800c142:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c144:	697b      	ldr	r3, [r7, #20]
}
 800c146:	4618      	mov	r0, r3
 800c148:	3718      	adds	r7, #24
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	24004ee8 	.word	0x24004ee8
 800c154:	24004ec8 	.word	0x24004ec8
 800c158:	240049f0 	.word	0x240049f0
 800c15c:	24004e80 	.word	0x24004e80
 800c160:	240049ec 	.word	0x240049ec
 800c164:	24004ed4 	.word	0x24004ed4

0800c168 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c170:	4b06      	ldr	r3, [pc, #24]	; (800c18c <vTaskInternalSetTimeOutState+0x24>)
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c178:	4b05      	ldr	r3, [pc, #20]	; (800c190 <vTaskInternalSetTimeOutState+0x28>)
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	605a      	str	r2, [r3, #4]
}
 800c180:	bf00      	nop
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr
 800c18c:	24004ed8 	.word	0x24004ed8
 800c190:	24004ec4 	.word	0x24004ec4

0800c194 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b088      	sub	sp, #32
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10a      	bne.n	800c1ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a8:	f383 8811 	msr	BASEPRI, r3
 800c1ac:	f3bf 8f6f 	isb	sy
 800c1b0:	f3bf 8f4f 	dsb	sy
 800c1b4:	613b      	str	r3, [r7, #16]
}
 800c1b6:	bf00      	nop
 800c1b8:	e7fe      	b.n	800c1b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10a      	bne.n	800c1d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	60fb      	str	r3, [r7, #12]
}
 800c1d2:	bf00      	nop
 800c1d4:	e7fe      	b.n	800c1d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c1d6:	f000 fecd 	bl	800cf74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c1da:	4b1d      	ldr	r3, [pc, #116]	; (800c250 <xTaskCheckForTimeOut+0xbc>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	69ba      	ldr	r2, [r7, #24]
 800c1e6:	1ad3      	subs	r3, r2, r3
 800c1e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f2:	d102      	bne.n	800c1fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	61fb      	str	r3, [r7, #28]
 800c1f8:	e023      	b.n	800c242 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	4b15      	ldr	r3, [pc, #84]	; (800c254 <xTaskCheckForTimeOut+0xc0>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	429a      	cmp	r2, r3
 800c204:	d007      	beq.n	800c216 <xTaskCheckForTimeOut+0x82>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	69ba      	ldr	r2, [r7, #24]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d302      	bcc.n	800c216 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c210:	2301      	movs	r3, #1
 800c212:	61fb      	str	r3, [r7, #28]
 800c214:	e015      	b.n	800c242 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	697a      	ldr	r2, [r7, #20]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d20b      	bcs.n	800c238 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	1ad2      	subs	r2, r2, r3
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7ff ff9b 	bl	800c168 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c232:	2300      	movs	r3, #0
 800c234:	61fb      	str	r3, [r7, #28]
 800c236:	e004      	b.n	800c242 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	2200      	movs	r2, #0
 800c23c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c23e:	2301      	movs	r3, #1
 800c240:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c242:	f000 fec7 	bl	800cfd4 <vPortExitCritical>

	return xReturn;
 800c246:	69fb      	ldr	r3, [r7, #28]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3720      	adds	r7, #32
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	24004ec4 	.word	0x24004ec4
 800c254:	24004ed8 	.word	0x24004ed8

0800c258 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c258:	b480      	push	{r7}
 800c25a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c25c:	4b03      	ldr	r3, [pc, #12]	; (800c26c <vTaskMissedYield+0x14>)
 800c25e:	2201      	movs	r2, #1
 800c260:	601a      	str	r2, [r3, #0]
}
 800c262:	bf00      	nop
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr
 800c26c:	24004ed4 	.word	0x24004ed4

0800c270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c278:	f000 f852 	bl	800c320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c27c:	4b06      	ldr	r3, [pc, #24]	; (800c298 <prvIdleTask+0x28>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2b01      	cmp	r3, #1
 800c282:	d9f9      	bls.n	800c278 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c284:	4b05      	ldr	r3, [pc, #20]	; (800c29c <prvIdleTask+0x2c>)
 800c286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c28a:	601a      	str	r2, [r3, #0]
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c294:	e7f0      	b.n	800c278 <prvIdleTask+0x8>
 800c296:	bf00      	nop
 800c298:	240049f0 	.word	0x240049f0
 800c29c:	e000ed04 	.word	0xe000ed04

0800c2a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	607b      	str	r3, [r7, #4]
 800c2aa:	e00c      	b.n	800c2c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4413      	add	r3, r2
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	4a12      	ldr	r2, [pc, #72]	; (800c300 <prvInitialiseTaskLists+0x60>)
 800c2b8:	4413      	add	r3, r2
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fe fb68 	bl	800a990 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	607b      	str	r3, [r7, #4]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2b37      	cmp	r3, #55	; 0x37
 800c2ca:	d9ef      	bls.n	800c2ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c2cc:	480d      	ldr	r0, [pc, #52]	; (800c304 <prvInitialiseTaskLists+0x64>)
 800c2ce:	f7fe fb5f 	bl	800a990 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c2d2:	480d      	ldr	r0, [pc, #52]	; (800c308 <prvInitialiseTaskLists+0x68>)
 800c2d4:	f7fe fb5c 	bl	800a990 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c2d8:	480c      	ldr	r0, [pc, #48]	; (800c30c <prvInitialiseTaskLists+0x6c>)
 800c2da:	f7fe fb59 	bl	800a990 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c2de:	480c      	ldr	r0, [pc, #48]	; (800c310 <prvInitialiseTaskLists+0x70>)
 800c2e0:	f7fe fb56 	bl	800a990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c2e4:	480b      	ldr	r0, [pc, #44]	; (800c314 <prvInitialiseTaskLists+0x74>)
 800c2e6:	f7fe fb53 	bl	800a990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c2ea:	4b0b      	ldr	r3, [pc, #44]	; (800c318 <prvInitialiseTaskLists+0x78>)
 800c2ec:	4a05      	ldr	r2, [pc, #20]	; (800c304 <prvInitialiseTaskLists+0x64>)
 800c2ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c2f0:	4b0a      	ldr	r3, [pc, #40]	; (800c31c <prvInitialiseTaskLists+0x7c>)
 800c2f2:	4a05      	ldr	r2, [pc, #20]	; (800c308 <prvInitialiseTaskLists+0x68>)
 800c2f4:	601a      	str	r2, [r3, #0]
}
 800c2f6:	bf00      	nop
 800c2f8:	3708      	adds	r7, #8
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	240049f0 	.word	0x240049f0
 800c304:	24004e50 	.word	0x24004e50
 800c308:	24004e64 	.word	0x24004e64
 800c30c:	24004e80 	.word	0x24004e80
 800c310:	24004e94 	.word	0x24004e94
 800c314:	24004eac 	.word	0x24004eac
 800c318:	24004e78 	.word	0x24004e78
 800c31c:	24004e7c 	.word	0x24004e7c

0800c320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c326:	e019      	b.n	800c35c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c328:	f000 fe24 	bl	800cf74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c32c:	4b10      	ldr	r3, [pc, #64]	; (800c370 <prvCheckTasksWaitingTermination+0x50>)
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	3304      	adds	r3, #4
 800c338:	4618      	mov	r0, r3
 800c33a:	f7fe fbb3 	bl	800aaa4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c33e:	4b0d      	ldr	r3, [pc, #52]	; (800c374 <prvCheckTasksWaitingTermination+0x54>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	3b01      	subs	r3, #1
 800c344:	4a0b      	ldr	r2, [pc, #44]	; (800c374 <prvCheckTasksWaitingTermination+0x54>)
 800c346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c348:	4b0b      	ldr	r3, [pc, #44]	; (800c378 <prvCheckTasksWaitingTermination+0x58>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	3b01      	subs	r3, #1
 800c34e:	4a0a      	ldr	r2, [pc, #40]	; (800c378 <prvCheckTasksWaitingTermination+0x58>)
 800c350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c352:	f000 fe3f 	bl	800cfd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 f810 	bl	800c37c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c35c:	4b06      	ldr	r3, [pc, #24]	; (800c378 <prvCheckTasksWaitingTermination+0x58>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1e1      	bne.n	800c328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c364:	bf00      	nop
 800c366:	bf00      	nop
 800c368:	3708      	adds	r7, #8
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	24004e94 	.word	0x24004e94
 800c374:	24004ec0 	.word	0x24004ec0
 800c378:	24004ea8 	.word	0x24004ea8

0800c37c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	3358      	adds	r3, #88	; 0x58
 800c388:	4618      	mov	r0, r3
 800c38a:	f001 f907 	bl	800d59c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800c394:	2b00      	cmp	r3, #0
 800c396:	d108      	bne.n	800c3aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c39c:	4618      	mov	r0, r3
 800c39e:	f000 ffd7 	bl	800d350 <vPortFree>
				vPortFree( pxTCB );
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 ffd4 	bl	800d350 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c3a8:	e018      	b.n	800c3dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d103      	bne.n	800c3bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 ffcb 	bl	800d350 <vPortFree>
	}
 800c3ba:	e00f      	b.n	800c3dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800c3c2:	2b02      	cmp	r3, #2
 800c3c4:	d00a      	beq.n	800c3dc <prvDeleteTCB+0x60>
	__asm volatile
 800c3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ca:	f383 8811 	msr	BASEPRI, r3
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f3bf 8f4f 	dsb	sy
 800c3d6:	60fb      	str	r3, [r7, #12]
}
 800c3d8:	bf00      	nop
 800c3da:	e7fe      	b.n	800c3da <prvDeleteTCB+0x5e>
	}
 800c3dc:	bf00      	nop
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3ea:	4b0c      	ldr	r3, [pc, #48]	; (800c41c <prvResetNextTaskUnblockTime+0x38>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d104      	bne.n	800c3fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c3f4:	4b0a      	ldr	r3, [pc, #40]	; (800c420 <prvResetNextTaskUnblockTime+0x3c>)
 800c3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c3fc:	e008      	b.n	800c410 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3fe:	4b07      	ldr	r3, [pc, #28]	; (800c41c <prvResetNextTaskUnblockTime+0x38>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	4a04      	ldr	r2, [pc, #16]	; (800c420 <prvResetNextTaskUnblockTime+0x3c>)
 800c40e:	6013      	str	r3, [r2, #0]
}
 800c410:	bf00      	nop
 800c412:	370c      	adds	r7, #12
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr
 800c41c:	24004e78 	.word	0x24004e78
 800c420:	24004ee0 	.word	0x24004ee0

0800c424 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c42a:	4b0b      	ldr	r3, [pc, #44]	; (800c458 <xTaskGetSchedulerState+0x34>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d102      	bne.n	800c438 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c432:	2301      	movs	r3, #1
 800c434:	607b      	str	r3, [r7, #4]
 800c436:	e008      	b.n	800c44a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c438:	4b08      	ldr	r3, [pc, #32]	; (800c45c <xTaskGetSchedulerState+0x38>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d102      	bne.n	800c446 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c440:	2302      	movs	r3, #2
 800c442:	607b      	str	r3, [r7, #4]
 800c444:	e001      	b.n	800c44a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c446:	2300      	movs	r3, #0
 800c448:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c44a:	687b      	ldr	r3, [r7, #4]
	}
 800c44c:	4618      	mov	r0, r3
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr
 800c458:	24004ecc 	.word	0x24004ecc
 800c45c:	24004ee8 	.word	0x24004ee8

0800c460 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c46c:	2300      	movs	r3, #0
 800c46e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d056      	beq.n	800c524 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c476:	4b2e      	ldr	r3, [pc, #184]	; (800c530 <xTaskPriorityDisinherit+0xd0>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	693a      	ldr	r2, [r7, #16]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d00a      	beq.n	800c496 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	60fb      	str	r3, [r7, #12]
}
 800c492:	bf00      	nop
 800c494:	e7fe      	b.n	800c494 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d10a      	bne.n	800c4b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	60bb      	str	r3, [r7, #8]
}
 800c4b0:	bf00      	nop
 800c4b2:	e7fe      	b.n	800c4b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4b8:	1e5a      	subs	r2, r3, #1
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d02c      	beq.n	800c524 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d128      	bne.n	800c524 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	3304      	adds	r3, #4
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7fe fae4 	bl	800aaa4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f4:	4b0f      	ldr	r3, [pc, #60]	; (800c534 <xTaskPriorityDisinherit+0xd4>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d903      	bls.n	800c504 <xTaskPriorityDisinherit+0xa4>
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c500:	4a0c      	ldr	r2, [pc, #48]	; (800c534 <xTaskPriorityDisinherit+0xd4>)
 800c502:	6013      	str	r3, [r2, #0]
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c508:	4613      	mov	r3, r2
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4413      	add	r3, r2
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	4a09      	ldr	r2, [pc, #36]	; (800c538 <xTaskPriorityDisinherit+0xd8>)
 800c512:	441a      	add	r2, r3
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	3304      	adds	r3, #4
 800c518:	4619      	mov	r1, r3
 800c51a:	4610      	mov	r0, r2
 800c51c:	f7fe fa65 	bl	800a9ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c520:	2301      	movs	r3, #1
 800c522:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c524:	697b      	ldr	r3, [r7, #20]
	}
 800c526:	4618      	mov	r0, r3
 800c528:	3718      	adds	r7, #24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	240049ec 	.word	0x240049ec
 800c534:	24004ec8 	.word	0x24004ec8
 800c538:	240049f0 	.word	0x240049f0

0800c53c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c546:	f000 fd15 	bl	800cf74 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c54a:	4b20      	ldr	r3, [pc, #128]	; (800c5cc <ulTaskNotifyTake+0x90>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c552:	2b00      	cmp	r3, #0
 800c554:	d113      	bne.n	800c57e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c556:	4b1d      	ldr	r3, [pc, #116]	; (800c5cc <ulTaskNotifyTake+0x90>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2201      	movs	r2, #1
 800c55c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d00b      	beq.n	800c57e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c566:	2101      	movs	r1, #1
 800c568:	6838      	ldr	r0, [r7, #0]
 800c56a:	f000 f833 	bl	800c5d4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c56e:	4b18      	ldr	r3, [pc, #96]	; (800c5d0 <ulTaskNotifyTake+0x94>)
 800c570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c574:	601a      	str	r2, [r3, #0]
 800c576:	f3bf 8f4f 	dsb	sy
 800c57a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c57e:	f000 fd29 	bl	800cfd4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c582:	f000 fcf7 	bl	800cf74 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c586:	4b11      	ldr	r3, [pc, #68]	; (800c5cc <ulTaskNotifyTake+0x90>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c58e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00e      	beq.n	800c5b4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d005      	beq.n	800c5a8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c59c:	4b0b      	ldr	r3, [pc, #44]	; (800c5cc <ulTaskNotifyTake+0x90>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800c5a6:	e005      	b.n	800c5b4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c5a8:	4b08      	ldr	r3, [pc, #32]	; (800c5cc <ulTaskNotifyTake+0x90>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	3a01      	subs	r2, #1
 800c5b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c5b4:	4b05      	ldr	r3, [pc, #20]	; (800c5cc <ulTaskNotifyTake+0x90>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		}
		taskEXIT_CRITICAL();
 800c5be:	f000 fd09 	bl	800cfd4 <vPortExitCritical>

		return ulReturn;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
	}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3710      	adds	r7, #16
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	240049ec 	.word	0x240049ec
 800c5d0:	e000ed04 	.word	0xe000ed04

0800c5d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c5de:	4b21      	ldr	r3, [pc, #132]	; (800c664 <prvAddCurrentTaskToDelayedList+0x90>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5e4:	4b20      	ldr	r3, [pc, #128]	; (800c668 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	3304      	adds	r3, #4
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fe fa5a 	bl	800aaa4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f6:	d10a      	bne.n	800c60e <prvAddCurrentTaskToDelayedList+0x3a>
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d007      	beq.n	800c60e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5fe:	4b1a      	ldr	r3, [pc, #104]	; (800c668 <prvAddCurrentTaskToDelayedList+0x94>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	3304      	adds	r3, #4
 800c604:	4619      	mov	r1, r3
 800c606:	4819      	ldr	r0, [pc, #100]	; (800c66c <prvAddCurrentTaskToDelayedList+0x98>)
 800c608:	f7fe f9ef 	bl	800a9ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c60c:	e026      	b.n	800c65c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c60e:	68fa      	ldr	r2, [r7, #12]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	4413      	add	r3, r2
 800c614:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c616:	4b14      	ldr	r3, [pc, #80]	; (800c668 <prvAddCurrentTaskToDelayedList+0x94>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c61e:	68ba      	ldr	r2, [r7, #8]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	429a      	cmp	r2, r3
 800c624:	d209      	bcs.n	800c63a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c626:	4b12      	ldr	r3, [pc, #72]	; (800c670 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	4b0f      	ldr	r3, [pc, #60]	; (800c668 <prvAddCurrentTaskToDelayedList+0x94>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	3304      	adds	r3, #4
 800c630:	4619      	mov	r1, r3
 800c632:	4610      	mov	r0, r2
 800c634:	f7fe f9fd 	bl	800aa32 <vListInsert>
}
 800c638:	e010      	b.n	800c65c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c63a:	4b0e      	ldr	r3, [pc, #56]	; (800c674 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	4b0a      	ldr	r3, [pc, #40]	; (800c668 <prvAddCurrentTaskToDelayedList+0x94>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	3304      	adds	r3, #4
 800c644:	4619      	mov	r1, r3
 800c646:	4610      	mov	r0, r2
 800c648:	f7fe f9f3 	bl	800aa32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c64c:	4b0a      	ldr	r3, [pc, #40]	; (800c678 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	429a      	cmp	r2, r3
 800c654:	d202      	bcs.n	800c65c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c656:	4a08      	ldr	r2, [pc, #32]	; (800c678 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	6013      	str	r3, [r2, #0]
}
 800c65c:	bf00      	nop
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	24004ec4 	.word	0x24004ec4
 800c668:	240049ec 	.word	0x240049ec
 800c66c:	24004eac 	.word	0x24004eac
 800c670:	24004e7c 	.word	0x24004e7c
 800c674:	24004e78 	.word	0x24004e78
 800c678:	24004ee0 	.word	0x24004ee0

0800c67c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b08a      	sub	sp, #40	; 0x28
 800c680:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c682:	2300      	movs	r3, #0
 800c684:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c686:	f000 fb07 	bl	800cc98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c68a:	4b1c      	ldr	r3, [pc, #112]	; (800c6fc <xTimerCreateTimerTask+0x80>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d021      	beq.n	800c6d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c692:	2300      	movs	r3, #0
 800c694:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c696:	2300      	movs	r3, #0
 800c698:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c69a:	1d3a      	adds	r2, r7, #4
 800c69c:	f107 0108 	add.w	r1, r7, #8
 800c6a0:	f107 030c 	add.w	r3, r7, #12
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7fe f959 	bl	800a95c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c6aa:	6879      	ldr	r1, [r7, #4]
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	68fa      	ldr	r2, [r7, #12]
 800c6b0:	9202      	str	r2, [sp, #8]
 800c6b2:	9301      	str	r3, [sp, #4]
 800c6b4:	2302      	movs	r3, #2
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	460a      	mov	r2, r1
 800c6bc:	4910      	ldr	r1, [pc, #64]	; (800c700 <xTimerCreateTimerTask+0x84>)
 800c6be:	4811      	ldr	r0, [pc, #68]	; (800c704 <xTimerCreateTimerTask+0x88>)
 800c6c0:	f7fe ff40 	bl	800b544 <xTaskCreateStatic>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	4a10      	ldr	r2, [pc, #64]	; (800c708 <xTimerCreateTimerTask+0x8c>)
 800c6c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c6ca:	4b0f      	ldr	r3, [pc, #60]	; (800c708 <xTimerCreateTimerTask+0x8c>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d001      	beq.n	800c6d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d10a      	bne.n	800c6f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e0:	f383 8811 	msr	BASEPRI, r3
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	613b      	str	r3, [r7, #16]
}
 800c6ee:	bf00      	nop
 800c6f0:	e7fe      	b.n	800c6f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c6f2:	697b      	ldr	r3, [r7, #20]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3718      	adds	r7, #24
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	24004f24 	.word	0x24004f24
 800c700:	0800d7bc 	.word	0x0800d7bc
 800c704:	0800c841 	.word	0x0800c841
 800c708:	24004f28 	.word	0x24004f28

0800c70c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b08a      	sub	sp, #40	; 0x28
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	607a      	str	r2, [r7, #4]
 800c718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c71a:	2300      	movs	r3, #0
 800c71c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10a      	bne.n	800c73a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c728:	f383 8811 	msr	BASEPRI, r3
 800c72c:	f3bf 8f6f 	isb	sy
 800c730:	f3bf 8f4f 	dsb	sy
 800c734:	623b      	str	r3, [r7, #32]
}
 800c736:	bf00      	nop
 800c738:	e7fe      	b.n	800c738 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c73a:	4b1a      	ldr	r3, [pc, #104]	; (800c7a4 <xTimerGenericCommand+0x98>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d02a      	beq.n	800c798 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	2b05      	cmp	r3, #5
 800c752:	dc18      	bgt.n	800c786 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c754:	f7ff fe66 	bl	800c424 <xTaskGetSchedulerState>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	d109      	bne.n	800c772 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c75e:	4b11      	ldr	r3, [pc, #68]	; (800c7a4 <xTimerGenericCommand+0x98>)
 800c760:	6818      	ldr	r0, [r3, #0]
 800c762:	f107 0110 	add.w	r1, r7, #16
 800c766:	2300      	movs	r3, #0
 800c768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c76a:	f7fe fb03 	bl	800ad74 <xQueueGenericSend>
 800c76e:	6278      	str	r0, [r7, #36]	; 0x24
 800c770:	e012      	b.n	800c798 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c772:	4b0c      	ldr	r3, [pc, #48]	; (800c7a4 <xTimerGenericCommand+0x98>)
 800c774:	6818      	ldr	r0, [r3, #0]
 800c776:	f107 0110 	add.w	r1, r7, #16
 800c77a:	2300      	movs	r3, #0
 800c77c:	2200      	movs	r2, #0
 800c77e:	f7fe faf9 	bl	800ad74 <xQueueGenericSend>
 800c782:	6278      	str	r0, [r7, #36]	; 0x24
 800c784:	e008      	b.n	800c798 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c786:	4b07      	ldr	r3, [pc, #28]	; (800c7a4 <xTimerGenericCommand+0x98>)
 800c788:	6818      	ldr	r0, [r3, #0]
 800c78a:	f107 0110 	add.w	r1, r7, #16
 800c78e:	2300      	movs	r3, #0
 800c790:	683a      	ldr	r2, [r7, #0]
 800c792:	f7fe fbed 	bl	800af70 <xQueueGenericSendFromISR>
 800c796:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3728      	adds	r7, #40	; 0x28
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	24004f24 	.word	0x24004f24

0800c7a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b088      	sub	sp, #32
 800c7ac:	af02      	add	r7, sp, #8
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7b2:	4b22      	ldr	r3, [pc, #136]	; (800c83c <prvProcessExpiredTimer+0x94>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	3304      	adds	r3, #4
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7fe f96f 	bl	800aaa4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7cc:	f003 0304 	and.w	r3, r3, #4
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d022      	beq.n	800c81a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	699a      	ldr	r2, [r3, #24]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	18d1      	adds	r1, r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	6978      	ldr	r0, [r7, #20]
 800c7e2:	f000 f8d1 	bl	800c988 <prvInsertTimerInActiveList>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d01f      	beq.n	800c82c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	6978      	ldr	r0, [r7, #20]
 800c7f8:	f7ff ff88 	bl	800c70c <xTimerGenericCommand>
 800c7fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d113      	bne.n	800c82c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	60fb      	str	r3, [r7, #12]
}
 800c816:	bf00      	nop
 800c818:	e7fe      	b.n	800c818 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c820:	f023 0301 	bic.w	r3, r3, #1
 800c824:	b2da      	uxtb	r2, r3
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	6a1b      	ldr	r3, [r3, #32]
 800c830:	6978      	ldr	r0, [r7, #20]
 800c832:	4798      	blx	r3
}
 800c834:	bf00      	nop
 800c836:	3718      	adds	r7, #24
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	24004f1c 	.word	0x24004f1c

0800c840 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c848:	f107 0308 	add.w	r3, r7, #8
 800c84c:	4618      	mov	r0, r3
 800c84e:	f000 f857 	bl	800c900 <prvGetNextExpireTime>
 800c852:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	4619      	mov	r1, r3
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f000 f803 	bl	800c864 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c85e:	f000 f8d5 	bl	800ca0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c862:	e7f1      	b.n	800c848 <prvTimerTask+0x8>

0800c864 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c86e:	f7ff f9d1 	bl	800bc14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c872:	f107 0308 	add.w	r3, r7, #8
 800c876:	4618      	mov	r0, r3
 800c878:	f000 f866 	bl	800c948 <prvSampleTimeNow>
 800c87c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d130      	bne.n	800c8e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d10a      	bne.n	800c8a0 <prvProcessTimerOrBlockTask+0x3c>
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d806      	bhi.n	800c8a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c892:	f7ff f9cd 	bl	800bc30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c896:	68f9      	ldr	r1, [r7, #12]
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f7ff ff85 	bl	800c7a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c89e:	e024      	b.n	800c8ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d008      	beq.n	800c8b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c8a6:	4b13      	ldr	r3, [pc, #76]	; (800c8f4 <prvProcessTimerOrBlockTask+0x90>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d101      	bne.n	800c8b4 <prvProcessTimerOrBlockTask+0x50>
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e000      	b.n	800c8b6 <prvProcessTimerOrBlockTask+0x52>
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c8b8:	4b0f      	ldr	r3, [pc, #60]	; (800c8f8 <prvProcessTimerOrBlockTask+0x94>)
 800c8ba:	6818      	ldr	r0, [r3, #0]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	1ad3      	subs	r3, r2, r3
 800c8c2:	683a      	ldr	r2, [r7, #0]
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	f7fe fe09 	bl	800b4dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c8ca:	f7ff f9b1 	bl	800bc30 <xTaskResumeAll>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10a      	bne.n	800c8ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c8d4:	4b09      	ldr	r3, [pc, #36]	; (800c8fc <prvProcessTimerOrBlockTask+0x98>)
 800c8d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8da:	601a      	str	r2, [r3, #0]
 800c8dc:	f3bf 8f4f 	dsb	sy
 800c8e0:	f3bf 8f6f 	isb	sy
}
 800c8e4:	e001      	b.n	800c8ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c8e6:	f7ff f9a3 	bl	800bc30 <xTaskResumeAll>
}
 800c8ea:	bf00      	nop
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	24004f20 	.word	0x24004f20
 800c8f8:	24004f24 	.word	0x24004f24
 800c8fc:	e000ed04 	.word	0xe000ed04

0800c900 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c908:	4b0e      	ldr	r3, [pc, #56]	; (800c944 <prvGetNextExpireTime+0x44>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d101      	bne.n	800c916 <prvGetNextExpireTime+0x16>
 800c912:	2201      	movs	r2, #1
 800c914:	e000      	b.n	800c918 <prvGetNextExpireTime+0x18>
 800c916:	2200      	movs	r2, #0
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d105      	bne.n	800c930 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c924:	4b07      	ldr	r3, [pc, #28]	; (800c944 <prvGetNextExpireTime+0x44>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	60fb      	str	r3, [r7, #12]
 800c92e:	e001      	b.n	800c934 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c930:	2300      	movs	r3, #0
 800c932:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c934:	68fb      	ldr	r3, [r7, #12]
}
 800c936:	4618      	mov	r0, r3
 800c938:	3714      	adds	r7, #20
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	24004f1c 	.word	0x24004f1c

0800c948 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c950:	f7ff fa0c 	bl	800bd6c <xTaskGetTickCount>
 800c954:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c956:	4b0b      	ldr	r3, [pc, #44]	; (800c984 <prvSampleTimeNow+0x3c>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	68fa      	ldr	r2, [r7, #12]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d205      	bcs.n	800c96c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c960:	f000 f936 	bl	800cbd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2201      	movs	r2, #1
 800c968:	601a      	str	r2, [r3, #0]
 800c96a:	e002      	b.n	800c972 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c972:	4a04      	ldr	r2, [pc, #16]	; (800c984 <prvSampleTimeNow+0x3c>)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c978:	68fb      	ldr	r3, [r7, #12]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	24004f2c 	.word	0x24004f2c

0800c988 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	607a      	str	r2, [r7, #4]
 800c994:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c996:	2300      	movs	r3, #0
 800c998:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	68ba      	ldr	r2, [r7, #8]
 800c99e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d812      	bhi.n	800c9d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	1ad2      	subs	r2, r2, r3
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	699b      	ldr	r3, [r3, #24]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d302      	bcc.n	800c9c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	617b      	str	r3, [r7, #20]
 800c9c0:	e01b      	b.n	800c9fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c9c2:	4b10      	ldr	r3, [pc, #64]	; (800ca04 <prvInsertTimerInActiveList+0x7c>)
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	3304      	adds	r3, #4
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	4610      	mov	r0, r2
 800c9ce:	f7fe f830 	bl	800aa32 <vListInsert>
 800c9d2:	e012      	b.n	800c9fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d206      	bcs.n	800c9ea <prvInsertTimerInActiveList+0x62>
 800c9dc:	68ba      	ldr	r2, [r7, #8]
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d302      	bcc.n	800c9ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	617b      	str	r3, [r7, #20]
 800c9e8:	e007      	b.n	800c9fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9ea:	4b07      	ldr	r3, [pc, #28]	; (800ca08 <prvInsertTimerInActiveList+0x80>)
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	3304      	adds	r3, #4
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	4610      	mov	r0, r2
 800c9f6:	f7fe f81c 	bl	800aa32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c9fa:	697b      	ldr	r3, [r7, #20]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3718      	adds	r7, #24
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	24004f20 	.word	0x24004f20
 800ca08:	24004f1c 	.word	0x24004f1c

0800ca0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b08e      	sub	sp, #56	; 0x38
 800ca10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca12:	e0ca      	b.n	800cbaa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	da18      	bge.n	800ca4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ca1a:	1d3b      	adds	r3, r7, #4
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ca20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10a      	bne.n	800ca3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ca26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2a:	f383 8811 	msr	BASEPRI, r3
 800ca2e:	f3bf 8f6f 	isb	sy
 800ca32:	f3bf 8f4f 	dsb	sy
 800ca36:	61fb      	str	r3, [r7, #28]
}
 800ca38:	bf00      	nop
 800ca3a:	e7fe      	b.n	800ca3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ca3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca42:	6850      	ldr	r0, [r2, #4]
 800ca44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca46:	6892      	ldr	r2, [r2, #8]
 800ca48:	4611      	mov	r1, r2
 800ca4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f2c0 80ab 	blt.w	800cbaa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ca58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5a:	695b      	ldr	r3, [r3, #20]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d004      	beq.n	800ca6a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca62:	3304      	adds	r3, #4
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7fe f81d 	bl	800aaa4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca6a:	463b      	mov	r3, r7
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7ff ff6b 	bl	800c948 <prvSampleTimeNow>
 800ca72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2b09      	cmp	r3, #9
 800ca78:	f200 8096 	bhi.w	800cba8 <prvProcessReceivedCommands+0x19c>
 800ca7c:	a201      	add	r2, pc, #4	; (adr r2, 800ca84 <prvProcessReceivedCommands+0x78>)
 800ca7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca82:	bf00      	nop
 800ca84:	0800caad 	.word	0x0800caad
 800ca88:	0800caad 	.word	0x0800caad
 800ca8c:	0800caad 	.word	0x0800caad
 800ca90:	0800cb21 	.word	0x0800cb21
 800ca94:	0800cb35 	.word	0x0800cb35
 800ca98:	0800cb7f 	.word	0x0800cb7f
 800ca9c:	0800caad 	.word	0x0800caad
 800caa0:	0800caad 	.word	0x0800caad
 800caa4:	0800cb21 	.word	0x0800cb21
 800caa8:	0800cb35 	.word	0x0800cb35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800caac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cab2:	f043 0301 	orr.w	r3, r3, #1
 800cab6:	b2da      	uxtb	r2, r3
 800cab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cabe:	68ba      	ldr	r2, [r7, #8]
 800cac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac2:	699b      	ldr	r3, [r3, #24]
 800cac4:	18d1      	adds	r1, r2, r3
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cacc:	f7ff ff5c 	bl	800c988 <prvInsertTimerInActiveList>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d069      	beq.n	800cbaa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad8:	6a1b      	ldr	r3, [r3, #32]
 800cada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cadc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cae4:	f003 0304 	and.w	r3, r3, #4
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d05e      	beq.n	800cbaa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf0:	699b      	ldr	r3, [r3, #24]
 800caf2:	441a      	add	r2, r3
 800caf4:	2300      	movs	r3, #0
 800caf6:	9300      	str	r3, [sp, #0]
 800caf8:	2300      	movs	r3, #0
 800cafa:	2100      	movs	r1, #0
 800cafc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cafe:	f7ff fe05 	bl	800c70c <xTimerGenericCommand>
 800cb02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cb04:	6a3b      	ldr	r3, [r7, #32]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d14f      	bne.n	800cbaa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	61bb      	str	r3, [r7, #24]
}
 800cb1c:	bf00      	nop
 800cb1e:	e7fe      	b.n	800cb1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb26:	f023 0301 	bic.w	r3, r3, #1
 800cb2a:	b2da      	uxtb	r2, r3
 800cb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cb32:	e03a      	b.n	800cbaa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb3a:	f043 0301 	orr.w	r3, r3, #1
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cb46:	68ba      	ldr	r2, [r7, #8]
 800cb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4e:	699b      	ldr	r3, [r3, #24]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d10a      	bne.n	800cb6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb58:	f383 8811 	msr	BASEPRI, r3
 800cb5c:	f3bf 8f6f 	isb	sy
 800cb60:	f3bf 8f4f 	dsb	sy
 800cb64:	617b      	str	r3, [r7, #20]
}
 800cb66:	bf00      	nop
 800cb68:	e7fe      	b.n	800cb68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6c:	699a      	ldr	r2, [r3, #24]
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb70:	18d1      	adds	r1, r2, r3
 800cb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb78:	f7ff ff06 	bl	800c988 <prvInsertTimerInActiveList>
					break;
 800cb7c:	e015      	b.n	800cbaa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb84:	f003 0302 	and.w	r3, r3, #2
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d103      	bne.n	800cb94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cb8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb8e:	f000 fbdf 	bl	800d350 <vPortFree>
 800cb92:	e00a      	b.n	800cbaa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb9a:	f023 0301 	bic.w	r3, r3, #1
 800cb9e:	b2da      	uxtb	r2, r3
 800cba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cba6:	e000      	b.n	800cbaa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800cba8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbaa:	4b08      	ldr	r3, [pc, #32]	; (800cbcc <prvProcessReceivedCommands+0x1c0>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	1d39      	adds	r1, r7, #4
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fe fa78 	bl	800b0a8 <xQueueReceive>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f47f af2a 	bne.w	800ca14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cbc0:	bf00      	nop
 800cbc2:	bf00      	nop
 800cbc4:	3730      	adds	r7, #48	; 0x30
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	24004f24 	.word	0x24004f24

0800cbd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b088      	sub	sp, #32
 800cbd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cbd6:	e048      	b.n	800cc6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cbd8:	4b2d      	ldr	r3, [pc, #180]	; (800cc90 <prvSwitchTimerLists+0xc0>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbe2:	4b2b      	ldr	r3, [pc, #172]	; (800cc90 <prvSwitchTimerLists+0xc0>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	3304      	adds	r3, #4
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fd ff57 	bl	800aaa4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	6a1b      	ldr	r3, [r3, #32]
 800cbfa:	68f8      	ldr	r0, [r7, #12]
 800cbfc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc04:	f003 0304 	and.w	r3, r3, #4
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d02e      	beq.n	800cc6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	699b      	ldr	r3, [r3, #24]
 800cc10:	693a      	ldr	r2, [r7, #16]
 800cc12:	4413      	add	r3, r2
 800cc14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cc16:	68ba      	ldr	r2, [r7, #8]
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d90e      	bls.n	800cc3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	68ba      	ldr	r2, [r7, #8]
 800cc22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc2a:	4b19      	ldr	r3, [pc, #100]	; (800cc90 <prvSwitchTimerLists+0xc0>)
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	3304      	adds	r3, #4
 800cc32:	4619      	mov	r1, r3
 800cc34:	4610      	mov	r0, r2
 800cc36:	f7fd fefc 	bl	800aa32 <vListInsert>
 800cc3a:	e016      	b.n	800cc6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	2300      	movs	r3, #0
 800cc42:	693a      	ldr	r2, [r7, #16]
 800cc44:	2100      	movs	r1, #0
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f7ff fd60 	bl	800c70c <xTimerGenericCommand>
 800cc4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d10a      	bne.n	800cc6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc58:	f383 8811 	msr	BASEPRI, r3
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f3bf 8f4f 	dsb	sy
 800cc64:	603b      	str	r3, [r7, #0]
}
 800cc66:	bf00      	nop
 800cc68:	e7fe      	b.n	800cc68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc6a:	4b09      	ldr	r3, [pc, #36]	; (800cc90 <prvSwitchTimerLists+0xc0>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1b1      	bne.n	800cbd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cc74:	4b06      	ldr	r3, [pc, #24]	; (800cc90 <prvSwitchTimerLists+0xc0>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cc7a:	4b06      	ldr	r3, [pc, #24]	; (800cc94 <prvSwitchTimerLists+0xc4>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a04      	ldr	r2, [pc, #16]	; (800cc90 <prvSwitchTimerLists+0xc0>)
 800cc80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cc82:	4a04      	ldr	r2, [pc, #16]	; (800cc94 <prvSwitchTimerLists+0xc4>)
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	6013      	str	r3, [r2, #0]
}
 800cc88:	bf00      	nop
 800cc8a:	3718      	adds	r7, #24
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	24004f1c 	.word	0x24004f1c
 800cc94:	24004f20 	.word	0x24004f20

0800cc98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cc9e:	f000 f969 	bl	800cf74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cca2:	4b15      	ldr	r3, [pc, #84]	; (800ccf8 <prvCheckForValidListAndQueue+0x60>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d120      	bne.n	800ccec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ccaa:	4814      	ldr	r0, [pc, #80]	; (800ccfc <prvCheckForValidListAndQueue+0x64>)
 800ccac:	f7fd fe70 	bl	800a990 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ccb0:	4813      	ldr	r0, [pc, #76]	; (800cd00 <prvCheckForValidListAndQueue+0x68>)
 800ccb2:	f7fd fe6d 	bl	800a990 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ccb6:	4b13      	ldr	r3, [pc, #76]	; (800cd04 <prvCheckForValidListAndQueue+0x6c>)
 800ccb8:	4a10      	ldr	r2, [pc, #64]	; (800ccfc <prvCheckForValidListAndQueue+0x64>)
 800ccba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ccbc:	4b12      	ldr	r3, [pc, #72]	; (800cd08 <prvCheckForValidListAndQueue+0x70>)
 800ccbe:	4a10      	ldr	r2, [pc, #64]	; (800cd00 <prvCheckForValidListAndQueue+0x68>)
 800ccc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	9300      	str	r3, [sp, #0]
 800ccc6:	4b11      	ldr	r3, [pc, #68]	; (800cd0c <prvCheckForValidListAndQueue+0x74>)
 800ccc8:	4a11      	ldr	r2, [pc, #68]	; (800cd10 <prvCheckForValidListAndQueue+0x78>)
 800ccca:	2110      	movs	r1, #16
 800cccc:	200a      	movs	r0, #10
 800ccce:	f7fd ff7b 	bl	800abc8 <xQueueGenericCreateStatic>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	4a08      	ldr	r2, [pc, #32]	; (800ccf8 <prvCheckForValidListAndQueue+0x60>)
 800ccd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ccd8:	4b07      	ldr	r3, [pc, #28]	; (800ccf8 <prvCheckForValidListAndQueue+0x60>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d005      	beq.n	800ccec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cce0:	4b05      	ldr	r3, [pc, #20]	; (800ccf8 <prvCheckForValidListAndQueue+0x60>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	490b      	ldr	r1, [pc, #44]	; (800cd14 <prvCheckForValidListAndQueue+0x7c>)
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7fe fbce 	bl	800b488 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ccec:	f000 f972 	bl	800cfd4 <vPortExitCritical>
}
 800ccf0:	bf00      	nop
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	24004f24 	.word	0x24004f24
 800ccfc:	24004ef4 	.word	0x24004ef4
 800cd00:	24004f08 	.word	0x24004f08
 800cd04:	24004f1c 	.word	0x24004f1c
 800cd08:	24004f20 	.word	0x24004f20
 800cd0c:	24004fd0 	.word	0x24004fd0
 800cd10:	24004f30 	.word	0x24004f30
 800cd14:	0800d7c4 	.word	0x0800d7c4

0800cd18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	3b04      	subs	r3, #4
 800cd28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cd30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	3b04      	subs	r3, #4
 800cd36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	f023 0201 	bic.w	r2, r3, #1
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	3b04      	subs	r3, #4
 800cd46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cd48:	4a0c      	ldr	r2, [pc, #48]	; (800cd7c <pxPortInitialiseStack+0x64>)
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	3b14      	subs	r3, #20
 800cd52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	3b04      	subs	r3, #4
 800cd5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f06f 0202 	mvn.w	r2, #2
 800cd66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	3b20      	subs	r3, #32
 800cd6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3714      	adds	r7, #20
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr
 800cd7c:	0800cd81 	.word	0x0800cd81

0800cd80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cd80:	b480      	push	{r7}
 800cd82:	b085      	sub	sp, #20
 800cd84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cd86:	2300      	movs	r3, #0
 800cd88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cd8a:	4b12      	ldr	r3, [pc, #72]	; (800cdd4 <prvTaskExitError+0x54>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd92:	d00a      	beq.n	800cdaa <prvTaskExitError+0x2a>
	__asm volatile
 800cd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd98:	f383 8811 	msr	BASEPRI, r3
 800cd9c:	f3bf 8f6f 	isb	sy
 800cda0:	f3bf 8f4f 	dsb	sy
 800cda4:	60fb      	str	r3, [r7, #12]
}
 800cda6:	bf00      	nop
 800cda8:	e7fe      	b.n	800cda8 <prvTaskExitError+0x28>
	__asm volatile
 800cdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdae:	f383 8811 	msr	BASEPRI, r3
 800cdb2:	f3bf 8f6f 	isb	sy
 800cdb6:	f3bf 8f4f 	dsb	sy
 800cdba:	60bb      	str	r3, [r7, #8]
}
 800cdbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cdbe:	bf00      	nop
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d0fc      	beq.n	800cdc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cdc6:	bf00      	nop
 800cdc8:	bf00      	nop
 800cdca:	3714      	adds	r7, #20
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr
 800cdd4:	24004020 	.word	0x24004020
	...

0800cde0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cde0:	4b07      	ldr	r3, [pc, #28]	; (800ce00 <pxCurrentTCBConst2>)
 800cde2:	6819      	ldr	r1, [r3, #0]
 800cde4:	6808      	ldr	r0, [r1, #0]
 800cde6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdea:	f380 8809 	msr	PSP, r0
 800cdee:	f3bf 8f6f 	isb	sy
 800cdf2:	f04f 0000 	mov.w	r0, #0
 800cdf6:	f380 8811 	msr	BASEPRI, r0
 800cdfa:	4770      	bx	lr
 800cdfc:	f3af 8000 	nop.w

0800ce00 <pxCurrentTCBConst2>:
 800ce00:	240049ec 	.word	0x240049ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ce04:	bf00      	nop
 800ce06:	bf00      	nop

0800ce08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ce08:	4808      	ldr	r0, [pc, #32]	; (800ce2c <prvPortStartFirstTask+0x24>)
 800ce0a:	6800      	ldr	r0, [r0, #0]
 800ce0c:	6800      	ldr	r0, [r0, #0]
 800ce0e:	f380 8808 	msr	MSP, r0
 800ce12:	f04f 0000 	mov.w	r0, #0
 800ce16:	f380 8814 	msr	CONTROL, r0
 800ce1a:	b662      	cpsie	i
 800ce1c:	b661      	cpsie	f
 800ce1e:	f3bf 8f4f 	dsb	sy
 800ce22:	f3bf 8f6f 	isb	sy
 800ce26:	df00      	svc	0
 800ce28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ce2a:	bf00      	nop
 800ce2c:	e000ed08 	.word	0xe000ed08

0800ce30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b086      	sub	sp, #24
 800ce34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ce36:	4b46      	ldr	r3, [pc, #280]	; (800cf50 <xPortStartScheduler+0x120>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a46      	ldr	r2, [pc, #280]	; (800cf54 <xPortStartScheduler+0x124>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d10a      	bne.n	800ce56 <xPortStartScheduler+0x26>
	__asm volatile
 800ce40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce44:	f383 8811 	msr	BASEPRI, r3
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	613b      	str	r3, [r7, #16]
}
 800ce52:	bf00      	nop
 800ce54:	e7fe      	b.n	800ce54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ce56:	4b3e      	ldr	r3, [pc, #248]	; (800cf50 <xPortStartScheduler+0x120>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a3f      	ldr	r2, [pc, #252]	; (800cf58 <xPortStartScheduler+0x128>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d10a      	bne.n	800ce76 <xPortStartScheduler+0x46>
	__asm volatile
 800ce60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce64:	f383 8811 	msr	BASEPRI, r3
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	60fb      	str	r3, [r7, #12]
}
 800ce72:	bf00      	nop
 800ce74:	e7fe      	b.n	800ce74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ce76:	4b39      	ldr	r3, [pc, #228]	; (800cf5c <xPortStartScheduler+0x12c>)
 800ce78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	22ff      	movs	r2, #255	; 0xff
 800ce86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ce90:	78fb      	ldrb	r3, [r7, #3]
 800ce92:	b2db      	uxtb	r3, r3
 800ce94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ce98:	b2da      	uxtb	r2, r3
 800ce9a:	4b31      	ldr	r3, [pc, #196]	; (800cf60 <xPortStartScheduler+0x130>)
 800ce9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ce9e:	4b31      	ldr	r3, [pc, #196]	; (800cf64 <xPortStartScheduler+0x134>)
 800cea0:	2207      	movs	r2, #7
 800cea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cea4:	e009      	b.n	800ceba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cea6:	4b2f      	ldr	r3, [pc, #188]	; (800cf64 <xPortStartScheduler+0x134>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	4a2d      	ldr	r2, [pc, #180]	; (800cf64 <xPortStartScheduler+0x134>)
 800ceae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ceb0:	78fb      	ldrb	r3, [r7, #3]
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	005b      	lsls	r3, r3, #1
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ceba:	78fb      	ldrb	r3, [r7, #3]
 800cebc:	b2db      	uxtb	r3, r3
 800cebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cec2:	2b80      	cmp	r3, #128	; 0x80
 800cec4:	d0ef      	beq.n	800cea6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cec6:	4b27      	ldr	r3, [pc, #156]	; (800cf64 <xPortStartScheduler+0x134>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f1c3 0307 	rsb	r3, r3, #7
 800cece:	2b04      	cmp	r3, #4
 800ced0:	d00a      	beq.n	800cee8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ced2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	60bb      	str	r3, [r7, #8]
}
 800cee4:	bf00      	nop
 800cee6:	e7fe      	b.n	800cee6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cee8:	4b1e      	ldr	r3, [pc, #120]	; (800cf64 <xPortStartScheduler+0x134>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	021b      	lsls	r3, r3, #8
 800ceee:	4a1d      	ldr	r2, [pc, #116]	; (800cf64 <xPortStartScheduler+0x134>)
 800cef0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cef2:	4b1c      	ldr	r3, [pc, #112]	; (800cf64 <xPortStartScheduler+0x134>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cefa:	4a1a      	ldr	r2, [pc, #104]	; (800cf64 <xPortStartScheduler+0x134>)
 800cefc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	b2da      	uxtb	r2, r3
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cf06:	4b18      	ldr	r3, [pc, #96]	; (800cf68 <xPortStartScheduler+0x138>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a17      	ldr	r2, [pc, #92]	; (800cf68 <xPortStartScheduler+0x138>)
 800cf0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cf10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cf12:	4b15      	ldr	r3, [pc, #84]	; (800cf68 <xPortStartScheduler+0x138>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4a14      	ldr	r2, [pc, #80]	; (800cf68 <xPortStartScheduler+0x138>)
 800cf18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cf1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cf1e:	f000 f8dd 	bl	800d0dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cf22:	4b12      	ldr	r3, [pc, #72]	; (800cf6c <xPortStartScheduler+0x13c>)
 800cf24:	2200      	movs	r2, #0
 800cf26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cf28:	f000 f8fc 	bl	800d124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cf2c:	4b10      	ldr	r3, [pc, #64]	; (800cf70 <xPortStartScheduler+0x140>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a0f      	ldr	r2, [pc, #60]	; (800cf70 <xPortStartScheduler+0x140>)
 800cf32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cf36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cf38:	f7ff ff66 	bl	800ce08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cf3c:	f7fe ffe0 	bl	800bf00 <vTaskSwitchContext>
	prvTaskExitError();
 800cf40:	f7ff ff1e 	bl	800cd80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cf44:	2300      	movs	r3, #0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3718      	adds	r7, #24
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	e000ed00 	.word	0xe000ed00
 800cf54:	410fc271 	.word	0x410fc271
 800cf58:	410fc270 	.word	0x410fc270
 800cf5c:	e000e400 	.word	0xe000e400
 800cf60:	24005020 	.word	0x24005020
 800cf64:	24005024 	.word	0x24005024
 800cf68:	e000ed20 	.word	0xe000ed20
 800cf6c:	24004020 	.word	0x24004020
 800cf70:	e000ef34 	.word	0xe000ef34

0800cf74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
	__asm volatile
 800cf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	607b      	str	r3, [r7, #4]
}
 800cf8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cf8e:	4b0f      	ldr	r3, [pc, #60]	; (800cfcc <vPortEnterCritical+0x58>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	3301      	adds	r3, #1
 800cf94:	4a0d      	ldr	r2, [pc, #52]	; (800cfcc <vPortEnterCritical+0x58>)
 800cf96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cf98:	4b0c      	ldr	r3, [pc, #48]	; (800cfcc <vPortEnterCritical+0x58>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d10f      	bne.n	800cfc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cfa0:	4b0b      	ldr	r3, [pc, #44]	; (800cfd0 <vPortEnterCritical+0x5c>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00a      	beq.n	800cfc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfae:	f383 8811 	msr	BASEPRI, r3
 800cfb2:	f3bf 8f6f 	isb	sy
 800cfb6:	f3bf 8f4f 	dsb	sy
 800cfba:	603b      	str	r3, [r7, #0]
}
 800cfbc:	bf00      	nop
 800cfbe:	e7fe      	b.n	800cfbe <vPortEnterCritical+0x4a>
	}
}
 800cfc0:	bf00      	nop
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr
 800cfcc:	24004020 	.word	0x24004020
 800cfd0:	e000ed04 	.word	0xe000ed04

0800cfd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cfda:	4b12      	ldr	r3, [pc, #72]	; (800d024 <vPortExitCritical+0x50>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d10a      	bne.n	800cff8 <vPortExitCritical+0x24>
	__asm volatile
 800cfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe6:	f383 8811 	msr	BASEPRI, r3
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	607b      	str	r3, [r7, #4]
}
 800cff4:	bf00      	nop
 800cff6:	e7fe      	b.n	800cff6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cff8:	4b0a      	ldr	r3, [pc, #40]	; (800d024 <vPortExitCritical+0x50>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	3b01      	subs	r3, #1
 800cffe:	4a09      	ldr	r2, [pc, #36]	; (800d024 <vPortExitCritical+0x50>)
 800d000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d002:	4b08      	ldr	r3, [pc, #32]	; (800d024 <vPortExitCritical+0x50>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d105      	bne.n	800d016 <vPortExitCritical+0x42>
 800d00a:	2300      	movs	r3, #0
 800d00c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	f383 8811 	msr	BASEPRI, r3
}
 800d014:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d016:	bf00      	nop
 800d018:	370c      	adds	r7, #12
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop
 800d024:	24004020 	.word	0x24004020
	...

0800d030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d030:	f3ef 8009 	mrs	r0, PSP
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	4b15      	ldr	r3, [pc, #84]	; (800d090 <pxCurrentTCBConst>)
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	f01e 0f10 	tst.w	lr, #16
 800d040:	bf08      	it	eq
 800d042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d04a:	6010      	str	r0, [r2, #0]
 800d04c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d050:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d054:	f380 8811 	msr	BASEPRI, r0
 800d058:	f3bf 8f4f 	dsb	sy
 800d05c:	f3bf 8f6f 	isb	sy
 800d060:	f7fe ff4e 	bl	800bf00 <vTaskSwitchContext>
 800d064:	f04f 0000 	mov.w	r0, #0
 800d068:	f380 8811 	msr	BASEPRI, r0
 800d06c:	bc09      	pop	{r0, r3}
 800d06e:	6819      	ldr	r1, [r3, #0]
 800d070:	6808      	ldr	r0, [r1, #0]
 800d072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d076:	f01e 0f10 	tst.w	lr, #16
 800d07a:	bf08      	it	eq
 800d07c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d080:	f380 8809 	msr	PSP, r0
 800d084:	f3bf 8f6f 	isb	sy
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop
 800d08c:	f3af 8000 	nop.w

0800d090 <pxCurrentTCBConst>:
 800d090:	240049ec 	.word	0x240049ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d094:	bf00      	nop
 800d096:	bf00      	nop

0800d098 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
	__asm volatile
 800d09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a2:	f383 8811 	msr	BASEPRI, r3
 800d0a6:	f3bf 8f6f 	isb	sy
 800d0aa:	f3bf 8f4f 	dsb	sy
 800d0ae:	607b      	str	r3, [r7, #4]
}
 800d0b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d0b2:	f7fe fe6b 	bl	800bd8c <xTaskIncrementTick>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d003      	beq.n	800d0c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d0bc:	4b06      	ldr	r3, [pc, #24]	; (800d0d8 <xPortSysTickHandler+0x40>)
 800d0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0c2:	601a      	str	r2, [r3, #0]
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	f383 8811 	msr	BASEPRI, r3
}
 800d0ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d0d0:	bf00      	nop
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	e000ed04 	.word	0xe000ed04

0800d0dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d0dc:	b480      	push	{r7}
 800d0de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d0e0:	4b0b      	ldr	r3, [pc, #44]	; (800d110 <vPortSetupTimerInterrupt+0x34>)
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d0e6:	4b0b      	ldr	r3, [pc, #44]	; (800d114 <vPortSetupTimerInterrupt+0x38>)
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d0ec:	4b0a      	ldr	r3, [pc, #40]	; (800d118 <vPortSetupTimerInterrupt+0x3c>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a0a      	ldr	r2, [pc, #40]	; (800d11c <vPortSetupTimerInterrupt+0x40>)
 800d0f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d0f6:	099b      	lsrs	r3, r3, #6
 800d0f8:	4a09      	ldr	r2, [pc, #36]	; (800d120 <vPortSetupTimerInterrupt+0x44>)
 800d0fa:	3b01      	subs	r3, #1
 800d0fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d0fe:	4b04      	ldr	r3, [pc, #16]	; (800d110 <vPortSetupTimerInterrupt+0x34>)
 800d100:	2207      	movs	r2, #7
 800d102:	601a      	str	r2, [r3, #0]
}
 800d104:	bf00      	nop
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	e000e010 	.word	0xe000e010
 800d114:	e000e018 	.word	0xe000e018
 800d118:	24004010 	.word	0x24004010
 800d11c:	10624dd3 	.word	0x10624dd3
 800d120:	e000e014 	.word	0xe000e014

0800d124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d134 <vPortEnableVFP+0x10>
 800d128:	6801      	ldr	r1, [r0, #0]
 800d12a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d12e:	6001      	str	r1, [r0, #0]
 800d130:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d132:	bf00      	nop
 800d134:	e000ed88 	.word	0xe000ed88

0800d138 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d138:	b480      	push	{r7}
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d13e:	f3ef 8305 	mrs	r3, IPSR
 800d142:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2b0f      	cmp	r3, #15
 800d148:	d914      	bls.n	800d174 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d14a:	4a17      	ldr	r2, [pc, #92]	; (800d1a8 <vPortValidateInterruptPriority+0x70>)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	4413      	add	r3, r2
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d154:	4b15      	ldr	r3, [pc, #84]	; (800d1ac <vPortValidateInterruptPriority+0x74>)
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	7afa      	ldrb	r2, [r7, #11]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d20a      	bcs.n	800d174 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	607b      	str	r3, [r7, #4]
}
 800d170:	bf00      	nop
 800d172:	e7fe      	b.n	800d172 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d174:	4b0e      	ldr	r3, [pc, #56]	; (800d1b0 <vPortValidateInterruptPriority+0x78>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d17c:	4b0d      	ldr	r3, [pc, #52]	; (800d1b4 <vPortValidateInterruptPriority+0x7c>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	429a      	cmp	r2, r3
 800d182:	d90a      	bls.n	800d19a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d188:	f383 8811 	msr	BASEPRI, r3
 800d18c:	f3bf 8f6f 	isb	sy
 800d190:	f3bf 8f4f 	dsb	sy
 800d194:	603b      	str	r3, [r7, #0]
}
 800d196:	bf00      	nop
 800d198:	e7fe      	b.n	800d198 <vPortValidateInterruptPriority+0x60>
	}
 800d19a:	bf00      	nop
 800d19c:	3714      	adds	r7, #20
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	e000e3f0 	.word	0xe000e3f0
 800d1ac:	24005020 	.word	0x24005020
 800d1b0:	e000ed0c 	.word	0xe000ed0c
 800d1b4:	24005024 	.word	0x24005024

0800d1b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b08a      	sub	sp, #40	; 0x28
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d1c4:	f7fe fd26 	bl	800bc14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d1c8:	4b5b      	ldr	r3, [pc, #364]	; (800d338 <pvPortMalloc+0x180>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d101      	bne.n	800d1d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d1d0:	f000 f920 	bl	800d414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d1d4:	4b59      	ldr	r3, [pc, #356]	; (800d33c <pvPortMalloc+0x184>)
 800d1d6:	681a      	ldr	r2, [r3, #0]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	4013      	ands	r3, r2
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	f040 8093 	bne.w	800d308 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d01d      	beq.n	800d224 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d1e8:	2208      	movs	r2, #8
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f003 0307 	and.w	r3, r3, #7
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d014      	beq.n	800d224 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f023 0307 	bic.w	r3, r3, #7
 800d200:	3308      	adds	r3, #8
 800d202:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f003 0307 	and.w	r3, r3, #7
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00a      	beq.n	800d224 <pvPortMalloc+0x6c>
	__asm volatile
 800d20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	617b      	str	r3, [r7, #20]
}
 800d220:	bf00      	nop
 800d222:	e7fe      	b.n	800d222 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d06e      	beq.n	800d308 <pvPortMalloc+0x150>
 800d22a:	4b45      	ldr	r3, [pc, #276]	; (800d340 <pvPortMalloc+0x188>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	429a      	cmp	r2, r3
 800d232:	d869      	bhi.n	800d308 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d234:	4b43      	ldr	r3, [pc, #268]	; (800d344 <pvPortMalloc+0x18c>)
 800d236:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d238:	4b42      	ldr	r3, [pc, #264]	; (800d344 <pvPortMalloc+0x18c>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d23e:	e004      	b.n	800d24a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d242:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	429a      	cmp	r2, r3
 800d252:	d903      	bls.n	800d25c <pvPortMalloc+0xa4>
 800d254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d1f1      	bne.n	800d240 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d25c:	4b36      	ldr	r3, [pc, #216]	; (800d338 <pvPortMalloc+0x180>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d262:	429a      	cmp	r2, r3
 800d264:	d050      	beq.n	800d308 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d266:	6a3b      	ldr	r3, [r7, #32]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2208      	movs	r2, #8
 800d26c:	4413      	add	r3, r2
 800d26e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	6a3b      	ldr	r3, [r7, #32]
 800d276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27a:	685a      	ldr	r2, [r3, #4]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	1ad2      	subs	r2, r2, r3
 800d280:	2308      	movs	r3, #8
 800d282:	005b      	lsls	r3, r3, #1
 800d284:	429a      	cmp	r2, r3
 800d286:	d91f      	bls.n	800d2c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	4413      	add	r3, r2
 800d28e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d290:	69bb      	ldr	r3, [r7, #24]
 800d292:	f003 0307 	and.w	r3, r3, #7
 800d296:	2b00      	cmp	r3, #0
 800d298:	d00a      	beq.n	800d2b0 <pvPortMalloc+0xf8>
	__asm volatile
 800d29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29e:	f383 8811 	msr	BASEPRI, r3
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	f3bf 8f4f 	dsb	sy
 800d2aa:	613b      	str	r3, [r7, #16]
}
 800d2ac:	bf00      	nop
 800d2ae:	e7fe      	b.n	800d2ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b2:	685a      	ldr	r2, [r3, #4]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	1ad2      	subs	r2, r2, r3
 800d2b8:	69bb      	ldr	r3, [r7, #24]
 800d2ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d2c2:	69b8      	ldr	r0, [r7, #24]
 800d2c4:	f000 f908 	bl	800d4d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d2c8:	4b1d      	ldr	r3, [pc, #116]	; (800d340 <pvPortMalloc+0x188>)
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	1ad3      	subs	r3, r2, r3
 800d2d2:	4a1b      	ldr	r2, [pc, #108]	; (800d340 <pvPortMalloc+0x188>)
 800d2d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d2d6:	4b1a      	ldr	r3, [pc, #104]	; (800d340 <pvPortMalloc+0x188>)
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	4b1b      	ldr	r3, [pc, #108]	; (800d348 <pvPortMalloc+0x190>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d203      	bcs.n	800d2ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d2e2:	4b17      	ldr	r3, [pc, #92]	; (800d340 <pvPortMalloc+0x188>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a18      	ldr	r2, [pc, #96]	; (800d348 <pvPortMalloc+0x190>)
 800d2e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ec:	685a      	ldr	r2, [r3, #4]
 800d2ee:	4b13      	ldr	r3, [pc, #76]	; (800d33c <pvPortMalloc+0x184>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	431a      	orrs	r2, r3
 800d2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d2fe:	4b13      	ldr	r3, [pc, #76]	; (800d34c <pvPortMalloc+0x194>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	3301      	adds	r3, #1
 800d304:	4a11      	ldr	r2, [pc, #68]	; (800d34c <pvPortMalloc+0x194>)
 800d306:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d308:	f7fe fc92 	bl	800bc30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	f003 0307 	and.w	r3, r3, #7
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00a      	beq.n	800d32c <pvPortMalloc+0x174>
	__asm volatile
 800d316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31a:	f383 8811 	msr	BASEPRI, r3
 800d31e:	f3bf 8f6f 	isb	sy
 800d322:	f3bf 8f4f 	dsb	sy
 800d326:	60fb      	str	r3, [r7, #12]
}
 800d328:	bf00      	nop
 800d32a:	e7fe      	b.n	800d32a <pvPortMalloc+0x172>
	return pvReturn;
 800d32c:	69fb      	ldr	r3, [r7, #28]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3728      	adds	r7, #40	; 0x28
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	24008c30 	.word	0x24008c30
 800d33c:	24008c44 	.word	0x24008c44
 800d340:	24008c34 	.word	0x24008c34
 800d344:	24008c28 	.word	0x24008c28
 800d348:	24008c38 	.word	0x24008c38
 800d34c:	24008c3c 	.word	0x24008c3c

0800d350 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d04d      	beq.n	800d3fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d362:	2308      	movs	r3, #8
 800d364:	425b      	negs	r3, r3
 800d366:	697a      	ldr	r2, [r7, #20]
 800d368:	4413      	add	r3, r2
 800d36a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	685a      	ldr	r2, [r3, #4]
 800d374:	4b24      	ldr	r3, [pc, #144]	; (800d408 <vPortFree+0xb8>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4013      	ands	r3, r2
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d10a      	bne.n	800d394 <vPortFree+0x44>
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	60fb      	str	r3, [r7, #12]
}
 800d390:	bf00      	nop
 800d392:	e7fe      	b.n	800d392 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00a      	beq.n	800d3b2 <vPortFree+0x62>
	__asm volatile
 800d39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a0:	f383 8811 	msr	BASEPRI, r3
 800d3a4:	f3bf 8f6f 	isb	sy
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	60bb      	str	r3, [r7, #8]
}
 800d3ae:	bf00      	nop
 800d3b0:	e7fe      	b.n	800d3b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	685a      	ldr	r2, [r3, #4]
 800d3b6:	4b14      	ldr	r3, [pc, #80]	; (800d408 <vPortFree+0xb8>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4013      	ands	r3, r2
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d01e      	beq.n	800d3fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d11a      	bne.n	800d3fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	685a      	ldr	r2, [r3, #4]
 800d3cc:	4b0e      	ldr	r3, [pc, #56]	; (800d408 <vPortFree+0xb8>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	43db      	mvns	r3, r3
 800d3d2:	401a      	ands	r2, r3
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d3d8:	f7fe fc1c 	bl	800bc14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	685a      	ldr	r2, [r3, #4]
 800d3e0:	4b0a      	ldr	r3, [pc, #40]	; (800d40c <vPortFree+0xbc>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	4a09      	ldr	r2, [pc, #36]	; (800d40c <vPortFree+0xbc>)
 800d3e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d3ea:	6938      	ldr	r0, [r7, #16]
 800d3ec:	f000 f874 	bl	800d4d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d3f0:	4b07      	ldr	r3, [pc, #28]	; (800d410 <vPortFree+0xc0>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	4a06      	ldr	r2, [pc, #24]	; (800d410 <vPortFree+0xc0>)
 800d3f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d3fa:	f7fe fc19 	bl	800bc30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d3fe:	bf00      	nop
 800d400:	3718      	adds	r7, #24
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
 800d406:	bf00      	nop
 800d408:	24008c44 	.word	0x24008c44
 800d40c:	24008c34 	.word	0x24008c34
 800d410:	24008c40 	.word	0x24008c40

0800d414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d414:	b480      	push	{r7}
 800d416:	b085      	sub	sp, #20
 800d418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d41a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d41e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d420:	4b27      	ldr	r3, [pc, #156]	; (800d4c0 <prvHeapInit+0xac>)
 800d422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f003 0307 	and.w	r3, r3, #7
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00c      	beq.n	800d448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	3307      	adds	r3, #7
 800d432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f023 0307 	bic.w	r3, r3, #7
 800d43a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d43c:	68ba      	ldr	r2, [r7, #8]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	1ad3      	subs	r3, r2, r3
 800d442:	4a1f      	ldr	r2, [pc, #124]	; (800d4c0 <prvHeapInit+0xac>)
 800d444:	4413      	add	r3, r2
 800d446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d44c:	4a1d      	ldr	r2, [pc, #116]	; (800d4c4 <prvHeapInit+0xb0>)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d452:	4b1c      	ldr	r3, [pc, #112]	; (800d4c4 <prvHeapInit+0xb0>)
 800d454:	2200      	movs	r2, #0
 800d456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	4413      	add	r3, r2
 800d45e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d460:	2208      	movs	r2, #8
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	1a9b      	subs	r3, r3, r2
 800d466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f023 0307 	bic.w	r3, r3, #7
 800d46e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	4a15      	ldr	r2, [pc, #84]	; (800d4c8 <prvHeapInit+0xb4>)
 800d474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d476:	4b14      	ldr	r3, [pc, #80]	; (800d4c8 <prvHeapInit+0xb4>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2200      	movs	r2, #0
 800d47c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d47e:	4b12      	ldr	r3, [pc, #72]	; (800d4c8 <prvHeapInit+0xb4>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	2200      	movs	r2, #0
 800d484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	68fa      	ldr	r2, [r7, #12]
 800d48e:	1ad2      	subs	r2, r2, r3
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d494:	4b0c      	ldr	r3, [pc, #48]	; (800d4c8 <prvHeapInit+0xb4>)
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	4a0a      	ldr	r2, [pc, #40]	; (800d4cc <prvHeapInit+0xb8>)
 800d4a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	4a09      	ldr	r2, [pc, #36]	; (800d4d0 <prvHeapInit+0xbc>)
 800d4aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d4ac:	4b09      	ldr	r3, [pc, #36]	; (800d4d4 <prvHeapInit+0xc0>)
 800d4ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d4b2:	601a      	str	r2, [r3, #0]
}
 800d4b4:	bf00      	nop
 800d4b6:	3714      	adds	r7, #20
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr
 800d4c0:	24005028 	.word	0x24005028
 800d4c4:	24008c28 	.word	0x24008c28
 800d4c8:	24008c30 	.word	0x24008c30
 800d4cc:	24008c38 	.word	0x24008c38
 800d4d0:	24008c34 	.word	0x24008c34
 800d4d4:	24008c44 	.word	0x24008c44

0800d4d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b085      	sub	sp, #20
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d4e0:	4b28      	ldr	r3, [pc, #160]	; (800d584 <prvInsertBlockIntoFreeList+0xac>)
 800d4e2:	60fb      	str	r3, [r7, #12]
 800d4e4:	e002      	b.n	800d4ec <prvInsertBlockIntoFreeList+0x14>
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	60fb      	str	r3, [r7, #12]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d8f7      	bhi.n	800d4e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	68ba      	ldr	r2, [r7, #8]
 800d500:	4413      	add	r3, r2
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	429a      	cmp	r2, r3
 800d506:	d108      	bne.n	800d51a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	685a      	ldr	r2, [r3, #4]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	441a      	add	r2, r3
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	68ba      	ldr	r2, [r7, #8]
 800d524:	441a      	add	r2, r3
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d118      	bne.n	800d560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681a      	ldr	r2, [r3, #0]
 800d532:	4b15      	ldr	r3, [pc, #84]	; (800d588 <prvInsertBlockIntoFreeList+0xb0>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	429a      	cmp	r2, r3
 800d538:	d00d      	beq.n	800d556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	685a      	ldr	r2, [r3, #4]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	441a      	add	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	601a      	str	r2, [r3, #0]
 800d554:	e008      	b.n	800d568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d556:	4b0c      	ldr	r3, [pc, #48]	; (800d588 <prvInsertBlockIntoFreeList+0xb0>)
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	601a      	str	r2, [r3, #0]
 800d55e:	e003      	b.n	800d568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d002      	beq.n	800d576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d576:	bf00      	nop
 800d578:	3714      	adds	r7, #20
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	24008c28 	.word	0x24008c28
 800d588:	24008c30 	.word	0x24008c30

0800d58c <memset>:
 800d58c:	4402      	add	r2, r0
 800d58e:	4603      	mov	r3, r0
 800d590:	4293      	cmp	r3, r2
 800d592:	d100      	bne.n	800d596 <memset+0xa>
 800d594:	4770      	bx	lr
 800d596:	f803 1b01 	strb.w	r1, [r3], #1
 800d59a:	e7f9      	b.n	800d590 <memset+0x4>

0800d59c <_reclaim_reent>:
 800d59c:	4b29      	ldr	r3, [pc, #164]	; (800d644 <_reclaim_reent+0xa8>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4283      	cmp	r3, r0
 800d5a2:	b570      	push	{r4, r5, r6, lr}
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	d04b      	beq.n	800d640 <_reclaim_reent+0xa4>
 800d5a8:	69c3      	ldr	r3, [r0, #28]
 800d5aa:	b143      	cbz	r3, 800d5be <_reclaim_reent+0x22>
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d144      	bne.n	800d63c <_reclaim_reent+0xa0>
 800d5b2:	69e3      	ldr	r3, [r4, #28]
 800d5b4:	6819      	ldr	r1, [r3, #0]
 800d5b6:	b111      	cbz	r1, 800d5be <_reclaim_reent+0x22>
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f000 f879 	bl	800d6b0 <_free_r>
 800d5be:	6961      	ldr	r1, [r4, #20]
 800d5c0:	b111      	cbz	r1, 800d5c8 <_reclaim_reent+0x2c>
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	f000 f874 	bl	800d6b0 <_free_r>
 800d5c8:	69e1      	ldr	r1, [r4, #28]
 800d5ca:	b111      	cbz	r1, 800d5d2 <_reclaim_reent+0x36>
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	f000 f86f 	bl	800d6b0 <_free_r>
 800d5d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d5d4:	b111      	cbz	r1, 800d5dc <_reclaim_reent+0x40>
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	f000 f86a 	bl	800d6b0 <_free_r>
 800d5dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5de:	b111      	cbz	r1, 800d5e6 <_reclaim_reent+0x4a>
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	f000 f865 	bl	800d6b0 <_free_r>
 800d5e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d5e8:	b111      	cbz	r1, 800d5f0 <_reclaim_reent+0x54>
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	f000 f860 	bl	800d6b0 <_free_r>
 800d5f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d5f2:	b111      	cbz	r1, 800d5fa <_reclaim_reent+0x5e>
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	f000 f85b 	bl	800d6b0 <_free_r>
 800d5fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d5fc:	b111      	cbz	r1, 800d604 <_reclaim_reent+0x68>
 800d5fe:	4620      	mov	r0, r4
 800d600:	f000 f856 	bl	800d6b0 <_free_r>
 800d604:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d606:	b111      	cbz	r1, 800d60e <_reclaim_reent+0x72>
 800d608:	4620      	mov	r0, r4
 800d60a:	f000 f851 	bl	800d6b0 <_free_r>
 800d60e:	6a23      	ldr	r3, [r4, #32]
 800d610:	b1b3      	cbz	r3, 800d640 <_reclaim_reent+0xa4>
 800d612:	4620      	mov	r0, r4
 800d614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d618:	4718      	bx	r3
 800d61a:	5949      	ldr	r1, [r1, r5]
 800d61c:	b941      	cbnz	r1, 800d630 <_reclaim_reent+0x94>
 800d61e:	3504      	adds	r5, #4
 800d620:	69e3      	ldr	r3, [r4, #28]
 800d622:	2d80      	cmp	r5, #128	; 0x80
 800d624:	68d9      	ldr	r1, [r3, #12]
 800d626:	d1f8      	bne.n	800d61a <_reclaim_reent+0x7e>
 800d628:	4620      	mov	r0, r4
 800d62a:	f000 f841 	bl	800d6b0 <_free_r>
 800d62e:	e7c0      	b.n	800d5b2 <_reclaim_reent+0x16>
 800d630:	680e      	ldr	r6, [r1, #0]
 800d632:	4620      	mov	r0, r4
 800d634:	f000 f83c 	bl	800d6b0 <_free_r>
 800d638:	4631      	mov	r1, r6
 800d63a:	e7ef      	b.n	800d61c <_reclaim_reent+0x80>
 800d63c:	2500      	movs	r5, #0
 800d63e:	e7ef      	b.n	800d620 <_reclaim_reent+0x84>
 800d640:	bd70      	pop	{r4, r5, r6, pc}
 800d642:	bf00      	nop
 800d644:	24004070 	.word	0x24004070

0800d648 <__libc_init_array>:
 800d648:	b570      	push	{r4, r5, r6, lr}
 800d64a:	4d0d      	ldr	r5, [pc, #52]	; (800d680 <__libc_init_array+0x38>)
 800d64c:	4c0d      	ldr	r4, [pc, #52]	; (800d684 <__libc_init_array+0x3c>)
 800d64e:	1b64      	subs	r4, r4, r5
 800d650:	10a4      	asrs	r4, r4, #2
 800d652:	2600      	movs	r6, #0
 800d654:	42a6      	cmp	r6, r4
 800d656:	d109      	bne.n	800d66c <__libc_init_array+0x24>
 800d658:	4d0b      	ldr	r5, [pc, #44]	; (800d688 <__libc_init_array+0x40>)
 800d65a:	4c0c      	ldr	r4, [pc, #48]	; (800d68c <__libc_init_array+0x44>)
 800d65c:	f000 f880 	bl	800d760 <_init>
 800d660:	1b64      	subs	r4, r4, r5
 800d662:	10a4      	asrs	r4, r4, #2
 800d664:	2600      	movs	r6, #0
 800d666:	42a6      	cmp	r6, r4
 800d668:	d105      	bne.n	800d676 <__libc_init_array+0x2e>
 800d66a:	bd70      	pop	{r4, r5, r6, pc}
 800d66c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d670:	4798      	blx	r3
 800d672:	3601      	adds	r6, #1
 800d674:	e7ee      	b.n	800d654 <__libc_init_array+0xc>
 800d676:	f855 3b04 	ldr.w	r3, [r5], #4
 800d67a:	4798      	blx	r3
 800d67c:	3601      	adds	r6, #1
 800d67e:	e7f2      	b.n	800d666 <__libc_init_array+0x1e>
 800d680:	0800d880 	.word	0x0800d880
 800d684:	0800d880 	.word	0x0800d880
 800d688:	0800d880 	.word	0x0800d880
 800d68c:	0800d884 	.word	0x0800d884

0800d690 <__retarget_lock_acquire_recursive>:
 800d690:	4770      	bx	lr

0800d692 <__retarget_lock_release_recursive>:
 800d692:	4770      	bx	lr

0800d694 <memcpy>:
 800d694:	440a      	add	r2, r1
 800d696:	4291      	cmp	r1, r2
 800d698:	f100 33ff 	add.w	r3, r0, #4294967295
 800d69c:	d100      	bne.n	800d6a0 <memcpy+0xc>
 800d69e:	4770      	bx	lr
 800d6a0:	b510      	push	{r4, lr}
 800d6a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6aa:	4291      	cmp	r1, r2
 800d6ac:	d1f9      	bne.n	800d6a2 <memcpy+0xe>
 800d6ae:	bd10      	pop	{r4, pc}

0800d6b0 <_free_r>:
 800d6b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6b2:	2900      	cmp	r1, #0
 800d6b4:	d044      	beq.n	800d740 <_free_r+0x90>
 800d6b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6ba:	9001      	str	r0, [sp, #4]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	f1a1 0404 	sub.w	r4, r1, #4
 800d6c2:	bfb8      	it	lt
 800d6c4:	18e4      	addlt	r4, r4, r3
 800d6c6:	f000 f83f 	bl	800d748 <__malloc_lock>
 800d6ca:	4a1e      	ldr	r2, [pc, #120]	; (800d744 <_free_r+0x94>)
 800d6cc:	9801      	ldr	r0, [sp, #4]
 800d6ce:	6813      	ldr	r3, [r2, #0]
 800d6d0:	b933      	cbnz	r3, 800d6e0 <_free_r+0x30>
 800d6d2:	6063      	str	r3, [r4, #4]
 800d6d4:	6014      	str	r4, [r2, #0]
 800d6d6:	b003      	add	sp, #12
 800d6d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6dc:	f000 b83a 	b.w	800d754 <__malloc_unlock>
 800d6e0:	42a3      	cmp	r3, r4
 800d6e2:	d908      	bls.n	800d6f6 <_free_r+0x46>
 800d6e4:	6825      	ldr	r5, [r4, #0]
 800d6e6:	1961      	adds	r1, r4, r5
 800d6e8:	428b      	cmp	r3, r1
 800d6ea:	bf01      	itttt	eq
 800d6ec:	6819      	ldreq	r1, [r3, #0]
 800d6ee:	685b      	ldreq	r3, [r3, #4]
 800d6f0:	1949      	addeq	r1, r1, r5
 800d6f2:	6021      	streq	r1, [r4, #0]
 800d6f4:	e7ed      	b.n	800d6d2 <_free_r+0x22>
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	b10b      	cbz	r3, 800d700 <_free_r+0x50>
 800d6fc:	42a3      	cmp	r3, r4
 800d6fe:	d9fa      	bls.n	800d6f6 <_free_r+0x46>
 800d700:	6811      	ldr	r1, [r2, #0]
 800d702:	1855      	adds	r5, r2, r1
 800d704:	42a5      	cmp	r5, r4
 800d706:	d10b      	bne.n	800d720 <_free_r+0x70>
 800d708:	6824      	ldr	r4, [r4, #0]
 800d70a:	4421      	add	r1, r4
 800d70c:	1854      	adds	r4, r2, r1
 800d70e:	42a3      	cmp	r3, r4
 800d710:	6011      	str	r1, [r2, #0]
 800d712:	d1e0      	bne.n	800d6d6 <_free_r+0x26>
 800d714:	681c      	ldr	r4, [r3, #0]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	6053      	str	r3, [r2, #4]
 800d71a:	440c      	add	r4, r1
 800d71c:	6014      	str	r4, [r2, #0]
 800d71e:	e7da      	b.n	800d6d6 <_free_r+0x26>
 800d720:	d902      	bls.n	800d728 <_free_r+0x78>
 800d722:	230c      	movs	r3, #12
 800d724:	6003      	str	r3, [r0, #0]
 800d726:	e7d6      	b.n	800d6d6 <_free_r+0x26>
 800d728:	6825      	ldr	r5, [r4, #0]
 800d72a:	1961      	adds	r1, r4, r5
 800d72c:	428b      	cmp	r3, r1
 800d72e:	bf04      	itt	eq
 800d730:	6819      	ldreq	r1, [r3, #0]
 800d732:	685b      	ldreq	r3, [r3, #4]
 800d734:	6063      	str	r3, [r4, #4]
 800d736:	bf04      	itt	eq
 800d738:	1949      	addeq	r1, r1, r5
 800d73a:	6021      	streq	r1, [r4, #0]
 800d73c:	6054      	str	r4, [r2, #4]
 800d73e:	e7ca      	b.n	800d6d6 <_free_r+0x26>
 800d740:	b003      	add	sp, #12
 800d742:	bd30      	pop	{r4, r5, pc}
 800d744:	24008d84 	.word	0x24008d84

0800d748 <__malloc_lock>:
 800d748:	4801      	ldr	r0, [pc, #4]	; (800d750 <__malloc_lock+0x8>)
 800d74a:	f7ff bfa1 	b.w	800d690 <__retarget_lock_acquire_recursive>
 800d74e:	bf00      	nop
 800d750:	24008d80 	.word	0x24008d80

0800d754 <__malloc_unlock>:
 800d754:	4801      	ldr	r0, [pc, #4]	; (800d75c <__malloc_unlock+0x8>)
 800d756:	f7ff bf9c 	b.w	800d692 <__retarget_lock_release_recursive>
 800d75a:	bf00      	nop
 800d75c:	24008d80 	.word	0x24008d80

0800d760 <_init>:
 800d760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d762:	bf00      	nop
 800d764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d766:	bc08      	pop	{r3}
 800d768:	469e      	mov	lr, r3
 800d76a:	4770      	bx	lr

0800d76c <_fini>:
 800d76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d76e:	bf00      	nop
 800d770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d772:	bc08      	pop	{r3}
 800d774:	469e      	mov	lr, r3
 800d776:	4770      	bx	lr
