
Dev_NucleoH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf08  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040ec  0800d1a8  0800d1a8  0001d1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011294  08011294  00021294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08011298  08011298  00021298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  24000000  0801129c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004cec  24000064  08011300  00030064  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24004d50  08011300  00034d50  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030064  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00030092  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022497  00000000  00000000  000300d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004536  00000000  00000000  0005256c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a68  00000000  00000000  00056aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000142e  00000000  00000000  00058510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b71d  00000000  00000000  0005993e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000228d1  00000000  00000000  0009505b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017a599  00000000  00000000  000b792c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007154  00000000  00000000  00231ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005e  00000000  00000000  0023901c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d190 	.word	0x0800d190

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	0800d190 	.word	0x0800d190

080002e0 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b088      	sub	sp, #32
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
 80002f4:	615a      	str	r2, [r3, #20]
 80002f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80002f8:	4b36      	ldr	r3, [pc, #216]	; (80003d4 <MX_ADC3_Init+0xf4>)
 80002fa:	4a37      	ldr	r2, [pc, #220]	; (80003d8 <MX_ADC3_Init+0xf8>)
 80002fc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80002fe:	4b35      	ldr	r3, [pc, #212]	; (80003d4 <MX_ADC3_Init+0xf4>)
 8000300:	2208      	movs	r2, #8
 8000302:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000304:	4b33      	ldr	r3, [pc, #204]	; (80003d4 <MX_ADC3_Init+0xf4>)
 8000306:	2201      	movs	r2, #1
 8000308:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800030a:	4b32      	ldr	r3, [pc, #200]	; (80003d4 <MX_ADC3_Init+0xf4>)
 800030c:	2208      	movs	r2, #8
 800030e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000310:	4b30      	ldr	r3, [pc, #192]	; (80003d4 <MX_ADC3_Init+0xf4>)
 8000312:	2200      	movs	r2, #0
 8000314:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000316:	4b2f      	ldr	r3, [pc, #188]	; (80003d4 <MX_ADC3_Init+0xf4>)
 8000318:	2201      	movs	r2, #1
 800031a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 800031c:	4b2d      	ldr	r3, [pc, #180]	; (80003d4 <MX_ADC3_Init+0xf4>)
 800031e:	2203      	movs	r2, #3
 8000320:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000322:	4b2c      	ldr	r3, [pc, #176]	; (80003d4 <MX_ADC3_Init+0xf4>)
 8000324:	2200      	movs	r2, #0
 8000326:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000328:	4b2a      	ldr	r3, [pc, #168]	; (80003d4 <MX_ADC3_Init+0xf4>)
 800032a:	2200      	movs	r2, #0
 800032c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800032e:	4b29      	ldr	r3, [pc, #164]	; (80003d4 <MX_ADC3_Init+0xf4>)
 8000330:	2200      	movs	r2, #0
 8000332:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000334:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <MX_ADC3_Init+0xf4>)
 8000336:	2203      	movs	r2, #3
 8000338:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800033a:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <MX_ADC3_Init+0xf4>)
 800033c:	2200      	movs	r2, #0
 800033e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000340:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <MX_ADC3_Init+0xf4>)
 8000342:	2200      	movs	r2, #0
 8000344:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000346:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <MX_ADC3_Init+0xf4>)
 8000348:	2200      	movs	r2, #0
 800034a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800034e:	4821      	ldr	r0, [pc, #132]	; (80003d4 <MX_ADC3_Init+0xf4>)
 8000350:	f001 f976 	bl	8001640 <HAL_ADC_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 800035a:	f000 fc1f 	bl	8000b9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800035e:	4b1f      	ldr	r3, [pc, #124]	; (80003dc <MX_ADC3_Init+0xfc>)
 8000360:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000362:	2306      	movs	r3, #6
 8000364:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800036a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800036e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000370:	2304      	movs	r3, #4
 8000372:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000378:	2300      	movs	r3, #0
 800037a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4619      	mov	r1, r3
 8000380:	4814      	ldr	r0, [pc, #80]	; (80003d4 <MX_ADC3_Init+0xf4>)
 8000382:	f001 fbe1 	bl	8001b48 <HAL_ADC_ConfigChannel>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800038c:	f000 fc06 	bl	8000b9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <MX_ADC3_Init+0x100>)
 8000392:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000394:	230c      	movs	r3, #12
 8000396:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	4619      	mov	r1, r3
 800039c:	480d      	ldr	r0, [pc, #52]	; (80003d4 <MX_ADC3_Init+0xf4>)
 800039e:	f001 fbd3 	bl	8001b48 <HAL_ADC_ConfigChannel>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 80003a8:	f000 fbf8 	bl	8000b9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003ac:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <MX_ADC3_Init+0x104>)
 80003ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003b0:	2312      	movs	r3, #18
 80003b2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_ADC3_Init+0x108>)
 80003b6:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	4619      	mov	r1, r3
 80003bc:	4805      	ldr	r0, [pc, #20]	; (80003d4 <MX_ADC3_Init+0xf4>)
 80003be:	f001 fbc3 	bl	8001b48 <HAL_ADC_ConfigChannel>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 80003c8:	f000 fbe8 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80003cc:	bf00      	nop
 80003ce:	3720      	adds	r7, #32
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	24000080 	.word	0x24000080
 80003d8:	58026000 	.word	0x58026000
 80003dc:	04300002 	.word	0x04300002
 80003e0:	08600004 	.word	0x08600004
 80003e4:	0c900008 	.word	0x0c900008
 80003e8:	47ff0000 	.word	0x47ff0000

080003ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b0bc      	sub	sp, #240	; 0xf0
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000404:	f107 0318 	add.w	r3, r7, #24
 8000408:	22c0      	movs	r2, #192	; 0xc0
 800040a:	2100      	movs	r1, #0
 800040c:	4618      	mov	r0, r3
 800040e:	f00c fdd5 	bl	800cfbc <memset>
  if(adcHandle->Instance==ADC3)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a4f      	ldr	r2, [pc, #316]	; (8000554 <HAL_ADC_MspInit+0x168>)
 8000418:	4293      	cmp	r3, r2
 800041a:	f040 8096 	bne.w	800054a <HAL_ADC_MspInit+0x15e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800041e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000422:	f04f 0300 	mov.w	r3, #0
 8000426:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800042a:	2301      	movs	r3, #1
 800042c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 800042e:	2313      	movs	r3, #19
 8000430:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000432:	2302      	movs	r3, #2
 8000434:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000436:	2302      	movs	r3, #2
 8000438:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800043a:	2302      	movs	r3, #2
 800043c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800043e:	23c0      	movs	r3, #192	; 0xc0
 8000440:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000442:	2320      	movs	r3, #32
 8000444:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800044a:	2300      	movs	r3, #0
 800044c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000450:	f107 0318 	add.w	r3, r7, #24
 8000454:	4618      	mov	r0, r3
 8000456:	f005 fdb5 	bl	8005fc4 <HAL_RCCEx_PeriphCLKConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000460:	f000 fb9c 	bl	8000b9c <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000464:	4b3c      	ldr	r3, [pc, #240]	; (8000558 <HAL_ADC_MspInit+0x16c>)
 8000466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800046a:	4a3b      	ldr	r2, [pc, #236]	; (8000558 <HAL_ADC_MspInit+0x16c>)
 800046c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000470:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000474:	4b38      	ldr	r3, [pc, #224]	; (8000558 <HAL_ADC_MspInit+0x16c>)
 8000476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800047a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800047e:	617b      	str	r3, [r7, #20]
 8000480:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000482:	4b35      	ldr	r3, [pc, #212]	; (8000558 <HAL_ADC_MspInit+0x16c>)
 8000484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000488:	4a33      	ldr	r2, [pc, #204]	; (8000558 <HAL_ADC_MspInit+0x16c>)
 800048a:	f043 0320 	orr.w	r3, r3, #32
 800048e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000492:	4b31      	ldr	r3, [pc, #196]	; (8000558 <HAL_ADC_MspInit+0x16c>)
 8000494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000498:	f003 0320 	and.w	r3, r3, #32
 800049c:	613b      	str	r3, [r7, #16]
 800049e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a0:	4b2d      	ldr	r3, [pc, #180]	; (8000558 <HAL_ADC_MspInit+0x16c>)
 80004a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a6:	4a2c      	ldr	r2, [pc, #176]	; (8000558 <HAL_ADC_MspInit+0x16c>)
 80004a8:	f043 0304 	orr.w	r3, r3, #4
 80004ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004b0:	4b29      	ldr	r3, [pc, #164]	; (8000558 <HAL_ADC_MspInit+0x16c>)
 80004b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004b6:	f003 0304 	and.w	r3, r3, #4
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
    PF7     ------> ADC3_INP3
    PF8     ------> ADC3_INN3
    PF9     ------> ADC3_INP2
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80004be:	f44f 7360 	mov.w	r3, #896	; 0x380
 80004c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004c6:	2303      	movs	r3, #3
 80004c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80004d6:	4619      	mov	r1, r3
 80004d8:	4820      	ldr	r0, [pc, #128]	; (800055c <HAL_ADC_MspInit+0x170>)
 80004da:	f004 fb5d 	bl	8004b98 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80004de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80004e2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80004e6:	f000 fe87 	bl	80011f8 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 80004ea:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <HAL_ADC_MspInit+0x174>)
 80004ec:	4a1d      	ldr	r2, [pc, #116]	; (8000564 <HAL_ADC_MspInit+0x178>)
 80004ee:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80004f0:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <HAL_ADC_MspInit+0x174>)
 80004f2:	2273      	movs	r2, #115	; 0x73
 80004f4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004f6:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <HAL_ADC_MspInit+0x174>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <HAL_ADC_MspInit+0x174>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <HAL_ADC_MspInit+0x174>)
 8000504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000508:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <HAL_ADC_MspInit+0x174>)
 800050c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000510:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <HAL_ADC_MspInit+0x174>)
 8000514:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000518:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <HAL_ADC_MspInit+0x174>)
 800051c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000520:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <HAL_ADC_MspInit+0x174>)
 8000524:	2200      	movs	r2, #0
 8000526:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <HAL_ADC_MspInit+0x174>)
 800052a:	2200      	movs	r2, #0
 800052c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800052e:	480c      	ldr	r0, [pc, #48]	; (8000560 <HAL_ADC_MspInit+0x174>)
 8000530:	f002 fa5a 	bl	80029e8 <HAL_DMA_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <HAL_ADC_MspInit+0x152>
    {
      Error_Handler();
 800053a:	f000 fb2f 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <HAL_ADC_MspInit+0x174>)
 8000542:	64da      	str	r2, [r3, #76]	; 0x4c
 8000544:	4a06      	ldr	r2, [pc, #24]	; (8000560 <HAL_ADC_MspInit+0x174>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800054a:	bf00      	nop
 800054c:	37f0      	adds	r7, #240	; 0xf0
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	58026000 	.word	0x58026000
 8000558:	58024400 	.word	0x58024400
 800055c:	58021400 	.word	0x58021400
 8000560:	240000e4 	.word	0x240000e4
 8000564:	40020010 	.word	0x40020010

08000568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056e:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <MX_DMA_Init+0x3c>)
 8000570:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000574:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <MX_DMA_Init+0x3c>)
 8000576:	f043 0301 	orr.w	r3, r3, #1
 800057a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_DMA_Init+0x3c>)
 8000580:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	2105      	movs	r1, #5
 8000590:	200b      	movs	r0, #11
 8000592:	f002 fa01 	bl	8002998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000596:	200b      	movs	r0, #11
 8000598:	f002 fa18 	bl	80029cc <HAL_NVIC_EnableIRQ>

}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	58024400 	.word	0x58024400

080005a8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
return 0;
 80005ba:	2300      	movs	r3, #0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qMeasurements */
  qMeasurementsHandle = osMessageQueueNew (16, sizeof(float), &qMeasurements_attributes);
 80005cc:	4a10      	ldr	r2, [pc, #64]	; (8000610 <MX_FREERTOS_Init+0x48>)
 80005ce:	2104      	movs	r1, #4
 80005d0:	2010      	movs	r0, #16
 80005d2:	f009 fd5c 	bl	800a08e <osMessageQueueNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <MX_FREERTOS_Init+0x4c>)
 80005da:	6013      	str	r3, [r2, #0]

  /* creation of qControl */
  qControlHandle = osMessageQueueNew (16, sizeof(float), &qControl_attributes);
 80005dc:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <MX_FREERTOS_Init+0x50>)
 80005de:	2104      	movs	r1, #4
 80005e0:	2010      	movs	r0, #16
 80005e2:	f009 fd54 	bl	800a08e <osMessageQueueNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <MX_FREERTOS_Init+0x54>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Measurements */
  MeasurementsHandle = osThreadNew(initMeasurements, NULL, &Measurements_attributes);
 80005ec:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <MX_FREERTOS_Init+0x58>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <MX_FREERTOS_Init+0x5c>)
 80005f2:	f009 fc9f 	bl	8009f34 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <MX_FREERTOS_Init+0x60>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of Control */
  ControlHandle = osThreadNew(initControl, NULL, &Control_attributes);
 80005fc:	4a0b      	ldr	r2, [pc, #44]	; (800062c <MX_FREERTOS_Init+0x64>)
 80005fe:	2100      	movs	r1, #0
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <MX_FREERTOS_Init+0x68>)
 8000602:	f009 fc97 	bl	8009f34 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <MX_FREERTOS_Init+0x6c>)
 800060a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	0801124c 	.word	0x0801124c
 8000614:	24000168 	.word	0x24000168
 8000618:	08011264 	.word	0x08011264
 800061c:	2400016c 	.word	0x2400016c
 8000620:	08011204 	.word	0x08011204
 8000624:	08000639 	.word	0x08000639
 8000628:	24000160 	.word	0x24000160
 800062c:	08011228 	.word	0x08011228
 8000630:	0800070d 	.word	0x0800070d
 8000634:	24000164 	.word	0x24000164

08000638 <initMeasurements>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_initMeasurements */
void initMeasurements(void *argument)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    // Read ADC3 and use getLinear and getTemperature results
    float current = getLinear(Results_ADC3_buffer[0], currentSlope, currentOffset);
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <initMeasurements+0xb0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a29      	ldr	r2, [pc, #164]	; (80006ec <initMeasurements+0xb4>)
 8000646:	6812      	ldr	r2, [r2, #0]
 8000648:	ee07 2a90 	vmov	s15, r2
 800064c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000650:	4a27      	ldr	r2, [pc, #156]	; (80006f0 <initMeasurements+0xb8>)
 8000652:	6812      	ldr	r2, [r2, #0]
 8000654:	ee07 2a10 	vmov	s14, r2
 8000658:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800065c:	eef0 0a47 	vmov.f32	s1, s14
 8000660:	eeb0 0a67 	vmov.f32	s0, s15
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fa9f 	bl	8000ba8 <getLinear>
 800066a:	ed87 0a07 	vstr	s0, [r7, #28]
    float voltage = getLinear(Results_ADC3_buffer[2], voltageSlope, voltageOffset);
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <initMeasurements+0xb0>)
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	4a20      	ldr	r2, [pc, #128]	; (80006f4 <initMeasurements+0xbc>)
 8000674:	6812      	ldr	r2, [r2, #0]
 8000676:	ee07 2a90 	vmov	s15, r2
 800067a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800067e:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <initMeasurements+0xc0>)
 8000680:	6812      	ldr	r2, [r2, #0]
 8000682:	ee07 2a10 	vmov	s14, r2
 8000686:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800068a:	eef0 0a47 	vmov.f32	s1, s14
 800068e:	eeb0 0a67 	vmov.f32	s0, s15
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fa88 	bl	8000ba8 <getLinear>
 8000698:	ed87 0a06 	vstr	s0, [r7, #24]
    float temp = tempLUT[Results_ADC3_buffer[1]]; // LUT array indexing
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <initMeasurements+0xb0>)
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	4a16      	ldr	r2, [pc, #88]	; (80006fc <initMeasurements+0xc4>)
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	4413      	add	r3, r2
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	617b      	str	r3, [r7, #20]
      float current;
      float voltage;
      float temp;
    } measurements;

    measurements.current = current;
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	60bb      	str	r3, [r7, #8]
    measurements.voltage = voltage;
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	60fb      	str	r3, [r7, #12]
    measurements.temp = temp;
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	613b      	str	r3, [r7, #16]

    // Send measurements to qMeasurements
    osMessageQueuePut(qMeasurementsHandle, &measurements, 0, 0);
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <initMeasurements+0xc8>)
 80006b8:	6818      	ldr	r0, [r3, #0]
 80006ba:	f107 0108 	add.w	r1, r7, #8
 80006be:	2300      	movs	r3, #0
 80006c0:	2200      	movs	r2, #0
 80006c2:	f009 fd57 	bl	800a174 <osMessageQueuePut>

    measurementsAlive++;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <initMeasurements+0xcc>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3301      	adds	r3, #1
 80006cc:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <initMeasurements+0xcc>)
 80006ce:	6013      	str	r3, [r2, #0]

    // Notify that measurements are done
    xTaskNotifyGive(ControlHandle);
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <initMeasurements+0xd0>)
 80006d2:	6818      	ldr	r0, [r3, #0]
 80006d4:	2300      	movs	r3, #0
 80006d6:	2202      	movs	r2, #2
 80006d8:	2100      	movs	r1, #0
 80006da:	f00b fbd9 	bl	800be90 <xTaskGenericNotify>

    osDelay(100);
 80006de:	2064      	movs	r0, #100	; 0x64
 80006e0:	f009 fcba 	bl	800a058 <osDelay>
  {
 80006e4:	e7ac      	b.n	8000640 <initMeasurements+0x8>
 80006e6:	bf00      	nop
 80006e8:	24000170 	.word	0x24000170
 80006ec:	080111f4 	.word	0x080111f4
 80006f0:	080111f8 	.word	0x080111f8
 80006f4:	080111fc 	.word	0x080111fc
 80006f8:	08011200 	.word	0x08011200
 80006fc:	0800d1f4 	.word	0x0800d1f4
 8000700:	24000168 	.word	0x24000168
 8000704:	2400015c 	.word	0x2400015c
 8000708:	24000164 	.word	0x24000164

0800070c <initControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_initControl */
void initControl(void *argument)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	// Wait for the notification from measurements
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000714:	f04f 31ff 	mov.w	r1, #4294967295
 8000718:	2001      	movs	r0, #1
 800071a:	f00b fb6d 	bl	800bdf8 <ulTaskNotifyTake>

    // Receive from qMeasurements
    struct Measurement measurements;

    osMessageQueueGet(qMeasurementsHandle, &measurements, 0, 0);
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <initControl+0x58>)
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	f107 0110 	add.w	r1, r7, #16
 8000726:	2300      	movs	r3, #0
 8000728:	2200      	movs	r2, #0
 800072a:	f009 fd83 	bl	800a234 <osMessageQueueGet>

	// Calculate duty based on received current and setpoint
	float currentSetpoint = 4.0F; // Example setpoint
 800072e:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8000732:	61fb      	str	r3, [r7, #28]
	float duty = (currentSetpoint - measurements.current) / measurements.voltage;
 8000734:	edd7 7a04 	vldr	s15, [r7, #16]
 8000738:	ed97 7a07 	vldr	s14, [r7, #28]
 800073c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000740:	ed97 7a05 	vldr	s14, [r7, #20]
 8000744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000748:	edc7 7a03 	vstr	s15, [r7, #12]

	// Send duty to qControl
	osMessageQueuePut(qControlHandle, &duty, 0, 0);
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <initControl+0x5c>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	f107 010c 	add.w	r1, r7, #12
 8000754:	2300      	movs	r3, #0
 8000756:	2200      	movs	r2, #0
 8000758:	f009 fd0c 	bl	800a174 <osMessageQueuePut>


    osDelay(100);
 800075c:	2064      	movs	r0, #100	; 0x64
 800075e:	f009 fc7b 	bl	800a058 <osDelay>
  {
 8000762:	e7d7      	b.n	8000714 <initControl+0x8>
 8000764:	24000168 	.word	0x24000168
 8000768:	2400016c 	.word	0x2400016c

0800076c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08e      	sub	sp, #56	; 0x38
 8000770:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	4b8a      	ldr	r3, [pc, #552]	; (80009ac <MX_GPIO_Init+0x240>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000788:	4a88      	ldr	r2, [pc, #544]	; (80009ac <MX_GPIO_Init+0x240>)
 800078a:	f043 0304 	orr.w	r3, r3, #4
 800078e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000792:	4b86      	ldr	r3, [pc, #536]	; (80009ac <MX_GPIO_Init+0x240>)
 8000794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	623b      	str	r3, [r7, #32]
 800079e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a0:	4b82      	ldr	r3, [pc, #520]	; (80009ac <MX_GPIO_Init+0x240>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a6:	4a81      	ldr	r2, [pc, #516]	; (80009ac <MX_GPIO_Init+0x240>)
 80007a8:	f043 0320 	orr.w	r3, r3, #32
 80007ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b0:	4b7e      	ldr	r3, [pc, #504]	; (80009ac <MX_GPIO_Init+0x240>)
 80007b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	61fb      	str	r3, [r7, #28]
 80007bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	4b7b      	ldr	r3, [pc, #492]	; (80009ac <MX_GPIO_Init+0x240>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c4:	4a79      	ldr	r2, [pc, #484]	; (80009ac <MX_GPIO_Init+0x240>)
 80007c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ce:	4b77      	ldr	r3, [pc, #476]	; (80009ac <MX_GPIO_Init+0x240>)
 80007d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b73      	ldr	r3, [pc, #460]	; (80009ac <MX_GPIO_Init+0x240>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e2:	4a72      	ldr	r2, [pc, #456]	; (80009ac <MX_GPIO_Init+0x240>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ec:	4b6f      	ldr	r3, [pc, #444]	; (80009ac <MX_GPIO_Init+0x240>)
 80007ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b6c      	ldr	r3, [pc, #432]	; (80009ac <MX_GPIO_Init+0x240>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000800:	4a6a      	ldr	r2, [pc, #424]	; (80009ac <MX_GPIO_Init+0x240>)
 8000802:	f043 0302 	orr.w	r3, r3, #2
 8000806:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800080a:	4b68      	ldr	r3, [pc, #416]	; (80009ac <MX_GPIO_Init+0x240>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000810:	f003 0302 	and.w	r3, r3, #2
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000818:	4b64      	ldr	r3, [pc, #400]	; (80009ac <MX_GPIO_Init+0x240>)
 800081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081e:	4a63      	ldr	r2, [pc, #396]	; (80009ac <MX_GPIO_Init+0x240>)
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000828:	4b60      	ldr	r3, [pc, #384]	; (80009ac <MX_GPIO_Init+0x240>)
 800082a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082e:	f003 0310 	and.w	r3, r3, #16
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	4b5d      	ldr	r3, [pc, #372]	; (80009ac <MX_GPIO_Init+0x240>)
 8000838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083c:	4a5b      	ldr	r2, [pc, #364]	; (80009ac <MX_GPIO_Init+0x240>)
 800083e:	f043 0308 	orr.w	r3, r3, #8
 8000842:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000846:	4b59      	ldr	r3, [pc, #356]	; (80009ac <MX_GPIO_Init+0x240>)
 8000848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084c:	f003 0308 	and.w	r3, r3, #8
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000854:	4b55      	ldr	r3, [pc, #340]	; (80009ac <MX_GPIO_Init+0x240>)
 8000856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085a:	4a54      	ldr	r2, [pc, #336]	; (80009ac <MX_GPIO_Init+0x240>)
 800085c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000860:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000864:	4b51      	ldr	r3, [pc, #324]	; (80009ac <MX_GPIO_Init+0x240>)
 8000866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f244 0101 	movw	r1, #16385	; 0x4001
 8000878:	484d      	ldr	r0, [pc, #308]	; (80009b0 <MX_GPIO_Init+0x244>)
 800087a:	f004 fb3d 	bl	8004ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2102      	movs	r1, #2
 8000882:	484c      	ldr	r0, [pc, #304]	; (80009b4 <MX_GPIO_Init+0x248>)
 8000884:	f004 fb38 	bl	8004ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	4619      	mov	r1, r3
 800089c:	4846      	ldr	r0, [pc, #280]	; (80009b8 <MX_GPIO_Init+0x24c>)
 800089e:	f004 f97b 	bl	8004b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80008a2:	2386      	movs	r3, #134	; 0x86
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b2:	230b      	movs	r3, #11
 80008b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	4619      	mov	r1, r3
 80008bc:	483f      	ldr	r0, [pc, #252]	; (80009bc <MX_GPIO_Init+0x250>)
 80008be:	f004 f96b 	bl	8004b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008c2:	2330      	movs	r3, #48	; 0x30
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008d2:	230b      	movs	r3, #11
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	4619      	mov	r1, r3
 80008dc:	4836      	ldr	r0, [pc, #216]	; (80009b8 <MX_GPIO_Init+0x24c>)
 80008de:	f004 f95b 	bl	8004b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80008e2:	f244 0301 	movw	r3, #16385	; 0x4001
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f8:	4619      	mov	r1, r3
 80008fa:	482d      	ldr	r0, [pc, #180]	; (80009b0 <MX_GPIO_Init+0x244>)
 80008fc:	f004 f94c 	bl	8004b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000912:	230b      	movs	r3, #11
 8000914:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	4824      	ldr	r0, [pc, #144]	; (80009b0 <MX_GPIO_Init+0x244>)
 800091e:	f004 f93b 	bl	8004b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000934:	2307      	movs	r3, #7
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	4820      	ldr	r0, [pc, #128]	; (80009c0 <MX_GPIO_Init+0x254>)
 8000940:	f004 f92a 	bl	8004b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000944:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000956:	230a      	movs	r3, #10
 8000958:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	4619      	mov	r1, r3
 8000960:	4816      	ldr	r0, [pc, #88]	; (80009bc <MX_GPIO_Init+0x250>)
 8000962:	f004 f919 	bl	8004b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000966:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000978:	230b      	movs	r3, #11
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	4619      	mov	r1, r3
 8000982:	4810      	ldr	r0, [pc, #64]	; (80009c4 <MX_GPIO_Init+0x258>)
 8000984:	f004 f908 	bl	8004b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000988:	2302      	movs	r3, #2
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_GPIO_Init+0x248>)
 80009a0:	f004 f8fa 	bl	8004b98 <HAL_GPIO_Init>

}
 80009a4:	bf00      	nop
 80009a6:	3738      	adds	r7, #56	; 0x38
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	58024400 	.word	0x58024400
 80009b0:	58020400 	.word	0x58020400
 80009b4:	58021000 	.word	0x58021000
 80009b8:	58020800 	.word	0x58020800
 80009bc:	58020000 	.word	0x58020000
 80009c0:	58020c00 	.word	0x58020c00
 80009c4:	58021800 	.word	0x58021800

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009cc:	f000 fbac 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d0:	f000 f824 	bl	8000a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d4:	f7ff feca 	bl	800076c <MX_GPIO_Init>
  MX_DMA_Init();
 80009d8:	f7ff fdc6 	bl	8000568 <MX_DMA_Init>
  MX_ADC3_Init();
 80009dc:	f7ff fc80 	bl	80002e0 <MX_ADC3_Init>
  MX_TIM1_Init();
 80009e0:	f000 fa5e 	bl	8000ea0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_Base_Start(&htim1);
 80009e4:	480a      	ldr	r0, [pc, #40]	; (8000a10 <main+0x48>)
 80009e6:	f008 f843 	bl	8008a70 <HAL_TIM_Base_Start>


	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80009ea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80009ee:	2100      	movs	r1, #0
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <main+0x4c>)
 80009f2:	f001 feb5 	bl	8002760 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *)&Results_ADC3_buffer,3);
 80009f6:	2203      	movs	r2, #3
 80009f8:	4907      	ldr	r1, [pc, #28]	; (8000a18 <main+0x50>)
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <main+0x4c>)
 80009fc:	f000 ffc2 	bl	8001984 <HAL_ADC_Start_DMA>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a00:	f009 fa4e 	bl	8009ea0 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a04:	f7ff fde0 	bl	80005c8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a08:	f009 fa6e 	bl	8009ee8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <main+0x44>
 8000a0e:	bf00      	nop
 8000a10:	240001c8 	.word	0x240001c8
 8000a14:	24000080 	.word	0x24000080
 8000a18:	24000170 	.word	0x24000170

08000a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b09e      	sub	sp, #120	; 0x78
 8000a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a26:	224c      	movs	r2, #76	; 0x4c
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f00c fac6 	bl	800cfbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	2220      	movs	r2, #32
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f00c fabf 	bl	800cfbc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a3e:	2002      	movs	r0, #2
 8000a40:	f004 fa74 	bl	8004f2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <SystemClock_Config+0x150>)
 8000a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4c:	4a47      	ldr	r2, [pc, #284]	; (8000b6c <SystemClock_Config+0x150>)
 8000a4e:	f023 0301 	bic.w	r3, r3, #1
 8000a52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a54:	4b45      	ldr	r3, [pc, #276]	; (8000b6c <SystemClock_Config+0x150>)
 8000a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	4b44      	ldr	r3, [pc, #272]	; (8000b70 <SystemClock_Config+0x154>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4a43      	ldr	r2, [pc, #268]	; (8000b70 <SystemClock_Config+0x154>)
 8000a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	4b41      	ldr	r3, [pc, #260]	; (8000b70 <SystemClock_Config+0x154>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a76:	bf00      	nop
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <SystemClock_Config+0x154>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a84:	d1f8      	bne.n	8000a78 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <SystemClock_Config+0x158>)
 8000a88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a8c:	4a39      	ldr	r2, [pc, #228]	; (8000b74 <SystemClock_Config+0x158>)
 8000a8e:	f043 0302 	orr.w	r3, r3, #2
 8000a92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a96:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <SystemClock_Config+0x158>)
 8000a98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a9c:	f003 0302 	and.w	r3, r3, #2
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <SystemClock_Config+0x154>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a30      	ldr	r2, [pc, #192]	; (8000b70 <SystemClock_Config+0x154>)
 8000aae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <SystemClock_Config+0x154>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <SystemClock_Config+0x150>)
 8000ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac2:	4a2a      	ldr	r2, [pc, #168]	; (8000b6c <SystemClock_Config+0x150>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aca:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <SystemClock_Config+0x150>)
 8000acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ad6:	bf00      	nop
 8000ad8:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <SystemClock_Config+0x154>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ae4:	d1f8      	bne.n	8000ad8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aea:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af0:	2302      	movs	r3, #2
 8000af2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af4:	2302      	movs	r3, #2
 8000af6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000afc:	2378      	movs	r3, #120	; 0x78
 8000afe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b04:	2304      	movs	r3, #4
 8000b06:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f004 fa3f 	bl	8004fa0 <HAL_RCC_OscConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000b28:	f000 f838 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2c:	233f      	movs	r3, #63	; 0x3f
 8000b2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b30:	2303      	movs	r3, #3
 8000b32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b38:	2308      	movs	r3, #8
 8000b3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b3c:	2340      	movs	r3, #64	; 0x40
 8000b3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b40:	2340      	movs	r3, #64	; 0x40
 8000b42:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b4a:	2340      	movs	r3, #64	; 0x40
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	2104      	movs	r1, #4
 8000b54:	4618      	mov	r0, r3
 8000b56:	f004 fe7d 	bl	8005854 <HAL_RCC_ClockConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000b60:	f000 f81c 	bl	8000b9c <Error_Handler>
  }
}
 8000b64:	bf00      	nop
 8000b66:	3778      	adds	r7, #120	; 0x78
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	58000400 	.word	0x58000400
 8000b70:	58024800 	.word	0x58024800
 8000b74:	58024400 	.word	0x58024400

08000b78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d101      	bne.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b8a:	f000 fb09 	bl	80011a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40001000 	.word	0x40001000

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <getLinear>:
 * @param bits The ADC reading.
 * @param slope The slope (volts per unit).
 * @param offset The offset (volts at zero).
 * @return The physical measurement.
 */
float getLinear(uint32_t bits, float slope, float offset) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	ed87 0a02 	vstr	s0, [r7, #8]
 8000bb4:	edc7 0a01 	vstr	s1, [r7, #4]
    // Convert ADC reading to voltage
    float voltage = bits * (3.3f / 4095); // Assuming 12-bit ADC and 3.3V reference
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	ee07 3a90 	vmov	s15, r3
 8000bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bc2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000bfc <getLinear+0x54>
 8000bc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bca:	edc7 7a05 	vstr	s15, [r7, #20]

    // Convert voltage to physical measurement
    float measurement = (voltage - offset) / slope;
 8000bce:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bd6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000bda:	ed97 7a02 	vldr	s14, [r7, #8]
 8000bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000be2:	edc7 7a04 	vstr	s15, [r7, #16]

    return measurement;
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	ee07 3a90 	vmov	s15, r3
}
 8000bec:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf0:	371c      	adds	r7, #28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	3a534067 	.word	0x3a534067

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_MspInit+0x38>)
 8000c08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_MspInit+0x38>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_MspInit+0x38>)
 8000c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	210f      	movs	r1, #15
 8000c28:	f06f 0001 	mvn.w	r0, #1
 8000c2c:	f001 feb4 	bl	8002998 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	58024400 	.word	0x58024400

08000c3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b090      	sub	sp, #64	; 0x40
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b0f      	cmp	r3, #15
 8000c48:	d827      	bhi.n	8000c9a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	2036      	movs	r0, #54	; 0x36
 8000c50:	f001 fea2 	bl	8002998 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c54:	2036      	movs	r0, #54	; 0x36
 8000c56:	f001 feb9 	bl	80029cc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000c5a:	4a29      	ldr	r2, [pc, #164]	; (8000d00 <HAL_InitTick+0xc4>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <HAL_InitTick+0xc8>)
 8000c62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c66:	4a27      	ldr	r2, [pc, #156]	; (8000d04 <HAL_InitTick+0xc8>)
 8000c68:	f043 0310 	orr.w	r3, r3, #16
 8000c6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c70:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <HAL_InitTick+0xc8>)
 8000c72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c7e:	f107 0210 	add.w	r2, r7, #16
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f005 f959 	bl	8005f40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d106      	bne.n	8000ca6 <HAL_InitTick+0x6a>
 8000c98:	e001      	b.n	8000c9e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e02b      	b.n	8000cf6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c9e:	f005 f939 	bl	8005f14 <HAL_RCC_GetPCLK1Freq>
 8000ca2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000ca4:	e004      	b.n	8000cb0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ca6:	f005 f935 	bl	8005f14 <HAL_RCC_GetPCLK1Freq>
 8000caa:	4603      	mov	r3, r0
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cb2:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <HAL_InitTick+0xcc>)
 8000cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb8:	0c9b      	lsrs	r3, r3, #18
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <HAL_InitTick+0xd0>)
 8000cc0:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <HAL_InitTick+0xd4>)
 8000cc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_InitTick+0xd0>)
 8000cc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ccc:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <HAL_InitTick+0xd0>)
 8000cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_InitTick+0xd0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_InitTick+0xd0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000cde:	480b      	ldr	r0, [pc, #44]	; (8000d0c <HAL_InitTick+0xd0>)
 8000ce0:	f007 fe6e 	bl	80089c0 <HAL_TIM_Base_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d104      	bne.n	8000cf4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000cea:	4808      	ldr	r0, [pc, #32]	; (8000d0c <HAL_InitTick+0xd0>)
 8000cec:	f007 ff30 	bl	8008b50 <HAL_TIM_Base_Start_IT>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	e000      	b.n	8000cf6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3740      	adds	r7, #64	; 0x40
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	24000008 	.word	0x24000008
 8000d04:	58024400 	.word	0x58024400
 8000d08:	431bde83 	.word	0x431bde83
 8000d0c:	2400017c 	.word	0x2400017c
 8000d10:	40001000 	.word	0x40001000

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <DMA1_Stream0_IRQHandler+0x10>)
 8000d46:	f002 fc15 	bl	8003574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	240000e4 	.word	0x240000e4

08000d54 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <TIM1_BRK_IRQHandler+0x10>)
 8000d5a:	f007 ffd2 	bl	8008d02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	240001c8 	.word	0x240001c8

08000d68 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <TIM1_UP_IRQHandler+0x10>)
 8000d6e:	f007 ffc8 	bl	8008d02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	240001c8 	.word	0x240001c8

08000d7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <TIM6_DAC_IRQHandler+0x10>)
 8000d82:	f007 ffbe 	bl	8008d02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2400017c 	.word	0x2400017c

08000d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d94:	4b37      	ldr	r3, [pc, #220]	; (8000e74 <SystemInit+0xe4>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9a:	4a36      	ldr	r2, [pc, #216]	; (8000e74 <SystemInit+0xe4>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000da4:	4b34      	ldr	r3, [pc, #208]	; (8000e78 <SystemInit+0xe8>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 030f 	and.w	r3, r3, #15
 8000dac:	2b06      	cmp	r3, #6
 8000dae:	d807      	bhi.n	8000dc0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000db0:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <SystemInit+0xe8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f023 030f 	bic.w	r3, r3, #15
 8000db8:	4a2f      	ldr	r2, [pc, #188]	; (8000e78 <SystemInit+0xe8>)
 8000dba:	f043 0307 	orr.w	r3, r3, #7
 8000dbe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000dc0:	4b2e      	ldr	r3, [pc, #184]	; (8000e7c <SystemInit+0xec>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a2d      	ldr	r2, [pc, #180]	; (8000e7c <SystemInit+0xec>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <SystemInit+0xec>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <SystemInit+0xec>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	4929      	ldr	r1, [pc, #164]	; (8000e7c <SystemInit+0xec>)
 8000dd8:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <SystemInit+0xf0>)
 8000dda:	4013      	ands	r3, r2
 8000ddc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <SystemInit+0xe8>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d007      	beq.n	8000dfa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dea:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <SystemInit+0xe8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f023 030f 	bic.w	r3, r3, #15
 8000df2:	4a21      	ldr	r2, [pc, #132]	; (8000e78 <SystemInit+0xe8>)
 8000df4:	f043 0307 	orr.w	r3, r3, #7
 8000df8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <SystemInit+0xec>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <SystemInit+0xec>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <SystemInit+0xec>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <SystemInit+0xec>)
 8000e0e:	4a1d      	ldr	r2, [pc, #116]	; (8000e84 <SystemInit+0xf4>)
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <SystemInit+0xec>)
 8000e14:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <SystemInit+0xf8>)
 8000e16:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <SystemInit+0xec>)
 8000e1a:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <SystemInit+0xfc>)
 8000e1c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <SystemInit+0xec>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <SystemInit+0xec>)
 8000e26:	4a19      	ldr	r2, [pc, #100]	; (8000e8c <SystemInit+0xfc>)
 8000e28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <SystemInit+0xec>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <SystemInit+0xec>)
 8000e32:	4a16      	ldr	r2, [pc, #88]	; (8000e8c <SystemInit+0xfc>)
 8000e34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <SystemInit+0xec>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <SystemInit+0xec>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <SystemInit+0xec>)
 8000e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <SystemInit+0xec>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <SystemInit+0x100>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <SystemInit+0x104>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e5a:	d202      	bcs.n	8000e62 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <SystemInit+0x108>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <SystemInit+0x10c>)
 8000e64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00
 8000e78:	52002000 	.word	0x52002000
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e84:	02020200 	.word	0x02020200
 8000e88:	01ff0000 	.word	0x01ff0000
 8000e8c:	01010280 	.word	0x01010280
 8000e90:	5c001000 	.word	0x5c001000
 8000e94:	ffff0000 	.word	0xffff0000
 8000e98:	51008108 	.word	0x51008108
 8000e9c:	52004000 	.word	0x52004000

08000ea0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b09a      	sub	sp, #104	; 0x68
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
 8000ed0:	615a      	str	r2, [r3, #20]
 8000ed2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	222c      	movs	r2, #44	; 0x2c
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00c f86e 	bl	800cfbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ee0:	4b44      	ldr	r3, [pc, #272]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000ee2:	4a45      	ldr	r2, [pc, #276]	; (8000ff8 <MX_TIM1_Init+0x158>)
 8000ee4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ee6:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000eec:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000eee:	2220      	movs	r2, #32
 8000ef0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = FSW;
 8000ef2:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000ef4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ef8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efa:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f00:	4b3c      	ldr	r3, [pc, #240]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f06:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000f08:	2280      	movs	r2, #128	; 0x80
 8000f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f0c:	4839      	ldr	r0, [pc, #228]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000f0e:	f007 fd57 	bl	80089c0 <HAL_TIM_Base_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f18:	f7ff fe40 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f20:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f26:	4619      	mov	r1, r3
 8000f28:	4832      	ldr	r0, [pc, #200]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000f2a:	f008 f91d 	bl	8009168 <HAL_TIM_ConfigClockSource>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f34:	f7ff fe32 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f38:	482e      	ldr	r0, [pc, #184]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000f3a:	f007 fe81 	bl	8008c40 <HAL_TIM_PWM_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f44:	f7ff fe2a 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f48:	2320      	movs	r3, #32
 8000f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4826      	ldr	r0, [pc, #152]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000f5c:	f008 fe32 	bl	8009bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f66:	f7ff fe19 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f6a:	2360      	movs	r3, #96	; 0x60
 8000f6c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f72:	2300      	movs	r3, #0
 8000f74:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000f76:	2308      	movs	r3, #8
 8000f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4818      	ldr	r0, [pc, #96]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000f92:	f007 ffd5 	bl	8008f40 <HAL_TIM_PWM_ConfigChannel>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000f9c:	f7ff fdfe 	bl	8000b9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = DEAD_TIME;
 8000fae:	23f0      	movs	r3, #240	; 0xf0
 8000fb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000fd8:	f008 fe82 	bl	8009ce0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000fe2:	f7ff fddb 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fe6:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000fe8:	f000 f838 	bl	800105c <HAL_TIM_MspPostInit>

}
 8000fec:	bf00      	nop
 8000fee:	3768      	adds	r7, #104	; 0x68
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	240001c8 	.word	0x240001c8
 8000ff8:	40010000 	.word	0x40010000

08000ffc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a12      	ldr	r2, [pc, #72]	; (8001054 <HAL_TIM_Base_MspInit+0x58>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d11e      	bne.n	800104c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_TIM_Base_MspInit+0x5c>)
 8001010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001014:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_TIM_Base_MspInit+0x5c>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_TIM_Base_MspInit+0x5c>)
 8001020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2105      	movs	r1, #5
 8001030:	2018      	movs	r0, #24
 8001032:	f001 fcb1 	bl	8002998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001036:	2018      	movs	r0, #24
 8001038:	f001 fcc8 	bl	80029cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2105      	movs	r1, #5
 8001040:	2019      	movs	r0, #25
 8001042:	f001 fca9 	bl	8002998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001046:	2019      	movs	r0, #25
 8001048:	f001 fcc0 	bl	80029cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40010000 	.word	0x40010000
 8001058:	58024400 	.word	0x58024400

0800105c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <HAL_TIM_MspPostInit+0x6c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d11f      	bne.n	80010be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_TIM_MspPostInit+0x70>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001084:	4a11      	ldr	r2, [pc, #68]	; (80010cc <HAL_TIM_MspPostInit+0x70>)
 8001086:	f043 0310 	orr.w	r3, r3, #16
 800108a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_TIM_MspPostInit+0x70>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800109c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <HAL_TIM_MspPostInit+0x74>)
 80010ba:	f003 fd6d 	bl	8004b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3720      	adds	r7, #32
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40010000 	.word	0x40010000
 80010cc:	58024400 	.word	0x58024400
 80010d0:	58021000 	.word	0x58021000

080010d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800110c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010d8:	f7ff fe5a 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010de:	490d      	ldr	r1, [pc, #52]	; (8001114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f4:	4c0a      	ldr	r4, [pc, #40]	; (8001120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001102:	f00b ffb9 	bl	800d078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001106:	f7ff fc5f 	bl	80009c8 <main>
  bx  lr
 800110a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800110c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001110:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001114:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001118:	0801129c 	.word	0x0801129c
  ldr r2, =_sbss
 800111c:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001120:	24004d50 	.word	0x24004d50

08001124 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC3_IRQHandler>
	...

08001128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112e:	2003      	movs	r0, #3
 8001130:	f001 fc27 	bl	8002982 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001134:	f004 fd44 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 8001138:	4602      	mov	r2, r0
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_Init+0x68>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	0a1b      	lsrs	r3, r3, #8
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	4913      	ldr	r1, [pc, #76]	; (8001194 <HAL_Init+0x6c>)
 8001146:	5ccb      	ldrb	r3, [r1, r3]
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	fa22 f303 	lsr.w	r3, r2, r3
 8001150:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_Init+0x68>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <HAL_Init+0x6c>)
 800115c:	5cd3      	ldrb	r3, [r2, r3]
 800115e:	f003 031f 	and.w	r3, r3, #31
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	fa22 f303 	lsr.w	r3, r2, r3
 8001168:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <HAL_Init+0x70>)
 800116a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800116c:	4a0b      	ldr	r2, [pc, #44]	; (800119c <HAL_Init+0x74>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001172:	200f      	movs	r0, #15
 8001174:	f7ff fd62 	bl	8000c3c <HAL_InitTick>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e002      	b.n	8001188 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001182:	f7ff fd3d 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	58024400 	.word	0x58024400
 8001194:	0801127c 	.word	0x0801127c
 8001198:	24000004 	.word	0x24000004
 800119c:	24000000 	.word	0x24000000

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	2400000c 	.word	0x2400000c
 80011c4:	24000214 	.word	0x24000214

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	24000214 	.word	0x24000214

080011e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_GetREVID+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	0c1b      	lsrs	r3, r3, #16
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	5c001000 	.word	0x5c001000

080011f8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001202:	4b07      	ldr	r3, [pc, #28]	; (8001220 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	43db      	mvns	r3, r3
 800120a:	401a      	ands	r2, r3
 800120c:	4904      	ldr	r1, [pc, #16]	; (8001220 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	4313      	orrs	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	58000400 	.word	0x58000400

08001224 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	609a      	str	r2, [r3, #8]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	609a      	str	r2, [r3, #8]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3360      	adds	r3, #96	; 0x60
 800129e:	461a      	mov	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	430b      	orrs	r3, r1
 80012ba:	431a      	orrs	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80012c0:	bf00      	nop
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f003 031f 	and.w	r3, r3, #31
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	431a      	orrs	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	611a      	str	r2, [r3, #16]
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80012fe:	b480      	push	{r7}
 8001300:	b087      	sub	sp, #28
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	3360      	adds	r3, #96	; 0x60
 800130e:	461a      	mov	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	431a      	orrs	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	601a      	str	r2, [r3, #0]
  }
}
 8001328:	bf00      	nop
 800132a:	371c      	adds	r7, #28
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800135a:	b480      	push	{r7}
 800135c:	b087      	sub	sp, #28
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	3330      	adds	r3, #48	; 0x30
 800136a:	461a      	mov	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	0a1b      	lsrs	r3, r3, #8
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	4413      	add	r3, r2
 8001378:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	f003 031f 	and.w	r3, r3, #31
 8001384:	211f      	movs	r1, #31
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	401a      	ands	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	0e9b      	lsrs	r3, r3, #26
 8001392:	f003 011f 	and.w	r1, r3, #31
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	f003 031f 	and.w	r3, r3, #31
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	431a      	orrs	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013a6:	bf00      	nop
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f023 0203 	bic.w	r2, r3, #3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	60da      	str	r2, [r3, #12]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3314      	adds	r3, #20
 80013e8:	461a      	mov	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	0e5b      	lsrs	r3, r3, #25
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	0d1b      	lsrs	r3, r3, #20
 8001400:	f003 031f 	and.w	r3, r3, #31
 8001404:	2107      	movs	r1, #7
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	401a      	ands	r2, r3
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	0d1b      	lsrs	r3, r3, #20
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	fa01 f303 	lsl.w	r3, r1, r3
 800141c:	431a      	orrs	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001448:	43db      	mvns	r3, r3
 800144a:	401a      	ands	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0318 	and.w	r3, r3, #24
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001454:	40d9      	lsrs	r1, r3
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	400b      	ands	r3, r1
 800145a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800145e:	431a      	orrs	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	000fffff 	.word	0x000fffff

08001478 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 031f 	and.w	r3, r3, #31
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6093      	str	r3, [r2, #8]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	5fffffc0 	.word	0x5fffffc0

080014b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014cc:	d101      	bne.n	80014d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <LL_ADC_EnableInternalRegulator+0x24>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	6fffffc0 	.word	0x6fffffc0

08001508 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800151c:	d101      	bne.n	8001522 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <LL_ADC_Enable+0x24>)
 800153e:	4013      	ands	r3, r2
 8001540:	f043 0201 	orr.w	r2, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	7fffffc0 	.word	0x7fffffc0

08001558 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <LL_ADC_Disable+0x24>)
 8001566:	4013      	ands	r3, r2
 8001568:	f043 0202 	orr.w	r2, r3, #2
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	7fffffc0 	.word	0x7fffffc0

08001580 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <LL_ADC_IsEnabled+0x18>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <LL_ADC_IsEnabled+0x1a>
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d101      	bne.n	80015be <LL_ADC_IsDisableOngoing+0x18>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <LL_ADC_IsDisableOngoing+0x1a>
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <LL_ADC_REG_StartConversion+0x24>)
 80015da:	4013      	ands	r3, r2
 80015dc:	f043 0204 	orr.w	r2, r3, #4
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	7fffffc0 	.word	0x7fffffc0

080015f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b04      	cmp	r3, #4
 8001606:	d101      	bne.n	800160c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b08      	cmp	r3, #8
 800162c:	d101      	bne.n	8001632 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e18f      	b.n	800197a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001664:	2b00      	cmp	r3, #0
 8001666:	d109      	bne.n	800167c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7fe febf 	bl	80003ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff19 	bl	80014b8 <LL_ADC_IsDeepPowerDownEnabled>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff feff 	bl	8001494 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff34 	bl	8001508 <LL_ADC_IsInternalRegulatorEnabled>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d114      	bne.n	80016d0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff18 	bl	80014e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016b0:	4b87      	ldr	r3, [pc, #540]	; (80018d0 <HAL_ADC_Init+0x290>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	099b      	lsrs	r3, r3, #6
 80016b6:	4a87      	ldr	r2, [pc, #540]	; (80018d4 <HAL_ADC_Init+0x294>)
 80016b8:	fba2 2303 	umull	r2, r3, r2, r3
 80016bc:	099b      	lsrs	r3, r3, #6
 80016be:	3301      	adds	r3, #1
 80016c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016c2:	e002      	b.n	80016ca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f9      	bne.n	80016c4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff17 	bl	8001508 <LL_ADC_IsInternalRegulatorEnabled>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10d      	bne.n	80016fc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e4:	f043 0210 	orr.w	r2, r3, #16
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	f043 0201 	orr.w	r2, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff77 	bl	80015f4 <LL_ADC_REG_IsConversionOngoing>
 8001706:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	f040 8129 	bne.w	8001968 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2b00      	cmp	r3, #0
 800171a:	f040 8125 	bne.w	8001968 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001722:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001726:	f043 0202 	orr.w	r2, r3, #2
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff24 	bl	8001580 <LL_ADC_IsEnabled>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d136      	bne.n	80017ac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a65      	ldr	r2, [pc, #404]	; (80018d8 <HAL_ADC_Init+0x298>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d004      	beq.n	8001752 <HAL_ADC_Init+0x112>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a63      	ldr	r2, [pc, #396]	; (80018dc <HAL_ADC_Init+0x29c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d10e      	bne.n	8001770 <HAL_ADC_Init+0x130>
 8001752:	4861      	ldr	r0, [pc, #388]	; (80018d8 <HAL_ADC_Init+0x298>)
 8001754:	f7ff ff14 	bl	8001580 <LL_ADC_IsEnabled>
 8001758:	4604      	mov	r4, r0
 800175a:	4860      	ldr	r0, [pc, #384]	; (80018dc <HAL_ADC_Init+0x29c>)
 800175c:	f7ff ff10 	bl	8001580 <LL_ADC_IsEnabled>
 8001760:	4603      	mov	r3, r0
 8001762:	4323      	orrs	r3, r4
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf0c      	ite	eq
 8001768:	2301      	moveq	r3, #1
 800176a:	2300      	movne	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	e008      	b.n	8001782 <HAL_ADC_Init+0x142>
 8001770:	485b      	ldr	r0, [pc, #364]	; (80018e0 <HAL_ADC_Init+0x2a0>)
 8001772:	f7ff ff05 	bl	8001580 <LL_ADC_IsEnabled>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d012      	beq.n	80017ac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a53      	ldr	r2, [pc, #332]	; (80018d8 <HAL_ADC_Init+0x298>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d004      	beq.n	800179a <HAL_ADC_Init+0x15a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a51      	ldr	r2, [pc, #324]	; (80018dc <HAL_ADC_Init+0x29c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_ADC_Init+0x15e>
 800179a:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_ADC_Init+0x2a4>)
 800179c:	e000      	b.n	80017a0 <HAL_ADC_Init+0x160>
 800179e:	4a52      	ldr	r2, [pc, #328]	; (80018e8 <HAL_ADC_Init+0x2a8>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4619      	mov	r1, r3
 80017a6:	4610      	mov	r0, r2
 80017a8:	f7ff fd3c 	bl	8001224 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80017ac:	f7ff fd18 	bl	80011e0 <HAL_GetREVID>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d914      	bls.n	80017e4 <HAL_ADC_Init+0x1a4>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b10      	cmp	r3, #16
 80017c0:	d110      	bne.n	80017e4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7d5b      	ldrb	r3, [r3, #21]
 80017c6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017cc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80017d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7f1b      	ldrb	r3, [r3, #28]
 80017d8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80017da:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017dc:	f043 030c 	orr.w	r3, r3, #12
 80017e0:	61bb      	str	r3, [r7, #24]
 80017e2:	e00d      	b.n	8001800 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7d5b      	ldrb	r3, [r3, #21]
 80017e8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017ee:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80017f4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7f1b      	ldrb	r3, [r3, #28]
 80017fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7f1b      	ldrb	r3, [r3, #28]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d106      	bne.n	8001816 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	3b01      	subs	r3, #1
 800180e:	045b      	lsls	r3, r3, #17
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <HAL_ADC_Init+0x2ac>)
 800183a:	4013      	ands	r3, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	69b9      	ldr	r1, [r7, #24]
 8001842:	430b      	orrs	r3, r1
 8001844:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fed2 	bl	80015f4 <LL_ADC_REG_IsConversionOngoing>
 8001850:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fedf 	bl	800161a <LL_ADC_INJ_IsConversionOngoing>
 800185c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d15f      	bne.n	8001924 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d15c      	bne.n	8001924 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7d1b      	ldrb	r3, [r3, #20]
 800186e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <HAL_ADC_Init+0x2b0>)
 8001880:	4013      	ands	r3, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	69b9      	ldr	r1, [r7, #24]
 8001888:	430b      	orrs	r3, r1
 800188a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001892:	2b01      	cmp	r3, #1
 8001894:	d130      	bne.n	80018f8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_ADC_Init+0x2b4>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018aa:	3a01      	subs	r2, #1
 80018ac:	0411      	lsls	r1, r2, #16
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018b2:	4311      	orrs	r1, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018b8:	4311      	orrs	r1, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018be:	430a      	orrs	r2, r1
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	611a      	str	r2, [r3, #16]
 80018cc:	e01c      	b.n	8001908 <HAL_ADC_Init+0x2c8>
 80018ce:	bf00      	nop
 80018d0:	24000000 	.word	0x24000000
 80018d4:	053e2d63 	.word	0x053e2d63
 80018d8:	40022000 	.word	0x40022000
 80018dc:	40022100 	.word	0x40022100
 80018e0:	58026000 	.word	0x58026000
 80018e4:	40022300 	.word	0x40022300
 80018e8:	58026300 	.word	0x58026300
 80018ec:	fff0c003 	.word	0xfff0c003
 80018f0:	ffffbffc 	.word	0xffffbffc
 80018f4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	691a      	ldr	r2, [r3, #16]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 fde0 	bl	80024e4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d10c      	bne.n	8001946 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f023 010f 	bic.w	r1, r3, #15
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	1e5a      	subs	r2, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
 8001944:	e007      	b.n	8001956 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 020f 	bic.w	r2, r2, #15
 8001954:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195a:	f023 0303 	bic.w	r3, r3, #3
 800195e:	f043 0201 	orr.w	r2, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	655a      	str	r2, [r3, #84]	; 0x54
 8001966:	e007      	b.n	8001978 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196c:	f043 0210 	orr.w	r2, r3, #16
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001978:	7ffb      	ldrb	r3, [r7, #31]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	; 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd90      	pop	{r4, r7, pc}
 8001982:	bf00      	nop

08001984 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a55      	ldr	r2, [pc, #340]	; (8001aec <HAL_ADC_Start_DMA+0x168>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d004      	beq.n	80019a4 <HAL_ADC_Start_DMA+0x20>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a54      	ldr	r2, [pc, #336]	; (8001af0 <HAL_ADC_Start_DMA+0x16c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d101      	bne.n	80019a8 <HAL_ADC_Start_DMA+0x24>
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_ADC_Start_DMA+0x170>)
 80019a6:	e000      	b.n	80019aa <HAL_ADC_Start_DMA+0x26>
 80019a8:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_ADC_Start_DMA+0x174>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fd64 	bl	8001478 <LL_ADC_GetMultimode>
 80019b0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fe1c 	bl	80015f4 <LL_ADC_REG_IsConversionOngoing>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f040 808c 	bne.w	8001adc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_Start_DMA+0x4e>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e087      	b.n	8001ae2 <HAL_ADC_Start_DMA+0x15e>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d002      	beq.n	80019ec <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2b09      	cmp	r3, #9
 80019ea:	d170      	bne.n	8001ace <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 fbfb 	bl	80021e8 <ADC_Enable>
 80019f2:	4603      	mov	r3, r0
 80019f4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d163      	bne.n	8001ac4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a00:	4b3e      	ldr	r3, [pc, #248]	; (8001afc <HAL_ADC_Start_DMA+0x178>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a37      	ldr	r2, [pc, #220]	; (8001af0 <HAL_ADC_Start_DMA+0x16c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d002      	beq.n	8001a1c <HAL_ADC_Start_DMA+0x98>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	e000      	b.n	8001a1e <HAL_ADC_Start_DMA+0x9a>
 8001a1c:	4b33      	ldr	r3, [pc, #204]	; (8001aec <HAL_ADC_Start_DMA+0x168>)
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d002      	beq.n	8001a2c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a30:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	f023 0206 	bic.w	r2, r3, #6
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a50:	e002      	b.n	8001a58 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5c:	4a28      	ldr	r2, [pc, #160]	; (8001b00 <HAL_ADC_Start_DMA+0x17c>)
 8001a5e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <HAL_ADC_Start_DMA+0x180>)
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6c:	4a26      	ldr	r2, [pc, #152]	; (8001b08 <HAL_ADC_Start_DMA+0x184>)
 8001a6e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	221c      	movs	r2, #28
 8001a76:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0210 	orr.w	r2, r2, #16
 8001a8e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f7ff fc89 	bl	80013b2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3340      	adds	r3, #64	; 0x40
 8001aaa:	4619      	mov	r1, r3
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f001 faf6 	bl	80030a0 <HAL_DMA_Start_IT>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fd85 	bl	80015cc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001ac2:	e00d      	b.n	8001ae0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001acc:	e008      	b.n	8001ae0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001ada:	e001      	b.n	8001ae0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001adc:	2302      	movs	r3, #2
 8001ade:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000
 8001af0:	40022100 	.word	0x40022100
 8001af4:	40022300 	.word	0x40022300
 8001af8:	58026300 	.word	0x58026300
 8001afc:	fffff0fe 	.word	0xfffff0fe
 8001b00:	080023bb 	.word	0x080023bb
 8001b04:	08002493 	.word	0x08002493
 8001b08:	080024af 	.word	0x080024af

08001b0c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b0a1      	sub	sp, #132	; 0x84
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4a9d      	ldr	r2, [pc, #628]	; (8001dd8 <HAL_ADC_ConfigChannel+0x290>)
 8001b62:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x2a>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e321      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x66e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fd38 	bl	80015f4 <LL_ADC_REG_IsConversionOngoing>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 8306 	bne.w	8002198 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d108      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x62>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0e9b      	lsrs	r3, r3, #26
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	e016      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x90>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bba:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e003      	b.n	8001bce <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	69d1      	ldr	r1, [r2, #28]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	430b      	orrs	r3, r1
 8001be4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6859      	ldr	r1, [r3, #4]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f7ff fbb1 	bl	800135a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fcf9 	bl	80015f4 <LL_ADC_REG_IsConversionOngoing>
 8001c02:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fd06 	bl	800161a <LL_ADC_INJ_IsConversionOngoing>
 8001c0e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 80b3 	bne.w	8001d7e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 80af 	bne.w	8001d7e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6819      	ldr	r1, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	f7ff fbd3 	bl	80013d8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c32:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_ADC_ConfigChannel+0x294>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c3e:	d10b      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x110>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	e01d      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x14c>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10b      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x136>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	e00a      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x14c>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d027      	beq.n	8001cee <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6919      	ldr	r1, [r3, #16]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cac:	f7ff faee 	bl	800128c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6919      	ldr	r1, [r3, #16]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	7e5b      	ldrb	r3, [r3, #25]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d102      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x17e>
 8001cc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001cc4:	e000      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x180>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f7ff fb18 	bl	80012fe <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6919      	ldr	r1, [r3, #16]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	7e1b      	ldrb	r3, [r3, #24]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d102      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x19c>
 8001cde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ce2:	e000      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x19e>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f7ff faf0 	bl	80012cc <LL_ADC_SetDataRightShift>
 8001cec:	e047      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	069b      	lsls	r3, r3, #26
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d107      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d10:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	069b      	lsls	r3, r3, #26
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d107      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d34:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	069b      	lsls	r3, r3, #26
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d107      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d58:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	069b      	lsls	r3, r3, #26
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d107      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d7c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fbfc 	bl	8001580 <LL_ADC_IsEnabled>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f040 820d 	bne.w	80021aa <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6819      	ldr	r1, [r3, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f7ff fb47 	bl	8001430 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_ADC_ConfigChannel+0x290>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	f040 8133 	bne.w	8002014 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d110      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x298>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	0e9b      	lsrs	r3, r3, #26
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	2b09      	cmp	r3, #9
 8001dcc:	bf94      	ite	ls
 8001dce:	2301      	movls	r3, #1
 8001dd0:	2300      	movhi	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	e01e      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x2cc>
 8001dd6:	bf00      	nop
 8001dd8:	47ff0000 	.word	0x47ff0000
 8001ddc:	5c001000 	.word	0x5c001000
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001df8:	2320      	movs	r3, #32
 8001dfa:	e003      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	2b09      	cmp	r3, #9
 8001e0c:	bf94      	ite	ls
 8001e0e:	2301      	movls	r3, #1
 8001e10:	2300      	movhi	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d079      	beq.n	8001f0c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d107      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x2ec>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0e9b      	lsrs	r3, r3, #26
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	069b      	lsls	r3, r3, #26
 8001e2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e32:	e015      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x318>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e44:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	e003      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	069b      	lsls	r3, r3, #26
 8001e5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d109      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x338>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0e9b      	lsrs	r3, r3, #26
 8001e72:	3301      	adds	r3, #1
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	2101      	movs	r1, #1
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	e017      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x368>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e90:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001e98:	2320      	movs	r3, #32
 8001e9a:	e003      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	2101      	movs	r1, #1
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	ea42 0103 	orr.w	r1, r2, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10a      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x38e>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	0e9b      	lsrs	r3, r3, #26
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f003 021f 	and.w	r2, r3, #31
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	051b      	lsls	r3, r3, #20
 8001ed4:	e018      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x3c0>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001eee:	2320      	movs	r3, #32
 8001ef0:	e003      	b.n	8001efa <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef4:	fab3 f383 	clz	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	e07e      	b.n	800200a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d107      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x3e0>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	0e9b      	lsrs	r3, r3, #26
 8001f1e:	3301      	adds	r3, #1
 8001f20:	069b      	lsls	r3, r3, #26
 8001f22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f26:	e015      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x40c>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001f40:	2320      	movs	r3, #32
 8001f42:	e003      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	069b      	lsls	r3, r3, #26
 8001f50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d109      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x42c>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0e9b      	lsrs	r3, r3, #26
 8001f66:	3301      	adds	r3, #1
 8001f68:	f003 031f 	and.w	r3, r3, #31
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	e017      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x45c>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	61bb      	str	r3, [r7, #24]
  return result;
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	e003      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	ea42 0103 	orr.w	r1, r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10d      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x488>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0e9b      	lsrs	r3, r3, #26
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3b1e      	subs	r3, #30
 8001fc8:	051b      	lsls	r3, r3, #20
 8001fca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fce:	e01b      	b.n	8002008 <HAL_ADC_ConfigChannel+0x4c0>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	60fb      	str	r3, [r7, #12]
  return result;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	e003      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f003 021f 	and.w	r2, r3, #31
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	3b1e      	subs	r3, #30
 8002002:	051b      	lsls	r3, r3, #20
 8002004:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002008:	430b      	orrs	r3, r1
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	6892      	ldr	r2, [r2, #8]
 800200e:	4619      	mov	r1, r3
 8002010:	f7ff f9e2 	bl	80013d8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	f280 80c6 	bge.w	80021aa <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a67      	ldr	r2, [pc, #412]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d004      	beq.n	8002032 <HAL_ADC_ConfigChannel+0x4ea>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a65      	ldr	r2, [pc, #404]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x4ee>
 8002032:	4b65      	ldr	r3, [pc, #404]	; (80021c8 <HAL_ADC_ConfigChannel+0x680>)
 8002034:	e000      	b.n	8002038 <HAL_ADC_ConfigChannel+0x4f0>
 8002036:	4b65      	ldr	r3, [pc, #404]	; (80021cc <HAL_ADC_ConfigChannel+0x684>)
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff f919 	bl	8001270 <LL_ADC_GetCommonPathInternalCh>
 800203e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a5e      	ldr	r2, [pc, #376]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d004      	beq.n	8002054 <HAL_ADC_ConfigChannel+0x50c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a5d      	ldr	r2, [pc, #372]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d10e      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x52a>
 8002054:	485a      	ldr	r0, [pc, #360]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 8002056:	f7ff fa93 	bl	8001580 <LL_ADC_IsEnabled>
 800205a:	4604      	mov	r4, r0
 800205c:	4859      	ldr	r0, [pc, #356]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 800205e:	f7ff fa8f 	bl	8001580 <LL_ADC_IsEnabled>
 8002062:	4603      	mov	r3, r0
 8002064:	4323      	orrs	r3, r4
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf0c      	ite	eq
 800206a:	2301      	moveq	r3, #1
 800206c:	2300      	movne	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	e008      	b.n	8002084 <HAL_ADC_ConfigChannel+0x53c>
 8002072:	4857      	ldr	r0, [pc, #348]	; (80021d0 <HAL_ADC_ConfigChannel+0x688>)
 8002074:	f7ff fa84 	bl	8001580 <LL_ADC_IsEnabled>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf0c      	ite	eq
 800207e:	2301      	moveq	r3, #1
 8002080:	2300      	movne	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d07d      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a51      	ldr	r2, [pc, #324]	; (80021d4 <HAL_ADC_ConfigChannel+0x68c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d130      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x5ac>
 8002092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d12b      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <HAL_ADC_ConfigChannel+0x688>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	f040 8081 	bne.w	80021aa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a44      	ldr	r2, [pc, #272]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d004      	beq.n	80020bc <HAL_ADC_ConfigChannel+0x574>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a43      	ldr	r2, [pc, #268]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x578>
 80020bc:	4a42      	ldr	r2, [pc, #264]	; (80021c8 <HAL_ADC_ConfigChannel+0x680>)
 80020be:	e000      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x57a>
 80020c0:	4a42      	ldr	r2, [pc, #264]	; (80021cc <HAL_ADC_ConfigChannel+0x684>)
 80020c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020c8:	4619      	mov	r1, r3
 80020ca:	4610      	mov	r0, r2
 80020cc:	f7ff f8bd 	bl	800124a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020d0:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <HAL_ADC_ConfigChannel+0x690>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	4a41      	ldr	r2, [pc, #260]	; (80021dc <HAL_ADC_ConfigChannel+0x694>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	3301      	adds	r3, #1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80020e4:	e002      	b.n	80020ec <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f9      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020f2:	e05a      	b.n	80021aa <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a39      	ldr	r2, [pc, #228]	; (80021e0 <HAL_ADC_ConfigChannel+0x698>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d11e      	bne.n	800213c <HAL_ADC_ConfigChannel+0x5f4>
 80020fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d119      	bne.n	800213c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a30      	ldr	r2, [pc, #192]	; (80021d0 <HAL_ADC_ConfigChannel+0x688>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d14b      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a2a      	ldr	r2, [pc, #168]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d004      	beq.n	8002126 <HAL_ADC_ConfigChannel+0x5de>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a28      	ldr	r2, [pc, #160]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x5e2>
 8002126:	4a28      	ldr	r2, [pc, #160]	; (80021c8 <HAL_ADC_ConfigChannel+0x680>)
 8002128:	e000      	b.n	800212c <HAL_ADC_ConfigChannel+0x5e4>
 800212a:	4a28      	ldr	r2, [pc, #160]	; (80021cc <HAL_ADC_ConfigChannel+0x684>)
 800212c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002132:	4619      	mov	r1, r3
 8002134:	4610      	mov	r0, r2
 8002136:	f7ff f888 	bl	800124a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800213a:	e036      	b.n	80021aa <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <HAL_ADC_ConfigChannel+0x69c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d131      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x662>
 8002146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d12c      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <HAL_ADC_ConfigChannel+0x688>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d127      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d004      	beq.n	800216e <HAL_ADC_ConfigChannel+0x626>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x62a>
 800216e:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <HAL_ADC_ConfigChannel+0x680>)
 8002170:	e000      	b.n	8002174 <HAL_ADC_ConfigChannel+0x62c>
 8002172:	4a16      	ldr	r2, [pc, #88]	; (80021cc <HAL_ADC_ConfigChannel+0x684>)
 8002174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002176:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800217a:	4619      	mov	r1, r3
 800217c:	4610      	mov	r0, r2
 800217e:	f7ff f864 	bl	800124a <LL_ADC_SetCommonPathInternalCh>
 8002182:	e012      	b.n	80021aa <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	f043 0220 	orr.w	r2, r3, #32
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002196:	e008      	b.n	80021aa <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3784      	adds	r7, #132	; 0x84
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd90      	pop	{r4, r7, pc}
 80021be:	bf00      	nop
 80021c0:	40022000 	.word	0x40022000
 80021c4:	40022100 	.word	0x40022100
 80021c8:	40022300 	.word	0x40022300
 80021cc:	58026300 	.word	0x58026300
 80021d0:	58026000 	.word	0x58026000
 80021d4:	cb840000 	.word	0xcb840000
 80021d8:	24000000 	.word	0x24000000
 80021dc:	053e2d63 	.word	0x053e2d63
 80021e0:	c7520000 	.word	0xc7520000
 80021e4:	cfb80000 	.word	0xcfb80000

080021e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff f9c3 	bl	8001580 <LL_ADC_IsEnabled>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d16e      	bne.n	80022de <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <ADC_Enable+0x100>)
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00d      	beq.n	800222a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	f043 0210 	orr.w	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	f043 0201 	orr.w	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e05a      	b.n	80022e0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff f97e 	bl	8001530 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002234:	f7fe ffc8 	bl	80011c8 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2b      	ldr	r2, [pc, #172]	; (80022ec <ADC_Enable+0x104>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <ADC_Enable+0x66>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a29      	ldr	r2, [pc, #164]	; (80022f0 <ADC_Enable+0x108>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <ADC_Enable+0x6a>
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <ADC_Enable+0x10c>)
 8002250:	e000      	b.n	8002254 <ADC_Enable+0x6c>
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <ADC_Enable+0x110>)
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff f90f 	bl	8001478 <LL_ADC_GetMultimode>
 800225a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <ADC_Enable+0x108>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d002      	beq.n	800226c <ADC_Enable+0x84>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	e000      	b.n	800226e <ADC_Enable+0x86>
 800226c:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <ADC_Enable+0x104>)
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	4293      	cmp	r3, r2
 8002274:	d02c      	beq.n	80022d0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d130      	bne.n	80022de <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800227c:	e028      	b.n	80022d0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff f97c 	bl	8001580 <LL_ADC_IsEnabled>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d104      	bne.n	8002298 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f94c 	bl	8001530 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002298:	f7fe ff96 	bl	80011c8 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d914      	bls.n	80022d0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d00d      	beq.n	80022d0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b8:	f043 0210 	orr.w	r2, r3, #16
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	f043 0201 	orr.w	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e007      	b.n	80022e0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d1cf      	bne.n	800227e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	8000003f 	.word	0x8000003f
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40022100 	.word	0x40022100
 80022f4:	40022300 	.word	0x40022300
 80022f8:	58026300 	.word	0x58026300

080022fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f94c 	bl	80015a6 <LL_ADC_IsDisableOngoing>
 800230e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff f933 	bl	8001580 <LL_ADC_IsEnabled>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d047      	beq.n	80023b0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d144      	bne.n	80023b0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030d 	and.w	r3, r3, #13
 8002330:	2b01      	cmp	r3, #1
 8002332:	d10c      	bne.n	800234e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff f90d 	bl	8001558 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2203      	movs	r2, #3
 8002344:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002346:	f7fe ff3f 	bl	80011c8 <HAL_GetTick>
 800234a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800234c:	e029      	b.n	80023a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	f043 0210 	orr.w	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e023      	b.n	80023b2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800236a:	f7fe ff2d 	bl	80011c8 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d914      	bls.n	80023a2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00d      	beq.n	80023a2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238a:	f043 0210 	orr.w	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002396:	f043 0201 	orr.w	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e007      	b.n	80023b2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1dc      	bne.n	800236a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d14b      	bne.n	800246c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d021      	beq.n	8002432 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe ff9e 	bl	8001334 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d032      	beq.n	8002464 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d12b      	bne.n	8002464 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002410:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d11f      	bne.n	8002464 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	655a      	str	r2, [r3, #84]	; 0x54
 8002430:	e018      	b.n	8002464 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d111      	bne.n	8002464 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002444:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d105      	bne.n	8002464 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff fb51 	bl	8001b0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800246a:	e00e      	b.n	800248a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f7ff fb5b 	bl	8001b34 <HAL_ADC_ErrorCallback>
}
 800247e:	e004      	b.n	800248a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f7ff fb3d 	bl	8001b20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	f043 0204 	orr.w	r2, r3, #4
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f7ff fb2d 	bl	8001b34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a7a      	ldr	r2, [pc, #488]	; (80026dc <ADC_ConfigureBoostMode+0x1f8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d004      	beq.n	8002500 <ADC_ConfigureBoostMode+0x1c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a79      	ldr	r2, [pc, #484]	; (80026e0 <ADC_ConfigureBoostMode+0x1fc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d109      	bne.n	8002514 <ADC_ConfigureBoostMode+0x30>
 8002500:	4b78      	ldr	r3, [pc, #480]	; (80026e4 <ADC_ConfigureBoostMode+0x200>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf14      	ite	ne
 800250c:	2301      	movne	r3, #1
 800250e:	2300      	moveq	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e008      	b.n	8002526 <ADC_ConfigureBoostMode+0x42>
 8002514:	4b74      	ldr	r3, [pc, #464]	; (80026e8 <ADC_ConfigureBoostMode+0x204>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf14      	ite	ne
 8002520:	2301      	movne	r3, #1
 8002522:	2300      	moveq	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01c      	beq.n	8002564 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800252a:	f003 fcc3 	bl	8005eb4 <HAL_RCC_GetHCLKFreq>
 800252e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002538:	d010      	beq.n	800255c <ADC_ConfigureBoostMode+0x78>
 800253a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800253e:	d873      	bhi.n	8002628 <ADC_ConfigureBoostMode+0x144>
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002544:	d002      	beq.n	800254c <ADC_ConfigureBoostMode+0x68>
 8002546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800254a:	d16d      	bne.n	8002628 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	60fb      	str	r3, [r7, #12]
        break;
 800255a:	e068      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	60fb      	str	r3, [r7, #12]
        break;
 8002562:	e064      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002564:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002568:	f04f 0100 	mov.w	r1, #0
 800256c:	f004 ff34 	bl	80073d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002570:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800257a:	d051      	beq.n	8002620 <ADC_ConfigureBoostMode+0x13c>
 800257c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002580:	d854      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 8002582:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002586:	d047      	beq.n	8002618 <ADC_ConfigureBoostMode+0x134>
 8002588:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800258c:	d84e      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 800258e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002592:	d03d      	beq.n	8002610 <ADC_ConfigureBoostMode+0x12c>
 8002594:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002598:	d848      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 800259a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800259e:	d033      	beq.n	8002608 <ADC_ConfigureBoostMode+0x124>
 80025a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025a4:	d842      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 80025a6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80025aa:	d029      	beq.n	8002600 <ADC_ConfigureBoostMode+0x11c>
 80025ac:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80025b0:	d83c      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 80025b2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80025b6:	d01a      	beq.n	80025ee <ADC_ConfigureBoostMode+0x10a>
 80025b8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80025bc:	d836      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 80025be:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80025c2:	d014      	beq.n	80025ee <ADC_ConfigureBoostMode+0x10a>
 80025c4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80025c8:	d830      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 80025ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ce:	d00e      	beq.n	80025ee <ADC_ConfigureBoostMode+0x10a>
 80025d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025d4:	d82a      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 80025d6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025da:	d008      	beq.n	80025ee <ADC_ConfigureBoostMode+0x10a>
 80025dc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025e0:	d824      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 80025e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025e6:	d002      	beq.n	80025ee <ADC_ConfigureBoostMode+0x10a>
 80025e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025ec:	d11e      	bne.n	800262c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	0c9b      	lsrs	r3, r3, #18
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	60fb      	str	r3, [r7, #12]
        break;
 80025fe:	e016      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	60fb      	str	r3, [r7, #12]
        break;
 8002606:	e012      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	60fb      	str	r3, [r7, #12]
        break;
 800260e:	e00e      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	099b      	lsrs	r3, r3, #6
 8002614:	60fb      	str	r3, [r7, #12]
        break;
 8002616:	e00a      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	09db      	lsrs	r3, r3, #7
 800261c:	60fb      	str	r3, [r7, #12]
        break;
 800261e:	e006      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	60fb      	str	r3, [r7, #12]
        break;
 8002626:	e002      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002628:	bf00      	nop
 800262a:	e000      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800262c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800262e:	f7fe fdd7 	bl	80011e0 <HAL_GetREVID>
 8002632:	4603      	mov	r3, r0
 8002634:	f241 0203 	movw	r2, #4099	; 0x1003
 8002638:	4293      	cmp	r3, r2
 800263a:	d815      	bhi.n	8002668 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4a2b      	ldr	r2, [pc, #172]	; (80026ec <ADC_ConfigureBoostMode+0x208>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d908      	bls.n	8002656 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002652:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002654:	e03e      	b.n	80026d4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002664:	609a      	str	r2, [r3, #8]
}
 8002666:	e035      	b.n	80026d4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	085b      	lsrs	r3, r3, #1
 800266c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <ADC_ConfigureBoostMode+0x20c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d808      	bhi.n	8002688 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002684:	609a      	str	r2, [r3, #8]
}
 8002686:	e025      	b.n	80026d4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <ADC_ConfigureBoostMode+0x210>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d80a      	bhi.n	80026a6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a2:	609a      	str	r2, [r3, #8]
}
 80026a4:	e016      	b.n	80026d4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4a13      	ldr	r2, [pc, #76]	; (80026f8 <ADC_ConfigureBoostMode+0x214>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d80a      	bhi.n	80026c4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c0:	609a      	str	r2, [r3, #8]
}
 80026c2:	e007      	b.n	80026d4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80026d2:	609a      	str	r2, [r3, #8]
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40022000 	.word	0x40022000
 80026e0:	40022100 	.word	0x40022100
 80026e4:	40022300 	.word	0x40022300
 80026e8:	58026300 	.word	0x58026300
 80026ec:	01312d00 	.word	0x01312d00
 80026f0:	005f5e10 	.word	0x005f5e10
 80026f4:	00bebc20 	.word	0x00bebc20
 80026f8:	017d7840 	.word	0x017d7840

080026fc <LL_ADC_StartCalibration>:
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <LL_ADC_StartCalibration+0x38>)
 800270e:	4013      	ands	r3, r2
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800271c:	430a      	orrs	r2, r1
 800271e:	4313      	orrs	r3, r2
 8002720:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	609a      	str	r2, [r3, #8]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	3ffeffc0 	.word	0x3ffeffc0

08002738 <LL_ADC_IsCalibrationOnGoing>:
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800274c:	d101      	bne.n	8002752 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800276c:	2300      	movs	r3, #0
 800276e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_ADCEx_Calibration_Start+0x1e>
 800277a:	2302      	movs	r3, #2
 800277c:	e04c      	b.n	8002818 <HAL_ADCEx_Calibration_Start+0xb8>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff fdb8 	bl	80022fc <ADC_Disable>
 800278c:	4603      	mov	r3, r0
 800278e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d135      	bne.n	8002802 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800279a:	4b21      	ldr	r3, [pc, #132]	; (8002820 <HAL_ADCEx_Calibration_Start+0xc0>)
 800279c:	4013      	ands	r3, r2
 800279e:	f043 0202 	orr.w	r2, r3, #2
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ffa4 	bl	80026fc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027b4:	e014      	b.n	80027e0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	3301      	adds	r3, #1
 80027ba:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4a19      	ldr	r2, [pc, #100]	; (8002824 <HAL_ADCEx_Calibration_Start+0xc4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d30d      	bcc.n	80027e0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c8:	f023 0312 	bic.w	r3, r3, #18
 80027cc:	f043 0210 	orr.w	r2, r3, #16
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e01b      	b.n	8002818 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ffa7 	bl	8002738 <LL_ADC_IsCalibrationOnGoing>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e2      	bne.n	80027b6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	f023 0303 	bic.w	r3, r3, #3
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	655a      	str	r2, [r3, #84]	; 0x54
 8002800:	e005      	b.n	800280e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	f043 0210 	orr.w	r2, r3, #16
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002816:	7dfb      	ldrb	r3, [r7, #23]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	ffffeefd 	.word	0xffffeefd
 8002824:	25c3f800 	.word	0x25c3f800

08002828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <__NVIC_SetPriorityGrouping+0x40>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002844:	4013      	ands	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <__NVIC_SetPriorityGrouping+0x44>)
 8002852:	4313      	orrs	r3, r2
 8002854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002856:	4a04      	ldr	r2, [pc, #16]	; (8002868 <__NVIC_SetPriorityGrouping+0x40>)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	60d3      	str	r3, [r2, #12]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00
 800286c:	05fa0000 	.word	0x05fa0000

08002870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <__NVIC_GetPriorityGrouping+0x18>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	f003 0307 	and.w	r3, r3, #7
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800289a:	2b00      	cmp	r3, #0
 800289c:	db0b      	blt.n	80028b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	f003 021f 	and.w	r2, r3, #31
 80028a4:	4907      	ldr	r1, [pc, #28]	; (80028c4 <__NVIC_EnableIRQ+0x38>)
 80028a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2001      	movs	r0, #1
 80028ae:	fa00 f202 	lsl.w	r2, r0, r2
 80028b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	e000e100 	.word	0xe000e100

080028c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	6039      	str	r1, [r7, #0]
 80028d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	db0a      	blt.n	80028f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	490c      	ldr	r1, [pc, #48]	; (8002914 <__NVIC_SetPriority+0x4c>)
 80028e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e6:	0112      	lsls	r2, r2, #4
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	440b      	add	r3, r1
 80028ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f0:	e00a      	b.n	8002908 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4908      	ldr	r1, [pc, #32]	; (8002918 <__NVIC_SetPriority+0x50>)
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	3b04      	subs	r3, #4
 8002900:	0112      	lsls	r2, r2, #4
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	440b      	add	r3, r1
 8002906:	761a      	strb	r2, [r3, #24]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000e100 	.word	0xe000e100
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800291c:	b480      	push	{r7}
 800291e:	b089      	sub	sp, #36	; 0x24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f1c3 0307 	rsb	r3, r3, #7
 8002936:	2b04      	cmp	r3, #4
 8002938:	bf28      	it	cs
 800293a:	2304      	movcs	r3, #4
 800293c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3304      	adds	r3, #4
 8002942:	2b06      	cmp	r3, #6
 8002944:	d902      	bls.n	800294c <NVIC_EncodePriority+0x30>
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3b03      	subs	r3, #3
 800294a:	e000      	b.n	800294e <NVIC_EncodePriority+0x32>
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002950:	f04f 32ff 	mov.w	r2, #4294967295
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43da      	mvns	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	401a      	ands	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002964:	f04f 31ff 	mov.w	r1, #4294967295
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	fa01 f303 	lsl.w	r3, r1, r3
 800296e:	43d9      	mvns	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	4313      	orrs	r3, r2
         );
}
 8002976:	4618      	mov	r0, r3
 8002978:	3724      	adds	r7, #36	; 0x24
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ff4c 	bl	8002828 <__NVIC_SetPriorityGrouping>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029a6:	f7ff ff63 	bl	8002870 <__NVIC_GetPriorityGrouping>
 80029aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	6978      	ldr	r0, [r7, #20]
 80029b2:	f7ff ffb3 	bl	800291c <NVIC_EncodePriority>
 80029b6:	4602      	mov	r2, r0
 80029b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff ff82 	bl	80028c8 <__NVIC_SetPriority>
}
 80029c4:	bf00      	nop
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ff56 	bl	800288c <__NVIC_EnableIRQ>
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80029f0:	f7fe fbea 	bl	80011c8 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e316      	b.n	800302e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a66      	ldr	r2, [pc, #408]	; (8002ba0 <HAL_DMA_Init+0x1b8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d04a      	beq.n	8002aa0 <HAL_DMA_Init+0xb8>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a65      	ldr	r2, [pc, #404]	; (8002ba4 <HAL_DMA_Init+0x1bc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d045      	beq.n	8002aa0 <HAL_DMA_Init+0xb8>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a63      	ldr	r2, [pc, #396]	; (8002ba8 <HAL_DMA_Init+0x1c0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d040      	beq.n	8002aa0 <HAL_DMA_Init+0xb8>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a62      	ldr	r2, [pc, #392]	; (8002bac <HAL_DMA_Init+0x1c4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d03b      	beq.n	8002aa0 <HAL_DMA_Init+0xb8>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a60      	ldr	r2, [pc, #384]	; (8002bb0 <HAL_DMA_Init+0x1c8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d036      	beq.n	8002aa0 <HAL_DMA_Init+0xb8>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a5f      	ldr	r2, [pc, #380]	; (8002bb4 <HAL_DMA_Init+0x1cc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d031      	beq.n	8002aa0 <HAL_DMA_Init+0xb8>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a5d      	ldr	r2, [pc, #372]	; (8002bb8 <HAL_DMA_Init+0x1d0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d02c      	beq.n	8002aa0 <HAL_DMA_Init+0xb8>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a5c      	ldr	r2, [pc, #368]	; (8002bbc <HAL_DMA_Init+0x1d4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d027      	beq.n	8002aa0 <HAL_DMA_Init+0xb8>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a5a      	ldr	r2, [pc, #360]	; (8002bc0 <HAL_DMA_Init+0x1d8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d022      	beq.n	8002aa0 <HAL_DMA_Init+0xb8>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a59      	ldr	r2, [pc, #356]	; (8002bc4 <HAL_DMA_Init+0x1dc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d01d      	beq.n	8002aa0 <HAL_DMA_Init+0xb8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a57      	ldr	r2, [pc, #348]	; (8002bc8 <HAL_DMA_Init+0x1e0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d018      	beq.n	8002aa0 <HAL_DMA_Init+0xb8>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a56      	ldr	r2, [pc, #344]	; (8002bcc <HAL_DMA_Init+0x1e4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d013      	beq.n	8002aa0 <HAL_DMA_Init+0xb8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a54      	ldr	r2, [pc, #336]	; (8002bd0 <HAL_DMA_Init+0x1e8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00e      	beq.n	8002aa0 <HAL_DMA_Init+0xb8>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a53      	ldr	r2, [pc, #332]	; (8002bd4 <HAL_DMA_Init+0x1ec>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d009      	beq.n	8002aa0 <HAL_DMA_Init+0xb8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a51      	ldr	r2, [pc, #324]	; (8002bd8 <HAL_DMA_Init+0x1f0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d004      	beq.n	8002aa0 <HAL_DMA_Init+0xb8>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a50      	ldr	r2, [pc, #320]	; (8002bdc <HAL_DMA_Init+0x1f4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d101      	bne.n	8002aa4 <HAL_DMA_Init+0xbc>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <HAL_DMA_Init+0xbe>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 813b 	beq.w	8002d22 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a37      	ldr	r2, [pc, #220]	; (8002ba0 <HAL_DMA_Init+0x1b8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d04a      	beq.n	8002b5c <HAL_DMA_Init+0x174>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a36      	ldr	r2, [pc, #216]	; (8002ba4 <HAL_DMA_Init+0x1bc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d045      	beq.n	8002b5c <HAL_DMA_Init+0x174>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a34      	ldr	r2, [pc, #208]	; (8002ba8 <HAL_DMA_Init+0x1c0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d040      	beq.n	8002b5c <HAL_DMA_Init+0x174>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a33      	ldr	r2, [pc, #204]	; (8002bac <HAL_DMA_Init+0x1c4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d03b      	beq.n	8002b5c <HAL_DMA_Init+0x174>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a31      	ldr	r2, [pc, #196]	; (8002bb0 <HAL_DMA_Init+0x1c8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d036      	beq.n	8002b5c <HAL_DMA_Init+0x174>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a30      	ldr	r2, [pc, #192]	; (8002bb4 <HAL_DMA_Init+0x1cc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d031      	beq.n	8002b5c <HAL_DMA_Init+0x174>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2e      	ldr	r2, [pc, #184]	; (8002bb8 <HAL_DMA_Init+0x1d0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d02c      	beq.n	8002b5c <HAL_DMA_Init+0x174>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2d      	ldr	r2, [pc, #180]	; (8002bbc <HAL_DMA_Init+0x1d4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d027      	beq.n	8002b5c <HAL_DMA_Init+0x174>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a2b      	ldr	r2, [pc, #172]	; (8002bc0 <HAL_DMA_Init+0x1d8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d022      	beq.n	8002b5c <HAL_DMA_Init+0x174>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2a      	ldr	r2, [pc, #168]	; (8002bc4 <HAL_DMA_Init+0x1dc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d01d      	beq.n	8002b5c <HAL_DMA_Init+0x174>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a28      	ldr	r2, [pc, #160]	; (8002bc8 <HAL_DMA_Init+0x1e0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d018      	beq.n	8002b5c <HAL_DMA_Init+0x174>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a27      	ldr	r2, [pc, #156]	; (8002bcc <HAL_DMA_Init+0x1e4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d013      	beq.n	8002b5c <HAL_DMA_Init+0x174>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a25      	ldr	r2, [pc, #148]	; (8002bd0 <HAL_DMA_Init+0x1e8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00e      	beq.n	8002b5c <HAL_DMA_Init+0x174>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a24      	ldr	r2, [pc, #144]	; (8002bd4 <HAL_DMA_Init+0x1ec>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d009      	beq.n	8002b5c <HAL_DMA_Init+0x174>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a22      	ldr	r2, [pc, #136]	; (8002bd8 <HAL_DMA_Init+0x1f0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d004      	beq.n	8002b5c <HAL_DMA_Init+0x174>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <HAL_DMA_Init+0x1f4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d108      	bne.n	8002b6e <HAL_DMA_Init+0x186>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0201 	bic.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	e007      	b.n	8002b7e <HAL_DMA_Init+0x196>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b7e:	e02f      	b.n	8002be0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b80:	f7fe fb22 	bl	80011c8 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b05      	cmp	r3, #5
 8002b8c:	d928      	bls.n	8002be0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2203      	movs	r2, #3
 8002b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e246      	b.n	800302e <HAL_DMA_Init+0x646>
 8002ba0:	40020010 	.word	0x40020010
 8002ba4:	40020028 	.word	0x40020028
 8002ba8:	40020040 	.word	0x40020040
 8002bac:	40020058 	.word	0x40020058
 8002bb0:	40020070 	.word	0x40020070
 8002bb4:	40020088 	.word	0x40020088
 8002bb8:	400200a0 	.word	0x400200a0
 8002bbc:	400200b8 	.word	0x400200b8
 8002bc0:	40020410 	.word	0x40020410
 8002bc4:	40020428 	.word	0x40020428
 8002bc8:	40020440 	.word	0x40020440
 8002bcc:	40020458 	.word	0x40020458
 8002bd0:	40020470 	.word	0x40020470
 8002bd4:	40020488 	.word	0x40020488
 8002bd8:	400204a0 	.word	0x400204a0
 8002bdc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1c8      	bne.n	8002b80 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4b83      	ldr	r3, [pc, #524]	; (8002e08 <HAL_DMA_Init+0x420>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002c06:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c12:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c1e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d107      	bne.n	8002c44 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002c44:	4b71      	ldr	r3, [pc, #452]	; (8002e0c <HAL_DMA_Init+0x424>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b71      	ldr	r3, [pc, #452]	; (8002e10 <HAL_DMA_Init+0x428>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c50:	d328      	bcc.n	8002ca4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b28      	cmp	r3, #40	; 0x28
 8002c58:	d903      	bls.n	8002c62 <HAL_DMA_Init+0x27a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8002c60:	d917      	bls.n	8002c92 <HAL_DMA_Init+0x2aa>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b3e      	cmp	r3, #62	; 0x3e
 8002c68:	d903      	bls.n	8002c72 <HAL_DMA_Init+0x28a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b42      	cmp	r3, #66	; 0x42
 8002c70:	d90f      	bls.n	8002c92 <HAL_DMA_Init+0x2aa>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b46      	cmp	r3, #70	; 0x46
 8002c78:	d903      	bls.n	8002c82 <HAL_DMA_Init+0x29a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b48      	cmp	r3, #72	; 0x48
 8002c80:	d907      	bls.n	8002c92 <HAL_DMA_Init+0x2aa>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b4e      	cmp	r3, #78	; 0x4e
 8002c88:	d905      	bls.n	8002c96 <HAL_DMA_Init+0x2ae>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b52      	cmp	r3, #82	; 0x52
 8002c90:	d801      	bhi.n	8002c96 <HAL_DMA_Init+0x2ae>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_DMA_Init+0x2b0>
 8002c96:	2300      	movs	r3, #0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ca2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f023 0307 	bic.w	r3, r3, #7
 8002cba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d117      	bne.n	8002cfe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00e      	beq.n	8002cfe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f001 fdcf 	bl	8004884 <DMA_CheckFifoParam>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2240      	movs	r2, #64	; 0x40
 8002cf0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e197      	b.n	800302e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f001 fd0a 	bl	8004720 <DMA_CalcBaseAndBitshift>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	223f      	movs	r2, #63	; 0x3f
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	e0cd      	b.n	8002ebe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a3b      	ldr	r2, [pc, #236]	; (8002e14 <HAL_DMA_Init+0x42c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d022      	beq.n	8002d72 <HAL_DMA_Init+0x38a>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a39      	ldr	r2, [pc, #228]	; (8002e18 <HAL_DMA_Init+0x430>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01d      	beq.n	8002d72 <HAL_DMA_Init+0x38a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a38      	ldr	r2, [pc, #224]	; (8002e1c <HAL_DMA_Init+0x434>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d018      	beq.n	8002d72 <HAL_DMA_Init+0x38a>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a36      	ldr	r2, [pc, #216]	; (8002e20 <HAL_DMA_Init+0x438>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_DMA_Init+0x38a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a35      	ldr	r2, [pc, #212]	; (8002e24 <HAL_DMA_Init+0x43c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00e      	beq.n	8002d72 <HAL_DMA_Init+0x38a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a33      	ldr	r2, [pc, #204]	; (8002e28 <HAL_DMA_Init+0x440>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d009      	beq.n	8002d72 <HAL_DMA_Init+0x38a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a32      	ldr	r2, [pc, #200]	; (8002e2c <HAL_DMA_Init+0x444>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d004      	beq.n	8002d72 <HAL_DMA_Init+0x38a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a30      	ldr	r2, [pc, #192]	; (8002e30 <HAL_DMA_Init+0x448>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d101      	bne.n	8002d76 <HAL_DMA_Init+0x38e>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_DMA_Init+0x390>
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8097 	beq.w	8002eac <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a24      	ldr	r2, [pc, #144]	; (8002e14 <HAL_DMA_Init+0x42c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d021      	beq.n	8002dcc <HAL_DMA_Init+0x3e4>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <HAL_DMA_Init+0x430>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d01c      	beq.n	8002dcc <HAL_DMA_Init+0x3e4>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a21      	ldr	r2, [pc, #132]	; (8002e1c <HAL_DMA_Init+0x434>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d017      	beq.n	8002dcc <HAL_DMA_Init+0x3e4>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <HAL_DMA_Init+0x438>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d012      	beq.n	8002dcc <HAL_DMA_Init+0x3e4>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1e      	ldr	r2, [pc, #120]	; (8002e24 <HAL_DMA_Init+0x43c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00d      	beq.n	8002dcc <HAL_DMA_Init+0x3e4>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1c      	ldr	r2, [pc, #112]	; (8002e28 <HAL_DMA_Init+0x440>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d008      	beq.n	8002dcc <HAL_DMA_Init+0x3e4>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1b      	ldr	r2, [pc, #108]	; (8002e2c <HAL_DMA_Init+0x444>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <HAL_DMA_Init+0x3e4>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <HAL_DMA_Init+0x448>)
 8002dca:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <HAL_DMA_Init+0x44c>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b40      	cmp	r3, #64	; 0x40
 8002df2:	d021      	beq.n	8002e38 <HAL_DMA_Init+0x450>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b80      	cmp	r3, #128	; 0x80
 8002dfa:	d102      	bne.n	8002e02 <HAL_DMA_Init+0x41a>
 8002dfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e00:	e01b      	b.n	8002e3a <HAL_DMA_Init+0x452>
 8002e02:	2300      	movs	r3, #0
 8002e04:	e019      	b.n	8002e3a <HAL_DMA_Init+0x452>
 8002e06:	bf00      	nop
 8002e08:	fe10803f 	.word	0xfe10803f
 8002e0c:	5c001000 	.word	0x5c001000
 8002e10:	ffff0000 	.word	0xffff0000
 8002e14:	58025408 	.word	0x58025408
 8002e18:	5802541c 	.word	0x5802541c
 8002e1c:	58025430 	.word	0x58025430
 8002e20:	58025444 	.word	0x58025444
 8002e24:	58025458 	.word	0x58025458
 8002e28:	5802546c 	.word	0x5802546c
 8002e2c:	58025480 	.word	0x58025480
 8002e30:	58025494 	.word	0x58025494
 8002e34:	fffe000f 	.word	0xfffe000f
 8002e38:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68d2      	ldr	r2, [r2, #12]
 8002e3e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e68:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b6e      	ldr	r3, [pc, #440]	; (8003038 <HAL_DMA_Init+0x650>)
 8002e80:	4413      	add	r3, r2
 8002e82:	4a6e      	ldr	r2, [pc, #440]	; (800303c <HAL_DMA_Init+0x654>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	009a      	lsls	r2, r3, #2
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f001 fc45 	bl	8004720 <DMA_CalcBaseAndBitshift>
 8002e96:	4603      	mov	r3, r0
 8002e98:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	e008      	b.n	8002ebe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2240      	movs	r2, #64	; 0x40
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e0b7      	b.n	800302e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a5f      	ldr	r2, [pc, #380]	; (8003040 <HAL_DMA_Init+0x658>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d072      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a5d      	ldr	r2, [pc, #372]	; (8003044 <HAL_DMA_Init+0x65c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d06d      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a5c      	ldr	r2, [pc, #368]	; (8003048 <HAL_DMA_Init+0x660>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d068      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a5a      	ldr	r2, [pc, #360]	; (800304c <HAL_DMA_Init+0x664>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d063      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a59      	ldr	r2, [pc, #356]	; (8003050 <HAL_DMA_Init+0x668>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d05e      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a57      	ldr	r2, [pc, #348]	; (8003054 <HAL_DMA_Init+0x66c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d059      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a56      	ldr	r2, [pc, #344]	; (8003058 <HAL_DMA_Init+0x670>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d054      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a54      	ldr	r2, [pc, #336]	; (800305c <HAL_DMA_Init+0x674>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d04f      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a53      	ldr	r2, [pc, #332]	; (8003060 <HAL_DMA_Init+0x678>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d04a      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a51      	ldr	r2, [pc, #324]	; (8003064 <HAL_DMA_Init+0x67c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d045      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a50      	ldr	r2, [pc, #320]	; (8003068 <HAL_DMA_Init+0x680>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d040      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a4e      	ldr	r2, [pc, #312]	; (800306c <HAL_DMA_Init+0x684>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d03b      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a4d      	ldr	r2, [pc, #308]	; (8003070 <HAL_DMA_Init+0x688>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d036      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a4b      	ldr	r2, [pc, #300]	; (8003074 <HAL_DMA_Init+0x68c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d031      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a4a      	ldr	r2, [pc, #296]	; (8003078 <HAL_DMA_Init+0x690>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d02c      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a48      	ldr	r2, [pc, #288]	; (800307c <HAL_DMA_Init+0x694>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d027      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a47      	ldr	r2, [pc, #284]	; (8003080 <HAL_DMA_Init+0x698>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d022      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a45      	ldr	r2, [pc, #276]	; (8003084 <HAL_DMA_Init+0x69c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d01d      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a44      	ldr	r2, [pc, #272]	; (8003088 <HAL_DMA_Init+0x6a0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d018      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a42      	ldr	r2, [pc, #264]	; (800308c <HAL_DMA_Init+0x6a4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d013      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a41      	ldr	r2, [pc, #260]	; (8003090 <HAL_DMA_Init+0x6a8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00e      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a3f      	ldr	r2, [pc, #252]	; (8003094 <HAL_DMA_Init+0x6ac>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d009      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a3e      	ldr	r2, [pc, #248]	; (8003098 <HAL_DMA_Init+0x6b0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d004      	beq.n	8002fae <HAL_DMA_Init+0x5c6>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a3c      	ldr	r2, [pc, #240]	; (800309c <HAL_DMA_Init+0x6b4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d101      	bne.n	8002fb2 <HAL_DMA_Init+0x5ca>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <HAL_DMA_Init+0x5cc>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d032      	beq.n	800301e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f001 fcdf 	bl	800497c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b80      	cmp	r3, #128	; 0x80
 8002fc4:	d102      	bne.n	8002fcc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002fe0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d010      	beq.n	800300c <HAL_DMA_Init+0x624>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d80c      	bhi.n	800300c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f001 fd5c 	bl	8004ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	e008      	b.n	800301e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	a7fdabf8 	.word	0xa7fdabf8
 800303c:	cccccccd 	.word	0xcccccccd
 8003040:	40020010 	.word	0x40020010
 8003044:	40020028 	.word	0x40020028
 8003048:	40020040 	.word	0x40020040
 800304c:	40020058 	.word	0x40020058
 8003050:	40020070 	.word	0x40020070
 8003054:	40020088 	.word	0x40020088
 8003058:	400200a0 	.word	0x400200a0
 800305c:	400200b8 	.word	0x400200b8
 8003060:	40020410 	.word	0x40020410
 8003064:	40020428 	.word	0x40020428
 8003068:	40020440 	.word	0x40020440
 800306c:	40020458 	.word	0x40020458
 8003070:	40020470 	.word	0x40020470
 8003074:	40020488 	.word	0x40020488
 8003078:	400204a0 	.word	0x400204a0
 800307c:	400204b8 	.word	0x400204b8
 8003080:	58025408 	.word	0x58025408
 8003084:	5802541c 	.word	0x5802541c
 8003088:	58025430 	.word	0x58025430
 800308c:	58025444 	.word	0x58025444
 8003090:	58025458 	.word	0x58025458
 8003094:	5802546c 	.word	0x5802546c
 8003098:	58025480 	.word	0x58025480
 800309c:	58025494 	.word	0x58025494

080030a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e226      	b.n	800350a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_DMA_Start_IT+0x2a>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e21f      	b.n	800350a <HAL_DMA_Start_IT+0x46a>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	f040 820a 	bne.w	80034f4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a68      	ldr	r2, [pc, #416]	; (8003294 <HAL_DMA_Start_IT+0x1f4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d04a      	beq.n	800318e <HAL_DMA_Start_IT+0xee>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a66      	ldr	r2, [pc, #408]	; (8003298 <HAL_DMA_Start_IT+0x1f8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d045      	beq.n	800318e <HAL_DMA_Start_IT+0xee>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a65      	ldr	r2, [pc, #404]	; (800329c <HAL_DMA_Start_IT+0x1fc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d040      	beq.n	800318e <HAL_DMA_Start_IT+0xee>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a63      	ldr	r2, [pc, #396]	; (80032a0 <HAL_DMA_Start_IT+0x200>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d03b      	beq.n	800318e <HAL_DMA_Start_IT+0xee>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a62      	ldr	r2, [pc, #392]	; (80032a4 <HAL_DMA_Start_IT+0x204>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d036      	beq.n	800318e <HAL_DMA_Start_IT+0xee>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a60      	ldr	r2, [pc, #384]	; (80032a8 <HAL_DMA_Start_IT+0x208>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d031      	beq.n	800318e <HAL_DMA_Start_IT+0xee>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a5f      	ldr	r2, [pc, #380]	; (80032ac <HAL_DMA_Start_IT+0x20c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d02c      	beq.n	800318e <HAL_DMA_Start_IT+0xee>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a5d      	ldr	r2, [pc, #372]	; (80032b0 <HAL_DMA_Start_IT+0x210>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d027      	beq.n	800318e <HAL_DMA_Start_IT+0xee>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5c      	ldr	r2, [pc, #368]	; (80032b4 <HAL_DMA_Start_IT+0x214>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d022      	beq.n	800318e <HAL_DMA_Start_IT+0xee>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a5a      	ldr	r2, [pc, #360]	; (80032b8 <HAL_DMA_Start_IT+0x218>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01d      	beq.n	800318e <HAL_DMA_Start_IT+0xee>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a59      	ldr	r2, [pc, #356]	; (80032bc <HAL_DMA_Start_IT+0x21c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d018      	beq.n	800318e <HAL_DMA_Start_IT+0xee>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a57      	ldr	r2, [pc, #348]	; (80032c0 <HAL_DMA_Start_IT+0x220>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <HAL_DMA_Start_IT+0xee>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a56      	ldr	r2, [pc, #344]	; (80032c4 <HAL_DMA_Start_IT+0x224>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00e      	beq.n	800318e <HAL_DMA_Start_IT+0xee>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a54      	ldr	r2, [pc, #336]	; (80032c8 <HAL_DMA_Start_IT+0x228>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_DMA_Start_IT+0xee>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a53      	ldr	r2, [pc, #332]	; (80032cc <HAL_DMA_Start_IT+0x22c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d004      	beq.n	800318e <HAL_DMA_Start_IT+0xee>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a51      	ldr	r2, [pc, #324]	; (80032d0 <HAL_DMA_Start_IT+0x230>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d108      	bne.n	80031a0 <HAL_DMA_Start_IT+0x100>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0201 	bic.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	e007      	b.n	80031b0 <HAL_DMA_Start_IT+0x110>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f001 f906 	bl	80043c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a34      	ldr	r2, [pc, #208]	; (8003294 <HAL_DMA_Start_IT+0x1f4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d04a      	beq.n	800325c <HAL_DMA_Start_IT+0x1bc>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a33      	ldr	r2, [pc, #204]	; (8003298 <HAL_DMA_Start_IT+0x1f8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d045      	beq.n	800325c <HAL_DMA_Start_IT+0x1bc>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a31      	ldr	r2, [pc, #196]	; (800329c <HAL_DMA_Start_IT+0x1fc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d040      	beq.n	800325c <HAL_DMA_Start_IT+0x1bc>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a30      	ldr	r2, [pc, #192]	; (80032a0 <HAL_DMA_Start_IT+0x200>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d03b      	beq.n	800325c <HAL_DMA_Start_IT+0x1bc>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a2e      	ldr	r2, [pc, #184]	; (80032a4 <HAL_DMA_Start_IT+0x204>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d036      	beq.n	800325c <HAL_DMA_Start_IT+0x1bc>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a2d      	ldr	r2, [pc, #180]	; (80032a8 <HAL_DMA_Start_IT+0x208>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d031      	beq.n	800325c <HAL_DMA_Start_IT+0x1bc>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a2b      	ldr	r2, [pc, #172]	; (80032ac <HAL_DMA_Start_IT+0x20c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d02c      	beq.n	800325c <HAL_DMA_Start_IT+0x1bc>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a2a      	ldr	r2, [pc, #168]	; (80032b0 <HAL_DMA_Start_IT+0x210>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d027      	beq.n	800325c <HAL_DMA_Start_IT+0x1bc>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a28      	ldr	r2, [pc, #160]	; (80032b4 <HAL_DMA_Start_IT+0x214>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d022      	beq.n	800325c <HAL_DMA_Start_IT+0x1bc>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a27      	ldr	r2, [pc, #156]	; (80032b8 <HAL_DMA_Start_IT+0x218>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d01d      	beq.n	800325c <HAL_DMA_Start_IT+0x1bc>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a25      	ldr	r2, [pc, #148]	; (80032bc <HAL_DMA_Start_IT+0x21c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d018      	beq.n	800325c <HAL_DMA_Start_IT+0x1bc>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a24      	ldr	r2, [pc, #144]	; (80032c0 <HAL_DMA_Start_IT+0x220>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d013      	beq.n	800325c <HAL_DMA_Start_IT+0x1bc>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a22      	ldr	r2, [pc, #136]	; (80032c4 <HAL_DMA_Start_IT+0x224>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00e      	beq.n	800325c <HAL_DMA_Start_IT+0x1bc>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a21      	ldr	r2, [pc, #132]	; (80032c8 <HAL_DMA_Start_IT+0x228>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d009      	beq.n	800325c <HAL_DMA_Start_IT+0x1bc>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <HAL_DMA_Start_IT+0x22c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d004      	beq.n	800325c <HAL_DMA_Start_IT+0x1bc>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1e      	ldr	r2, [pc, #120]	; (80032d0 <HAL_DMA_Start_IT+0x230>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d101      	bne.n	8003260 <HAL_DMA_Start_IT+0x1c0>
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <HAL_DMA_Start_IT+0x1c2>
 8003260:	2300      	movs	r3, #0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d036      	beq.n	80032d4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f023 021e 	bic.w	r2, r3, #30
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0216 	orr.w	r2, r2, #22
 8003278:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d03e      	beq.n	8003300 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0208 	orr.w	r2, r2, #8
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	e035      	b.n	8003300 <HAL_DMA_Start_IT+0x260>
 8003294:	40020010 	.word	0x40020010
 8003298:	40020028 	.word	0x40020028
 800329c:	40020040 	.word	0x40020040
 80032a0:	40020058 	.word	0x40020058
 80032a4:	40020070 	.word	0x40020070
 80032a8:	40020088 	.word	0x40020088
 80032ac:	400200a0 	.word	0x400200a0
 80032b0:	400200b8 	.word	0x400200b8
 80032b4:	40020410 	.word	0x40020410
 80032b8:	40020428 	.word	0x40020428
 80032bc:	40020440 	.word	0x40020440
 80032c0:	40020458 	.word	0x40020458
 80032c4:	40020470 	.word	0x40020470
 80032c8:	40020488 	.word	0x40020488
 80032cc:	400204a0 	.word	0x400204a0
 80032d0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f023 020e 	bic.w	r2, r3, #14
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 020a 	orr.w	r2, r2, #10
 80032e6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d007      	beq.n	8003300 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0204 	orr.w	r2, r2, #4
 80032fe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a83      	ldr	r2, [pc, #524]	; (8003514 <HAL_DMA_Start_IT+0x474>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d072      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a82      	ldr	r2, [pc, #520]	; (8003518 <HAL_DMA_Start_IT+0x478>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d06d      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a80      	ldr	r2, [pc, #512]	; (800351c <HAL_DMA_Start_IT+0x47c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d068      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7f      	ldr	r2, [pc, #508]	; (8003520 <HAL_DMA_Start_IT+0x480>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d063      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a7d      	ldr	r2, [pc, #500]	; (8003524 <HAL_DMA_Start_IT+0x484>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d05e      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a7c      	ldr	r2, [pc, #496]	; (8003528 <HAL_DMA_Start_IT+0x488>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d059      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a7a      	ldr	r2, [pc, #488]	; (800352c <HAL_DMA_Start_IT+0x48c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d054      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a79      	ldr	r2, [pc, #484]	; (8003530 <HAL_DMA_Start_IT+0x490>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d04f      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a77      	ldr	r2, [pc, #476]	; (8003534 <HAL_DMA_Start_IT+0x494>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d04a      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a76      	ldr	r2, [pc, #472]	; (8003538 <HAL_DMA_Start_IT+0x498>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d045      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a74      	ldr	r2, [pc, #464]	; (800353c <HAL_DMA_Start_IT+0x49c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d040      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a73      	ldr	r2, [pc, #460]	; (8003540 <HAL_DMA_Start_IT+0x4a0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d03b      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a71      	ldr	r2, [pc, #452]	; (8003544 <HAL_DMA_Start_IT+0x4a4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d036      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a70      	ldr	r2, [pc, #448]	; (8003548 <HAL_DMA_Start_IT+0x4a8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d031      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a6e      	ldr	r2, [pc, #440]	; (800354c <HAL_DMA_Start_IT+0x4ac>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d02c      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a6d      	ldr	r2, [pc, #436]	; (8003550 <HAL_DMA_Start_IT+0x4b0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d027      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a6b      	ldr	r2, [pc, #428]	; (8003554 <HAL_DMA_Start_IT+0x4b4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d022      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6a      	ldr	r2, [pc, #424]	; (8003558 <HAL_DMA_Start_IT+0x4b8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d01d      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a68      	ldr	r2, [pc, #416]	; (800355c <HAL_DMA_Start_IT+0x4bc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d018      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a67      	ldr	r2, [pc, #412]	; (8003560 <HAL_DMA_Start_IT+0x4c0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d013      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a65      	ldr	r2, [pc, #404]	; (8003564 <HAL_DMA_Start_IT+0x4c4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00e      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a64      	ldr	r2, [pc, #400]	; (8003568 <HAL_DMA_Start_IT+0x4c8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d009      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a62      	ldr	r2, [pc, #392]	; (800356c <HAL_DMA_Start_IT+0x4cc>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d004      	beq.n	80033f0 <HAL_DMA_Start_IT+0x350>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a61      	ldr	r2, [pc, #388]	; (8003570 <HAL_DMA_Start_IT+0x4d0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_DMA_Start_IT+0x354>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_DMA_Start_IT+0x356>
 80033f4:	2300      	movs	r3, #0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01a      	beq.n	8003430 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d007      	beq.n	8003418 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003416:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800342a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800342e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a37      	ldr	r2, [pc, #220]	; (8003514 <HAL_DMA_Start_IT+0x474>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d04a      	beq.n	80034d0 <HAL_DMA_Start_IT+0x430>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a36      	ldr	r2, [pc, #216]	; (8003518 <HAL_DMA_Start_IT+0x478>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d045      	beq.n	80034d0 <HAL_DMA_Start_IT+0x430>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a34      	ldr	r2, [pc, #208]	; (800351c <HAL_DMA_Start_IT+0x47c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d040      	beq.n	80034d0 <HAL_DMA_Start_IT+0x430>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a33      	ldr	r2, [pc, #204]	; (8003520 <HAL_DMA_Start_IT+0x480>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d03b      	beq.n	80034d0 <HAL_DMA_Start_IT+0x430>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a31      	ldr	r2, [pc, #196]	; (8003524 <HAL_DMA_Start_IT+0x484>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d036      	beq.n	80034d0 <HAL_DMA_Start_IT+0x430>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a30      	ldr	r2, [pc, #192]	; (8003528 <HAL_DMA_Start_IT+0x488>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d031      	beq.n	80034d0 <HAL_DMA_Start_IT+0x430>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2e      	ldr	r2, [pc, #184]	; (800352c <HAL_DMA_Start_IT+0x48c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d02c      	beq.n	80034d0 <HAL_DMA_Start_IT+0x430>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2d      	ldr	r2, [pc, #180]	; (8003530 <HAL_DMA_Start_IT+0x490>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d027      	beq.n	80034d0 <HAL_DMA_Start_IT+0x430>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a2b      	ldr	r2, [pc, #172]	; (8003534 <HAL_DMA_Start_IT+0x494>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d022      	beq.n	80034d0 <HAL_DMA_Start_IT+0x430>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2a      	ldr	r2, [pc, #168]	; (8003538 <HAL_DMA_Start_IT+0x498>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d01d      	beq.n	80034d0 <HAL_DMA_Start_IT+0x430>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a28      	ldr	r2, [pc, #160]	; (800353c <HAL_DMA_Start_IT+0x49c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d018      	beq.n	80034d0 <HAL_DMA_Start_IT+0x430>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a27      	ldr	r2, [pc, #156]	; (8003540 <HAL_DMA_Start_IT+0x4a0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d013      	beq.n	80034d0 <HAL_DMA_Start_IT+0x430>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a25      	ldr	r2, [pc, #148]	; (8003544 <HAL_DMA_Start_IT+0x4a4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00e      	beq.n	80034d0 <HAL_DMA_Start_IT+0x430>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a24      	ldr	r2, [pc, #144]	; (8003548 <HAL_DMA_Start_IT+0x4a8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d009      	beq.n	80034d0 <HAL_DMA_Start_IT+0x430>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a22      	ldr	r2, [pc, #136]	; (800354c <HAL_DMA_Start_IT+0x4ac>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_DMA_Start_IT+0x430>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a21      	ldr	r2, [pc, #132]	; (8003550 <HAL_DMA_Start_IT+0x4b0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d108      	bne.n	80034e2 <HAL_DMA_Start_IT+0x442>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e012      	b.n	8003508 <HAL_DMA_Start_IT+0x468>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	e009      	b.n	8003508 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003508:	7dfb      	ldrb	r3, [r7, #23]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40020010 	.word	0x40020010
 8003518:	40020028 	.word	0x40020028
 800351c:	40020040 	.word	0x40020040
 8003520:	40020058 	.word	0x40020058
 8003524:	40020070 	.word	0x40020070
 8003528:	40020088 	.word	0x40020088
 800352c:	400200a0 	.word	0x400200a0
 8003530:	400200b8 	.word	0x400200b8
 8003534:	40020410 	.word	0x40020410
 8003538:	40020428 	.word	0x40020428
 800353c:	40020440 	.word	0x40020440
 8003540:	40020458 	.word	0x40020458
 8003544:	40020470 	.word	0x40020470
 8003548:	40020488 	.word	0x40020488
 800354c:	400204a0 	.word	0x400204a0
 8003550:	400204b8 	.word	0x400204b8
 8003554:	58025408 	.word	0x58025408
 8003558:	5802541c 	.word	0x5802541c
 800355c:	58025430 	.word	0x58025430
 8003560:	58025444 	.word	0x58025444
 8003564:	58025458 	.word	0x58025458
 8003568:	5802546c 	.word	0x5802546c
 800356c:	58025480 	.word	0x58025480
 8003570:	58025494 	.word	0x58025494

08003574 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003580:	4b67      	ldr	r3, [pc, #412]	; (8003720 <HAL_DMA_IRQHandler+0x1ac>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a67      	ldr	r2, [pc, #412]	; (8003724 <HAL_DMA_IRQHandler+0x1b0>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	0a9b      	lsrs	r3, r3, #10
 800358c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003592:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003598:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a5f      	ldr	r2, [pc, #380]	; (8003728 <HAL_DMA_IRQHandler+0x1b4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d04a      	beq.n	8003646 <HAL_DMA_IRQHandler+0xd2>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a5d      	ldr	r2, [pc, #372]	; (800372c <HAL_DMA_IRQHandler+0x1b8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d045      	beq.n	8003646 <HAL_DMA_IRQHandler+0xd2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a5c      	ldr	r2, [pc, #368]	; (8003730 <HAL_DMA_IRQHandler+0x1bc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d040      	beq.n	8003646 <HAL_DMA_IRQHandler+0xd2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a5a      	ldr	r2, [pc, #360]	; (8003734 <HAL_DMA_IRQHandler+0x1c0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d03b      	beq.n	8003646 <HAL_DMA_IRQHandler+0xd2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a59      	ldr	r2, [pc, #356]	; (8003738 <HAL_DMA_IRQHandler+0x1c4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d036      	beq.n	8003646 <HAL_DMA_IRQHandler+0xd2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a57      	ldr	r2, [pc, #348]	; (800373c <HAL_DMA_IRQHandler+0x1c8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d031      	beq.n	8003646 <HAL_DMA_IRQHandler+0xd2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a56      	ldr	r2, [pc, #344]	; (8003740 <HAL_DMA_IRQHandler+0x1cc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d02c      	beq.n	8003646 <HAL_DMA_IRQHandler+0xd2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a54      	ldr	r2, [pc, #336]	; (8003744 <HAL_DMA_IRQHandler+0x1d0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d027      	beq.n	8003646 <HAL_DMA_IRQHandler+0xd2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a53      	ldr	r2, [pc, #332]	; (8003748 <HAL_DMA_IRQHandler+0x1d4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d022      	beq.n	8003646 <HAL_DMA_IRQHandler+0xd2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a51      	ldr	r2, [pc, #324]	; (800374c <HAL_DMA_IRQHandler+0x1d8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01d      	beq.n	8003646 <HAL_DMA_IRQHandler+0xd2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a50      	ldr	r2, [pc, #320]	; (8003750 <HAL_DMA_IRQHandler+0x1dc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d018      	beq.n	8003646 <HAL_DMA_IRQHandler+0xd2>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a4e      	ldr	r2, [pc, #312]	; (8003754 <HAL_DMA_IRQHandler+0x1e0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d013      	beq.n	8003646 <HAL_DMA_IRQHandler+0xd2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a4d      	ldr	r2, [pc, #308]	; (8003758 <HAL_DMA_IRQHandler+0x1e4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d00e      	beq.n	8003646 <HAL_DMA_IRQHandler+0xd2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a4b      	ldr	r2, [pc, #300]	; (800375c <HAL_DMA_IRQHandler+0x1e8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d009      	beq.n	8003646 <HAL_DMA_IRQHandler+0xd2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a4a      	ldr	r2, [pc, #296]	; (8003760 <HAL_DMA_IRQHandler+0x1ec>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d004      	beq.n	8003646 <HAL_DMA_IRQHandler+0xd2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a48      	ldr	r2, [pc, #288]	; (8003764 <HAL_DMA_IRQHandler+0x1f0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_DMA_IRQHandler+0xd6>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_DMA_IRQHandler+0xd8>
 800364a:	2300      	movs	r3, #0
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 842b 	beq.w	8003ea8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2208      	movs	r2, #8
 800365c:	409a      	lsls	r2, r3
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80a2 	beq.w	80037ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2e      	ldr	r2, [pc, #184]	; (8003728 <HAL_DMA_IRQHandler+0x1b4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d04a      	beq.n	8003708 <HAL_DMA_IRQHandler+0x194>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2d      	ldr	r2, [pc, #180]	; (800372c <HAL_DMA_IRQHandler+0x1b8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d045      	beq.n	8003708 <HAL_DMA_IRQHandler+0x194>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a2b      	ldr	r2, [pc, #172]	; (8003730 <HAL_DMA_IRQHandler+0x1bc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d040      	beq.n	8003708 <HAL_DMA_IRQHandler+0x194>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a2a      	ldr	r2, [pc, #168]	; (8003734 <HAL_DMA_IRQHandler+0x1c0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d03b      	beq.n	8003708 <HAL_DMA_IRQHandler+0x194>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a28      	ldr	r2, [pc, #160]	; (8003738 <HAL_DMA_IRQHandler+0x1c4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d036      	beq.n	8003708 <HAL_DMA_IRQHandler+0x194>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a27      	ldr	r2, [pc, #156]	; (800373c <HAL_DMA_IRQHandler+0x1c8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d031      	beq.n	8003708 <HAL_DMA_IRQHandler+0x194>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a25      	ldr	r2, [pc, #148]	; (8003740 <HAL_DMA_IRQHandler+0x1cc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d02c      	beq.n	8003708 <HAL_DMA_IRQHandler+0x194>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a24      	ldr	r2, [pc, #144]	; (8003744 <HAL_DMA_IRQHandler+0x1d0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d027      	beq.n	8003708 <HAL_DMA_IRQHandler+0x194>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a22      	ldr	r2, [pc, #136]	; (8003748 <HAL_DMA_IRQHandler+0x1d4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d022      	beq.n	8003708 <HAL_DMA_IRQHandler+0x194>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a21      	ldr	r2, [pc, #132]	; (800374c <HAL_DMA_IRQHandler+0x1d8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d01d      	beq.n	8003708 <HAL_DMA_IRQHandler+0x194>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1f      	ldr	r2, [pc, #124]	; (8003750 <HAL_DMA_IRQHandler+0x1dc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d018      	beq.n	8003708 <HAL_DMA_IRQHandler+0x194>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <HAL_DMA_IRQHandler+0x1e0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d013      	beq.n	8003708 <HAL_DMA_IRQHandler+0x194>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <HAL_DMA_IRQHandler+0x1e4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00e      	beq.n	8003708 <HAL_DMA_IRQHandler+0x194>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1b      	ldr	r2, [pc, #108]	; (800375c <HAL_DMA_IRQHandler+0x1e8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d009      	beq.n	8003708 <HAL_DMA_IRQHandler+0x194>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a19      	ldr	r2, [pc, #100]	; (8003760 <HAL_DMA_IRQHandler+0x1ec>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d004      	beq.n	8003708 <HAL_DMA_IRQHandler+0x194>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a18      	ldr	r2, [pc, #96]	; (8003764 <HAL_DMA_IRQHandler+0x1f0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d12f      	bne.n	8003768 <HAL_DMA_IRQHandler+0x1f4>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	bf14      	ite	ne
 8003716:	2301      	movne	r3, #1
 8003718:	2300      	moveq	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	e02e      	b.n	800377c <HAL_DMA_IRQHandler+0x208>
 800371e:	bf00      	nop
 8003720:	24000000 	.word	0x24000000
 8003724:	1b4e81b5 	.word	0x1b4e81b5
 8003728:	40020010 	.word	0x40020010
 800372c:	40020028 	.word	0x40020028
 8003730:	40020040 	.word	0x40020040
 8003734:	40020058 	.word	0x40020058
 8003738:	40020070 	.word	0x40020070
 800373c:	40020088 	.word	0x40020088
 8003740:	400200a0 	.word	0x400200a0
 8003744:	400200b8 	.word	0x400200b8
 8003748:	40020410 	.word	0x40020410
 800374c:	40020428 	.word	0x40020428
 8003750:	40020440 	.word	0x40020440
 8003754:	40020458 	.word	0x40020458
 8003758:	40020470 	.word	0x40020470
 800375c:	40020488 	.word	0x40020488
 8003760:	400204a0 	.word	0x400204a0
 8003764:	400204b8 	.word	0x400204b8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	bf14      	ite	ne
 8003776:	2301      	movne	r3, #1
 8003778:	2300      	moveq	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d015      	beq.n	80037ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0204 	bic.w	r2, r2, #4
 800378e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	2208      	movs	r2, #8
 800379a:	409a      	lsls	r2, r3
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a4:	f043 0201 	orr.w	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d06e      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a69      	ldr	r2, [pc, #420]	; (800396c <HAL_DMA_IRQHandler+0x3f8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d04a      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2ee>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a67      	ldr	r2, [pc, #412]	; (8003970 <HAL_DMA_IRQHandler+0x3fc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d045      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2ee>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a66      	ldr	r2, [pc, #408]	; (8003974 <HAL_DMA_IRQHandler+0x400>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d040      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2ee>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a64      	ldr	r2, [pc, #400]	; (8003978 <HAL_DMA_IRQHandler+0x404>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d03b      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2ee>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a63      	ldr	r2, [pc, #396]	; (800397c <HAL_DMA_IRQHandler+0x408>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d036      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2ee>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a61      	ldr	r2, [pc, #388]	; (8003980 <HAL_DMA_IRQHandler+0x40c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d031      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2ee>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a60      	ldr	r2, [pc, #384]	; (8003984 <HAL_DMA_IRQHandler+0x410>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d02c      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2ee>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a5e      	ldr	r2, [pc, #376]	; (8003988 <HAL_DMA_IRQHandler+0x414>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d027      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2ee>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a5d      	ldr	r2, [pc, #372]	; (800398c <HAL_DMA_IRQHandler+0x418>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d022      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2ee>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a5b      	ldr	r2, [pc, #364]	; (8003990 <HAL_DMA_IRQHandler+0x41c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01d      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2ee>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a5a      	ldr	r2, [pc, #360]	; (8003994 <HAL_DMA_IRQHandler+0x420>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d018      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2ee>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a58      	ldr	r2, [pc, #352]	; (8003998 <HAL_DMA_IRQHandler+0x424>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2ee>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a57      	ldr	r2, [pc, #348]	; (800399c <HAL_DMA_IRQHandler+0x428>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d00e      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2ee>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a55      	ldr	r2, [pc, #340]	; (80039a0 <HAL_DMA_IRQHandler+0x42c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d009      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2ee>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a54      	ldr	r2, [pc, #336]	; (80039a4 <HAL_DMA_IRQHandler+0x430>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d004      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2ee>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a52      	ldr	r2, [pc, #328]	; (80039a8 <HAL_DMA_IRQHandler+0x434>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d10a      	bne.n	8003878 <HAL_DMA_IRQHandler+0x304>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e003      	b.n	8003880 <HAL_DMA_IRQHandler+0x30c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2300      	movs	r3, #0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00d      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	2201      	movs	r2, #1
 800388e:	409a      	lsls	r2, r3
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003898:	f043 0202 	orr.w	r2, r3, #2
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	2204      	movs	r2, #4
 80038aa:	409a      	lsls	r2, r3
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 808f 	beq.w	80039d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2c      	ldr	r2, [pc, #176]	; (800396c <HAL_DMA_IRQHandler+0x3f8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d04a      	beq.n	8003956 <HAL_DMA_IRQHandler+0x3e2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <HAL_DMA_IRQHandler+0x3fc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d045      	beq.n	8003956 <HAL_DMA_IRQHandler+0x3e2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a29      	ldr	r2, [pc, #164]	; (8003974 <HAL_DMA_IRQHandler+0x400>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d040      	beq.n	8003956 <HAL_DMA_IRQHandler+0x3e2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a27      	ldr	r2, [pc, #156]	; (8003978 <HAL_DMA_IRQHandler+0x404>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d03b      	beq.n	8003956 <HAL_DMA_IRQHandler+0x3e2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a26      	ldr	r2, [pc, #152]	; (800397c <HAL_DMA_IRQHandler+0x408>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d036      	beq.n	8003956 <HAL_DMA_IRQHandler+0x3e2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a24      	ldr	r2, [pc, #144]	; (8003980 <HAL_DMA_IRQHandler+0x40c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d031      	beq.n	8003956 <HAL_DMA_IRQHandler+0x3e2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a23      	ldr	r2, [pc, #140]	; (8003984 <HAL_DMA_IRQHandler+0x410>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d02c      	beq.n	8003956 <HAL_DMA_IRQHandler+0x3e2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a21      	ldr	r2, [pc, #132]	; (8003988 <HAL_DMA_IRQHandler+0x414>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d027      	beq.n	8003956 <HAL_DMA_IRQHandler+0x3e2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a20      	ldr	r2, [pc, #128]	; (800398c <HAL_DMA_IRQHandler+0x418>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d022      	beq.n	8003956 <HAL_DMA_IRQHandler+0x3e2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1e      	ldr	r2, [pc, #120]	; (8003990 <HAL_DMA_IRQHandler+0x41c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d01d      	beq.n	8003956 <HAL_DMA_IRQHandler+0x3e2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <HAL_DMA_IRQHandler+0x420>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d018      	beq.n	8003956 <HAL_DMA_IRQHandler+0x3e2>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <HAL_DMA_IRQHandler+0x424>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <HAL_DMA_IRQHandler+0x3e2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1a      	ldr	r2, [pc, #104]	; (800399c <HAL_DMA_IRQHandler+0x428>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00e      	beq.n	8003956 <HAL_DMA_IRQHandler+0x3e2>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a18      	ldr	r2, [pc, #96]	; (80039a0 <HAL_DMA_IRQHandler+0x42c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d009      	beq.n	8003956 <HAL_DMA_IRQHandler+0x3e2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a17      	ldr	r2, [pc, #92]	; (80039a4 <HAL_DMA_IRQHandler+0x430>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d004      	beq.n	8003956 <HAL_DMA_IRQHandler+0x3e2>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a15      	ldr	r2, [pc, #84]	; (80039a8 <HAL_DMA_IRQHandler+0x434>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d12a      	bne.n	80039ac <HAL_DMA_IRQHandler+0x438>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e023      	b.n	80039b4 <HAL_DMA_IRQHandler+0x440>
 800396c:	40020010 	.word	0x40020010
 8003970:	40020028 	.word	0x40020028
 8003974:	40020040 	.word	0x40020040
 8003978:	40020058 	.word	0x40020058
 800397c:	40020070 	.word	0x40020070
 8003980:	40020088 	.word	0x40020088
 8003984:	400200a0 	.word	0x400200a0
 8003988:	400200b8 	.word	0x400200b8
 800398c:	40020410 	.word	0x40020410
 8003990:	40020428 	.word	0x40020428
 8003994:	40020440 	.word	0x40020440
 8003998:	40020458 	.word	0x40020458
 800399c:	40020470 	.word	0x40020470
 80039a0:	40020488 	.word	0x40020488
 80039a4:	400204a0 	.word	0x400204a0
 80039a8:	400204b8 	.word	0x400204b8
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2300      	movs	r3, #0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00d      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2204      	movs	r2, #4
 80039c2:	409a      	lsls	r2, r3
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	f043 0204 	orr.w	r2, r3, #4
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	2210      	movs	r2, #16
 80039de:	409a      	lsls	r2, r3
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80a6 	beq.w	8003b36 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a85      	ldr	r2, [pc, #532]	; (8003c04 <HAL_DMA_IRQHandler+0x690>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d04a      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x516>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a83      	ldr	r2, [pc, #524]	; (8003c08 <HAL_DMA_IRQHandler+0x694>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d045      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x516>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a82      	ldr	r2, [pc, #520]	; (8003c0c <HAL_DMA_IRQHandler+0x698>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d040      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x516>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a80      	ldr	r2, [pc, #512]	; (8003c10 <HAL_DMA_IRQHandler+0x69c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d03b      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x516>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a7f      	ldr	r2, [pc, #508]	; (8003c14 <HAL_DMA_IRQHandler+0x6a0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d036      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x516>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a7d      	ldr	r2, [pc, #500]	; (8003c18 <HAL_DMA_IRQHandler+0x6a4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d031      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x516>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a7c      	ldr	r2, [pc, #496]	; (8003c1c <HAL_DMA_IRQHandler+0x6a8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d02c      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x516>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a7a      	ldr	r2, [pc, #488]	; (8003c20 <HAL_DMA_IRQHandler+0x6ac>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d027      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x516>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a79      	ldr	r2, [pc, #484]	; (8003c24 <HAL_DMA_IRQHandler+0x6b0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d022      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x516>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a77      	ldr	r2, [pc, #476]	; (8003c28 <HAL_DMA_IRQHandler+0x6b4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d01d      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x516>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a76      	ldr	r2, [pc, #472]	; (8003c2c <HAL_DMA_IRQHandler+0x6b8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d018      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x516>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a74      	ldr	r2, [pc, #464]	; (8003c30 <HAL_DMA_IRQHandler+0x6bc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x516>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a73      	ldr	r2, [pc, #460]	; (8003c34 <HAL_DMA_IRQHandler+0x6c0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00e      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x516>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a71      	ldr	r2, [pc, #452]	; (8003c38 <HAL_DMA_IRQHandler+0x6c4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d009      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x516>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a70      	ldr	r2, [pc, #448]	; (8003c3c <HAL_DMA_IRQHandler+0x6c8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d004      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x516>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a6e      	ldr	r2, [pc, #440]	; (8003c40 <HAL_DMA_IRQHandler+0x6cc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d10a      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0x52c>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf14      	ite	ne
 8003a98:	2301      	movne	r3, #1
 8003a9a:	2300      	moveq	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	e009      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x540>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bf14      	ite	ne
 8003aae:	2301      	movne	r3, #1
 8003ab0:	2300      	moveq	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d03e      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d018      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d108      	bne.n	8003af6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d024      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	4798      	blx	r3
 8003af4:	e01f      	b.n	8003b36 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01b      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
 8003b06:	e016      	b.n	8003b36 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d107      	bne.n	8003b26 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0208 	bic.w	r2, r2, #8
 8003b24:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3a:	f003 031f 	and.w	r3, r3, #31
 8003b3e:	2220      	movs	r2, #32
 8003b40:	409a      	lsls	r2, r3
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8110 	beq.w	8003d6c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2c      	ldr	r2, [pc, #176]	; (8003c04 <HAL_DMA_IRQHandler+0x690>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d04a      	beq.n	8003bec <HAL_DMA_IRQHandler+0x678>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a2b      	ldr	r2, [pc, #172]	; (8003c08 <HAL_DMA_IRQHandler+0x694>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d045      	beq.n	8003bec <HAL_DMA_IRQHandler+0x678>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a29      	ldr	r2, [pc, #164]	; (8003c0c <HAL_DMA_IRQHandler+0x698>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d040      	beq.n	8003bec <HAL_DMA_IRQHandler+0x678>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a28      	ldr	r2, [pc, #160]	; (8003c10 <HAL_DMA_IRQHandler+0x69c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d03b      	beq.n	8003bec <HAL_DMA_IRQHandler+0x678>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a26      	ldr	r2, [pc, #152]	; (8003c14 <HAL_DMA_IRQHandler+0x6a0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d036      	beq.n	8003bec <HAL_DMA_IRQHandler+0x678>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a25      	ldr	r2, [pc, #148]	; (8003c18 <HAL_DMA_IRQHandler+0x6a4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d031      	beq.n	8003bec <HAL_DMA_IRQHandler+0x678>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a23      	ldr	r2, [pc, #140]	; (8003c1c <HAL_DMA_IRQHandler+0x6a8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d02c      	beq.n	8003bec <HAL_DMA_IRQHandler+0x678>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a22      	ldr	r2, [pc, #136]	; (8003c20 <HAL_DMA_IRQHandler+0x6ac>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d027      	beq.n	8003bec <HAL_DMA_IRQHandler+0x678>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a20      	ldr	r2, [pc, #128]	; (8003c24 <HAL_DMA_IRQHandler+0x6b0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d022      	beq.n	8003bec <HAL_DMA_IRQHandler+0x678>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a1f      	ldr	r2, [pc, #124]	; (8003c28 <HAL_DMA_IRQHandler+0x6b4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d01d      	beq.n	8003bec <HAL_DMA_IRQHandler+0x678>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a1d      	ldr	r2, [pc, #116]	; (8003c2c <HAL_DMA_IRQHandler+0x6b8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d018      	beq.n	8003bec <HAL_DMA_IRQHandler+0x678>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1c      	ldr	r2, [pc, #112]	; (8003c30 <HAL_DMA_IRQHandler+0x6bc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d013      	beq.n	8003bec <HAL_DMA_IRQHandler+0x678>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1a      	ldr	r2, [pc, #104]	; (8003c34 <HAL_DMA_IRQHandler+0x6c0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00e      	beq.n	8003bec <HAL_DMA_IRQHandler+0x678>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <HAL_DMA_IRQHandler+0x6c4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d009      	beq.n	8003bec <HAL_DMA_IRQHandler+0x678>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <HAL_DMA_IRQHandler+0x6c8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d004      	beq.n	8003bec <HAL_DMA_IRQHandler+0x678>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a16      	ldr	r2, [pc, #88]	; (8003c40 <HAL_DMA_IRQHandler+0x6cc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d12b      	bne.n	8003c44 <HAL_DMA_IRQHandler+0x6d0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bf14      	ite	ne
 8003bfa:	2301      	movne	r3, #1
 8003bfc:	2300      	moveq	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	e02a      	b.n	8003c58 <HAL_DMA_IRQHandler+0x6e4>
 8003c02:	bf00      	nop
 8003c04:	40020010 	.word	0x40020010
 8003c08:	40020028 	.word	0x40020028
 8003c0c:	40020040 	.word	0x40020040
 8003c10:	40020058 	.word	0x40020058
 8003c14:	40020070 	.word	0x40020070
 8003c18:	40020088 	.word	0x40020088
 8003c1c:	400200a0 	.word	0x400200a0
 8003c20:	400200b8 	.word	0x400200b8
 8003c24:	40020410 	.word	0x40020410
 8003c28:	40020428 	.word	0x40020428
 8003c2c:	40020440 	.word	0x40020440
 8003c30:	40020458 	.word	0x40020458
 8003c34:	40020470 	.word	0x40020470
 8003c38:	40020488 	.word	0x40020488
 8003c3c:	400204a0 	.word	0x400204a0
 8003c40:	400204b8 	.word	0x400204b8
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	bf14      	ite	ne
 8003c52:	2301      	movne	r3, #1
 8003c54:	2300      	moveq	r3, #0
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8087 	beq.w	8003d6c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	2220      	movs	r2, #32
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d139      	bne.n	8003cee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0216 	bic.w	r2, r2, #22
 8003c88:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c98:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <HAL_DMA_IRQHandler+0x736>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0208 	bic.w	r2, r2, #8
 8003cb8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbe:	f003 031f 	and.w	r3, r3, #31
 8003cc2:	223f      	movs	r2, #63	; 0x3f
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 834a 	beq.w	8004378 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4798      	blx	r3
          }
          return;
 8003cec:	e344      	b.n	8004378 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d018      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d108      	bne.n	8003d1c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d02c      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	4798      	blx	r3
 8003d1a:	e027      	b.n	8003d6c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d023      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	4798      	blx	r3
 8003d2c:	e01e      	b.n	8003d6c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10f      	bne.n	8003d5c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0210 	bic.w	r2, r2, #16
 8003d4a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8306 	beq.w	8004382 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 8088 	beq.w	8003e94 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2204      	movs	r2, #4
 8003d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a7a      	ldr	r2, [pc, #488]	; (8003f7c <HAL_DMA_IRQHandler+0xa08>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d04a      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x8b8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a79      	ldr	r2, [pc, #484]	; (8003f80 <HAL_DMA_IRQHandler+0xa0c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d045      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x8b8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a77      	ldr	r2, [pc, #476]	; (8003f84 <HAL_DMA_IRQHandler+0xa10>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d040      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x8b8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a76      	ldr	r2, [pc, #472]	; (8003f88 <HAL_DMA_IRQHandler+0xa14>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d03b      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x8b8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a74      	ldr	r2, [pc, #464]	; (8003f8c <HAL_DMA_IRQHandler+0xa18>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d036      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x8b8>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a73      	ldr	r2, [pc, #460]	; (8003f90 <HAL_DMA_IRQHandler+0xa1c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d031      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x8b8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a71      	ldr	r2, [pc, #452]	; (8003f94 <HAL_DMA_IRQHandler+0xa20>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d02c      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x8b8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a70      	ldr	r2, [pc, #448]	; (8003f98 <HAL_DMA_IRQHandler+0xa24>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d027      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x8b8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a6e      	ldr	r2, [pc, #440]	; (8003f9c <HAL_DMA_IRQHandler+0xa28>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d022      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x8b8>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a6d      	ldr	r2, [pc, #436]	; (8003fa0 <HAL_DMA_IRQHandler+0xa2c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d01d      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x8b8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a6b      	ldr	r2, [pc, #428]	; (8003fa4 <HAL_DMA_IRQHandler+0xa30>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d018      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x8b8>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a6a      	ldr	r2, [pc, #424]	; (8003fa8 <HAL_DMA_IRQHandler+0xa34>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d013      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x8b8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a68      	ldr	r2, [pc, #416]	; (8003fac <HAL_DMA_IRQHandler+0xa38>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00e      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x8b8>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a67      	ldr	r2, [pc, #412]	; (8003fb0 <HAL_DMA_IRQHandler+0xa3c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d009      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x8b8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a65      	ldr	r2, [pc, #404]	; (8003fb4 <HAL_DMA_IRQHandler+0xa40>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d004      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x8b8>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a64      	ldr	r2, [pc, #400]	; (8003fb8 <HAL_DMA_IRQHandler+0xa44>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d108      	bne.n	8003e3e <HAL_DMA_IRQHandler+0x8ca>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	e007      	b.n	8003e4e <HAL_DMA_IRQHandler+0x8da>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0201 	bic.w	r2, r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3301      	adds	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d307      	bcc.n	8003e6a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f2      	bne.n	8003e4e <HAL_DMA_IRQHandler+0x8da>
 8003e68:	e000      	b.n	8003e6c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003e6a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d004      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003e82:	e003      	b.n	8003e8c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8272 	beq.w	8004382 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	4798      	blx	r3
 8003ea6:	e26c      	b.n	8004382 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a43      	ldr	r2, [pc, #268]	; (8003fbc <HAL_DMA_IRQHandler+0xa48>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d022      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x984>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a42      	ldr	r2, [pc, #264]	; (8003fc0 <HAL_DMA_IRQHandler+0xa4c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d01d      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x984>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a40      	ldr	r2, [pc, #256]	; (8003fc4 <HAL_DMA_IRQHandler+0xa50>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d018      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x984>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a3f      	ldr	r2, [pc, #252]	; (8003fc8 <HAL_DMA_IRQHandler+0xa54>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d013      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x984>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a3d      	ldr	r2, [pc, #244]	; (8003fcc <HAL_DMA_IRQHandler+0xa58>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00e      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x984>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a3c      	ldr	r2, [pc, #240]	; (8003fd0 <HAL_DMA_IRQHandler+0xa5c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d009      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x984>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a3a      	ldr	r2, [pc, #232]	; (8003fd4 <HAL_DMA_IRQHandler+0xa60>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d004      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x984>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a39      	ldr	r2, [pc, #228]	; (8003fd8 <HAL_DMA_IRQHandler+0xa64>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d101      	bne.n	8003efc <HAL_DMA_IRQHandler+0x988>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <HAL_DMA_IRQHandler+0x98a>
 8003efc:	2300      	movs	r3, #0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 823f 	beq.w	8004382 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	2204      	movs	r2, #4
 8003f16:	409a      	lsls	r2, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80cd 	beq.w	80040bc <HAL_DMA_IRQHandler+0xb48>
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80c7 	beq.w	80040bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	2204      	movs	r2, #4
 8003f38:	409a      	lsls	r2, r3
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d049      	beq.n	8003fdc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8210 	beq.w	800437c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f64:	e20a      	b.n	800437c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 8206 	beq.w	800437c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f78:	e200      	b.n	800437c <HAL_DMA_IRQHandler+0xe08>
 8003f7a:	bf00      	nop
 8003f7c:	40020010 	.word	0x40020010
 8003f80:	40020028 	.word	0x40020028
 8003f84:	40020040 	.word	0x40020040
 8003f88:	40020058 	.word	0x40020058
 8003f8c:	40020070 	.word	0x40020070
 8003f90:	40020088 	.word	0x40020088
 8003f94:	400200a0 	.word	0x400200a0
 8003f98:	400200b8 	.word	0x400200b8
 8003f9c:	40020410 	.word	0x40020410
 8003fa0:	40020428 	.word	0x40020428
 8003fa4:	40020440 	.word	0x40020440
 8003fa8:	40020458 	.word	0x40020458
 8003fac:	40020470 	.word	0x40020470
 8003fb0:	40020488 	.word	0x40020488
 8003fb4:	400204a0 	.word	0x400204a0
 8003fb8:	400204b8 	.word	0x400204b8
 8003fbc:	58025408 	.word	0x58025408
 8003fc0:	5802541c 	.word	0x5802541c
 8003fc4:	58025430 	.word	0x58025430
 8003fc8:	58025444 	.word	0x58025444
 8003fcc:	58025458 	.word	0x58025458
 8003fd0:	5802546c 	.word	0x5802546c
 8003fd4:	58025480 	.word	0x58025480
 8003fd8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d160      	bne.n	80040a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a7f      	ldr	r2, [pc, #508]	; (80041e8 <HAL_DMA_IRQHandler+0xc74>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d04a      	beq.n	8004086 <HAL_DMA_IRQHandler+0xb12>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a7d      	ldr	r2, [pc, #500]	; (80041ec <HAL_DMA_IRQHandler+0xc78>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d045      	beq.n	8004086 <HAL_DMA_IRQHandler+0xb12>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a7c      	ldr	r2, [pc, #496]	; (80041f0 <HAL_DMA_IRQHandler+0xc7c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d040      	beq.n	8004086 <HAL_DMA_IRQHandler+0xb12>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a7a      	ldr	r2, [pc, #488]	; (80041f4 <HAL_DMA_IRQHandler+0xc80>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d03b      	beq.n	8004086 <HAL_DMA_IRQHandler+0xb12>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a79      	ldr	r2, [pc, #484]	; (80041f8 <HAL_DMA_IRQHandler+0xc84>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d036      	beq.n	8004086 <HAL_DMA_IRQHandler+0xb12>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a77      	ldr	r2, [pc, #476]	; (80041fc <HAL_DMA_IRQHandler+0xc88>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d031      	beq.n	8004086 <HAL_DMA_IRQHandler+0xb12>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a76      	ldr	r2, [pc, #472]	; (8004200 <HAL_DMA_IRQHandler+0xc8c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d02c      	beq.n	8004086 <HAL_DMA_IRQHandler+0xb12>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a74      	ldr	r2, [pc, #464]	; (8004204 <HAL_DMA_IRQHandler+0xc90>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d027      	beq.n	8004086 <HAL_DMA_IRQHandler+0xb12>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a73      	ldr	r2, [pc, #460]	; (8004208 <HAL_DMA_IRQHandler+0xc94>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d022      	beq.n	8004086 <HAL_DMA_IRQHandler+0xb12>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a71      	ldr	r2, [pc, #452]	; (800420c <HAL_DMA_IRQHandler+0xc98>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d01d      	beq.n	8004086 <HAL_DMA_IRQHandler+0xb12>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a70      	ldr	r2, [pc, #448]	; (8004210 <HAL_DMA_IRQHandler+0xc9c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d018      	beq.n	8004086 <HAL_DMA_IRQHandler+0xb12>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a6e      	ldr	r2, [pc, #440]	; (8004214 <HAL_DMA_IRQHandler+0xca0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d013      	beq.n	8004086 <HAL_DMA_IRQHandler+0xb12>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a6d      	ldr	r2, [pc, #436]	; (8004218 <HAL_DMA_IRQHandler+0xca4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00e      	beq.n	8004086 <HAL_DMA_IRQHandler+0xb12>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a6b      	ldr	r2, [pc, #428]	; (800421c <HAL_DMA_IRQHandler+0xca8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d009      	beq.n	8004086 <HAL_DMA_IRQHandler+0xb12>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a6a      	ldr	r2, [pc, #424]	; (8004220 <HAL_DMA_IRQHandler+0xcac>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d004      	beq.n	8004086 <HAL_DMA_IRQHandler+0xb12>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a68      	ldr	r2, [pc, #416]	; (8004224 <HAL_DMA_IRQHandler+0xcb0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d108      	bne.n	8004098 <HAL_DMA_IRQHandler+0xb24>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0208 	bic.w	r2, r2, #8
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	e007      	b.n	80040a8 <HAL_DMA_IRQHandler+0xb34>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0204 	bic.w	r2, r2, #4
 80040a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8165 	beq.w	800437c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040ba:	e15f      	b.n	800437c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	2202      	movs	r2, #2
 80040c6:	409a      	lsls	r2, r3
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80c5 	beq.w	800425c <HAL_DMA_IRQHandler+0xce8>
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80bf 	beq.w	800425c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	2202      	movs	r2, #2
 80040e8:	409a      	lsls	r2, r3
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d018      	beq.n	800412a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 813a 	beq.w	8004380 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004114:	e134      	b.n	8004380 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8130 	beq.w	8004380 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004128:	e12a      	b.n	8004380 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	f040 8089 	bne.w	8004248 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a2b      	ldr	r2, [pc, #172]	; (80041e8 <HAL_DMA_IRQHandler+0xc74>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d04a      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xc62>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a29      	ldr	r2, [pc, #164]	; (80041ec <HAL_DMA_IRQHandler+0xc78>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d045      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xc62>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a28      	ldr	r2, [pc, #160]	; (80041f0 <HAL_DMA_IRQHandler+0xc7c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d040      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xc62>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a26      	ldr	r2, [pc, #152]	; (80041f4 <HAL_DMA_IRQHandler+0xc80>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d03b      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xc62>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a25      	ldr	r2, [pc, #148]	; (80041f8 <HAL_DMA_IRQHandler+0xc84>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d036      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xc62>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a23      	ldr	r2, [pc, #140]	; (80041fc <HAL_DMA_IRQHandler+0xc88>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d031      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xc62>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a22      	ldr	r2, [pc, #136]	; (8004200 <HAL_DMA_IRQHandler+0xc8c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d02c      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xc62>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a20      	ldr	r2, [pc, #128]	; (8004204 <HAL_DMA_IRQHandler+0xc90>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d027      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xc62>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1f      	ldr	r2, [pc, #124]	; (8004208 <HAL_DMA_IRQHandler+0xc94>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d022      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xc62>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1d      	ldr	r2, [pc, #116]	; (800420c <HAL_DMA_IRQHandler+0xc98>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d01d      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xc62>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a1c      	ldr	r2, [pc, #112]	; (8004210 <HAL_DMA_IRQHandler+0xc9c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d018      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xc62>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1a      	ldr	r2, [pc, #104]	; (8004214 <HAL_DMA_IRQHandler+0xca0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d013      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xc62>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a19      	ldr	r2, [pc, #100]	; (8004218 <HAL_DMA_IRQHandler+0xca4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00e      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xc62>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a17      	ldr	r2, [pc, #92]	; (800421c <HAL_DMA_IRQHandler+0xca8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d009      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xc62>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <HAL_DMA_IRQHandler+0xcac>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d004      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xc62>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a14      	ldr	r2, [pc, #80]	; (8004224 <HAL_DMA_IRQHandler+0xcb0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d128      	bne.n	8004228 <HAL_DMA_IRQHandler+0xcb4>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0214 	bic.w	r2, r2, #20
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	e027      	b.n	8004238 <HAL_DMA_IRQHandler+0xcc4>
 80041e8:	40020010 	.word	0x40020010
 80041ec:	40020028 	.word	0x40020028
 80041f0:	40020040 	.word	0x40020040
 80041f4:	40020058 	.word	0x40020058
 80041f8:	40020070 	.word	0x40020070
 80041fc:	40020088 	.word	0x40020088
 8004200:	400200a0 	.word	0x400200a0
 8004204:	400200b8 	.word	0x400200b8
 8004208:	40020410 	.word	0x40020410
 800420c:	40020428 	.word	0x40020428
 8004210:	40020440 	.word	0x40020440
 8004214:	40020458 	.word	0x40020458
 8004218:	40020470 	.word	0x40020470
 800421c:	40020488 	.word	0x40020488
 8004220:	400204a0 	.word	0x400204a0
 8004224:	400204b8 	.word	0x400204b8
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 020a 	bic.w	r2, r2, #10
 8004236:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 8097 	beq.w	8004380 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800425a:	e091      	b.n	8004380 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	2208      	movs	r2, #8
 8004266:	409a      	lsls	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8088 	beq.w	8004382 <HAL_DMA_IRQHandler+0xe0e>
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8082 	beq.w	8004382 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a41      	ldr	r2, [pc, #260]	; (8004388 <HAL_DMA_IRQHandler+0xe14>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d04a      	beq.n	800431e <HAL_DMA_IRQHandler+0xdaa>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a3f      	ldr	r2, [pc, #252]	; (800438c <HAL_DMA_IRQHandler+0xe18>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d045      	beq.n	800431e <HAL_DMA_IRQHandler+0xdaa>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a3e      	ldr	r2, [pc, #248]	; (8004390 <HAL_DMA_IRQHandler+0xe1c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d040      	beq.n	800431e <HAL_DMA_IRQHandler+0xdaa>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a3c      	ldr	r2, [pc, #240]	; (8004394 <HAL_DMA_IRQHandler+0xe20>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d03b      	beq.n	800431e <HAL_DMA_IRQHandler+0xdaa>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a3b      	ldr	r2, [pc, #236]	; (8004398 <HAL_DMA_IRQHandler+0xe24>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d036      	beq.n	800431e <HAL_DMA_IRQHandler+0xdaa>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a39      	ldr	r2, [pc, #228]	; (800439c <HAL_DMA_IRQHandler+0xe28>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d031      	beq.n	800431e <HAL_DMA_IRQHandler+0xdaa>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a38      	ldr	r2, [pc, #224]	; (80043a0 <HAL_DMA_IRQHandler+0xe2c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d02c      	beq.n	800431e <HAL_DMA_IRQHandler+0xdaa>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a36      	ldr	r2, [pc, #216]	; (80043a4 <HAL_DMA_IRQHandler+0xe30>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d027      	beq.n	800431e <HAL_DMA_IRQHandler+0xdaa>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a35      	ldr	r2, [pc, #212]	; (80043a8 <HAL_DMA_IRQHandler+0xe34>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d022      	beq.n	800431e <HAL_DMA_IRQHandler+0xdaa>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a33      	ldr	r2, [pc, #204]	; (80043ac <HAL_DMA_IRQHandler+0xe38>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d01d      	beq.n	800431e <HAL_DMA_IRQHandler+0xdaa>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a32      	ldr	r2, [pc, #200]	; (80043b0 <HAL_DMA_IRQHandler+0xe3c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d018      	beq.n	800431e <HAL_DMA_IRQHandler+0xdaa>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a30      	ldr	r2, [pc, #192]	; (80043b4 <HAL_DMA_IRQHandler+0xe40>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d013      	beq.n	800431e <HAL_DMA_IRQHandler+0xdaa>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a2f      	ldr	r2, [pc, #188]	; (80043b8 <HAL_DMA_IRQHandler+0xe44>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00e      	beq.n	800431e <HAL_DMA_IRQHandler+0xdaa>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a2d      	ldr	r2, [pc, #180]	; (80043bc <HAL_DMA_IRQHandler+0xe48>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d009      	beq.n	800431e <HAL_DMA_IRQHandler+0xdaa>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2c      	ldr	r2, [pc, #176]	; (80043c0 <HAL_DMA_IRQHandler+0xe4c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d004      	beq.n	800431e <HAL_DMA_IRQHandler+0xdaa>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a2a      	ldr	r2, [pc, #168]	; (80043c4 <HAL_DMA_IRQHandler+0xe50>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d108      	bne.n	8004330 <HAL_DMA_IRQHandler+0xdbc>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 021c 	bic.w	r2, r2, #28
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	e007      	b.n	8004340 <HAL_DMA_IRQHandler+0xdcc>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 020e 	bic.w	r2, r2, #14
 800433e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	2201      	movs	r2, #1
 800434a:	409a      	lsls	r2, r3
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	4798      	blx	r3
 8004376:	e004      	b.n	8004382 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004378:	bf00      	nop
 800437a:	e002      	b.n	8004382 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800437c:	bf00      	nop
 800437e:	e000      	b.n	8004382 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004380:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004382:	3728      	adds	r7, #40	; 0x28
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40020010 	.word	0x40020010
 800438c:	40020028 	.word	0x40020028
 8004390:	40020040 	.word	0x40020040
 8004394:	40020058 	.word	0x40020058
 8004398:	40020070 	.word	0x40020070
 800439c:	40020088 	.word	0x40020088
 80043a0:	400200a0 	.word	0x400200a0
 80043a4:	400200b8 	.word	0x400200b8
 80043a8:	40020410 	.word	0x40020410
 80043ac:	40020428 	.word	0x40020428
 80043b0:	40020440 	.word	0x40020440
 80043b4:	40020458 	.word	0x40020458
 80043b8:	40020470 	.word	0x40020470
 80043bc:	40020488 	.word	0x40020488
 80043c0:	400204a0 	.word	0x400204a0
 80043c4:	400204b8 	.word	0x400204b8

080043c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a7f      	ldr	r2, [pc, #508]	; (80045e4 <DMA_SetConfig+0x21c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d072      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a7d      	ldr	r2, [pc, #500]	; (80045e8 <DMA_SetConfig+0x220>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d06d      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a7c      	ldr	r2, [pc, #496]	; (80045ec <DMA_SetConfig+0x224>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d068      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a7a      	ldr	r2, [pc, #488]	; (80045f0 <DMA_SetConfig+0x228>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d063      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a79      	ldr	r2, [pc, #484]	; (80045f4 <DMA_SetConfig+0x22c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d05e      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a77      	ldr	r2, [pc, #476]	; (80045f8 <DMA_SetConfig+0x230>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d059      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a76      	ldr	r2, [pc, #472]	; (80045fc <DMA_SetConfig+0x234>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d054      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a74      	ldr	r2, [pc, #464]	; (8004600 <DMA_SetConfig+0x238>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d04f      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a73      	ldr	r2, [pc, #460]	; (8004604 <DMA_SetConfig+0x23c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d04a      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a71      	ldr	r2, [pc, #452]	; (8004608 <DMA_SetConfig+0x240>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d045      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a70      	ldr	r2, [pc, #448]	; (800460c <DMA_SetConfig+0x244>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d040      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a6e      	ldr	r2, [pc, #440]	; (8004610 <DMA_SetConfig+0x248>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d03b      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a6d      	ldr	r2, [pc, #436]	; (8004614 <DMA_SetConfig+0x24c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d036      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a6b      	ldr	r2, [pc, #428]	; (8004618 <DMA_SetConfig+0x250>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d031      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a6a      	ldr	r2, [pc, #424]	; (800461c <DMA_SetConfig+0x254>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d02c      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a68      	ldr	r2, [pc, #416]	; (8004620 <DMA_SetConfig+0x258>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d027      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a67      	ldr	r2, [pc, #412]	; (8004624 <DMA_SetConfig+0x25c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d022      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a65      	ldr	r2, [pc, #404]	; (8004628 <DMA_SetConfig+0x260>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d01d      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a64      	ldr	r2, [pc, #400]	; (800462c <DMA_SetConfig+0x264>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d018      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a62      	ldr	r2, [pc, #392]	; (8004630 <DMA_SetConfig+0x268>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d013      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a61      	ldr	r2, [pc, #388]	; (8004634 <DMA_SetConfig+0x26c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00e      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a5f      	ldr	r2, [pc, #380]	; (8004638 <DMA_SetConfig+0x270>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d009      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a5e      	ldr	r2, [pc, #376]	; (800463c <DMA_SetConfig+0x274>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <DMA_SetConfig+0x10a>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a5c      	ldr	r2, [pc, #368]	; (8004640 <DMA_SetConfig+0x278>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d101      	bne.n	80044d6 <DMA_SetConfig+0x10e>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <DMA_SetConfig+0x110>
 80044d6:	2300      	movs	r3, #0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00d      	beq.n	80044f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80044e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d004      	beq.n	80044f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80044f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a39      	ldr	r2, [pc, #228]	; (80045e4 <DMA_SetConfig+0x21c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d04a      	beq.n	8004598 <DMA_SetConfig+0x1d0>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a38      	ldr	r2, [pc, #224]	; (80045e8 <DMA_SetConfig+0x220>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d045      	beq.n	8004598 <DMA_SetConfig+0x1d0>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a36      	ldr	r2, [pc, #216]	; (80045ec <DMA_SetConfig+0x224>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d040      	beq.n	8004598 <DMA_SetConfig+0x1d0>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a35      	ldr	r2, [pc, #212]	; (80045f0 <DMA_SetConfig+0x228>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d03b      	beq.n	8004598 <DMA_SetConfig+0x1d0>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a33      	ldr	r2, [pc, #204]	; (80045f4 <DMA_SetConfig+0x22c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d036      	beq.n	8004598 <DMA_SetConfig+0x1d0>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a32      	ldr	r2, [pc, #200]	; (80045f8 <DMA_SetConfig+0x230>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d031      	beq.n	8004598 <DMA_SetConfig+0x1d0>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a30      	ldr	r2, [pc, #192]	; (80045fc <DMA_SetConfig+0x234>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d02c      	beq.n	8004598 <DMA_SetConfig+0x1d0>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a2f      	ldr	r2, [pc, #188]	; (8004600 <DMA_SetConfig+0x238>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d027      	beq.n	8004598 <DMA_SetConfig+0x1d0>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a2d      	ldr	r2, [pc, #180]	; (8004604 <DMA_SetConfig+0x23c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d022      	beq.n	8004598 <DMA_SetConfig+0x1d0>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a2c      	ldr	r2, [pc, #176]	; (8004608 <DMA_SetConfig+0x240>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d01d      	beq.n	8004598 <DMA_SetConfig+0x1d0>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a2a      	ldr	r2, [pc, #168]	; (800460c <DMA_SetConfig+0x244>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d018      	beq.n	8004598 <DMA_SetConfig+0x1d0>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a29      	ldr	r2, [pc, #164]	; (8004610 <DMA_SetConfig+0x248>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d013      	beq.n	8004598 <DMA_SetConfig+0x1d0>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a27      	ldr	r2, [pc, #156]	; (8004614 <DMA_SetConfig+0x24c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00e      	beq.n	8004598 <DMA_SetConfig+0x1d0>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a26      	ldr	r2, [pc, #152]	; (8004618 <DMA_SetConfig+0x250>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d009      	beq.n	8004598 <DMA_SetConfig+0x1d0>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a24      	ldr	r2, [pc, #144]	; (800461c <DMA_SetConfig+0x254>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d004      	beq.n	8004598 <DMA_SetConfig+0x1d0>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a23      	ldr	r2, [pc, #140]	; (8004620 <DMA_SetConfig+0x258>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d101      	bne.n	800459c <DMA_SetConfig+0x1d4>
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <DMA_SetConfig+0x1d6>
 800459c:	2300      	movs	r3, #0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d059      	beq.n	8004656 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	223f      	movs	r2, #63	; 0x3f
 80045ac:	409a      	lsls	r2, r3
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b40      	cmp	r3, #64	; 0x40
 80045d0:	d138      	bne.n	8004644 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80045e2:	e086      	b.n	80046f2 <DMA_SetConfig+0x32a>
 80045e4:	40020010 	.word	0x40020010
 80045e8:	40020028 	.word	0x40020028
 80045ec:	40020040 	.word	0x40020040
 80045f0:	40020058 	.word	0x40020058
 80045f4:	40020070 	.word	0x40020070
 80045f8:	40020088 	.word	0x40020088
 80045fc:	400200a0 	.word	0x400200a0
 8004600:	400200b8 	.word	0x400200b8
 8004604:	40020410 	.word	0x40020410
 8004608:	40020428 	.word	0x40020428
 800460c:	40020440 	.word	0x40020440
 8004610:	40020458 	.word	0x40020458
 8004614:	40020470 	.word	0x40020470
 8004618:	40020488 	.word	0x40020488
 800461c:	400204a0 	.word	0x400204a0
 8004620:	400204b8 	.word	0x400204b8
 8004624:	58025408 	.word	0x58025408
 8004628:	5802541c 	.word	0x5802541c
 800462c:	58025430 	.word	0x58025430
 8004630:	58025444 	.word	0x58025444
 8004634:	58025458 	.word	0x58025458
 8004638:	5802546c 	.word	0x5802546c
 800463c:	58025480 	.word	0x58025480
 8004640:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	60da      	str	r2, [r3, #12]
}
 8004654:	e04d      	b.n	80046f2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a29      	ldr	r2, [pc, #164]	; (8004700 <DMA_SetConfig+0x338>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d022      	beq.n	80046a6 <DMA_SetConfig+0x2de>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a27      	ldr	r2, [pc, #156]	; (8004704 <DMA_SetConfig+0x33c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d01d      	beq.n	80046a6 <DMA_SetConfig+0x2de>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a26      	ldr	r2, [pc, #152]	; (8004708 <DMA_SetConfig+0x340>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d018      	beq.n	80046a6 <DMA_SetConfig+0x2de>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a24      	ldr	r2, [pc, #144]	; (800470c <DMA_SetConfig+0x344>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <DMA_SetConfig+0x2de>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a23      	ldr	r2, [pc, #140]	; (8004710 <DMA_SetConfig+0x348>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00e      	beq.n	80046a6 <DMA_SetConfig+0x2de>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a21      	ldr	r2, [pc, #132]	; (8004714 <DMA_SetConfig+0x34c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d009      	beq.n	80046a6 <DMA_SetConfig+0x2de>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a20      	ldr	r2, [pc, #128]	; (8004718 <DMA_SetConfig+0x350>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d004      	beq.n	80046a6 <DMA_SetConfig+0x2de>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1e      	ldr	r2, [pc, #120]	; (800471c <DMA_SetConfig+0x354>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d101      	bne.n	80046aa <DMA_SetConfig+0x2e2>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <DMA_SetConfig+0x2e4>
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d020      	beq.n	80046f2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b4:	f003 031f 	and.w	r3, r3, #31
 80046b8:	2201      	movs	r2, #1
 80046ba:	409a      	lsls	r2, r3
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b40      	cmp	r3, #64	; 0x40
 80046ce:	d108      	bne.n	80046e2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	60da      	str	r2, [r3, #12]
}
 80046e0:	e007      	b.n	80046f2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	60da      	str	r2, [r3, #12]
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	58025408 	.word	0x58025408
 8004704:	5802541c 	.word	0x5802541c
 8004708:	58025430 	.word	0x58025430
 800470c:	58025444 	.word	0x58025444
 8004710:	58025458 	.word	0x58025458
 8004714:	5802546c 	.word	0x5802546c
 8004718:	58025480 	.word	0x58025480
 800471c:	58025494 	.word	0x58025494

08004720 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a42      	ldr	r2, [pc, #264]	; (8004838 <DMA_CalcBaseAndBitshift+0x118>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d04a      	beq.n	80047c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a41      	ldr	r2, [pc, #260]	; (800483c <DMA_CalcBaseAndBitshift+0x11c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d045      	beq.n	80047c8 <DMA_CalcBaseAndBitshift+0xa8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a3f      	ldr	r2, [pc, #252]	; (8004840 <DMA_CalcBaseAndBitshift+0x120>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d040      	beq.n	80047c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a3e      	ldr	r2, [pc, #248]	; (8004844 <DMA_CalcBaseAndBitshift+0x124>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d03b      	beq.n	80047c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a3c      	ldr	r2, [pc, #240]	; (8004848 <DMA_CalcBaseAndBitshift+0x128>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d036      	beq.n	80047c8 <DMA_CalcBaseAndBitshift+0xa8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a3b      	ldr	r2, [pc, #236]	; (800484c <DMA_CalcBaseAndBitshift+0x12c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d031      	beq.n	80047c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a39      	ldr	r2, [pc, #228]	; (8004850 <DMA_CalcBaseAndBitshift+0x130>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d02c      	beq.n	80047c8 <DMA_CalcBaseAndBitshift+0xa8>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a38      	ldr	r2, [pc, #224]	; (8004854 <DMA_CalcBaseAndBitshift+0x134>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d027      	beq.n	80047c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a36      	ldr	r2, [pc, #216]	; (8004858 <DMA_CalcBaseAndBitshift+0x138>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d022      	beq.n	80047c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a35      	ldr	r2, [pc, #212]	; (800485c <DMA_CalcBaseAndBitshift+0x13c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d01d      	beq.n	80047c8 <DMA_CalcBaseAndBitshift+0xa8>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a33      	ldr	r2, [pc, #204]	; (8004860 <DMA_CalcBaseAndBitshift+0x140>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d018      	beq.n	80047c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a32      	ldr	r2, [pc, #200]	; (8004864 <DMA_CalcBaseAndBitshift+0x144>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d013      	beq.n	80047c8 <DMA_CalcBaseAndBitshift+0xa8>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a30      	ldr	r2, [pc, #192]	; (8004868 <DMA_CalcBaseAndBitshift+0x148>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00e      	beq.n	80047c8 <DMA_CalcBaseAndBitshift+0xa8>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a2f      	ldr	r2, [pc, #188]	; (800486c <DMA_CalcBaseAndBitshift+0x14c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d009      	beq.n	80047c8 <DMA_CalcBaseAndBitshift+0xa8>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a2d      	ldr	r2, [pc, #180]	; (8004870 <DMA_CalcBaseAndBitshift+0x150>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <DMA_CalcBaseAndBitshift+0xa8>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a2c      	ldr	r2, [pc, #176]	; (8004874 <DMA_CalcBaseAndBitshift+0x154>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d101      	bne.n	80047cc <DMA_CalcBaseAndBitshift+0xac>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <DMA_CalcBaseAndBitshift+0xae>
 80047cc:	2300      	movs	r3, #0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d024      	beq.n	800481c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	3b10      	subs	r3, #16
 80047da:	4a27      	ldr	r2, [pc, #156]	; (8004878 <DMA_CalcBaseAndBitshift+0x158>)
 80047dc:	fba2 2303 	umull	r2, r3, r2, r3
 80047e0:	091b      	lsrs	r3, r3, #4
 80047e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	4a24      	ldr	r2, [pc, #144]	; (800487c <DMA_CalcBaseAndBitshift+0x15c>)
 80047ec:	5cd3      	ldrb	r3, [r2, r3]
 80047ee:	461a      	mov	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d908      	bls.n	800480c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	4b1f      	ldr	r3, [pc, #124]	; (8004880 <DMA_CalcBaseAndBitshift+0x160>)
 8004802:	4013      	ands	r3, r2
 8004804:	1d1a      	adds	r2, r3, #4
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	659a      	str	r2, [r3, #88]	; 0x58
 800480a:	e00d      	b.n	8004828 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <DMA_CalcBaseAndBitshift+0x160>)
 8004814:	4013      	ands	r3, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6593      	str	r3, [r2, #88]	; 0x58
 800481a:	e005      	b.n	8004828 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	40020010 	.word	0x40020010
 800483c:	40020028 	.word	0x40020028
 8004840:	40020040 	.word	0x40020040
 8004844:	40020058 	.word	0x40020058
 8004848:	40020070 	.word	0x40020070
 800484c:	40020088 	.word	0x40020088
 8004850:	400200a0 	.word	0x400200a0
 8004854:	400200b8 	.word	0x400200b8
 8004858:	40020410 	.word	0x40020410
 800485c:	40020428 	.word	0x40020428
 8004860:	40020440 	.word	0x40020440
 8004864:	40020458 	.word	0x40020458
 8004868:	40020470 	.word	0x40020470
 800486c:	40020488 	.word	0x40020488
 8004870:	400204a0 	.word	0x400204a0
 8004874:	400204b8 	.word	0x400204b8
 8004878:	aaaaaaab 	.word	0xaaaaaaab
 800487c:	0801128c 	.word	0x0801128c
 8004880:	fffffc00 	.word	0xfffffc00

08004884 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d120      	bne.n	80048da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	2b03      	cmp	r3, #3
 800489e:	d858      	bhi.n	8004952 <DMA_CheckFifoParam+0xce>
 80048a0:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <DMA_CheckFifoParam+0x24>)
 80048a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a6:	bf00      	nop
 80048a8:	080048b9 	.word	0x080048b9
 80048ac:	080048cb 	.word	0x080048cb
 80048b0:	080048b9 	.word	0x080048b9
 80048b4:	08004953 	.word	0x08004953
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d048      	beq.n	8004956 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048c8:	e045      	b.n	8004956 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048d2:	d142      	bne.n	800495a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048d8:	e03f      	b.n	800495a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e2:	d123      	bne.n	800492c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d838      	bhi.n	800495e <DMA_CheckFifoParam+0xda>
 80048ec:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <DMA_CheckFifoParam+0x70>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004905 	.word	0x08004905
 80048f8:	0800490b 	.word	0x0800490b
 80048fc:	08004905 	.word	0x08004905
 8004900:	0800491d 	.word	0x0800491d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
        break;
 8004908:	e030      	b.n	800496c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d025      	beq.n	8004962 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800491a:	e022      	b.n	8004962 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004924:	d11f      	bne.n	8004966 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800492a:	e01c      	b.n	8004966 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	2b02      	cmp	r3, #2
 8004932:	d902      	bls.n	800493a <DMA_CheckFifoParam+0xb6>
 8004934:	2b03      	cmp	r3, #3
 8004936:	d003      	beq.n	8004940 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004938:	e018      	b.n	800496c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
        break;
 800493e:	e015      	b.n	800496c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00e      	beq.n	800496a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	73fb      	strb	r3, [r7, #15]
    break;
 8004950:	e00b      	b.n	800496a <DMA_CheckFifoParam+0xe6>
        break;
 8004952:	bf00      	nop
 8004954:	e00a      	b.n	800496c <DMA_CheckFifoParam+0xe8>
        break;
 8004956:	bf00      	nop
 8004958:	e008      	b.n	800496c <DMA_CheckFifoParam+0xe8>
        break;
 800495a:	bf00      	nop
 800495c:	e006      	b.n	800496c <DMA_CheckFifoParam+0xe8>
        break;
 800495e:	bf00      	nop
 8004960:	e004      	b.n	800496c <DMA_CheckFifoParam+0xe8>
        break;
 8004962:	bf00      	nop
 8004964:	e002      	b.n	800496c <DMA_CheckFifoParam+0xe8>
        break;
 8004966:	bf00      	nop
 8004968:	e000      	b.n	800496c <DMA_CheckFifoParam+0xe8>
    break;
 800496a:	bf00      	nop
    }
  }

  return status;
 800496c:	7bfb      	ldrb	r3, [r7, #15]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop

0800497c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a38      	ldr	r2, [pc, #224]	; (8004a70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d022      	beq.n	80049da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a36      	ldr	r2, [pc, #216]	; (8004a74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d01d      	beq.n	80049da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a35      	ldr	r2, [pc, #212]	; (8004a78 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d018      	beq.n	80049da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a33      	ldr	r2, [pc, #204]	; (8004a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a32      	ldr	r2, [pc, #200]	; (8004a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00e      	beq.n	80049da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a30      	ldr	r2, [pc, #192]	; (8004a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d009      	beq.n	80049da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a2f      	ldr	r2, [pc, #188]	; (8004a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a2d      	ldr	r2, [pc, #180]	; (8004a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d101      	bne.n	80049de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01a      	beq.n	8004a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	3b08      	subs	r3, #8
 80049ec:	4a28      	ldr	r2, [pc, #160]	; (8004a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	091b      	lsrs	r3, r3, #4
 80049f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4b26      	ldr	r3, [pc, #152]	; (8004a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	461a      	mov	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a24      	ldr	r2, [pc, #144]	; (8004a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004a08:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	2201      	movs	r2, #1
 8004a12:	409a      	lsls	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004a18:	e024      	b.n	8004a64 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	3b10      	subs	r3, #16
 8004a22:	4a1e      	ldr	r2, [pc, #120]	; (8004a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004a24:	fba2 2303 	umull	r2, r3, r2, r3
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4a1c      	ldr	r2, [pc, #112]	; (8004aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d806      	bhi.n	8004a42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4a1b      	ldr	r2, [pc, #108]	; (8004aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d902      	bls.n	8004a42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	3308      	adds	r3, #8
 8004a40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4b18      	ldr	r3, [pc, #96]	; (8004aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a16      	ldr	r2, [pc, #88]	; (8004aac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004a54:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	58025408 	.word	0x58025408
 8004a74:	5802541c 	.word	0x5802541c
 8004a78:	58025430 	.word	0x58025430
 8004a7c:	58025444 	.word	0x58025444
 8004a80:	58025458 	.word	0x58025458
 8004a84:	5802546c 	.word	0x5802546c
 8004a88:	58025480 	.word	0x58025480
 8004a8c:	58025494 	.word	0x58025494
 8004a90:	cccccccd 	.word	0xcccccccd
 8004a94:	16009600 	.word	0x16009600
 8004a98:	58025880 	.word	0x58025880
 8004a9c:	aaaaaaab 	.word	0xaaaaaaab
 8004aa0:	400204b8 	.word	0x400204b8
 8004aa4:	4002040f 	.word	0x4002040f
 8004aa8:	10008200 	.word	0x10008200
 8004aac:	40020880 	.word	0x40020880

08004ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d04a      	beq.n	8004b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d847      	bhi.n	8004b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a25      	ldr	r2, [pc, #148]	; (8004b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d022      	beq.n	8004b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a24      	ldr	r2, [pc, #144]	; (8004b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d01d      	beq.n	8004b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a22      	ldr	r2, [pc, #136]	; (8004b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d018      	beq.n	8004b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d013      	beq.n	8004b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a1f      	ldr	r2, [pc, #124]	; (8004b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00e      	beq.n	8004b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a1e      	ldr	r2, [pc, #120]	; (8004b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d009      	beq.n	8004b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d004      	beq.n	8004b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a1b      	ldr	r2, [pc, #108]	; (8004b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d101      	bne.n	8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004b20:	2300      	movs	r3, #0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	461a      	mov	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004b38:	671a      	str	r2, [r3, #112]	; 0x70
 8004b3a:	e009      	b.n	8004b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	461a      	mov	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a11      	ldr	r2, [pc, #68]	; (8004b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004b4e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	2201      	movs	r2, #1
 8004b56:	409a      	lsls	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	58025408 	.word	0x58025408
 8004b6c:	5802541c 	.word	0x5802541c
 8004b70:	58025430 	.word	0x58025430
 8004b74:	58025444 	.word	0x58025444
 8004b78:	58025458 	.word	0x58025458
 8004b7c:	5802546c 	.word	0x5802546c
 8004b80:	58025480 	.word	0x58025480
 8004b84:	58025494 	.word	0x58025494
 8004b88:	1600963f 	.word	0x1600963f
 8004b8c:	58025940 	.word	0x58025940
 8004b90:	1000823f 	.word	0x1000823f
 8004b94:	40020940 	.word	0x40020940

08004b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b089      	sub	sp, #36	; 0x24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004ba6:	4b89      	ldr	r3, [pc, #548]	; (8004dcc <HAL_GPIO_Init+0x234>)
 8004ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004baa:	e194      	b.n	8004ed6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb8:	4013      	ands	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 8186 	beq.w	8004ed0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d005      	beq.n	8004bdc <HAL_GPIO_Init+0x44>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d130      	bne.n	8004c3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	2203      	movs	r2, #3
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c12:	2201      	movs	r2, #1
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	43db      	mvns	r3, r3
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	091b      	lsrs	r3, r3, #4
 8004c28:	f003 0201 	and.w	r2, r3, #1
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d017      	beq.n	8004c7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	2203      	movs	r2, #3
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d123      	bne.n	8004cce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	08da      	lsrs	r2, r3, #3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3208      	adds	r2, #8
 8004c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	220f      	movs	r2, #15
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	08da      	lsrs	r2, r3, #3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3208      	adds	r2, #8
 8004cc8:	69b9      	ldr	r1, [r7, #24]
 8004cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	2203      	movs	r2, #3
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f003 0203 	and.w	r2, r3, #3
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 80e0 	beq.w	8004ed0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d10:	4b2f      	ldr	r3, [pc, #188]	; (8004dd0 <HAL_GPIO_Init+0x238>)
 8004d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d16:	4a2e      	ldr	r2, [pc, #184]	; (8004dd0 <HAL_GPIO_Init+0x238>)
 8004d18:	f043 0302 	orr.w	r3, r3, #2
 8004d1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d20:	4b2b      	ldr	r3, [pc, #172]	; (8004dd0 <HAL_GPIO_Init+0x238>)
 8004d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d2e:	4a29      	ldr	r2, [pc, #164]	; (8004dd4 <HAL_GPIO_Init+0x23c>)
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	089b      	lsrs	r3, r3, #2
 8004d34:	3302      	adds	r3, #2
 8004d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	220f      	movs	r2, #15
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a20      	ldr	r2, [pc, #128]	; (8004dd8 <HAL_GPIO_Init+0x240>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d052      	beq.n	8004e00 <HAL_GPIO_Init+0x268>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a1f      	ldr	r2, [pc, #124]	; (8004ddc <HAL_GPIO_Init+0x244>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d031      	beq.n	8004dc6 <HAL_GPIO_Init+0x22e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1e      	ldr	r2, [pc, #120]	; (8004de0 <HAL_GPIO_Init+0x248>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d02b      	beq.n	8004dc2 <HAL_GPIO_Init+0x22a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <HAL_GPIO_Init+0x24c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d025      	beq.n	8004dbe <HAL_GPIO_Init+0x226>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a1c      	ldr	r2, [pc, #112]	; (8004de8 <HAL_GPIO_Init+0x250>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d01f      	beq.n	8004dba <HAL_GPIO_Init+0x222>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a1b      	ldr	r2, [pc, #108]	; (8004dec <HAL_GPIO_Init+0x254>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d019      	beq.n	8004db6 <HAL_GPIO_Init+0x21e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a1a      	ldr	r2, [pc, #104]	; (8004df0 <HAL_GPIO_Init+0x258>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <HAL_GPIO_Init+0x21a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a19      	ldr	r2, [pc, #100]	; (8004df4 <HAL_GPIO_Init+0x25c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00d      	beq.n	8004dae <HAL_GPIO_Init+0x216>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a18      	ldr	r2, [pc, #96]	; (8004df8 <HAL_GPIO_Init+0x260>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d007      	beq.n	8004daa <HAL_GPIO_Init+0x212>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a17      	ldr	r2, [pc, #92]	; (8004dfc <HAL_GPIO_Init+0x264>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d101      	bne.n	8004da6 <HAL_GPIO_Init+0x20e>
 8004da2:	2309      	movs	r3, #9
 8004da4:	e02d      	b.n	8004e02 <HAL_GPIO_Init+0x26a>
 8004da6:	230a      	movs	r3, #10
 8004da8:	e02b      	b.n	8004e02 <HAL_GPIO_Init+0x26a>
 8004daa:	2308      	movs	r3, #8
 8004dac:	e029      	b.n	8004e02 <HAL_GPIO_Init+0x26a>
 8004dae:	2307      	movs	r3, #7
 8004db0:	e027      	b.n	8004e02 <HAL_GPIO_Init+0x26a>
 8004db2:	2306      	movs	r3, #6
 8004db4:	e025      	b.n	8004e02 <HAL_GPIO_Init+0x26a>
 8004db6:	2305      	movs	r3, #5
 8004db8:	e023      	b.n	8004e02 <HAL_GPIO_Init+0x26a>
 8004dba:	2304      	movs	r3, #4
 8004dbc:	e021      	b.n	8004e02 <HAL_GPIO_Init+0x26a>
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e01f      	b.n	8004e02 <HAL_GPIO_Init+0x26a>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e01d      	b.n	8004e02 <HAL_GPIO_Init+0x26a>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e01b      	b.n	8004e02 <HAL_GPIO_Init+0x26a>
 8004dca:	bf00      	nop
 8004dcc:	58000080 	.word	0x58000080
 8004dd0:	58024400 	.word	0x58024400
 8004dd4:	58000400 	.word	0x58000400
 8004dd8:	58020000 	.word	0x58020000
 8004ddc:	58020400 	.word	0x58020400
 8004de0:	58020800 	.word	0x58020800
 8004de4:	58020c00 	.word	0x58020c00
 8004de8:	58021000 	.word	0x58021000
 8004dec:	58021400 	.word	0x58021400
 8004df0:	58021800 	.word	0x58021800
 8004df4:	58021c00 	.word	0x58021c00
 8004df8:	58022000 	.word	0x58022000
 8004dfc:	58022400 	.word	0x58022400
 8004e00:	2300      	movs	r3, #0
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	f002 0203 	and.w	r2, r2, #3
 8004e08:	0092      	lsls	r2, r2, #2
 8004e0a:	4093      	lsls	r3, r2
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e12:	4938      	ldr	r1, [pc, #224]	; (8004ef4 <HAL_GPIO_Init+0x35c>)
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	089b      	lsrs	r3, r3, #2
 8004e18:	3302      	adds	r3, #2
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	43db      	mvns	r3, r3
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f47f ae63 	bne.w	8004bac <HAL_GPIO_Init+0x14>
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	bf00      	nop
 8004eea:	3724      	adds	r7, #36	; 0x24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	58000400 	.word	0x58000400

08004ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	807b      	strh	r3, [r7, #2]
 8004f04:	4613      	mov	r3, r2
 8004f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f08:	787b      	ldrb	r3, [r7, #1]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f0e:	887a      	ldrh	r2, [r7, #2]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f14:	e003      	b.n	8004f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f16:	887b      	ldrh	r3, [r7, #2]
 8004f18:	041a      	lsls	r2, r3, #16
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	619a      	str	r2, [r3, #24]
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
	...

08004f2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f34:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <HAL_PWREx_ConfigSupply+0x70>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d00a      	beq.n	8004f56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f40:	4b16      	ldr	r3, [pc, #88]	; (8004f9c <HAL_PWREx_ConfigSupply+0x70>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d001      	beq.n	8004f52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e01f      	b.n	8004f92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e01d      	b.n	8004f92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f56:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <HAL_PWREx_ConfigSupply+0x70>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f023 0207 	bic.w	r2, r3, #7
 8004f5e:	490f      	ldr	r1, [pc, #60]	; (8004f9c <HAL_PWREx_ConfigSupply+0x70>)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f66:	f7fc f92f 	bl	80011c8 <HAL_GetTick>
 8004f6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f6c:	e009      	b.n	8004f82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f6e:	f7fc f92b 	bl	80011c8 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f7c:	d901      	bls.n	8004f82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e007      	b.n	8004f92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f82:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <HAL_PWREx_ConfigSupply+0x70>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8e:	d1ee      	bne.n	8004f6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	58024800 	.word	0x58024800

08004fa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08c      	sub	sp, #48	; 0x30
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d102      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f000 bc48 	b.w	8005844 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8088 	beq.w	80050d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fc2:	4b99      	ldr	r3, [pc, #612]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fcc:	4b96      	ldr	r3, [pc, #600]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8004fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	2b10      	cmp	r3, #16
 8004fd6:	d007      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x48>
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	2b18      	cmp	r3, #24
 8004fdc:	d111      	bne.n	8005002 <HAL_RCC_OscConfig+0x62>
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	f003 0303 	and.w	r3, r3, #3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d10c      	bne.n	8005002 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe8:	4b8f      	ldr	r3, [pc, #572]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d06d      	beq.n	80050d0 <HAL_RCC_OscConfig+0x130>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d169      	bne.n	80050d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	f000 bc21 	b.w	8005844 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500a:	d106      	bne.n	800501a <HAL_RCC_OscConfig+0x7a>
 800500c:	4b86      	ldr	r3, [pc, #536]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a85      	ldr	r2, [pc, #532]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	e02e      	b.n	8005078 <HAL_RCC_OscConfig+0xd8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10c      	bne.n	800503c <HAL_RCC_OscConfig+0x9c>
 8005022:	4b81      	ldr	r3, [pc, #516]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a80      	ldr	r2, [pc, #512]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	4b7e      	ldr	r3, [pc, #504]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a7d      	ldr	r2, [pc, #500]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	e01d      	b.n	8005078 <HAL_RCC_OscConfig+0xd8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005044:	d10c      	bne.n	8005060 <HAL_RCC_OscConfig+0xc0>
 8005046:	4b78      	ldr	r3, [pc, #480]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a77      	ldr	r2, [pc, #476]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 800504c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	4b75      	ldr	r3, [pc, #468]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a74      	ldr	r2, [pc, #464]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	e00b      	b.n	8005078 <HAL_RCC_OscConfig+0xd8>
 8005060:	4b71      	ldr	r3, [pc, #452]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a70      	ldr	r2, [pc, #448]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	4b6e      	ldr	r3, [pc, #440]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a6d      	ldr	r2, [pc, #436]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d013      	beq.n	80050a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005080:	f7fc f8a2 	bl	80011c8 <HAL_GetTick>
 8005084:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005088:	f7fc f89e 	bl	80011c8 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b64      	cmp	r3, #100	; 0x64
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e3d4      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800509a:	4b63      	ldr	r3, [pc, #396]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0xe8>
 80050a6:	e014      	b.n	80050d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a8:	f7fc f88e 	bl	80011c8 <HAL_GetTick>
 80050ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b0:	f7fc f88a 	bl	80011c8 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e3c0      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050c2:	4b59      	ldr	r3, [pc, #356]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1f0      	bne.n	80050b0 <HAL_RCC_OscConfig+0x110>
 80050ce:	e000      	b.n	80050d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 80ca 	beq.w	8005274 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050e0:	4b51      	ldr	r3, [pc, #324]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050ea:	4b4f      	ldr	r3, [pc, #316]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 80050ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <HAL_RCC_OscConfig+0x166>
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	2b18      	cmp	r3, #24
 80050fa:	d156      	bne.n	80051aa <HAL_RCC_OscConfig+0x20a>
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d151      	bne.n	80051aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005106:	4b48      	ldr	r3, [pc, #288]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <HAL_RCC_OscConfig+0x17e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e392      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800511e:	4b42      	ldr	r3, [pc, #264]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f023 0219 	bic.w	r2, r3, #25
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	493f      	ldr	r1, [pc, #252]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 800512c:	4313      	orrs	r3, r2
 800512e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005130:	f7fc f84a 	bl	80011c8 <HAL_GetTick>
 8005134:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005138:	f7fc f846 	bl	80011c8 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e37c      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800514a:	4b37      	ldr	r3, [pc, #220]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005156:	f7fc f843 	bl	80011e0 <HAL_GetREVID>
 800515a:	4603      	mov	r3, r0
 800515c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005160:	4293      	cmp	r3, r2
 8005162:	d817      	bhi.n	8005194 <HAL_RCC_OscConfig+0x1f4>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	2b40      	cmp	r3, #64	; 0x40
 800516a:	d108      	bne.n	800517e <HAL_RCC_OscConfig+0x1de>
 800516c:	4b2e      	ldr	r3, [pc, #184]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005174:	4a2c      	ldr	r2, [pc, #176]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800517a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800517c:	e07a      	b.n	8005274 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800517e:	4b2a      	ldr	r3, [pc, #168]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	031b      	lsls	r3, r3, #12
 800518c:	4926      	ldr	r1, [pc, #152]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 800518e:	4313      	orrs	r3, r2
 8005190:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005192:	e06f      	b.n	8005274 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005194:	4b24      	ldr	r3, [pc, #144]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	061b      	lsls	r3, r3, #24
 80051a2:	4921      	ldr	r1, [pc, #132]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051a8:	e064      	b.n	8005274 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d047      	beq.n	8005242 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051b2:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 0219 	bic.w	r2, r3, #25
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	491a      	ldr	r1, [pc, #104]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fc f800 	bl	80011c8 <HAL_GetTick>
 80051c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051cc:	f7fb fffc 	bl	80011c8 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e332      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051de:	4b12      	ldr	r3, [pc, #72]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0f0      	beq.n	80051cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ea:	f7fb fff9 	bl	80011e0 <HAL_GetREVID>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d819      	bhi.n	800522c <HAL_RCC_OscConfig+0x28c>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	2b40      	cmp	r3, #64	; 0x40
 80051fe:	d108      	bne.n	8005212 <HAL_RCC_OscConfig+0x272>
 8005200:	4b09      	ldr	r3, [pc, #36]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005208:	4a07      	ldr	r2, [pc, #28]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 800520a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800520e:	6053      	str	r3, [r2, #4]
 8005210:	e030      	b.n	8005274 <HAL_RCC_OscConfig+0x2d4>
 8005212:	4b05      	ldr	r3, [pc, #20]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	031b      	lsls	r3, r3, #12
 8005220:	4901      	ldr	r1, [pc, #4]	; (8005228 <HAL_RCC_OscConfig+0x288>)
 8005222:	4313      	orrs	r3, r2
 8005224:	604b      	str	r3, [r1, #4]
 8005226:	e025      	b.n	8005274 <HAL_RCC_OscConfig+0x2d4>
 8005228:	58024400 	.word	0x58024400
 800522c:	4b9a      	ldr	r3, [pc, #616]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	061b      	lsls	r3, r3, #24
 800523a:	4997      	ldr	r1, [pc, #604]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 800523c:	4313      	orrs	r3, r2
 800523e:	604b      	str	r3, [r1, #4]
 8005240:	e018      	b.n	8005274 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005242:	4b95      	ldr	r3, [pc, #596]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a94      	ldr	r2, [pc, #592]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 8005248:	f023 0301 	bic.w	r3, r3, #1
 800524c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524e:	f7fb ffbb 	bl	80011c8 <HAL_GetTick>
 8005252:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005256:	f7fb ffb7 	bl	80011c8 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e2ed      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005268:	4b8b      	ldr	r3, [pc, #556]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1f0      	bne.n	8005256 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 80a9 	beq.w	80053d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005282:	4b85      	ldr	r3, [pc, #532]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800528a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800528c:	4b82      	ldr	r3, [pc, #520]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 800528e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005290:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d007      	beq.n	80052a8 <HAL_RCC_OscConfig+0x308>
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	2b18      	cmp	r3, #24
 800529c:	d13a      	bne.n	8005314 <HAL_RCC_OscConfig+0x374>
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d135      	bne.n	8005314 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052a8:	4b7b      	ldr	r3, [pc, #492]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_RCC_OscConfig+0x320>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	2b80      	cmp	r3, #128	; 0x80
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e2c1      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052c0:	f7fb ff8e 	bl	80011e0 <HAL_GetREVID>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d817      	bhi.n	80052fe <HAL_RCC_OscConfig+0x35e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d108      	bne.n	80052e8 <HAL_RCC_OscConfig+0x348>
 80052d6:	4b70      	ldr	r3, [pc, #448]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80052de:	4a6e      	ldr	r2, [pc, #440]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 80052e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052e6:	e075      	b.n	80053d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052e8:	4b6b      	ldr	r3, [pc, #428]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	069b      	lsls	r3, r3, #26
 80052f6:	4968      	ldr	r1, [pc, #416]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052fc:	e06a      	b.n	80053d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052fe:	4b66      	ldr	r3, [pc, #408]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	061b      	lsls	r3, r3, #24
 800530c:	4962      	ldr	r1, [pc, #392]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 800530e:	4313      	orrs	r3, r2
 8005310:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005312:	e05f      	b.n	80053d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d042      	beq.n	80053a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800531c:	4b5e      	ldr	r3, [pc, #376]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a5d      	ldr	r2, [pc, #372]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 8005322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005328:	f7fb ff4e 	bl	80011c8 <HAL_GetTick>
 800532c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005330:	f7fb ff4a 	bl	80011c8 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e280      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005342:	4b55      	ldr	r3, [pc, #340]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f0      	beq.n	8005330 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800534e:	f7fb ff47 	bl	80011e0 <HAL_GetREVID>
 8005352:	4603      	mov	r3, r0
 8005354:	f241 0203 	movw	r2, #4099	; 0x1003
 8005358:	4293      	cmp	r3, r2
 800535a:	d817      	bhi.n	800538c <HAL_RCC_OscConfig+0x3ec>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	2b20      	cmp	r3, #32
 8005362:	d108      	bne.n	8005376 <HAL_RCC_OscConfig+0x3d6>
 8005364:	4b4c      	ldr	r3, [pc, #304]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800536c:	4a4a      	ldr	r2, [pc, #296]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 800536e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005372:	6053      	str	r3, [r2, #4]
 8005374:	e02e      	b.n	80053d4 <HAL_RCC_OscConfig+0x434>
 8005376:	4b48      	ldr	r3, [pc, #288]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	069b      	lsls	r3, r3, #26
 8005384:	4944      	ldr	r1, [pc, #272]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 8005386:	4313      	orrs	r3, r2
 8005388:	604b      	str	r3, [r1, #4]
 800538a:	e023      	b.n	80053d4 <HAL_RCC_OscConfig+0x434>
 800538c:	4b42      	ldr	r3, [pc, #264]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	061b      	lsls	r3, r3, #24
 800539a:	493f      	ldr	r1, [pc, #252]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 800539c:	4313      	orrs	r3, r2
 800539e:	60cb      	str	r3, [r1, #12]
 80053a0:	e018      	b.n	80053d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80053a2:	4b3d      	ldr	r3, [pc, #244]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a3c      	ldr	r2, [pc, #240]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 80053a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ae:	f7fb ff0b 	bl	80011c8 <HAL_GetTick>
 80053b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80053b6:	f7fb ff07 	bl	80011c8 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e23d      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80053c8:	4b33      	ldr	r3, [pc, #204]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f0      	bne.n	80053b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d036      	beq.n	800544e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d019      	beq.n	800541c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053e8:	4b2b      	ldr	r3, [pc, #172]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 80053ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ec:	4a2a      	ldr	r2, [pc, #168]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 80053ee:	f043 0301 	orr.w	r3, r3, #1
 80053f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f4:	f7fb fee8 	bl	80011c8 <HAL_GetTick>
 80053f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053fc:	f7fb fee4 	bl	80011c8 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e21a      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800540e:	4b22      	ldr	r3, [pc, #136]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 8005410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f0      	beq.n	80053fc <HAL_RCC_OscConfig+0x45c>
 800541a:	e018      	b.n	800544e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800541c:	4b1e      	ldr	r3, [pc, #120]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 800541e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005420:	4a1d      	ldr	r2, [pc, #116]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 8005422:	f023 0301 	bic.w	r3, r3, #1
 8005426:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005428:	f7fb fece 	bl	80011c8 <HAL_GetTick>
 800542c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005430:	f7fb feca 	bl	80011c8 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e200      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005442:	4b15      	ldr	r3, [pc, #84]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 8005444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b00      	cmp	r3, #0
 8005458:	d039      	beq.n	80054ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d01c      	beq.n	800549c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005462:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a0c      	ldr	r2, [pc, #48]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 8005468:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800546c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800546e:	f7fb feab 	bl	80011c8 <HAL_GetTick>
 8005472:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005474:	e008      	b.n	8005488 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005476:	f7fb fea7 	bl	80011c8 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d901      	bls.n	8005488 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e1dd      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005488:	4b03      	ldr	r3, [pc, #12]	; (8005498 <HAL_RCC_OscConfig+0x4f8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0f0      	beq.n	8005476 <HAL_RCC_OscConfig+0x4d6>
 8005494:	e01b      	b.n	80054ce <HAL_RCC_OscConfig+0x52e>
 8005496:	bf00      	nop
 8005498:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800549c:	4b9b      	ldr	r3, [pc, #620]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a9a      	ldr	r2, [pc, #616]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80054a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054a8:	f7fb fe8e 	bl	80011c8 <HAL_GetTick>
 80054ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054b0:	f7fb fe8a 	bl	80011c8 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e1c0      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054c2:	4b92      	ldr	r3, [pc, #584]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 8081 	beq.w	80055de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054dc:	4b8c      	ldr	r3, [pc, #560]	; (8005710 <HAL_RCC_OscConfig+0x770>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a8b      	ldr	r2, [pc, #556]	; (8005710 <HAL_RCC_OscConfig+0x770>)
 80054e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054e8:	f7fb fe6e 	bl	80011c8 <HAL_GetTick>
 80054ec:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f0:	f7fb fe6a 	bl	80011c8 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b64      	cmp	r3, #100	; 0x64
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e1a0      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005502:	4b83      	ldr	r3, [pc, #524]	; (8005710 <HAL_RCC_OscConfig+0x770>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f0      	beq.n	80054f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d106      	bne.n	8005524 <HAL_RCC_OscConfig+0x584>
 8005516:	4b7d      	ldr	r3, [pc, #500]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 8005518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551a:	4a7c      	ldr	r2, [pc, #496]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	6713      	str	r3, [r2, #112]	; 0x70
 8005522:	e02d      	b.n	8005580 <HAL_RCC_OscConfig+0x5e0>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10c      	bne.n	8005546 <HAL_RCC_OscConfig+0x5a6>
 800552c:	4b77      	ldr	r3, [pc, #476]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 800552e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005530:	4a76      	ldr	r2, [pc, #472]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 8005532:	f023 0301 	bic.w	r3, r3, #1
 8005536:	6713      	str	r3, [r2, #112]	; 0x70
 8005538:	4b74      	ldr	r3, [pc, #464]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 800553a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553c:	4a73      	ldr	r2, [pc, #460]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 800553e:	f023 0304 	bic.w	r3, r3, #4
 8005542:	6713      	str	r3, [r2, #112]	; 0x70
 8005544:	e01c      	b.n	8005580 <HAL_RCC_OscConfig+0x5e0>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b05      	cmp	r3, #5
 800554c:	d10c      	bne.n	8005568 <HAL_RCC_OscConfig+0x5c8>
 800554e:	4b6f      	ldr	r3, [pc, #444]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	4a6e      	ldr	r2, [pc, #440]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 8005554:	f043 0304 	orr.w	r3, r3, #4
 8005558:	6713      	str	r3, [r2, #112]	; 0x70
 800555a:	4b6c      	ldr	r3, [pc, #432]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555e:	4a6b      	ldr	r2, [pc, #428]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	6713      	str	r3, [r2, #112]	; 0x70
 8005566:	e00b      	b.n	8005580 <HAL_RCC_OscConfig+0x5e0>
 8005568:	4b68      	ldr	r3, [pc, #416]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 800556a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556c:	4a67      	ldr	r2, [pc, #412]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	6713      	str	r3, [r2, #112]	; 0x70
 8005574:	4b65      	ldr	r3, [pc, #404]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	4a64      	ldr	r2, [pc, #400]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 800557a:	f023 0304 	bic.w	r3, r3, #4
 800557e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d015      	beq.n	80055b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005588:	f7fb fe1e 	bl	80011c8 <HAL_GetTick>
 800558c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800558e:	e00a      	b.n	80055a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005590:	f7fb fe1a 	bl	80011c8 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	; 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e14e      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055a6:	4b59      	ldr	r3, [pc, #356]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0ee      	beq.n	8005590 <HAL_RCC_OscConfig+0x5f0>
 80055b2:	e014      	b.n	80055de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b4:	f7fb fe08 	bl	80011c8 <HAL_GetTick>
 80055b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055bc:	f7fb fe04 	bl	80011c8 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e138      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055d2:	4b4e      	ldr	r3, [pc, #312]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1ee      	bne.n	80055bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 812d 	beq.w	8005842 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80055e8:	4b48      	ldr	r3, [pc, #288]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055f0:	2b18      	cmp	r3, #24
 80055f2:	f000 80bd 	beq.w	8005770 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	f040 809e 	bne.w	800573c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005600:	4b42      	ldr	r3, [pc, #264]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a41      	ldr	r2, [pc, #260]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 8005606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800560a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560c:	f7fb fddc 	bl	80011c8 <HAL_GetTick>
 8005610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005614:	f7fb fdd8 	bl	80011c8 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e10e      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005626:	4b39      	ldr	r3, [pc, #228]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f0      	bne.n	8005614 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005632:	4b36      	ldr	r3, [pc, #216]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 8005634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005636:	4b37      	ldr	r3, [pc, #220]	; (8005714 <HAL_RCC_OscConfig+0x774>)
 8005638:	4013      	ands	r3, r2
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005642:	0112      	lsls	r2, r2, #4
 8005644:	430a      	orrs	r2, r1
 8005646:	4931      	ldr	r1, [pc, #196]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 8005648:	4313      	orrs	r3, r2
 800564a:	628b      	str	r3, [r1, #40]	; 0x28
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	3b01      	subs	r3, #1
 8005652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565a:	3b01      	subs	r3, #1
 800565c:	025b      	lsls	r3, r3, #9
 800565e:	b29b      	uxth	r3, r3
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005666:	3b01      	subs	r3, #1
 8005668:	041b      	lsls	r3, r3, #16
 800566a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005674:	3b01      	subs	r3, #1
 8005676:	061b      	lsls	r3, r3, #24
 8005678:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800567c:	4923      	ldr	r1, [pc, #140]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 800567e:	4313      	orrs	r3, r2
 8005680:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005682:	4b22      	ldr	r3, [pc, #136]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	4a21      	ldr	r2, [pc, #132]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800568e:	4b1f      	ldr	r3, [pc, #124]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 8005690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005692:	4b21      	ldr	r3, [pc, #132]	; (8005718 <HAL_RCC_OscConfig+0x778>)
 8005694:	4013      	ands	r3, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800569a:	00d2      	lsls	r2, r2, #3
 800569c:	491b      	ldr	r1, [pc, #108]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80056a2:	4b1a      	ldr	r3, [pc, #104]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	f023 020c 	bic.w	r2, r3, #12
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	4917      	ldr	r1, [pc, #92]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80056b4:	4b15      	ldr	r3, [pc, #84]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	f023 0202 	bic.w	r2, r3, #2
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c0:	4912      	ldr	r1, [pc, #72]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056c6:	4b11      	ldr	r3, [pc, #68]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80056c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ca:	4a10      	ldr	r2, [pc, #64]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80056cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d2:	4b0e      	ldr	r3, [pc, #56]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	4a0d      	ldr	r2, [pc, #52]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80056d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80056de:	4b0b      	ldr	r3, [pc, #44]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	4a0a      	ldr	r2, [pc, #40]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80056e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80056ea:	4b08      	ldr	r3, [pc, #32]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	4a07      	ldr	r2, [pc, #28]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80056f0:	f043 0301 	orr.w	r3, r3, #1
 80056f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a04      	ldr	r2, [pc, #16]	; (800570c <HAL_RCC_OscConfig+0x76c>)
 80056fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005702:	f7fb fd61 	bl	80011c8 <HAL_GetTick>
 8005706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005708:	e011      	b.n	800572e <HAL_RCC_OscConfig+0x78e>
 800570a:	bf00      	nop
 800570c:	58024400 	.word	0x58024400
 8005710:	58024800 	.word	0x58024800
 8005714:	fffffc0c 	.word	0xfffffc0c
 8005718:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800571c:	f7fb fd54 	bl	80011c8 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e08a      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800572e:	4b47      	ldr	r3, [pc, #284]	; (800584c <HAL_RCC_OscConfig+0x8ac>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0f0      	beq.n	800571c <HAL_RCC_OscConfig+0x77c>
 800573a:	e082      	b.n	8005842 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800573c:	4b43      	ldr	r3, [pc, #268]	; (800584c <HAL_RCC_OscConfig+0x8ac>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a42      	ldr	r2, [pc, #264]	; (800584c <HAL_RCC_OscConfig+0x8ac>)
 8005742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005748:	f7fb fd3e 	bl	80011c8 <HAL_GetTick>
 800574c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005750:	f7fb fd3a 	bl	80011c8 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e070      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005762:	4b3a      	ldr	r3, [pc, #232]	; (800584c <HAL_RCC_OscConfig+0x8ac>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1f0      	bne.n	8005750 <HAL_RCC_OscConfig+0x7b0>
 800576e:	e068      	b.n	8005842 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005770:	4b36      	ldr	r3, [pc, #216]	; (800584c <HAL_RCC_OscConfig+0x8ac>)
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005776:	4b35      	ldr	r3, [pc, #212]	; (800584c <HAL_RCC_OscConfig+0x8ac>)
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	2b01      	cmp	r3, #1
 8005782:	d031      	beq.n	80057e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f003 0203 	and.w	r2, r3, #3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800578e:	429a      	cmp	r2, r3
 8005790:	d12a      	bne.n	80057e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	091b      	lsrs	r3, r3, #4
 8005796:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800579e:	429a      	cmp	r2, r3
 80057a0:	d122      	bne.n	80057e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d11a      	bne.n	80057e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	0a5b      	lsrs	r3, r3, #9
 80057b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d111      	bne.n	80057e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	0c1b      	lsrs	r3, r3, #16
 80057c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d108      	bne.n	80057e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	0e1b      	lsrs	r3, r3, #24
 80057da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d001      	beq.n	80057ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e02b      	b.n	8005844 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80057ec:	4b17      	ldr	r3, [pc, #92]	; (800584c <HAL_RCC_OscConfig+0x8ac>)
 80057ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f0:	08db      	lsrs	r3, r3, #3
 80057f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d01f      	beq.n	8005842 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005802:	4b12      	ldr	r3, [pc, #72]	; (800584c <HAL_RCC_OscConfig+0x8ac>)
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	4a11      	ldr	r2, [pc, #68]	; (800584c <HAL_RCC_OscConfig+0x8ac>)
 8005808:	f023 0301 	bic.w	r3, r3, #1
 800580c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800580e:	f7fb fcdb 	bl	80011c8 <HAL_GetTick>
 8005812:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005814:	bf00      	nop
 8005816:	f7fb fcd7 	bl	80011c8 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	4293      	cmp	r3, r2
 8005820:	d0f9      	beq.n	8005816 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005822:	4b0a      	ldr	r3, [pc, #40]	; (800584c <HAL_RCC_OscConfig+0x8ac>)
 8005824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005826:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <HAL_RCC_OscConfig+0x8b0>)
 8005828:	4013      	ands	r3, r2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800582e:	00d2      	lsls	r2, r2, #3
 8005830:	4906      	ldr	r1, [pc, #24]	; (800584c <HAL_RCC_OscConfig+0x8ac>)
 8005832:	4313      	orrs	r3, r2
 8005834:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005836:	4b05      	ldr	r3, [pc, #20]	; (800584c <HAL_RCC_OscConfig+0x8ac>)
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	4a04      	ldr	r2, [pc, #16]	; (800584c <HAL_RCC_OscConfig+0x8ac>)
 800583c:	f043 0301 	orr.w	r3, r3, #1
 8005840:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3730      	adds	r7, #48	; 0x30
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	58024400 	.word	0x58024400
 8005850:	ffff0007 	.word	0xffff0007

08005854 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e19c      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005868:	4b8a      	ldr	r3, [pc, #552]	; (8005a94 <HAL_RCC_ClockConfig+0x240>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d910      	bls.n	8005898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005876:	4b87      	ldr	r3, [pc, #540]	; (8005a94 <HAL_RCC_ClockConfig+0x240>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f023 020f 	bic.w	r2, r3, #15
 800587e:	4985      	ldr	r1, [pc, #532]	; (8005a94 <HAL_RCC_ClockConfig+0x240>)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	4313      	orrs	r3, r2
 8005884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005886:	4b83      	ldr	r3, [pc, #524]	; (8005a94 <HAL_RCC_ClockConfig+0x240>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d001      	beq.n	8005898 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e184      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d010      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	4b7b      	ldr	r3, [pc, #492]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d908      	bls.n	80058c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058b4:	4b78      	ldr	r3, [pc, #480]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	4975      	ldr	r1, [pc, #468]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d010      	beq.n	80058f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	4b70      	ldr	r3, [pc, #448]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058de:	429a      	cmp	r2, r3
 80058e0:	d908      	bls.n	80058f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058e2:	4b6d      	ldr	r3, [pc, #436]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	496a      	ldr	r1, [pc, #424]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d010      	beq.n	8005922 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699a      	ldr	r2, [r3, #24]
 8005904:	4b64      	ldr	r3, [pc, #400]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800590c:	429a      	cmp	r2, r3
 800590e:	d908      	bls.n	8005922 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005910:	4b61      	ldr	r3, [pc, #388]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	495e      	ldr	r1, [pc, #376]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 800591e:	4313      	orrs	r3, r2
 8005920:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d010      	beq.n	8005950 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69da      	ldr	r2, [r3, #28]
 8005932:	4b59      	ldr	r3, [pc, #356]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800593a:	429a      	cmp	r2, r3
 800593c:	d908      	bls.n	8005950 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800593e:	4b56      	ldr	r3, [pc, #344]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	4953      	ldr	r1, [pc, #332]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 800594c:	4313      	orrs	r3, r2
 800594e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d010      	beq.n	800597e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	4b4d      	ldr	r3, [pc, #308]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	f003 030f 	and.w	r3, r3, #15
 8005968:	429a      	cmp	r2, r3
 800596a:	d908      	bls.n	800597e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800596c:	4b4a      	ldr	r3, [pc, #296]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	f023 020f 	bic.w	r2, r3, #15
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	4947      	ldr	r1, [pc, #284]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 800597a:	4313      	orrs	r3, r2
 800597c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d055      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800598a:	4b43      	ldr	r3, [pc, #268]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	4940      	ldr	r1, [pc, #256]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005998:	4313      	orrs	r3, r2
 800599a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d107      	bne.n	80059b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059a4:	4b3c      	ldr	r3, [pc, #240]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d121      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e0f6      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d107      	bne.n	80059cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059bc:	4b36      	ldr	r3, [pc, #216]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d115      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e0ea      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d107      	bne.n	80059e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059d4:	4b30      	ldr	r3, [pc, #192]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e0de      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059e4:	4b2c      	ldr	r3, [pc, #176]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e0d6      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059f4:	4b28      	ldr	r3, [pc, #160]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f023 0207 	bic.w	r2, r3, #7
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4925      	ldr	r1, [pc, #148]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a06:	f7fb fbdf 	bl	80011c8 <HAL_GetTick>
 8005a0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a0c:	e00a      	b.n	8005a24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a0e:	f7fb fbdb 	bl	80011c8 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e0be      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a24:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d1eb      	bne.n	8005a0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d010      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	4b14      	ldr	r3, [pc, #80]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d208      	bcs.n	8005a64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a52:	4b11      	ldr	r3, [pc, #68]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f023 020f 	bic.w	r2, r3, #15
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	490e      	ldr	r1, [pc, #56]	; (8005a98 <HAL_RCC_ClockConfig+0x244>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a64:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <HAL_RCC_ClockConfig+0x240>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d214      	bcs.n	8005a9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a72:	4b08      	ldr	r3, [pc, #32]	; (8005a94 <HAL_RCC_ClockConfig+0x240>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f023 020f 	bic.w	r2, r3, #15
 8005a7a:	4906      	ldr	r1, [pc, #24]	; (8005a94 <HAL_RCC_ClockConfig+0x240>)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a82:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <HAL_RCC_ClockConfig+0x240>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d005      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e086      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x34e>
 8005a94:	52002000 	.word	0x52002000
 8005a98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d010      	beq.n	8005aca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	4b3f      	ldr	r3, [pc, #252]	; (8005bac <HAL_RCC_ClockConfig+0x358>)
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d208      	bcs.n	8005aca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ab8:	4b3c      	ldr	r3, [pc, #240]	; (8005bac <HAL_RCC_ClockConfig+0x358>)
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	4939      	ldr	r1, [pc, #228]	; (8005bac <HAL_RCC_ClockConfig+0x358>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d010      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695a      	ldr	r2, [r3, #20]
 8005ada:	4b34      	ldr	r3, [pc, #208]	; (8005bac <HAL_RCC_ClockConfig+0x358>)
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d208      	bcs.n	8005af8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ae6:	4b31      	ldr	r3, [pc, #196]	; (8005bac <HAL_RCC_ClockConfig+0x358>)
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	492e      	ldr	r1, [pc, #184]	; (8005bac <HAL_RCC_ClockConfig+0x358>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d010      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	4b28      	ldr	r3, [pc, #160]	; (8005bac <HAL_RCC_ClockConfig+0x358>)
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d208      	bcs.n	8005b26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b14:	4b25      	ldr	r3, [pc, #148]	; (8005bac <HAL_RCC_ClockConfig+0x358>)
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	4922      	ldr	r1, [pc, #136]	; (8005bac <HAL_RCC_ClockConfig+0x358>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d010      	beq.n	8005b54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69da      	ldr	r2, [r3, #28]
 8005b36:	4b1d      	ldr	r3, [pc, #116]	; (8005bac <HAL_RCC_ClockConfig+0x358>)
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d208      	bcs.n	8005b54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b42:	4b1a      	ldr	r3, [pc, #104]	; (8005bac <HAL_RCC_ClockConfig+0x358>)
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	4917      	ldr	r1, [pc, #92]	; (8005bac <HAL_RCC_ClockConfig+0x358>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b54:	f000 f834 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	4b14      	ldr	r3, [pc, #80]	; (8005bac <HAL_RCC_ClockConfig+0x358>)
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	0a1b      	lsrs	r3, r3, #8
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	4912      	ldr	r1, [pc, #72]	; (8005bb0 <HAL_RCC_ClockConfig+0x35c>)
 8005b66:	5ccb      	ldrb	r3, [r1, r3]
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b72:	4b0e      	ldr	r3, [pc, #56]	; (8005bac <HAL_RCC_ClockConfig+0x358>)
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	4a0d      	ldr	r2, [pc, #52]	; (8005bb0 <HAL_RCC_ClockConfig+0x35c>)
 8005b7c:	5cd3      	ldrb	r3, [r2, r3]
 8005b7e:	f003 031f 	and.w	r3, r3, #31
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	fa22 f303 	lsr.w	r3, r2, r3
 8005b88:	4a0a      	ldr	r2, [pc, #40]	; (8005bb4 <HAL_RCC_ClockConfig+0x360>)
 8005b8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b8c:	4a0a      	ldr	r2, [pc, #40]	; (8005bb8 <HAL_RCC_ClockConfig+0x364>)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005b92:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <HAL_RCC_ClockConfig+0x368>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fb f850 	bl	8000c3c <HAL_InitTick>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	58024400 	.word	0x58024400
 8005bb0:	0801127c 	.word	0x0801127c
 8005bb4:	24000004 	.word	0x24000004
 8005bb8:	24000000 	.word	0x24000000
 8005bbc:	24000008 	.word	0x24000008

08005bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b089      	sub	sp, #36	; 0x24
 8005bc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bc6:	4bb3      	ldr	r3, [pc, #716]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bce:	2b18      	cmp	r3, #24
 8005bd0:	f200 8155 	bhi.w	8005e7e <HAL_RCC_GetSysClockFreq+0x2be>
 8005bd4:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <HAL_RCC_GetSysClockFreq+0x1c>)
 8005bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bda:	bf00      	nop
 8005bdc:	08005c41 	.word	0x08005c41
 8005be0:	08005e7f 	.word	0x08005e7f
 8005be4:	08005e7f 	.word	0x08005e7f
 8005be8:	08005e7f 	.word	0x08005e7f
 8005bec:	08005e7f 	.word	0x08005e7f
 8005bf0:	08005e7f 	.word	0x08005e7f
 8005bf4:	08005e7f 	.word	0x08005e7f
 8005bf8:	08005e7f 	.word	0x08005e7f
 8005bfc:	08005c67 	.word	0x08005c67
 8005c00:	08005e7f 	.word	0x08005e7f
 8005c04:	08005e7f 	.word	0x08005e7f
 8005c08:	08005e7f 	.word	0x08005e7f
 8005c0c:	08005e7f 	.word	0x08005e7f
 8005c10:	08005e7f 	.word	0x08005e7f
 8005c14:	08005e7f 	.word	0x08005e7f
 8005c18:	08005e7f 	.word	0x08005e7f
 8005c1c:	08005c6d 	.word	0x08005c6d
 8005c20:	08005e7f 	.word	0x08005e7f
 8005c24:	08005e7f 	.word	0x08005e7f
 8005c28:	08005e7f 	.word	0x08005e7f
 8005c2c:	08005e7f 	.word	0x08005e7f
 8005c30:	08005e7f 	.word	0x08005e7f
 8005c34:	08005e7f 	.word	0x08005e7f
 8005c38:	08005e7f 	.word	0x08005e7f
 8005c3c:	08005c73 	.word	0x08005c73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c40:	4b94      	ldr	r3, [pc, #592]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0320 	and.w	r3, r3, #32
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d009      	beq.n	8005c60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c4c:	4b91      	ldr	r3, [pc, #580]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	08db      	lsrs	r3, r3, #3
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	4a90      	ldr	r2, [pc, #576]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c58:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005c5e:	e111      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c60:	4b8d      	ldr	r3, [pc, #564]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c62:	61bb      	str	r3, [r7, #24]
      break;
 8005c64:	e10e      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005c66:	4b8d      	ldr	r3, [pc, #564]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c68:	61bb      	str	r3, [r7, #24]
      break;
 8005c6a:	e10b      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005c6c:	4b8c      	ldr	r3, [pc, #560]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005c6e:	61bb      	str	r3, [r7, #24]
      break;
 8005c70:	e108      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c72:	4b88      	ldr	r3, [pc, #544]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005c7c:	4b85      	ldr	r3, [pc, #532]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	091b      	lsrs	r3, r3, #4
 8005c82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c88:	4b82      	ldr	r3, [pc, #520]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005c92:	4b80      	ldr	r3, [pc, #512]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c96:	08db      	lsrs	r3, r3, #3
 8005c98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005caa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80e1 	beq.w	8005e78 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	f000 8083 	beq.w	8005dc4 <HAL_RCC_GetSysClockFreq+0x204>
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	f200 80a1 	bhi.w	8005e08 <HAL_RCC_GetSysClockFreq+0x248>
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <HAL_RCC_GetSysClockFreq+0x114>
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d056      	beq.n	8005d80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005cd2:	e099      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cd4:	4b6f      	ldr	r3, [pc, #444]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d02d      	beq.n	8005d3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ce0:	4b6c      	ldr	r3, [pc, #432]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	08db      	lsrs	r3, r3, #3
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	4a6b      	ldr	r2, [pc, #428]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cec:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	ee07 3a90 	vmov	s15, r3
 8005cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0a:	4b62      	ldr	r3, [pc, #392]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005ea4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005d3a:	e087      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	ee07 3a90 	vmov	s15, r3
 8005d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d46:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005ea8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4e:	4b51      	ldr	r3, [pc, #324]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d62:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005ea4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d7e:	e065      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005eac <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d92:	4b40      	ldr	r3, [pc, #256]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005da6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005ea4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005dc2:	e043      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dce:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005eb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd6:	4b2f      	ldr	r3, [pc, #188]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005ea4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e06:	e021      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e12:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005eac <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1a:	4b1e      	ldr	r3, [pc, #120]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e2e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005ea4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005e4c:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e50:	0a5b      	lsrs	r3, r3, #9
 8005e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e56:	3301      	adds	r3, #1
 8005e58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	ee07 3a90 	vmov	s15, r3
 8005e60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e64:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e70:	ee17 3a90 	vmov	r3, s15
 8005e74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005e76:	e005      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	61bb      	str	r3, [r7, #24]
      break;
 8005e7c:	e002      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005e7e:	4b07      	ldr	r3, [pc, #28]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e80:	61bb      	str	r3, [r7, #24]
      break;
 8005e82:	bf00      	nop
  }

  return sysclockfreq;
 8005e84:	69bb      	ldr	r3, [r7, #24]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3724      	adds	r7, #36	; 0x24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	58024400 	.word	0x58024400
 8005e98:	03d09000 	.word	0x03d09000
 8005e9c:	003d0900 	.word	0x003d0900
 8005ea0:	007a1200 	.word	0x007a1200
 8005ea4:	46000000 	.word	0x46000000
 8005ea8:	4c742400 	.word	0x4c742400
 8005eac:	4a742400 	.word	0x4a742400
 8005eb0:	4af42400 	.word	0x4af42400

08005eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005eba:	f7ff fe81 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	0a1b      	lsrs	r3, r3, #8
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	490f      	ldr	r1, [pc, #60]	; (8005f08 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ecc:	5ccb      	ldrb	r3, [r1, r3]
 8005ece:	f003 031f 	and.w	r3, r3, #31
 8005ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ed8:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <HAL_RCC_GetHCLKFreq+0x50>)
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	4a09      	ldr	r2, [pc, #36]	; (8005f08 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ee2:	5cd3      	ldrb	r3, [r2, r3]
 8005ee4:	f003 031f 	and.w	r3, r3, #31
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	fa22 f303 	lsr.w	r3, r2, r3
 8005eee:	4a07      	ldr	r2, [pc, #28]	; (8005f0c <HAL_RCC_GetHCLKFreq+0x58>)
 8005ef0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ef2:	4a07      	ldr	r2, [pc, #28]	; (8005f10 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ef8:	4b04      	ldr	r3, [pc, #16]	; (8005f0c <HAL_RCC_GetHCLKFreq+0x58>)
 8005efa:	681b      	ldr	r3, [r3, #0]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	58024400 	.word	0x58024400
 8005f08:	0801127c 	.word	0x0801127c
 8005f0c:	24000004 	.word	0x24000004
 8005f10:	24000000 	.word	0x24000000

08005f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005f18:	f7ff ffcc 	bl	8005eb4 <HAL_RCC_GetHCLKFreq>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	091b      	lsrs	r3, r3, #4
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	4904      	ldr	r1, [pc, #16]	; (8005f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f2a:	5ccb      	ldrb	r3, [r1, r3]
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	58024400 	.word	0x58024400
 8005f3c:	0801127c 	.word	0x0801127c

08005f40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	223f      	movs	r2, #63	; 0x3f
 8005f4e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f50:	4b1a      	ldr	r3, [pc, #104]	; (8005fbc <HAL_RCC_GetClockConfig+0x7c>)
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	f003 0207 	and.w	r2, r3, #7
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005f5c:	4b17      	ldr	r3, [pc, #92]	; (8005fbc <HAL_RCC_GetClockConfig+0x7c>)
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005f68:	4b14      	ldr	r3, [pc, #80]	; (8005fbc <HAL_RCC_GetClockConfig+0x7c>)
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	f003 020f 	and.w	r2, r3, #15
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005f74:	4b11      	ldr	r3, [pc, #68]	; (8005fbc <HAL_RCC_GetClockConfig+0x7c>)
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005f80:	4b0e      	ldr	r3, [pc, #56]	; (8005fbc <HAL_RCC_GetClockConfig+0x7c>)
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	; (8005fbc <HAL_RCC_GetClockConfig+0x7c>)
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005f98:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <HAL_RCC_GetClockConfig+0x7c>)
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005fa4:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <HAL_RCC_GetClockConfig+0x80>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 020f 	and.w	r2, r3, #15
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	601a      	str	r2, [r3, #0]
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	58024400 	.word	0x58024400
 8005fc0:	52002000 	.word	0x52002000

08005fc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fc8:	b0ca      	sub	sp, #296	; 0x128
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005fe8:	2500      	movs	r5, #0
 8005fea:	ea54 0305 	orrs.w	r3, r4, r5
 8005fee:	d049      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ff6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ffa:	d02f      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ffc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006000:	d828      	bhi.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006002:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006006:	d01a      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800600c:	d822      	bhi.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006016:	d007      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006018:	e01c      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800601a:	4bb8      	ldr	r3, [pc, #736]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	4ab7      	ldr	r2, [pc, #732]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006024:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006026:	e01a      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800602c:	3308      	adds	r3, #8
 800602e:	2102      	movs	r1, #2
 8006030:	4618      	mov	r0, r3
 8006032:	f002 fb61 	bl	80086f8 <RCCEx_PLL2_Config>
 8006036:	4603      	mov	r3, r0
 8006038:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800603c:	e00f      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800603e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006042:	3328      	adds	r3, #40	; 0x28
 8006044:	2102      	movs	r1, #2
 8006046:	4618      	mov	r0, r3
 8006048:	f002 fc08 	bl	800885c <RCCEx_PLL3_Config>
 800604c:	4603      	mov	r3, r0
 800604e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006052:	e004      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800605a:	e000      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800605c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800605e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006066:	4ba5      	ldr	r3, [pc, #660]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800606e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006074:	4aa1      	ldr	r2, [pc, #644]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006076:	430b      	orrs	r3, r1
 8006078:	6513      	str	r3, [r2, #80]	; 0x50
 800607a:	e003      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006080:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006090:	f04f 0900 	mov.w	r9, #0
 8006094:	ea58 0309 	orrs.w	r3, r8, r9
 8006098:	d047      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800609a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800609e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a0:	2b04      	cmp	r3, #4
 80060a2:	d82a      	bhi.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80060a4:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060aa:	bf00      	nop
 80060ac:	080060c1 	.word	0x080060c1
 80060b0:	080060cf 	.word	0x080060cf
 80060b4:	080060e5 	.word	0x080060e5
 80060b8:	08006103 	.word	0x08006103
 80060bc:	08006103 	.word	0x08006103
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c0:	4b8e      	ldr	r3, [pc, #568]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	4a8d      	ldr	r2, [pc, #564]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060cc:	e01a      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d2:	3308      	adds	r3, #8
 80060d4:	2100      	movs	r1, #0
 80060d6:	4618      	mov	r0, r3
 80060d8:	f002 fb0e 	bl	80086f8 <RCCEx_PLL2_Config>
 80060dc:	4603      	mov	r3, r0
 80060de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060e2:	e00f      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e8:	3328      	adds	r3, #40	; 0x28
 80060ea:	2100      	movs	r1, #0
 80060ec:	4618      	mov	r0, r3
 80060ee:	f002 fbb5 	bl	800885c <RCCEx_PLL3_Config>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060f8:	e004      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006100:	e000      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800610c:	4b7b      	ldr	r3, [pc, #492]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800610e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006110:	f023 0107 	bic.w	r1, r3, #7
 8006114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800611a:	4a78      	ldr	r2, [pc, #480]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800611c:	430b      	orrs	r3, r1
 800611e:	6513      	str	r3, [r2, #80]	; 0x50
 8006120:	e003      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006122:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006126:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800612a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006132:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006136:	f04f 0b00 	mov.w	fp, #0
 800613a:	ea5a 030b 	orrs.w	r3, sl, fp
 800613e:	d04c      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614a:	d030      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800614c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006150:	d829      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006152:	2bc0      	cmp	r3, #192	; 0xc0
 8006154:	d02d      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006156:	2bc0      	cmp	r3, #192	; 0xc0
 8006158:	d825      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800615a:	2b80      	cmp	r3, #128	; 0x80
 800615c:	d018      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d821      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006166:	2b40      	cmp	r3, #64	; 0x40
 8006168:	d007      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800616a:	e01c      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800616c:	4b63      	ldr	r3, [pc, #396]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	4a62      	ldr	r2, [pc, #392]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006176:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006178:	e01c      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800617e:	3308      	adds	r3, #8
 8006180:	2100      	movs	r1, #0
 8006182:	4618      	mov	r0, r3
 8006184:	f002 fab8 	bl	80086f8 <RCCEx_PLL2_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800618e:	e011      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006194:	3328      	adds	r3, #40	; 0x28
 8006196:	2100      	movs	r1, #0
 8006198:	4618      	mov	r0, r3
 800619a:	f002 fb5f 	bl	800885c <RCCEx_PLL3_Config>
 800619e:	4603      	mov	r3, r0
 80061a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80061a4:	e006      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061ac:	e002      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80061ae:	bf00      	nop
 80061b0:	e000      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80061b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80061bc:	4b4f      	ldr	r3, [pc, #316]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80061c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ca:	4a4c      	ldr	r2, [pc, #304]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061cc:	430b      	orrs	r3, r1
 80061ce:	6513      	str	r3, [r2, #80]	; 0x50
 80061d0:	e003      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80061e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061ea:	2300      	movs	r3, #0
 80061ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061f0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80061f4:	460b      	mov	r3, r1
 80061f6:	4313      	orrs	r3, r2
 80061f8:	d053      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80061fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006202:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006206:	d035      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006208:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800620c:	d82e      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800620e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006212:	d031      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006214:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006218:	d828      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800621a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800621e:	d01a      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006224:	d822      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800622a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800622e:	d007      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006230:	e01c      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006232:	4b32      	ldr	r3, [pc, #200]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006236:	4a31      	ldr	r2, [pc, #196]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800623c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800623e:	e01c      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006244:	3308      	adds	r3, #8
 8006246:	2100      	movs	r1, #0
 8006248:	4618      	mov	r0, r3
 800624a:	f002 fa55 	bl	80086f8 <RCCEx_PLL2_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006254:	e011      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800625a:	3328      	adds	r3, #40	; 0x28
 800625c:	2100      	movs	r1, #0
 800625e:	4618      	mov	r0, r3
 8006260:	f002 fafc 	bl	800885c <RCCEx_PLL3_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800626a:	e006      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006272:	e002      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006274:	bf00      	nop
 8006276:	e000      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800627a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10b      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006282:	4b1e      	ldr	r3, [pc, #120]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006286:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800628a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800628e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006292:	4a1a      	ldr	r2, [pc, #104]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006294:	430b      	orrs	r3, r1
 8006296:	6593      	str	r3, [r2, #88]	; 0x58
 8006298:	e003      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800629e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80062ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062b2:	2300      	movs	r3, #0
 80062b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80062b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80062bc:	460b      	mov	r3, r1
 80062be:	4313      	orrs	r3, r2
 80062c0:	d056      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062ce:	d038      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80062d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062d4:	d831      	bhi.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062da:	d034      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80062dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062e0:	d82b      	bhi.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062e6:	d01d      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80062e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062ec:	d825      	bhi.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d006      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80062f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062f6:	d00a      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80062f8:	e01f      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062fa:	bf00      	nop
 80062fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006300:	4ba2      	ldr	r3, [pc, #648]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	4aa1      	ldr	r2, [pc, #644]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800630a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800630c:	e01c      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800630e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006312:	3308      	adds	r3, #8
 8006314:	2100      	movs	r1, #0
 8006316:	4618      	mov	r0, r3
 8006318:	f002 f9ee 	bl	80086f8 <RCCEx_PLL2_Config>
 800631c:	4603      	mov	r3, r0
 800631e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006322:	e011      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006328:	3328      	adds	r3, #40	; 0x28
 800632a:	2100      	movs	r1, #0
 800632c:	4618      	mov	r0, r3
 800632e:	f002 fa95 	bl	800885c <RCCEx_PLL3_Config>
 8006332:	4603      	mov	r3, r0
 8006334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006338:	e006      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006340:	e002      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006342:	bf00      	nop
 8006344:	e000      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006348:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10b      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006350:	4b8e      	ldr	r3, [pc, #568]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006354:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006360:	4a8a      	ldr	r2, [pc, #552]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006362:	430b      	orrs	r3, r1
 8006364:	6593      	str	r3, [r2, #88]	; 0x58
 8006366:	e003      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006368:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800636c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800637c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006380:	2300      	movs	r3, #0
 8006382:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006386:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800638a:	460b      	mov	r3, r1
 800638c:	4313      	orrs	r3, r2
 800638e:	d03a      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006396:	2b30      	cmp	r3, #48	; 0x30
 8006398:	d01f      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800639a:	2b30      	cmp	r3, #48	; 0x30
 800639c:	d819      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d00c      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d815      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d019      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80063aa:	2b10      	cmp	r3, #16
 80063ac:	d111      	bne.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ae:	4b77      	ldr	r3, [pc, #476]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	4a76      	ldr	r2, [pc, #472]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80063ba:	e011      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c0:	3308      	adds	r3, #8
 80063c2:	2102      	movs	r1, #2
 80063c4:	4618      	mov	r0, r3
 80063c6:	f002 f997 	bl	80086f8 <RCCEx_PLL2_Config>
 80063ca:	4603      	mov	r3, r0
 80063cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80063d0:	e006      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063d8:	e002      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80063da:	bf00      	nop
 80063dc:	e000      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80063de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10a      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80063e8:	4b68      	ldr	r3, [pc, #416]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80063f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f6:	4a65      	ldr	r2, [pc, #404]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063f8:	430b      	orrs	r3, r1
 80063fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063fc:	e003      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006402:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006412:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006416:	2300      	movs	r3, #0
 8006418:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800641c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006420:	460b      	mov	r3, r1
 8006422:	4313      	orrs	r3, r2
 8006424:	d051      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800642a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006430:	d035      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006436:	d82e      	bhi.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006438:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800643c:	d031      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800643e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006442:	d828      	bhi.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006448:	d01a      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800644a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800644e:	d822      	bhi.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006458:	d007      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800645a:	e01c      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800645c:	4b4b      	ldr	r3, [pc, #300]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	4a4a      	ldr	r2, [pc, #296]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006468:	e01c      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800646a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800646e:	3308      	adds	r3, #8
 8006470:	2100      	movs	r1, #0
 8006472:	4618      	mov	r0, r3
 8006474:	f002 f940 	bl	80086f8 <RCCEx_PLL2_Config>
 8006478:	4603      	mov	r3, r0
 800647a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800647e:	e011      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006484:	3328      	adds	r3, #40	; 0x28
 8006486:	2100      	movs	r1, #0
 8006488:	4618      	mov	r0, r3
 800648a:	f002 f9e7 	bl	800885c <RCCEx_PLL3_Config>
 800648e:	4603      	mov	r3, r0
 8006490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006494:	e006      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800649c:	e002      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800649e:	bf00      	nop
 80064a0:	e000      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80064a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10a      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064ac:	4b37      	ldr	r3, [pc, #220]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80064b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ba:	4a34      	ldr	r2, [pc, #208]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064bc:	430b      	orrs	r3, r1
 80064be:	6513      	str	r3, [r2, #80]	; 0x50
 80064c0:	e003      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80064ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80064d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064da:	2300      	movs	r3, #0
 80064dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80064e4:	460b      	mov	r3, r1
 80064e6:	4313      	orrs	r3, r2
 80064e8:	d056      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80064ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064f4:	d033      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80064f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064fa:	d82c      	bhi.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006500:	d02f      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006502:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006506:	d826      	bhi.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006508:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800650c:	d02b      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800650e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006512:	d820      	bhi.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006518:	d012      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800651a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800651e:	d81a      	bhi.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006520:	2b00      	cmp	r3, #0
 8006522:	d022      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006528:	d115      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800652a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800652e:	3308      	adds	r3, #8
 8006530:	2101      	movs	r1, #1
 8006532:	4618      	mov	r0, r3
 8006534:	f002 f8e0 	bl	80086f8 <RCCEx_PLL2_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800653e:	e015      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006544:	3328      	adds	r3, #40	; 0x28
 8006546:	2101      	movs	r1, #1
 8006548:	4618      	mov	r0, r3
 800654a:	f002 f987 	bl	800885c <RCCEx_PLL3_Config>
 800654e:	4603      	mov	r3, r0
 8006550:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006554:	e00a      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800655c:	e006      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800655e:	bf00      	nop
 8006560:	e004      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006562:	bf00      	nop
 8006564:	e002      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006566:	bf00      	nop
 8006568:	e000      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800656a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800656c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10d      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006574:	4b05      	ldr	r3, [pc, #20]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006578:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800657c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006582:	4a02      	ldr	r2, [pc, #8]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006584:	430b      	orrs	r3, r1
 8006586:	6513      	str	r3, [r2, #80]	; 0x50
 8006588:	e006      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800658a:	bf00      	nop
 800658c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006590:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006594:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80065a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065a8:	2300      	movs	r3, #0
 80065aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4313      	orrs	r3, r2
 80065b6:	d055      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80065b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065c4:	d033      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80065c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065ca:	d82c      	bhi.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d0:	d02f      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80065d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d6:	d826      	bhi.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065dc:	d02b      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80065de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065e2:	d820      	bhi.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e8:	d012      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80065ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ee:	d81a      	bhi.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d022      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80065f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065f8:	d115      	bne.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fe:	3308      	adds	r3, #8
 8006600:	2101      	movs	r1, #1
 8006602:	4618      	mov	r0, r3
 8006604:	f002 f878 	bl	80086f8 <RCCEx_PLL2_Config>
 8006608:	4603      	mov	r3, r0
 800660a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800660e:	e015      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006614:	3328      	adds	r3, #40	; 0x28
 8006616:	2101      	movs	r1, #1
 8006618:	4618      	mov	r0, r3
 800661a:	f002 f91f 	bl	800885c <RCCEx_PLL3_Config>
 800661e:	4603      	mov	r3, r0
 8006620:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006624:	e00a      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800662c:	e006      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800662e:	bf00      	nop
 8006630:	e004      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006632:	bf00      	nop
 8006634:	e002      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006636:	bf00      	nop
 8006638:	e000      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800663a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800663c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10b      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006644:	4ba3      	ldr	r3, [pc, #652]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006648:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800664c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006650:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006654:	4a9f      	ldr	r2, [pc, #636]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006656:	430b      	orrs	r3, r1
 8006658:	6593      	str	r3, [r2, #88]	; 0x58
 800665a:	e003      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006660:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006670:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006674:	2300      	movs	r3, #0
 8006676:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800667a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800667e:	460b      	mov	r3, r1
 8006680:	4313      	orrs	r3, r2
 8006682:	d037      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800668e:	d00e      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006694:	d816      	bhi.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006696:	2b00      	cmp	r3, #0
 8006698:	d018      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800669a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800669e:	d111      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a0:	4b8c      	ldr	r3, [pc, #560]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	4a8b      	ldr	r2, [pc, #556]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066ac:	e00f      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066b2:	3308      	adds	r3, #8
 80066b4:	2101      	movs	r1, #1
 80066b6:	4618      	mov	r0, r3
 80066b8:	f002 f81e 	bl	80086f8 <RCCEx_PLL2_Config>
 80066bc:	4603      	mov	r3, r0
 80066be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066c2:	e004      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066ca:	e000      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80066cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066d6:	4b7f      	ldr	r3, [pc, #508]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066da:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80066de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e4:	4a7b      	ldr	r2, [pc, #492]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066e6:	430b      	orrs	r3, r1
 80066e8:	6513      	str	r3, [r2, #80]	; 0x50
 80066ea:	e003      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80066f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006704:	2300      	movs	r3, #0
 8006706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800670a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800670e:	460b      	mov	r3, r1
 8006710:	4313      	orrs	r3, r2
 8006712:	d039      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800671a:	2b03      	cmp	r3, #3
 800671c:	d81c      	bhi.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800671e:	a201      	add	r2, pc, #4	; (adr r2, 8006724 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006724:	08006761 	.word	0x08006761
 8006728:	08006735 	.word	0x08006735
 800672c:	08006743 	.word	0x08006743
 8006730:	08006761 	.word	0x08006761
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006734:	4b67      	ldr	r3, [pc, #412]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	4a66      	ldr	r2, [pc, #408]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800673a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800673e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006740:	e00f      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006746:	3308      	adds	r3, #8
 8006748:	2102      	movs	r1, #2
 800674a:	4618      	mov	r0, r3
 800674c:	f001 ffd4 	bl	80086f8 <RCCEx_PLL2_Config>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006756:	e004      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800675e:	e000      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10a      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800676a:	4b5a      	ldr	r3, [pc, #360]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800676c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676e:	f023 0103 	bic.w	r1, r3, #3
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006778:	4a56      	ldr	r2, [pc, #344]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800677a:	430b      	orrs	r3, r1
 800677c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800677e:	e003      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006780:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006784:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006794:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006798:	2300      	movs	r3, #0
 800679a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800679e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80067a2:	460b      	mov	r3, r1
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f000 809f 	beq.w	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067aa:	4b4b      	ldr	r3, [pc, #300]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a4a      	ldr	r2, [pc, #296]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067b6:	f7fa fd07 	bl	80011c8 <HAL_GetTick>
 80067ba:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067be:	e00b      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c0:	f7fa fd02 	bl	80011c8 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b64      	cmp	r3, #100	; 0x64
 80067ce:	d903      	bls.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067d6:	e005      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067d8:	4b3f      	ldr	r3, [pc, #252]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0ed      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80067e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d179      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80067ec:	4b39      	ldr	r3, [pc, #228]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067f8:	4053      	eors	r3, r2
 80067fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d015      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006802:	4b34      	ldr	r3, [pc, #208]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800680a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800680e:	4b31      	ldr	r3, [pc, #196]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006812:	4a30      	ldr	r2, [pc, #192]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006818:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800681a:	4b2e      	ldr	r3, [pc, #184]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800681c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681e:	4a2d      	ldr	r2, [pc, #180]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006824:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006826:	4a2b      	ldr	r2, [pc, #172]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006828:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800682c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800682e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006832:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683a:	d118      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683c:	f7fa fcc4 	bl	80011c8 <HAL_GetTick>
 8006840:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006844:	e00d      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006846:	f7fa fcbf 	bl	80011c8 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006850:	1ad2      	subs	r2, r2, r3
 8006852:	f241 3388 	movw	r3, #5000	; 0x1388
 8006856:	429a      	cmp	r2, r3
 8006858:	d903      	bls.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006860:	e005      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006862:	4b1c      	ldr	r3, [pc, #112]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0eb      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800686e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006872:	2b00      	cmp	r3, #0
 8006874:	d129      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800687a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800687e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006886:	d10e      	bne.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006888:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006894:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006898:	091a      	lsrs	r2, r3, #4
 800689a:	4b10      	ldr	r3, [pc, #64]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800689c:	4013      	ands	r3, r2
 800689e:	4a0d      	ldr	r2, [pc, #52]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068a0:	430b      	orrs	r3, r1
 80068a2:	6113      	str	r3, [r2, #16]
 80068a4:	e005      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80068a6:	4b0b      	ldr	r3, [pc, #44]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	4a0a      	ldr	r2, [pc, #40]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80068b0:	6113      	str	r3, [r2, #16]
 80068b2:	4b08      	ldr	r3, [pc, #32]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80068b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80068be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068c2:	4a04      	ldr	r2, [pc, #16]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068c4:	430b      	orrs	r3, r1
 80068c6:	6713      	str	r3, [r2, #112]	; 0x70
 80068c8:	e00e      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80068d2:	e009      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80068d4:	58024400 	.word	0x58024400
 80068d8:	58024800 	.word	0x58024800
 80068dc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f002 0301 	and.w	r3, r2, #1
 80068f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068f8:	2300      	movs	r3, #0
 80068fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006902:	460b      	mov	r3, r1
 8006904:	4313      	orrs	r3, r2
 8006906:	f000 8089 	beq.w	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800690e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006910:	2b28      	cmp	r3, #40	; 0x28
 8006912:	d86b      	bhi.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006914:	a201      	add	r2, pc, #4	; (adr r2, 800691c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691a:	bf00      	nop
 800691c:	080069f5 	.word	0x080069f5
 8006920:	080069ed 	.word	0x080069ed
 8006924:	080069ed 	.word	0x080069ed
 8006928:	080069ed 	.word	0x080069ed
 800692c:	080069ed 	.word	0x080069ed
 8006930:	080069ed 	.word	0x080069ed
 8006934:	080069ed 	.word	0x080069ed
 8006938:	080069ed 	.word	0x080069ed
 800693c:	080069c1 	.word	0x080069c1
 8006940:	080069ed 	.word	0x080069ed
 8006944:	080069ed 	.word	0x080069ed
 8006948:	080069ed 	.word	0x080069ed
 800694c:	080069ed 	.word	0x080069ed
 8006950:	080069ed 	.word	0x080069ed
 8006954:	080069ed 	.word	0x080069ed
 8006958:	080069ed 	.word	0x080069ed
 800695c:	080069d7 	.word	0x080069d7
 8006960:	080069ed 	.word	0x080069ed
 8006964:	080069ed 	.word	0x080069ed
 8006968:	080069ed 	.word	0x080069ed
 800696c:	080069ed 	.word	0x080069ed
 8006970:	080069ed 	.word	0x080069ed
 8006974:	080069ed 	.word	0x080069ed
 8006978:	080069ed 	.word	0x080069ed
 800697c:	080069f5 	.word	0x080069f5
 8006980:	080069ed 	.word	0x080069ed
 8006984:	080069ed 	.word	0x080069ed
 8006988:	080069ed 	.word	0x080069ed
 800698c:	080069ed 	.word	0x080069ed
 8006990:	080069ed 	.word	0x080069ed
 8006994:	080069ed 	.word	0x080069ed
 8006998:	080069ed 	.word	0x080069ed
 800699c:	080069f5 	.word	0x080069f5
 80069a0:	080069ed 	.word	0x080069ed
 80069a4:	080069ed 	.word	0x080069ed
 80069a8:	080069ed 	.word	0x080069ed
 80069ac:	080069ed 	.word	0x080069ed
 80069b0:	080069ed 	.word	0x080069ed
 80069b4:	080069ed 	.word	0x080069ed
 80069b8:	080069ed 	.word	0x080069ed
 80069bc:	080069f5 	.word	0x080069f5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069c4:	3308      	adds	r3, #8
 80069c6:	2101      	movs	r1, #1
 80069c8:	4618      	mov	r0, r3
 80069ca:	f001 fe95 	bl	80086f8 <RCCEx_PLL2_Config>
 80069ce:	4603      	mov	r3, r0
 80069d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069d4:	e00f      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069da:	3328      	adds	r3, #40	; 0x28
 80069dc:	2101      	movs	r1, #1
 80069de:	4618      	mov	r0, r3
 80069e0:	f001 ff3c 	bl	800885c <RCCEx_PLL3_Config>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069ea:	e004      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069f2:	e000      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80069f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80069fe:	4bbf      	ldr	r3, [pc, #764]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a02:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a0c:	4abb      	ldr	r2, [pc, #748]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a0e:	430b      	orrs	r3, r1
 8006a10:	6553      	str	r3, [r2, #84]	; 0x54
 8006a12:	e003      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	f002 0302 	and.w	r3, r2, #2
 8006a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006a36:	460b      	mov	r3, r1
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	d041      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a42:	2b05      	cmp	r3, #5
 8006a44:	d824      	bhi.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006a46:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4c:	08006a99 	.word	0x08006a99
 8006a50:	08006a65 	.word	0x08006a65
 8006a54:	08006a7b 	.word	0x08006a7b
 8006a58:	08006a99 	.word	0x08006a99
 8006a5c:	08006a99 	.word	0x08006a99
 8006a60:	08006a99 	.word	0x08006a99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a68:	3308      	adds	r3, #8
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f001 fe43 	bl	80086f8 <RCCEx_PLL2_Config>
 8006a72:	4603      	mov	r3, r0
 8006a74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a78:	e00f      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a7e:	3328      	adds	r3, #40	; 0x28
 8006a80:	2101      	movs	r1, #1
 8006a82:	4618      	mov	r0, r3
 8006a84:	f001 feea 	bl	800885c <RCCEx_PLL3_Config>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a8e:	e004      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a96:	e000      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006aa2:	4b96      	ldr	r3, [pc, #600]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa6:	f023 0107 	bic.w	r1, r3, #7
 8006aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ab0:	4a92      	ldr	r2, [pc, #584]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ab2:	430b      	orrs	r3, r1
 8006ab4:	6553      	str	r3, [r2, #84]	; 0x54
 8006ab6:	e003      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006abc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac8:	f002 0304 	and.w	r3, r2, #4
 8006acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ad6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4313      	orrs	r3, r2
 8006ade:	d044      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ae8:	2b05      	cmp	r3, #5
 8006aea:	d825      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b41 	.word	0x08006b41
 8006af8:	08006b0d 	.word	0x08006b0d
 8006afc:	08006b23 	.word	0x08006b23
 8006b00:	08006b41 	.word	0x08006b41
 8006b04:	08006b41 	.word	0x08006b41
 8006b08:	08006b41 	.word	0x08006b41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b10:	3308      	adds	r3, #8
 8006b12:	2101      	movs	r1, #1
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 fdef 	bl	80086f8 <RCCEx_PLL2_Config>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b20:	e00f      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b26:	3328      	adds	r3, #40	; 0x28
 8006b28:	2101      	movs	r1, #1
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 fe96 	bl	800885c <RCCEx_PLL3_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b36:	e004      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b3e:	e000      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b4a:	4b6c      	ldr	r3, [pc, #432]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4e:	f023 0107 	bic.w	r1, r3, #7
 8006b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b5a:	4a68      	ldr	r2, [pc, #416]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b5c:	430b      	orrs	r3, r1
 8006b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8006b60:	e003      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	f002 0320 	and.w	r3, r2, #32
 8006b76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b84:	460b      	mov	r3, r1
 8006b86:	4313      	orrs	r3, r2
 8006b88:	d055      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b96:	d033      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b9c:	d82c      	bhi.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba2:	d02f      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba8:	d826      	bhi.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006baa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bae:	d02b      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006bb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bb4:	d820      	bhi.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bba:	d012      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bc0:	d81a      	bhi.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d022      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006bc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bca:	d115      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 fd8f 	bl	80086f8 <RCCEx_PLL2_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006be0:	e015      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be6:	3328      	adds	r3, #40	; 0x28
 8006be8:	2102      	movs	r1, #2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 fe36 	bl	800885c <RCCEx_PLL3_Config>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006bf6:	e00a      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bfe:	e006      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c00:	bf00      	nop
 8006c02:	e004      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c04:	bf00      	nop
 8006c06:	e002      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c08:	bf00      	nop
 8006c0a:	e000      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10b      	bne.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c16:	4b39      	ldr	r3, [pc, #228]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c26:	4a35      	ldr	r2, [pc, #212]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	6553      	str	r3, [r2, #84]	; 0x54
 8006c2c:	e003      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c46:	2300      	movs	r3, #0
 8006c48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4313      	orrs	r3, r2
 8006c54:	d058      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c62:	d033      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006c64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c68:	d82c      	bhi.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c6e:	d02f      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c74:	d826      	bhi.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c7a:	d02b      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c80:	d820      	bhi.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c86:	d012      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c8c:	d81a      	bhi.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d022      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c96:	d115      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f001 fd29 	bl	80086f8 <RCCEx_PLL2_Config>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cac:	e015      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb2:	3328      	adds	r3, #40	; 0x28
 8006cb4:	2102      	movs	r1, #2
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f001 fdd0 	bl	800885c <RCCEx_PLL3_Config>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cc2:	e00a      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006cca:	e006      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ccc:	bf00      	nop
 8006cce:	e004      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cd0:	bf00      	nop
 8006cd2:	e002      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cd4:	bf00      	nop
 8006cd6:	e000      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10e      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ce2:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cf2:	4a02      	ldr	r2, [pc, #8]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cf4:	430b      	orrs	r3, r1
 8006cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8006cf8:	e006      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006cfa:	bf00      	nop
 8006cfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006d22:	460b      	mov	r3, r1
 8006d24:	4313      	orrs	r3, r2
 8006d26:	d055      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d30:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d34:	d033      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006d36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d3a:	d82c      	bhi.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d40:	d02f      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d46:	d826      	bhi.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d48:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d4c:	d02b      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006d4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d52:	d820      	bhi.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d58:	d012      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d5e:	d81a      	bhi.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d022      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d68:	d115      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d6e:	3308      	adds	r3, #8
 8006d70:	2100      	movs	r1, #0
 8006d72:	4618      	mov	r0, r3
 8006d74:	f001 fcc0 	bl	80086f8 <RCCEx_PLL2_Config>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d7e:	e015      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d84:	3328      	adds	r3, #40	; 0x28
 8006d86:	2102      	movs	r1, #2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f001 fd67 	bl	800885c <RCCEx_PLL3_Config>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d94:	e00a      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d9c:	e006      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006d9e:	bf00      	nop
 8006da0:	e004      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006da2:	bf00      	nop
 8006da4:	e002      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006da6:	bf00      	nop
 8006da8:	e000      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10b      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006db4:	4ba1      	ldr	r3, [pc, #644]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dc4:	4a9d      	ldr	r2, [pc, #628]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dc6:	430b      	orrs	r3, r1
 8006dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8006dca:	e003      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	f002 0308 	and.w	r3, r2, #8
 8006de0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006de4:	2300      	movs	r3, #0
 8006de6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006dee:	460b      	mov	r3, r1
 8006df0:	4313      	orrs	r3, r2
 8006df2:	d01e      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e00:	d10c      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e06:	3328      	adds	r3, #40	; 0x28
 8006e08:	2102      	movs	r1, #2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f001 fd26 	bl	800885c <RCCEx_PLL3_Config>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e1c:	4b87      	ldr	r3, [pc, #540]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e2c:	4a83      	ldr	r2, [pc, #524]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3a:	f002 0310 	and.w	r3, r2, #16
 8006e3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e42:	2300      	movs	r3, #0
 8006e44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006e48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	d01e      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e5e:	d10c      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e64:	3328      	adds	r3, #40	; 0x28
 8006e66:	2102      	movs	r1, #2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f001 fcf7 	bl	800885c <RCCEx_PLL3_Config>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e7a:	4b70      	ldr	r3, [pc, #448]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e8a:	4a6c      	ldr	r2, [pc, #432]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ea6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4313      	orrs	r3, r2
 8006eae:	d03e      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ebc:	d022      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ec2:	d81b      	bhi.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ecc:	d00b      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006ece:	e015      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f001 fc0d 	bl	80086f8 <RCCEx_PLL2_Config>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ee4:	e00f      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eea:	3328      	adds	r3, #40	; 0x28
 8006eec:	2102      	movs	r1, #2
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f001 fcb4 	bl	800885c <RCCEx_PLL3_Config>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006efa:	e004      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f02:	e000      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10b      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f0e:	4b4b      	ldr	r3, [pc, #300]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f12:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f1e:	4a47      	ldr	r2, [pc, #284]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f20:	430b      	orrs	r3, r1
 8006f22:	6593      	str	r3, [r2, #88]	; 0x58
 8006f24:	e003      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006f3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006f44:	460b      	mov	r3, r1
 8006f46:	4313      	orrs	r3, r2
 8006f48:	d03b      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f56:	d01f      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006f58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f5c:	d818      	bhi.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f62:	d003      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006f64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f68:	d007      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006f6a:	e011      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6c:	4b33      	ldr	r3, [pc, #204]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	4a32      	ldr	r2, [pc, #200]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f78:	e00f      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f7e:	3328      	adds	r3, #40	; 0x28
 8006f80:	2101      	movs	r1, #1
 8006f82:	4618      	mov	r0, r3
 8006f84:	f001 fc6a 	bl	800885c <RCCEx_PLL3_Config>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f8e:	e004      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f96:	e000      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10b      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fa2:	4b26      	ldr	r3, [pc, #152]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb2:	4a22      	ldr	r2, [pc, #136]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fb4:	430b      	orrs	r3, r1
 8006fb6:	6553      	str	r3, [r2, #84]	; 0x54
 8006fb8:	e003      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006fce:	673b      	str	r3, [r7, #112]	; 0x70
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	677b      	str	r3, [r7, #116]	; 0x74
 8006fd4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	d034      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fec:	d007      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006fee:	e011      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ff0:	4b12      	ldr	r3, [pc, #72]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff4:	4a11      	ldr	r2, [pc, #68]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ffc:	e00e      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007002:	3308      	adds	r3, #8
 8007004:	2102      	movs	r1, #2
 8007006:	4618      	mov	r0, r3
 8007008:	f001 fb76 	bl	80086f8 <RCCEx_PLL2_Config>
 800700c:	4603      	mov	r3, r0
 800700e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007012:	e003      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800701a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800701c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10d      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007024:	4b05      	ldr	r3, [pc, #20]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007028:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800702c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007032:	4a02      	ldr	r2, [pc, #8]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007034:	430b      	orrs	r3, r1
 8007036:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007038:	e006      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800703a:	bf00      	nop
 800703c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007040:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007044:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007054:	66bb      	str	r3, [r7, #104]	; 0x68
 8007056:	2300      	movs	r3, #0
 8007058:	66fb      	str	r3, [r7, #108]	; 0x6c
 800705a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800705e:	460b      	mov	r3, r1
 8007060:	4313      	orrs	r3, r2
 8007062:	d00c      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007068:	3328      	adds	r3, #40	; 0x28
 800706a:	2102      	movs	r1, #2
 800706c:	4618      	mov	r0, r3
 800706e:	f001 fbf5 	bl	800885c <RCCEx_PLL3_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800707e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007086:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800708a:	663b      	str	r3, [r7, #96]	; 0x60
 800708c:	2300      	movs	r3, #0
 800708e:	667b      	str	r3, [r7, #100]	; 0x64
 8007090:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007094:	460b      	mov	r3, r1
 8007096:	4313      	orrs	r3, r2
 8007098:	d038      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800709a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800709e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070a6:	d018      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80070a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070ac:	d811      	bhi.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80070ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070b2:	d014      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80070b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070b8:	d80b      	bhi.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d011      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80070be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c2:	d106      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c4:	4bc3      	ldr	r3, [pc, #780]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	4ac2      	ldr	r2, [pc, #776]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80070d0:	e008      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070d8:	e004      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070da:	bf00      	nop
 80070dc:	e002      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070de:	bf00      	nop
 80070e0:	e000      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10b      	bne.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070ec:	4bb9      	ldr	r3, [pc, #740]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80070f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070fc:	4ab5      	ldr	r2, [pc, #724]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070fe:	430b      	orrs	r3, r1
 8007100:	6553      	str	r3, [r2, #84]	; 0x54
 8007102:	e003      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007108:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800710c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007114:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007118:	65bb      	str	r3, [r7, #88]	; 0x58
 800711a:	2300      	movs	r3, #0
 800711c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800711e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007122:	460b      	mov	r3, r1
 8007124:	4313      	orrs	r3, r2
 8007126:	d009      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007128:	4baa      	ldr	r3, [pc, #680]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800712a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007136:	4aa7      	ldr	r2, [pc, #668]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007138:	430b      	orrs	r3, r1
 800713a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800713c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007148:	653b      	str	r3, [r7, #80]	; 0x50
 800714a:	2300      	movs	r3, #0
 800714c:	657b      	str	r3, [r7, #84]	; 0x54
 800714e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007152:	460b      	mov	r3, r1
 8007154:	4313      	orrs	r3, r2
 8007156:	d00a      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007158:	4b9e      	ldr	r3, [pc, #632]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007164:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007168:	4a9a      	ldr	r2, [pc, #616]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800716a:	430b      	orrs	r3, r1
 800716c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800716e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800717a:	64bb      	str	r3, [r7, #72]	; 0x48
 800717c:	2300      	movs	r3, #0
 800717e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007180:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007184:	460b      	mov	r3, r1
 8007186:	4313      	orrs	r3, r2
 8007188:	d009      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800718a:	4b92      	ldr	r3, [pc, #584]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800718c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007198:	4a8e      	ldr	r2, [pc, #568]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800719a:	430b      	orrs	r3, r1
 800719c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800719e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80071aa:	643b      	str	r3, [r7, #64]	; 0x40
 80071ac:	2300      	movs	r3, #0
 80071ae:	647b      	str	r3, [r7, #68]	; 0x44
 80071b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80071b4:	460b      	mov	r3, r1
 80071b6:	4313      	orrs	r3, r2
 80071b8:	d00e      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071ba:	4b86      	ldr	r3, [pc, #536]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	4a85      	ldr	r2, [pc, #532]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071c4:	6113      	str	r3, [r2, #16]
 80071c6:	4b83      	ldr	r3, [pc, #524]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071c8:	6919      	ldr	r1, [r3, #16]
 80071ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80071d2:	4a80      	ldr	r2, [pc, #512]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071d4:	430b      	orrs	r3, r1
 80071d6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80071e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80071e6:	2300      	movs	r3, #0
 80071e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80071ee:	460b      	mov	r3, r1
 80071f0:	4313      	orrs	r3, r2
 80071f2:	d009      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80071f4:	4b77      	ldr	r3, [pc, #476]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80071fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007202:	4a74      	ldr	r2, [pc, #464]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007204:	430b      	orrs	r3, r1
 8007206:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007210:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007214:	633b      	str	r3, [r7, #48]	; 0x30
 8007216:	2300      	movs	r3, #0
 8007218:	637b      	str	r3, [r7, #52]	; 0x34
 800721a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800721e:	460b      	mov	r3, r1
 8007220:	4313      	orrs	r3, r2
 8007222:	d00a      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007224:	4b6b      	ldr	r3, [pc, #428]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007228:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800722c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007234:	4a67      	ldr	r2, [pc, #412]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007236:	430b      	orrs	r3, r1
 8007238:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800723a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	2100      	movs	r1, #0
 8007244:	62b9      	str	r1, [r7, #40]	; 0x28
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800724c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007250:	460b      	mov	r3, r1
 8007252:	4313      	orrs	r3, r2
 8007254:	d011      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800725a:	3308      	adds	r3, #8
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f001 fa4a 	bl	80086f8 <RCCEx_PLL2_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800726a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007272:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007276:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800727a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800727e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007282:	2100      	movs	r1, #0
 8007284:	6239      	str	r1, [r7, #32]
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	627b      	str	r3, [r7, #36]	; 0x24
 800728c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007290:	460b      	mov	r3, r1
 8007292:	4313      	orrs	r3, r2
 8007294:	d011      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800729a:	3308      	adds	r3, #8
 800729c:	2101      	movs	r1, #1
 800729e:	4618      	mov	r0, r3
 80072a0:	f001 fa2a 	bl	80086f8 <RCCEx_PLL2_Config>
 80072a4:	4603      	mov	r3, r0
 80072a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80072aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	2100      	movs	r1, #0
 80072c4:	61b9      	str	r1, [r7, #24]
 80072c6:	f003 0304 	and.w	r3, r3, #4
 80072ca:	61fb      	str	r3, [r7, #28]
 80072cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80072d0:	460b      	mov	r3, r1
 80072d2:	4313      	orrs	r3, r2
 80072d4:	d011      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072da:	3308      	adds	r3, #8
 80072dc:	2102      	movs	r1, #2
 80072de:	4618      	mov	r0, r3
 80072e0:	f001 fa0a 	bl	80086f8 <RCCEx_PLL2_Config>
 80072e4:	4603      	mov	r3, r0
 80072e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80072ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80072fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007302:	2100      	movs	r1, #0
 8007304:	6139      	str	r1, [r7, #16]
 8007306:	f003 0308 	and.w	r3, r3, #8
 800730a:	617b      	str	r3, [r7, #20]
 800730c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007310:	460b      	mov	r3, r1
 8007312:	4313      	orrs	r3, r2
 8007314:	d011      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800731a:	3328      	adds	r3, #40	; 0x28
 800731c:	2100      	movs	r1, #0
 800731e:	4618      	mov	r0, r3
 8007320:	f001 fa9c 	bl	800885c <RCCEx_PLL3_Config>
 8007324:	4603      	mov	r3, r0
 8007326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800732a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007336:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800733a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	2100      	movs	r1, #0
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	f003 0310 	and.w	r3, r3, #16
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007350:	460b      	mov	r3, r1
 8007352:	4313      	orrs	r3, r2
 8007354:	d011      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800735a:	3328      	adds	r3, #40	; 0x28
 800735c:	2101      	movs	r1, #1
 800735e:	4618      	mov	r0, r3
 8007360:	f001 fa7c 	bl	800885c <RCCEx_PLL3_Config>
 8007364:	4603      	mov	r3, r0
 8007366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800736a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007376:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800737a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	2100      	movs	r1, #0
 8007384:	6039      	str	r1, [r7, #0]
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	607b      	str	r3, [r7, #4]
 800738c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007390:	460b      	mov	r3, r1
 8007392:	4313      	orrs	r3, r2
 8007394:	d011      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800739a:	3328      	adds	r3, #40	; 0x28
 800739c:	2102      	movs	r1, #2
 800739e:	4618      	mov	r0, r3
 80073a0:	f001 fa5c 	bl	800885c <RCCEx_PLL3_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80073aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80073ba:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	e000      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80073ce:	46bd      	mov	sp, r7
 80073d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073d4:	58024400 	.word	0x58024400

080073d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b090      	sub	sp, #64	; 0x40
 80073dc:	af00      	add	r7, sp, #0
 80073de:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80073e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073e6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80073ea:	430b      	orrs	r3, r1
 80073ec:	f040 8094 	bne.w	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80073f0:	4b9e      	ldr	r3, [pc, #632]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f4:	f003 0307 	and.w	r3, r3, #7
 80073f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	2b04      	cmp	r3, #4
 80073fe:	f200 8087 	bhi.w	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	0800741d 	.word	0x0800741d
 800740c:	08007445 	.word	0x08007445
 8007410:	0800746d 	.word	0x0800746d
 8007414:	08007509 	.word	0x08007509
 8007418:	08007495 	.word	0x08007495
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800741c:	4b93      	ldr	r3, [pc, #588]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007428:	d108      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800742a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800742e:	4618      	mov	r0, r3
 8007430:	f001 f810 	bl	8008454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007438:	f000 bd45 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800743c:	2300      	movs	r3, #0
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007440:	f000 bd41 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007444:	4b89      	ldr	r3, [pc, #548]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800744c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007450:	d108      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007452:	f107 0318 	add.w	r3, r7, #24
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fd54 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007460:	f000 bd31 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007464:	2300      	movs	r3, #0
 8007466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007468:	f000 bd2d 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800746c:	4b7f      	ldr	r3, [pc, #508]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007478:	d108      	bne.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800747a:	f107 030c 	add.w	r3, r7, #12
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fe94 	bl	80081ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007488:	f000 bd1d 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007490:	f000 bd19 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007494:	4b75      	ldr	r3, [pc, #468]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007498:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800749c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800749e:	4b73      	ldr	r3, [pc, #460]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0304 	and.w	r3, r3, #4
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	d10c      	bne.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80074aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d109      	bne.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074b0:	4b6e      	ldr	r3, [pc, #440]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	08db      	lsrs	r3, r3, #3
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	4a6d      	ldr	r2, [pc, #436]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80074bc:	fa22 f303 	lsr.w	r3, r2, r3
 80074c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074c2:	e01f      	b.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074c4:	4b69      	ldr	r3, [pc, #420]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d0:	d106      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80074d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074d8:	d102      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80074da:	4b66      	ldr	r3, [pc, #408]	; (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80074dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074de:	e011      	b.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074e0:	4b62      	ldr	r3, [pc, #392]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074ec:	d106      	bne.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80074ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074f4:	d102      	bne.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80074f6:	4b60      	ldr	r3, [pc, #384]	; (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80074f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074fa:	e003      	b.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80074fc:	2300      	movs	r3, #0
 80074fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007500:	f000 bce1 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007504:	f000 bcdf 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007508:	4b5c      	ldr	r3, [pc, #368]	; (800767c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800750a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800750c:	f000 bcdb 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007514:	f000 bcd7 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800751c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007520:	430b      	orrs	r3, r1
 8007522:	f040 80ad 	bne.w	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007526:	4b51      	ldr	r3, [pc, #324]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800752e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007536:	d056      	beq.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800753e:	f200 8090 	bhi.w	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	2bc0      	cmp	r3, #192	; 0xc0
 8007546:	f000 8088 	beq.w	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	2bc0      	cmp	r3, #192	; 0xc0
 800754e:	f200 8088 	bhi.w	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	2b80      	cmp	r3, #128	; 0x80
 8007556:	d032      	beq.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755a:	2b80      	cmp	r3, #128	; 0x80
 800755c:	f200 8081 	bhi.w	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	2b40      	cmp	r3, #64	; 0x40
 800756a:	d014      	beq.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800756c:	e079      	b.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800756e:	4b3f      	ldr	r3, [pc, #252]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007576:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800757a:	d108      	bne.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800757c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007580:	4618      	mov	r0, r3
 8007582:	f000 ff67 	bl	8008454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007588:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800758a:	f000 bc9c 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800758e:	2300      	movs	r3, #0
 8007590:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007592:	f000 bc98 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007596:	4b35      	ldr	r3, [pc, #212]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800759e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075a2:	d108      	bne.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075a4:	f107 0318 	add.w	r3, r7, #24
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fcab 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075b2:	f000 bc88 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075ba:	f000 bc84 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075be:	4b2b      	ldr	r3, [pc, #172]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ca:	d108      	bne.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075cc:	f107 030c 	add.w	r3, r7, #12
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fdeb 	bl	80081ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075da:	f000 bc74 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075e2:	f000 bc70 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075e6:	4b21      	ldr	r3, [pc, #132]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075f0:	4b1e      	ldr	r3, [pc, #120]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d10c      	bne.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80075fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d109      	bne.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007602:	4b1a      	ldr	r3, [pc, #104]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	08db      	lsrs	r3, r3, #3
 8007608:	f003 0303 	and.w	r3, r3, #3
 800760c:	4a18      	ldr	r2, [pc, #96]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800760e:	fa22 f303 	lsr.w	r3, r2, r3
 8007612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007614:	e01f      	b.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007616:	4b15      	ldr	r3, [pc, #84]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007622:	d106      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800762a:	d102      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800762c:	4b11      	ldr	r3, [pc, #68]	; (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800762e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007630:	e011      	b.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007632:	4b0e      	ldr	r3, [pc, #56]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800763e:	d106      	bne.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007646:	d102      	bne.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007648:	4b0b      	ldr	r3, [pc, #44]	; (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800764a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800764c:	e003      	b.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007652:	f000 bc38 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007656:	f000 bc36 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800765a:	4b08      	ldr	r3, [pc, #32]	; (800767c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800765c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800765e:	f000 bc32 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007662:	2300      	movs	r3, #0
 8007664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007666:	f000 bc2e 	b.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800766a:	bf00      	nop
 800766c:	58024400 	.word	0x58024400
 8007670:	03d09000 	.word	0x03d09000
 8007674:	003d0900 	.word	0x003d0900
 8007678:	007a1200 	.word	0x007a1200
 800767c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007684:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007688:	430b      	orrs	r3, r1
 800768a:	f040 809c 	bne.w	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800768e:	4b9e      	ldr	r3, [pc, #632]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007692:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007696:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800769e:	d054      	beq.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076a6:	f200 808b 	bhi.w	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076b0:	f000 8083 	beq.w	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076ba:	f200 8081 	bhi.w	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076c4:	d02f      	beq.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076cc:	d878      	bhi.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d004      	beq.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076da:	d012      	beq.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80076dc:	e070      	b.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076de:	4b8a      	ldr	r3, [pc, #552]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076ea:	d107      	bne.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 feaf 	bl	8008454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076fa:	e3e4      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007700:	e3e1      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007702:	4b81      	ldr	r3, [pc, #516]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800770a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800770e:	d107      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007710:	f107 0318 	add.w	r3, r7, #24
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fbf5 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800771e:	e3d2      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007724:	e3cf      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007726:	4b78      	ldr	r3, [pc, #480]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800772e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007732:	d107      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007734:	f107 030c 	add.w	r3, r7, #12
 8007738:	4618      	mov	r0, r3
 800773a:	f000 fd37 	bl	80081ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007742:	e3c0      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007748:	e3bd      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800774a:	4b6f      	ldr	r3, [pc, #444]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800774c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800774e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007752:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007754:	4b6c      	ldr	r3, [pc, #432]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b04      	cmp	r3, #4
 800775e:	d10c      	bne.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007762:	2b00      	cmp	r3, #0
 8007764:	d109      	bne.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007766:	4b68      	ldr	r3, [pc, #416]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	08db      	lsrs	r3, r3, #3
 800776c:	f003 0303 	and.w	r3, r3, #3
 8007770:	4a66      	ldr	r2, [pc, #408]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007772:	fa22 f303 	lsr.w	r3, r2, r3
 8007776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007778:	e01e      	b.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800777a:	4b63      	ldr	r3, [pc, #396]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007786:	d106      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800778e:	d102      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007790:	4b5f      	ldr	r3, [pc, #380]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007794:	e010      	b.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007796:	4b5c      	ldr	r3, [pc, #368]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077a2:	d106      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80077a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077aa:	d102      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077ac:	4b59      	ldr	r3, [pc, #356]	; (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80077ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077b0:	e002      	b.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80077b6:	e386      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077b8:	e385      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077ba:	4b57      	ldr	r3, [pc, #348]	; (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80077bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077be:	e382      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80077c0:	2300      	movs	r3, #0
 80077c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077c4:	e37f      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80077c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ca:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80077ce:	430b      	orrs	r3, r1
 80077d0:	f040 80a7 	bne.w	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80077d4:	4b4c      	ldr	r3, [pc, #304]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80077dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077e4:	d055      	beq.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077ec:	f200 8096 	bhi.w	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80077f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077f6:	f000 8084 	beq.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007800:	f200 808c 	bhi.w	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007806:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800780a:	d030      	beq.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007812:	f200 8083 	bhi.w	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007818:	2b00      	cmp	r3, #0
 800781a:	d004      	beq.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007822:	d012      	beq.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007824:	e07a      	b.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007826:	4b38      	ldr	r3, [pc, #224]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800782e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007832:	d107      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007838:	4618      	mov	r0, r3
 800783a:	f000 fe0b 	bl	8008454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007842:	e340      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007848:	e33d      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800784a:	4b2f      	ldr	r3, [pc, #188]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007852:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007856:	d107      	bne.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007858:	f107 0318 	add.w	r3, r7, #24
 800785c:	4618      	mov	r0, r3
 800785e:	f000 fb51 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007866:	e32e      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800786c:	e32b      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800786e:	4b26      	ldr	r3, [pc, #152]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800787a:	d107      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800787c:	f107 030c 	add.w	r3, r7, #12
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fc93 	bl	80081ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800788a:	e31c      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800788c:	2300      	movs	r3, #0
 800788e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007890:	e319      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007892:	4b1d      	ldr	r3, [pc, #116]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007896:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800789a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800789c:	4b1a      	ldr	r3, [pc, #104]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d10c      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80078a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d109      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078ae:	4b16      	ldr	r3, [pc, #88]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	08db      	lsrs	r3, r3, #3
 80078b4:	f003 0303 	and.w	r3, r3, #3
 80078b8:	4a14      	ldr	r2, [pc, #80]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80078ba:	fa22 f303 	lsr.w	r3, r2, r3
 80078be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078c0:	e01e      	b.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078c2:	4b11      	ldr	r3, [pc, #68]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ce:	d106      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80078d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078d6:	d102      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078d8:	4b0d      	ldr	r3, [pc, #52]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80078da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078dc:	e010      	b.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078de:	4b0a      	ldr	r3, [pc, #40]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078ea:	d106      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80078ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078f2:	d102      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078f4:	4b07      	ldr	r3, [pc, #28]	; (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80078f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078f8:	e002      	b.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80078fe:	e2e2      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007900:	e2e1      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007902:	4b05      	ldr	r3, [pc, #20]	; (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007904:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007906:	e2de      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007908:	58024400 	.word	0x58024400
 800790c:	03d09000 	.word	0x03d09000
 8007910:	003d0900 	.word	0x003d0900
 8007914:	007a1200 	.word	0x007a1200
 8007918:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800791c:	2300      	movs	r3, #0
 800791e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007920:	e2d1      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007922:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007926:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800792a:	430b      	orrs	r3, r1
 800792c:	f040 809c 	bne.w	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007930:	4b93      	ldr	r3, [pc, #588]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007934:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007938:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007940:	d054      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007948:	f200 808b 	bhi.w	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800794c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007952:	f000 8083 	beq.w	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007958:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800795c:	f200 8081 	bhi.w	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007966:	d02f      	beq.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800796e:	d878      	bhi.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	2b00      	cmp	r3, #0
 8007974:	d004      	beq.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800797c:	d012      	beq.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800797e:	e070      	b.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007980:	4b7f      	ldr	r3, [pc, #508]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007988:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800798c:	d107      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800798e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007992:	4618      	mov	r0, r3
 8007994:	f000 fd5e 	bl	8008454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800799c:	e293      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800799e:	2300      	movs	r3, #0
 80079a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079a2:	e290      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079a4:	4b76      	ldr	r3, [pc, #472]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079b0:	d107      	bne.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079b2:	f107 0318 	add.w	r3, r7, #24
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 faa4 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079c0:	e281      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079c6:	e27e      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079c8:	4b6d      	ldr	r3, [pc, #436]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079d4:	d107      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079d6:	f107 030c 	add.w	r3, r7, #12
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 fbe6 	bl	80081ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079e4:	e26f      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079ea:	e26c      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079ec:	4b64      	ldr	r3, [pc, #400]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079f4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079f6:	4b62      	ldr	r3, [pc, #392]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0304 	and.w	r3, r3, #4
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d10c      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d109      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a08:	4b5d      	ldr	r3, [pc, #372]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	08db      	lsrs	r3, r3, #3
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	4a5c      	ldr	r2, [pc, #368]	; (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007a14:	fa22 f303 	lsr.w	r3, r2, r3
 8007a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a1a:	e01e      	b.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a1c:	4b58      	ldr	r3, [pc, #352]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a28:	d106      	bne.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a30:	d102      	bne.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a32:	4b55      	ldr	r3, [pc, #340]	; (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a36:	e010      	b.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a38:	4b51      	ldr	r3, [pc, #324]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a44:	d106      	bne.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a4c:	d102      	bne.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a4e:	4b4f      	ldr	r3, [pc, #316]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a52:	e002      	b.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a54:	2300      	movs	r3, #0
 8007a56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007a58:	e235      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a5a:	e234      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a5c:	4b4c      	ldr	r3, [pc, #304]	; (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a60:	e231      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007a62:	2300      	movs	r3, #0
 8007a64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a66:	e22e      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a6c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007a70:	430b      	orrs	r3, r1
 8007a72:	f040 808f 	bne.w	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007a76:	4b42      	ldr	r3, [pc, #264]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007a7e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a86:	d06b      	beq.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a8e:	d874      	bhi.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a96:	d056      	beq.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a9e:	d86c      	bhi.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007aa6:	d03b      	beq.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aaa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007aae:	d864      	bhi.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ab6:	d021      	beq.n	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007abe:	d85c      	bhi.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d004      	beq.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007acc:	d004      	beq.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007ace:	e054      	b.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007ad0:	f7fe fa20 	bl	8005f14 <HAL_RCC_GetPCLK1Freq>
 8007ad4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ad6:	e1f6      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ad8:	4b29      	ldr	r3, [pc, #164]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ae0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ae4:	d107      	bne.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ae6:	f107 0318 	add.w	r3, r7, #24
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fa0a 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007af4:	e1e7      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007afa:	e1e4      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007afc:	4b20      	ldr	r3, [pc, #128]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b08:	d107      	bne.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b0a:	f107 030c 	add.w	r3, r7, #12
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fb4c 	bl	80081ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b18:	e1d5      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b1e:	e1d2      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b20:	4b17      	ldr	r3, [pc, #92]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d109      	bne.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b2c:	4b14      	ldr	r3, [pc, #80]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	08db      	lsrs	r3, r3, #3
 8007b32:	f003 0303 	and.w	r3, r3, #3
 8007b36:	4a13      	ldr	r2, [pc, #76]	; (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b38:	fa22 f303 	lsr.w	r3, r2, r3
 8007b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b3e:	e1c2      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b40:	2300      	movs	r3, #0
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b44:	e1bf      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007b46:	4b0e      	ldr	r3, [pc, #56]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b52:	d102      	bne.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007b54:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b58:	e1b5      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b5e:	e1b2      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007b60:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b6c:	d102      	bne.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007b6e:	4b07      	ldr	r3, [pc, #28]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007b70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b72:	e1a8      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b78:	e1a5      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b7e:	e1a2      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b80:	58024400 	.word	0x58024400
 8007b84:	03d09000 	.word	0x03d09000
 8007b88:	003d0900 	.word	0x003d0900
 8007b8c:	007a1200 	.word	0x007a1200
 8007b90:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b98:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	d173      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007ba0:	4b9c      	ldr	r3, [pc, #624]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ba8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bb0:	d02f      	beq.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bb8:	d863      	bhi.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d004      	beq.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bc6:	d012      	beq.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007bc8:	e05b      	b.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bca:	4b92      	ldr	r3, [pc, #584]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bd6:	d107      	bne.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bd8:	f107 0318 	add.w	r3, r7, #24
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 f991 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007be6:	e16e      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007be8:	2300      	movs	r3, #0
 8007bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bec:	e16b      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bee:	4b89      	ldr	r3, [pc, #548]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bfa:	d107      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bfc:	f107 030c 	add.w	r3, r7, #12
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 fad3 	bl	80081ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c0a:	e15c      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c10:	e159      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c12:	4b80      	ldr	r3, [pc, #512]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c1a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c1c:	4b7d      	ldr	r3, [pc, #500]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	d10c      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d109      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c2e:	4b79      	ldr	r3, [pc, #484]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	08db      	lsrs	r3, r3, #3
 8007c34:	f003 0303 	and.w	r3, r3, #3
 8007c38:	4a77      	ldr	r2, [pc, #476]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c40:	e01e      	b.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c42:	4b74      	ldr	r3, [pc, #464]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4e:	d106      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c56:	d102      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c58:	4b70      	ldr	r3, [pc, #448]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c5c:	e010      	b.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c5e:	4b6d      	ldr	r3, [pc, #436]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c6a:	d106      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c72:	d102      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c74:	4b6a      	ldr	r3, [pc, #424]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c78:	e002      	b.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007c7e:	e122      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c80:	e121      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c86:	e11e      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c8c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007c90:	430b      	orrs	r3, r1
 8007c92:	d133      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007c94:	4b5f      	ldr	r3, [pc, #380]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c9c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d004      	beq.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007caa:	d012      	beq.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007cac:	e023      	b.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cae:	4b59      	ldr	r3, [pc, #356]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cba:	d107      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 fbc7 	bl	8008454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cca:	e0fc      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd0:	e0f9      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cd2:	4b50      	ldr	r3, [pc, #320]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cde:	d107      	bne.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ce0:	f107 0318 	add.w	r3, r7, #24
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 f90d 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cee:	e0ea      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cf4:	e0e7      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cfa:	e0e4      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d00:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007d04:	430b      	orrs	r3, r1
 8007d06:	f040 808d 	bne.w	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007d0a:	4b42      	ldr	r3, [pc, #264]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d0e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007d12:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d1a:	d06b      	beq.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d22:	d874      	bhi.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d2a:	d056      	beq.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d32:	d86c      	bhi.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d3a:	d03b      	beq.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d42:	d864      	bhi.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d4a:	d021      	beq.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d52:	d85c      	bhi.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d004      	beq.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d60:	d004      	beq.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007d62:	e054      	b.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007d64:	f000 f8b8 	bl	8007ed8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007d68:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d6a:	e0ac      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d6c:	4b29      	ldr	r3, [pc, #164]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d78:	d107      	bne.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d7a:	f107 0318 	add.w	r3, r7, #24
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 f8c0 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d88:	e09d      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d8e:	e09a      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d90:	4b20      	ldr	r3, [pc, #128]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d9c:	d107      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d9e:	f107 030c 	add.w	r3, r7, #12
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 fa02 	bl	80081ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dac:	e08b      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007db2:	e088      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007db4:	4b17      	ldr	r3, [pc, #92]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d109      	bne.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dc0:	4b14      	ldr	r3, [pc, #80]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	08db      	lsrs	r3, r3, #3
 8007dc6:	f003 0303 	and.w	r3, r3, #3
 8007dca:	4a13      	ldr	r2, [pc, #76]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dd2:	e078      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dd8:	e075      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007dda:	4b0e      	ldr	r3, [pc, #56]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007de6:	d102      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007de8:	4b0c      	ldr	r3, [pc, #48]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dec:	e06b      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007df2:	e068      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007df4:	4b07      	ldr	r3, [pc, #28]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e00:	d102      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007e02:	4b07      	ldr	r3, [pc, #28]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e06:	e05e      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e0c:	e05b      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e12:	e058      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e14:	58024400 	.word	0x58024400
 8007e18:	03d09000 	.word	0x03d09000
 8007e1c:	003d0900 	.word	0x003d0900
 8007e20:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e28:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007e2c:	430b      	orrs	r3, r1
 8007e2e:	d148      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007e30:	4b27      	ldr	r3, [pc, #156]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e38:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e40:	d02a      	beq.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e48:	d838      	bhi.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d004      	beq.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e56:	d00d      	beq.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007e58:	e030      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e5a:	4b1d      	ldr	r3, [pc, #116]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e66:	d102      	bne.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007e68:	4b1a      	ldr	r3, [pc, #104]	; (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e6c:	e02b      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e72:	e028      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e74:	4b16      	ldr	r3, [pc, #88]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e80:	d107      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 fae4 	bl	8008454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e90:	e019      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e96:	e016      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e98:	4b0d      	ldr	r3, [pc, #52]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ea4:	d107      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea6:	f107 0318 	add.w	r3, r7, #24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 f82a 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eb4:	e007      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eba:	e004      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ec0:	e001      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3740      	adds	r7, #64	; 0x40
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	58024400 	.word	0x58024400
 8007ed4:	007a1200 	.word	0x007a1200

08007ed8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007edc:	f7fd ffea 	bl	8005eb4 <HAL_RCC_GetHCLKFreq>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	4b06      	ldr	r3, [pc, #24]	; (8007efc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	091b      	lsrs	r3, r3, #4
 8007ee8:	f003 0307 	and.w	r3, r3, #7
 8007eec:	4904      	ldr	r1, [pc, #16]	; (8007f00 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007eee:	5ccb      	ldrb	r3, [r1, r3]
 8007ef0:	f003 031f 	and.w	r3, r3, #31
 8007ef4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	58024400 	.word	0x58024400
 8007f00:	0801127c 	.word	0x0801127c

08007f04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b089      	sub	sp, #36	; 0x24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f0c:	4ba1      	ldr	r3, [pc, #644]	; (8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f10:	f003 0303 	and.w	r3, r3, #3
 8007f14:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007f16:	4b9f      	ldr	r3, [pc, #636]	; (8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1a:	0b1b      	lsrs	r3, r3, #12
 8007f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f20:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f22:	4b9c      	ldr	r3, [pc, #624]	; (8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f26:	091b      	lsrs	r3, r3, #4
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f2e:	4b99      	ldr	r3, [pc, #612]	; (8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f32:	08db      	lsrs	r3, r3, #3
 8007f34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	fb02 f303 	mul.w	r3, r2, r3
 8007f3e:	ee07 3a90 	vmov	s15, r3
 8007f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 8111 	beq.w	8008174 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	f000 8083 	beq.w	8008060 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	f200 80a1 	bhi.w	80080a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d056      	beq.n	800801c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f6e:	e099      	b.n	80080a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f70:	4b88      	ldr	r3, [pc, #544]	; (8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0320 	and.w	r3, r3, #32
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d02d      	beq.n	8007fd8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f7c:	4b85      	ldr	r3, [pc, #532]	; (8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	08db      	lsrs	r3, r3, #3
 8007f82:	f003 0303 	and.w	r3, r3, #3
 8007f86:	4a84      	ldr	r2, [pc, #528]	; (8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007f88:	fa22 f303 	lsr.w	r3, r2, r3
 8007f8c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	ee07 3a90 	vmov	s15, r3
 8007f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	ee07 3a90 	vmov	s15, r3
 8007f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa6:	4b7b      	ldr	r3, [pc, #492]	; (8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fae:	ee07 3a90 	vmov	s15, r3
 8007fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800819c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007fd6:	e087      	b.n	80080e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	ee07 3a90 	vmov	s15, r3
 8007fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fea:	4b6a      	ldr	r3, [pc, #424]	; (8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff2:	ee07 3a90 	vmov	s15, r3
 8007ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ffe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800819c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800800a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800800e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800801a:	e065      	b.n	80080e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	ee07 3a90 	vmov	s15, r3
 8008022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008026:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800802a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800802e:	4b59      	ldr	r3, [pc, #356]	; (8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008036:	ee07 3a90 	vmov	s15, r3
 800803a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800803e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008042:	eddf 5a56 	vldr	s11, [pc, #344]	; 800819c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800804a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800804e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800805a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800805e:	e043      	b.n	80080e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	ee07 3a90 	vmov	s15, r3
 8008066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80081a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800806e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008072:	4b48      	ldr	r3, [pc, #288]	; (8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800807a:	ee07 3a90 	vmov	s15, r3
 800807e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008082:	ed97 6a03 	vldr	s12, [r7, #12]
 8008086:	eddf 5a45 	vldr	s11, [pc, #276]	; 800819c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800808a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800808e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800809a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800809e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080a2:	e021      	b.n	80080e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	ee07 3a90 	vmov	s15, r3
 80080aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080b6:	4b37      	ldr	r3, [pc, #220]	; (8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080be:	ee07 3a90 	vmov	s15, r3
 80080c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800819c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80080e8:	4b2a      	ldr	r3, [pc, #168]	; (8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ec:	0a5b      	lsrs	r3, r3, #9
 80080ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f2:	ee07 3a90 	vmov	s15, r3
 80080f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008102:	edd7 6a07 	vldr	s13, [r7, #28]
 8008106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800810a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800810e:	ee17 2a90 	vmov	r2, s15
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008116:	4b1f      	ldr	r3, [pc, #124]	; (8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811a:	0c1b      	lsrs	r3, r3, #16
 800811c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008120:	ee07 3a90 	vmov	s15, r3
 8008124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008128:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800812c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008130:	edd7 6a07 	vldr	s13, [r7, #28]
 8008134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800813c:	ee17 2a90 	vmov	r2, s15
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008144:	4b13      	ldr	r3, [pc, #76]	; (8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008148:	0e1b      	lsrs	r3, r3, #24
 800814a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800814e:	ee07 3a90 	vmov	s15, r3
 8008152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800815a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800815e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800816a:	ee17 2a90 	vmov	r2, s15
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008172:	e008      	b.n	8008186 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	609a      	str	r2, [r3, #8]
}
 8008186:	bf00      	nop
 8008188:	3724      	adds	r7, #36	; 0x24
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	58024400 	.word	0x58024400
 8008198:	03d09000 	.word	0x03d09000
 800819c:	46000000 	.word	0x46000000
 80081a0:	4c742400 	.word	0x4c742400
 80081a4:	4a742400 	.word	0x4a742400
 80081a8:	4af42400 	.word	0x4af42400

080081ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b089      	sub	sp, #36	; 0x24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081b4:	4ba1      	ldr	r3, [pc, #644]	; (800843c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	f003 0303 	and.w	r3, r3, #3
 80081bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80081be:	4b9f      	ldr	r3, [pc, #636]	; (800843c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c2:	0d1b      	lsrs	r3, r3, #20
 80081c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081ca:	4b9c      	ldr	r3, [pc, #624]	; (800843c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ce:	0a1b      	lsrs	r3, r3, #8
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80081d6:	4b99      	ldr	r3, [pc, #612]	; (800843c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081da:	08db      	lsrs	r3, r3, #3
 80081dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	fb02 f303 	mul.w	r3, r2, r3
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 8111 	beq.w	800841c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	f000 8083 	beq.w	8008308 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	2b02      	cmp	r3, #2
 8008206:	f200 80a1 	bhi.w	800834c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d056      	beq.n	80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008216:	e099      	b.n	800834c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008218:	4b88      	ldr	r3, [pc, #544]	; (800843c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	d02d      	beq.n	8008280 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008224:	4b85      	ldr	r3, [pc, #532]	; (800843c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	08db      	lsrs	r3, r3, #3
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	4a84      	ldr	r2, [pc, #528]	; (8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008230:	fa22 f303 	lsr.w	r3, r2, r3
 8008234:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	ee07 3a90 	vmov	s15, r3
 800823c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800824e:	4b7b      	ldr	r3, [pc, #492]	; (800843c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008256:	ee07 3a90 	vmov	s15, r3
 800825a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800825e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008262:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800826a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800826e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800827a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800827e:	e087      	b.n	8008390 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	ee07 3a90 	vmov	s15, r3
 8008286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800828e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008292:	4b6a      	ldr	r3, [pc, #424]	; (800843c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829a:	ee07 3a90 	vmov	s15, r3
 800829e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082c2:	e065      	b.n	8008390 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	ee07 3a90 	vmov	s15, r3
 80082ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800844c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082d6:	4b59      	ldr	r3, [pc, #356]	; (800843c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082de:	ee07 3a90 	vmov	s15, r3
 80082e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008306:	e043      	b.n	8008390 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	ee07 3a90 	vmov	s15, r3
 800830e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008312:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800831a:	4b48      	ldr	r3, [pc, #288]	; (800843c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008322:	ee07 3a90 	vmov	s15, r3
 8008326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832a:	ed97 6a03 	vldr	s12, [r7, #12]
 800832e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800833a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800833e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800834a:	e021      	b.n	8008390 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008356:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800844c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800835a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800835e:	4b37      	ldr	r3, [pc, #220]	; (800843c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008366:	ee07 3a90 	vmov	s15, r3
 800836a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800836e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008372:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800837a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800837e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800838a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800838e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008390:	4b2a      	ldr	r3, [pc, #168]	; (800843c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008394:	0a5b      	lsrs	r3, r3, #9
 8008396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80083ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083b6:	ee17 2a90 	vmov	r2, s15
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80083be:	4b1f      	ldr	r3, [pc, #124]	; (800843c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c2:	0c1b      	lsrs	r3, r3, #16
 80083c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c8:	ee07 3a90 	vmov	s15, r3
 80083cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80083dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083e4:	ee17 2a90 	vmov	r2, s15
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80083ec:	4b13      	ldr	r3, [pc, #76]	; (800843c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f0:	0e1b      	lsrs	r3, r3, #24
 80083f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008402:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008406:	edd7 6a07 	vldr	s13, [r7, #28]
 800840a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800840e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008412:	ee17 2a90 	vmov	r2, s15
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800841a:	e008      	b.n	800842e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	609a      	str	r2, [r3, #8]
}
 800842e:	bf00      	nop
 8008430:	3724      	adds	r7, #36	; 0x24
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	58024400 	.word	0x58024400
 8008440:	03d09000 	.word	0x03d09000
 8008444:	46000000 	.word	0x46000000
 8008448:	4c742400 	.word	0x4c742400
 800844c:	4a742400 	.word	0x4a742400
 8008450:	4af42400 	.word	0x4af42400

08008454 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008454:	b480      	push	{r7}
 8008456:	b089      	sub	sp, #36	; 0x24
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800845c:	4ba0      	ldr	r3, [pc, #640]	; (80086e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800845e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008460:	f003 0303 	and.w	r3, r3, #3
 8008464:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008466:	4b9e      	ldr	r3, [pc, #632]	; (80086e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846a:	091b      	lsrs	r3, r3, #4
 800846c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008470:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008472:	4b9b      	ldr	r3, [pc, #620]	; (80086e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800847c:	4b98      	ldr	r3, [pc, #608]	; (80086e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800847e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008480:	08db      	lsrs	r3, r3, #3
 8008482:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	fb02 f303 	mul.w	r3, r2, r3
 800848c:	ee07 3a90 	vmov	s15, r3
 8008490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008494:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2b00      	cmp	r3, #0
 800849c:	f000 8111 	beq.w	80086c2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	f000 8083 	beq.w	80085ae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	f200 80a1 	bhi.w	80085f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d056      	beq.n	800856a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80084bc:	e099      	b.n	80085f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084be:	4b88      	ldr	r3, [pc, #544]	; (80086e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0320 	and.w	r3, r3, #32
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d02d      	beq.n	8008526 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084ca:	4b85      	ldr	r3, [pc, #532]	; (80086e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	08db      	lsrs	r3, r3, #3
 80084d0:	f003 0303 	and.w	r3, r3, #3
 80084d4:	4a83      	ldr	r2, [pc, #524]	; (80086e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80084d6:	fa22 f303 	lsr.w	r3, r2, r3
 80084da:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	ee07 3a90 	vmov	s15, r3
 80084e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	ee07 3a90 	vmov	s15, r3
 80084ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084f4:	4b7a      	ldr	r3, [pc, #488]	; (80086e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084fc:	ee07 3a90 	vmov	s15, r3
 8008500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008504:	ed97 6a03 	vldr	s12, [r7, #12]
 8008508:	eddf 5a77 	vldr	s11, [pc, #476]	; 80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800850c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008510:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008514:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800851c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008520:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008524:	e087      	b.n	8008636 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	ee07 3a90 	vmov	s15, r3
 800852c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008530:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80086ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008538:	4b69      	ldr	r3, [pc, #420]	; (80086e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800853a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008540:	ee07 3a90 	vmov	s15, r3
 8008544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008548:	ed97 6a03 	vldr	s12, [r7, #12]
 800854c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008550:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008554:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008558:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800855c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008564:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008568:	e065      	b.n	8008636 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	ee07 3a90 	vmov	s15, r3
 8008570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008574:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800857c:	4b58      	ldr	r3, [pc, #352]	; (80086e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800857e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008584:	ee07 3a90 	vmov	s15, r3
 8008588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800858c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008590:	eddf 5a55 	vldr	s11, [pc, #340]	; 80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800859c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085ac:	e043      	b.n	8008636 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	ee07 3a90 	vmov	s15, r3
 80085b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80086f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80085bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c0:	4b47      	ldr	r3, [pc, #284]	; (80086e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c8:	ee07 3a90 	vmov	s15, r3
 80085cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80085d4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085f0:	e021      	b.n	8008636 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	ee07 3a90 	vmov	s15, r3
 80085f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085fc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80086ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008604:	4b36      	ldr	r3, [pc, #216]	; (80086e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800860c:	ee07 3a90 	vmov	s15, r3
 8008610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008614:	ed97 6a03 	vldr	s12, [r7, #12]
 8008618:	eddf 5a33 	vldr	s11, [pc, #204]	; 80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800861c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800862c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008630:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008634:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008636:	4b2a      	ldr	r3, [pc, #168]	; (80086e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	0a5b      	lsrs	r3, r3, #9
 800863c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008640:	ee07 3a90 	vmov	s15, r3
 8008644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008648:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800864c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008650:	edd7 6a07 	vldr	s13, [r7, #28]
 8008654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800865c:	ee17 2a90 	vmov	r2, s15
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008664:	4b1e      	ldr	r3, [pc, #120]	; (80086e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008668:	0c1b      	lsrs	r3, r3, #16
 800866a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800866e:	ee07 3a90 	vmov	s15, r3
 8008672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800867a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800867e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800868a:	ee17 2a90 	vmov	r2, s15
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008692:	4b13      	ldr	r3, [pc, #76]	; (80086e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008696:	0e1b      	lsrs	r3, r3, #24
 8008698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800869c:	ee07 3a90 	vmov	s15, r3
 80086a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80086b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086b8:	ee17 2a90 	vmov	r2, s15
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80086c0:	e008      	b.n	80086d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	609a      	str	r2, [r3, #8]
}
 80086d4:	bf00      	nop
 80086d6:	3724      	adds	r7, #36	; 0x24
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	58024400 	.word	0x58024400
 80086e4:	03d09000 	.word	0x03d09000
 80086e8:	46000000 	.word	0x46000000
 80086ec:	4c742400 	.word	0x4c742400
 80086f0:	4a742400 	.word	0x4a742400
 80086f4:	4af42400 	.word	0x4af42400

080086f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008706:	4b53      	ldr	r3, [pc, #332]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 8008708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870a:	f003 0303 	and.w	r3, r3, #3
 800870e:	2b03      	cmp	r3, #3
 8008710:	d101      	bne.n	8008716 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e099      	b.n	800884a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008716:	4b4f      	ldr	r3, [pc, #316]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a4e      	ldr	r2, [pc, #312]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 800871c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008722:	f7f8 fd51 	bl	80011c8 <HAL_GetTick>
 8008726:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008728:	e008      	b.n	800873c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800872a:	f7f8 fd4d 	bl	80011c8 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	2b02      	cmp	r3, #2
 8008736:	d901      	bls.n	800873c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e086      	b.n	800884a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800873c:	4b45      	ldr	r3, [pc, #276]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1f0      	bne.n	800872a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008748:	4b42      	ldr	r3, [pc, #264]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 800874a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	031b      	lsls	r3, r3, #12
 8008756:	493f      	ldr	r1, [pc, #252]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 8008758:	4313      	orrs	r3, r2
 800875a:	628b      	str	r3, [r1, #40]	; 0x28
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	3b01      	subs	r3, #1
 8008762:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	3b01      	subs	r3, #1
 800876c:	025b      	lsls	r3, r3, #9
 800876e:	b29b      	uxth	r3, r3
 8008770:	431a      	orrs	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	3b01      	subs	r3, #1
 8008778:	041b      	lsls	r3, r3, #16
 800877a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800877e:	431a      	orrs	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	3b01      	subs	r3, #1
 8008786:	061b      	lsls	r3, r3, #24
 8008788:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800878c:	4931      	ldr	r1, [pc, #196]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 800878e:	4313      	orrs	r3, r2
 8008790:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008792:	4b30      	ldr	r3, [pc, #192]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 8008794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008796:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	492d      	ldr	r1, [pc, #180]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087a4:	4b2b      	ldr	r3, [pc, #172]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a8:	f023 0220 	bic.w	r2, r3, #32
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	4928      	ldr	r1, [pc, #160]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087b2:	4313      	orrs	r3, r2
 80087b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087b6:	4b27      	ldr	r3, [pc, #156]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ba:	4a26      	ldr	r2, [pc, #152]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087bc:	f023 0310 	bic.w	r3, r3, #16
 80087c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087c2:	4b24      	ldr	r3, [pc, #144]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087c6:	4b24      	ldr	r3, [pc, #144]	; (8008858 <RCCEx_PLL2_Config+0x160>)
 80087c8:	4013      	ands	r3, r2
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	69d2      	ldr	r2, [r2, #28]
 80087ce:	00d2      	lsls	r2, r2, #3
 80087d0:	4920      	ldr	r1, [pc, #128]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087d6:	4b1f      	ldr	r3, [pc, #124]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087da:	4a1e      	ldr	r2, [pc, #120]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087dc:	f043 0310 	orr.w	r3, r3, #16
 80087e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d106      	bne.n	80087f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80087e8:	4b1a      	ldr	r3, [pc, #104]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	4a19      	ldr	r2, [pc, #100]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087f4:	e00f      	b.n	8008816 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d106      	bne.n	800880a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80087fc:	4b15      	ldr	r3, [pc, #84]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008800:	4a14      	ldr	r2, [pc, #80]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 8008802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008806:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008808:	e005      	b.n	8008816 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800880a:	4b12      	ldr	r3, [pc, #72]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 800880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880e:	4a11      	ldr	r2, [pc, #68]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 8008810:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008814:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008816:	4b0f      	ldr	r3, [pc, #60]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a0e      	ldr	r2, [pc, #56]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 800881c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008822:	f7f8 fcd1 	bl	80011c8 <HAL_GetTick>
 8008826:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008828:	e008      	b.n	800883c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800882a:	f7f8 fccd 	bl	80011c8 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	2b02      	cmp	r3, #2
 8008836:	d901      	bls.n	800883c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e006      	b.n	800884a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800883c:	4b05      	ldr	r3, [pc, #20]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d0f0      	beq.n	800882a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008848:	7bfb      	ldrb	r3, [r7, #15]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	58024400 	.word	0x58024400
 8008858:	ffff0007 	.word	0xffff0007

0800885c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800886a:	4b53      	ldr	r3, [pc, #332]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 800886c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886e:	f003 0303 	and.w	r3, r3, #3
 8008872:	2b03      	cmp	r3, #3
 8008874:	d101      	bne.n	800887a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e099      	b.n	80089ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800887a:	4b4f      	ldr	r3, [pc, #316]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a4e      	ldr	r2, [pc, #312]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008886:	f7f8 fc9f 	bl	80011c8 <HAL_GetTick>
 800888a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800888c:	e008      	b.n	80088a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800888e:	f7f8 fc9b 	bl	80011c8 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	2b02      	cmp	r3, #2
 800889a:	d901      	bls.n	80088a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e086      	b.n	80089ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088a0:	4b45      	ldr	r3, [pc, #276]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1f0      	bne.n	800888e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088ac:	4b42      	ldr	r3, [pc, #264]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 80088ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	051b      	lsls	r3, r3, #20
 80088ba:	493f      	ldr	r1, [pc, #252]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	628b      	str	r3, [r1, #40]	; 0x28
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	025b      	lsls	r3, r3, #9
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	431a      	orrs	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	3b01      	subs	r3, #1
 80088dc:	041b      	lsls	r3, r3, #16
 80088de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088e2:	431a      	orrs	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	3b01      	subs	r3, #1
 80088ea:	061b      	lsls	r3, r3, #24
 80088ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088f0:	4931      	ldr	r1, [pc, #196]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80088f6:	4b30      	ldr	r3, [pc, #192]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 80088f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	492d      	ldr	r1, [pc, #180]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008904:	4313      	orrs	r3, r2
 8008906:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008908:	4b2b      	ldr	r3, [pc, #172]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	4928      	ldr	r1, [pc, #160]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008916:	4313      	orrs	r3, r2
 8008918:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800891a:	4b27      	ldr	r3, [pc, #156]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 800891c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891e:	4a26      	ldr	r2, [pc, #152]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008924:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008926:	4b24      	ldr	r3, [pc, #144]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800892a:	4b24      	ldr	r3, [pc, #144]	; (80089bc <RCCEx_PLL3_Config+0x160>)
 800892c:	4013      	ands	r3, r2
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	69d2      	ldr	r2, [r2, #28]
 8008932:	00d2      	lsls	r2, r2, #3
 8008934:	4920      	ldr	r1, [pc, #128]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008936:	4313      	orrs	r3, r2
 8008938:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800893a:	4b1f      	ldr	r3, [pc, #124]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 800893c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893e:	4a1e      	ldr	r2, [pc, #120]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008944:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d106      	bne.n	800895a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800894c:	4b1a      	ldr	r3, [pc, #104]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 800894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008950:	4a19      	ldr	r2, [pc, #100]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008952:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008956:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008958:	e00f      	b.n	800897a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d106      	bne.n	800896e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008960:	4b15      	ldr	r3, [pc, #84]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008964:	4a14      	ldr	r2, [pc, #80]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008966:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800896a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800896c:	e005      	b.n	800897a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800896e:	4b12      	ldr	r3, [pc, #72]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008972:	4a11      	ldr	r2, [pc, #68]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008974:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008978:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800897a:	4b0f      	ldr	r3, [pc, #60]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a0e      	ldr	r2, [pc, #56]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008986:	f7f8 fc1f 	bl	80011c8 <HAL_GetTick>
 800898a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800898c:	e008      	b.n	80089a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800898e:	f7f8 fc1b 	bl	80011c8 <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	2b02      	cmp	r3, #2
 800899a:	d901      	bls.n	80089a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800899c:	2303      	movs	r3, #3
 800899e:	e006      	b.n	80089ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089a0:	4b05      	ldr	r3, [pc, #20]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d0f0      	beq.n	800898e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	58024400 	.word	0x58024400
 80089bc:	ffff0007 	.word	0xffff0007

080089c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e049      	b.n	8008a66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d106      	bne.n	80089ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7f8 fb08 	bl	8000ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2202      	movs	r2, #2
 80089f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	3304      	adds	r3, #4
 80089fc:	4619      	mov	r1, r3
 80089fe:	4610      	mov	r0, r2
 8008a00:	f000 fcd2 	bl	80093a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d001      	beq.n	8008a88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e04c      	b.n	8008b22 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a26      	ldr	r2, [pc, #152]	; (8008b30 <HAL_TIM_Base_Start+0xc0>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d022      	beq.n	8008ae0 <HAL_TIM_Base_Start+0x70>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa2:	d01d      	beq.n	8008ae0 <HAL_TIM_Base_Start+0x70>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a22      	ldr	r2, [pc, #136]	; (8008b34 <HAL_TIM_Base_Start+0xc4>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d018      	beq.n	8008ae0 <HAL_TIM_Base_Start+0x70>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a21      	ldr	r2, [pc, #132]	; (8008b38 <HAL_TIM_Base_Start+0xc8>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d013      	beq.n	8008ae0 <HAL_TIM_Base_Start+0x70>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a1f      	ldr	r2, [pc, #124]	; (8008b3c <HAL_TIM_Base_Start+0xcc>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d00e      	beq.n	8008ae0 <HAL_TIM_Base_Start+0x70>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a1e      	ldr	r2, [pc, #120]	; (8008b40 <HAL_TIM_Base_Start+0xd0>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d009      	beq.n	8008ae0 <HAL_TIM_Base_Start+0x70>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a1c      	ldr	r2, [pc, #112]	; (8008b44 <HAL_TIM_Base_Start+0xd4>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d004      	beq.n	8008ae0 <HAL_TIM_Base_Start+0x70>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a1b      	ldr	r2, [pc, #108]	; (8008b48 <HAL_TIM_Base_Start+0xd8>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d115      	bne.n	8008b0c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689a      	ldr	r2, [r3, #8]
 8008ae6:	4b19      	ldr	r3, [pc, #100]	; (8008b4c <HAL_TIM_Base_Start+0xdc>)
 8008ae8:	4013      	ands	r3, r2
 8008aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2b06      	cmp	r3, #6
 8008af0:	d015      	beq.n	8008b1e <HAL_TIM_Base_Start+0xae>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008af8:	d011      	beq.n	8008b1e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f042 0201 	orr.w	r2, r2, #1
 8008b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b0a:	e008      	b.n	8008b1e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f042 0201 	orr.w	r2, r2, #1
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	e000      	b.n	8008b20 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	40010000 	.word	0x40010000
 8008b34:	40000400 	.word	0x40000400
 8008b38:	40000800 	.word	0x40000800
 8008b3c:	40000c00 	.word	0x40000c00
 8008b40:	40010400 	.word	0x40010400
 8008b44:	40001800 	.word	0x40001800
 8008b48:	40014000 	.word	0x40014000
 8008b4c:	00010007 	.word	0x00010007

08008b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d001      	beq.n	8008b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e054      	b.n	8008c12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f042 0201 	orr.w	r2, r2, #1
 8008b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a26      	ldr	r2, [pc, #152]	; (8008c20 <HAL_TIM_Base_Start_IT+0xd0>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d022      	beq.n	8008bd0 <HAL_TIM_Base_Start_IT+0x80>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b92:	d01d      	beq.n	8008bd0 <HAL_TIM_Base_Start_IT+0x80>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a22      	ldr	r2, [pc, #136]	; (8008c24 <HAL_TIM_Base_Start_IT+0xd4>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d018      	beq.n	8008bd0 <HAL_TIM_Base_Start_IT+0x80>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a21      	ldr	r2, [pc, #132]	; (8008c28 <HAL_TIM_Base_Start_IT+0xd8>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d013      	beq.n	8008bd0 <HAL_TIM_Base_Start_IT+0x80>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a1f      	ldr	r2, [pc, #124]	; (8008c2c <HAL_TIM_Base_Start_IT+0xdc>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d00e      	beq.n	8008bd0 <HAL_TIM_Base_Start_IT+0x80>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a1e      	ldr	r2, [pc, #120]	; (8008c30 <HAL_TIM_Base_Start_IT+0xe0>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d009      	beq.n	8008bd0 <HAL_TIM_Base_Start_IT+0x80>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a1c      	ldr	r2, [pc, #112]	; (8008c34 <HAL_TIM_Base_Start_IT+0xe4>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d004      	beq.n	8008bd0 <HAL_TIM_Base_Start_IT+0x80>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a1b      	ldr	r2, [pc, #108]	; (8008c38 <HAL_TIM_Base_Start_IT+0xe8>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d115      	bne.n	8008bfc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	689a      	ldr	r2, [r3, #8]
 8008bd6:	4b19      	ldr	r3, [pc, #100]	; (8008c3c <HAL_TIM_Base_Start_IT+0xec>)
 8008bd8:	4013      	ands	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2b06      	cmp	r3, #6
 8008be0:	d015      	beq.n	8008c0e <HAL_TIM_Base_Start_IT+0xbe>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008be8:	d011      	beq.n	8008c0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f042 0201 	orr.w	r2, r2, #1
 8008bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bfa:	e008      	b.n	8008c0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f042 0201 	orr.w	r2, r2, #1
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	e000      	b.n	8008c10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	40010000 	.word	0x40010000
 8008c24:	40000400 	.word	0x40000400
 8008c28:	40000800 	.word	0x40000800
 8008c2c:	40000c00 	.word	0x40000c00
 8008c30:	40010400 	.word	0x40010400
 8008c34:	40001800 	.word	0x40001800
 8008c38:	40014000 	.word	0x40014000
 8008c3c:	00010007 	.word	0x00010007

08008c40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e049      	b.n	8008ce6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d106      	bne.n	8008c6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f841 	bl	8008cee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4610      	mov	r0, r2
 8008c80:	f000 fb92 	bl	80093a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b083      	sub	sp, #12
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008cf6:	bf00      	nop
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	f003 0302 	and.w	r3, r3, #2
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d122      	bne.n	8008d5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d11b      	bne.n	8008d5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f06f 0202 	mvn.w	r2, #2
 8008d2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	f003 0303 	and.w	r3, r3, #3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d003      	beq.n	8008d4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fb11 	bl	800936c <HAL_TIM_IC_CaptureCallback>
 8008d4a:	e005      	b.n	8008d58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fb03 	bl	8009358 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fb14 	bl	8009380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	691b      	ldr	r3, [r3, #16]
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	2b04      	cmp	r3, #4
 8008d6a:	d122      	bne.n	8008db2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	f003 0304 	and.w	r3, r3, #4
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	d11b      	bne.n	8008db2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f06f 0204 	mvn.w	r2, #4
 8008d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2202      	movs	r2, #2
 8008d88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d003      	beq.n	8008da0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fae7 	bl	800936c <HAL_TIM_IC_CaptureCallback>
 8008d9e:	e005      	b.n	8008dac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fad9 	bl	8009358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 faea 	bl	8009380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	f003 0308 	and.w	r3, r3, #8
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	d122      	bne.n	8008e06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f003 0308 	and.w	r3, r3, #8
 8008dca:	2b08      	cmp	r3, #8
 8008dcc:	d11b      	bne.n	8008e06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f06f 0208 	mvn.w	r2, #8
 8008dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2204      	movs	r2, #4
 8008ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	f003 0303 	and.w	r3, r3, #3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fabd 	bl	800936c <HAL_TIM_IC_CaptureCallback>
 8008df2:	e005      	b.n	8008e00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 faaf 	bl	8009358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fac0 	bl	8009380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	f003 0310 	and.w	r3, r3, #16
 8008e10:	2b10      	cmp	r3, #16
 8008e12:	d122      	bne.n	8008e5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	f003 0310 	and.w	r3, r3, #16
 8008e1e:	2b10      	cmp	r3, #16
 8008e20:	d11b      	bne.n	8008e5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f06f 0210 	mvn.w	r2, #16
 8008e2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2208      	movs	r2, #8
 8008e30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d003      	beq.n	8008e48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fa93 	bl	800936c <HAL_TIM_IC_CaptureCallback>
 8008e46:	e005      	b.n	8008e54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fa85 	bl	8009358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fa96 	bl	8009380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d10e      	bne.n	8008e86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d107      	bne.n	8008e86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f06f 0201 	mvn.w	r2, #1
 8008e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7f7 fe79 	bl	8000b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e90:	2b80      	cmp	r3, #128	; 0x80
 8008e92:	d10e      	bne.n	8008eb2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e9e:	2b80      	cmp	r3, #128	; 0x80
 8008ea0:	d107      	bne.n	8008eb2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 ff9f 	bl	8009df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ec0:	d10e      	bne.n	8008ee0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ecc:	2b80      	cmp	r3, #128	; 0x80
 8008ece:	d107      	bne.n	8008ee0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 ff92 	bl	8009e04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eea:	2b40      	cmp	r3, #64	; 0x40
 8008eec:	d10e      	bne.n	8008f0c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef8:	2b40      	cmp	r3, #64	; 0x40
 8008efa:	d107      	bne.n	8008f0c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fa44 	bl	8009394 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	f003 0320 	and.w	r3, r3, #32
 8008f16:	2b20      	cmp	r3, #32
 8008f18:	d10e      	bne.n	8008f38 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	f003 0320 	and.w	r3, r3, #32
 8008f24:	2b20      	cmp	r3, #32
 8008f26:	d107      	bne.n	8008f38 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f06f 0220 	mvn.w	r2, #32
 8008f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 ff52 	bl	8009ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f38:	bf00      	nop
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d101      	bne.n	8008f5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	e0ff      	b.n	800915e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b14      	cmp	r3, #20
 8008f6a:	f200 80f0 	bhi.w	800914e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008f6e:	a201      	add	r2, pc, #4	; (adr r2, 8008f74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f74:	08008fc9 	.word	0x08008fc9
 8008f78:	0800914f 	.word	0x0800914f
 8008f7c:	0800914f 	.word	0x0800914f
 8008f80:	0800914f 	.word	0x0800914f
 8008f84:	08009009 	.word	0x08009009
 8008f88:	0800914f 	.word	0x0800914f
 8008f8c:	0800914f 	.word	0x0800914f
 8008f90:	0800914f 	.word	0x0800914f
 8008f94:	0800904b 	.word	0x0800904b
 8008f98:	0800914f 	.word	0x0800914f
 8008f9c:	0800914f 	.word	0x0800914f
 8008fa0:	0800914f 	.word	0x0800914f
 8008fa4:	0800908b 	.word	0x0800908b
 8008fa8:	0800914f 	.word	0x0800914f
 8008fac:	0800914f 	.word	0x0800914f
 8008fb0:	0800914f 	.word	0x0800914f
 8008fb4:	080090cd 	.word	0x080090cd
 8008fb8:	0800914f 	.word	0x0800914f
 8008fbc:	0800914f 	.word	0x0800914f
 8008fc0:	0800914f 	.word	0x0800914f
 8008fc4:	0800910d 	.word	0x0800910d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68b9      	ldr	r1, [r7, #8]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 fa84 	bl	80094dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	699a      	ldr	r2, [r3, #24]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f042 0208 	orr.w	r2, r2, #8
 8008fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	699a      	ldr	r2, [r3, #24]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 0204 	bic.w	r2, r2, #4
 8008ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6999      	ldr	r1, [r3, #24]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	691a      	ldr	r2, [r3, #16]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	619a      	str	r2, [r3, #24]
      break;
 8009006:	e0a5      	b.n	8009154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68b9      	ldr	r1, [r7, #8]
 800900e:	4618      	mov	r0, r3
 8009010:	f000 faf4 	bl	80095fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	699a      	ldr	r2, [r3, #24]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	699a      	ldr	r2, [r3, #24]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	6999      	ldr	r1, [r3, #24]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	021a      	lsls	r2, r3, #8
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	619a      	str	r2, [r3, #24]
      break;
 8009048:	e084      	b.n	8009154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68b9      	ldr	r1, [r7, #8]
 8009050:	4618      	mov	r0, r3
 8009052:	f000 fb5d 	bl	8009710 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	69da      	ldr	r2, [r3, #28]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f042 0208 	orr.w	r2, r2, #8
 8009064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	69da      	ldr	r2, [r3, #28]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f022 0204 	bic.w	r2, r2, #4
 8009074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69d9      	ldr	r1, [r3, #28]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	691a      	ldr	r2, [r3, #16]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	430a      	orrs	r2, r1
 8009086:	61da      	str	r2, [r3, #28]
      break;
 8009088:	e064      	b.n	8009154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68b9      	ldr	r1, [r7, #8]
 8009090:	4618      	mov	r0, r3
 8009092:	f000 fbc5 	bl	8009820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	69da      	ldr	r2, [r3, #28]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	69da      	ldr	r2, [r3, #28]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	69d9      	ldr	r1, [r3, #28]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	021a      	lsls	r2, r3, #8
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	61da      	str	r2, [r3, #28]
      break;
 80090ca:	e043      	b.n	8009154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68b9      	ldr	r1, [r7, #8]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fc0e 	bl	80098f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f042 0208 	orr.w	r2, r2, #8
 80090e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0204 	bic.w	r2, r2, #4
 80090f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	691a      	ldr	r2, [r3, #16]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	430a      	orrs	r2, r1
 8009108:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800910a:	e023      	b.n	8009154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68b9      	ldr	r1, [r7, #8]
 8009112:	4618      	mov	r0, r3
 8009114:	f000 fc52 	bl	80099bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009126:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009136:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	021a      	lsls	r2, r3, #8
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	430a      	orrs	r2, r1
 800914a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800914c:	e002      	b.n	8009154 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	75fb      	strb	r3, [r7, #23]
      break;
 8009152:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800915c:	7dfb      	ldrb	r3, [r7, #23]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3718      	adds	r7, #24
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop

08009168 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800917c:	2b01      	cmp	r3, #1
 800917e:	d101      	bne.n	8009184 <HAL_TIM_ConfigClockSource+0x1c>
 8009180:	2302      	movs	r3, #2
 8009182:	e0dc      	b.n	800933e <HAL_TIM_ConfigClockSource+0x1d6>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2202      	movs	r2, #2
 8009190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	4b6a      	ldr	r3, [pc, #424]	; (8009348 <HAL_TIM_ConfigClockSource+0x1e0>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a64      	ldr	r2, [pc, #400]	; (800934c <HAL_TIM_ConfigClockSource+0x1e4>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	f000 80a9 	beq.w	8009312 <HAL_TIM_ConfigClockSource+0x1aa>
 80091c0:	4a62      	ldr	r2, [pc, #392]	; (800934c <HAL_TIM_ConfigClockSource+0x1e4>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	f200 80ae 	bhi.w	8009324 <HAL_TIM_ConfigClockSource+0x1bc>
 80091c8:	4a61      	ldr	r2, [pc, #388]	; (8009350 <HAL_TIM_ConfigClockSource+0x1e8>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	f000 80a1 	beq.w	8009312 <HAL_TIM_ConfigClockSource+0x1aa>
 80091d0:	4a5f      	ldr	r2, [pc, #380]	; (8009350 <HAL_TIM_ConfigClockSource+0x1e8>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	f200 80a6 	bhi.w	8009324 <HAL_TIM_ConfigClockSource+0x1bc>
 80091d8:	4a5e      	ldr	r2, [pc, #376]	; (8009354 <HAL_TIM_ConfigClockSource+0x1ec>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	f000 8099 	beq.w	8009312 <HAL_TIM_ConfigClockSource+0x1aa>
 80091e0:	4a5c      	ldr	r2, [pc, #368]	; (8009354 <HAL_TIM_ConfigClockSource+0x1ec>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	f200 809e 	bhi.w	8009324 <HAL_TIM_ConfigClockSource+0x1bc>
 80091e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80091ec:	f000 8091 	beq.w	8009312 <HAL_TIM_ConfigClockSource+0x1aa>
 80091f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80091f4:	f200 8096 	bhi.w	8009324 <HAL_TIM_ConfigClockSource+0x1bc>
 80091f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091fc:	f000 8089 	beq.w	8009312 <HAL_TIM_ConfigClockSource+0x1aa>
 8009200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009204:	f200 808e 	bhi.w	8009324 <HAL_TIM_ConfigClockSource+0x1bc>
 8009208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800920c:	d03e      	beq.n	800928c <HAL_TIM_ConfigClockSource+0x124>
 800920e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009212:	f200 8087 	bhi.w	8009324 <HAL_TIM_ConfigClockSource+0x1bc>
 8009216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800921a:	f000 8086 	beq.w	800932a <HAL_TIM_ConfigClockSource+0x1c2>
 800921e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009222:	d87f      	bhi.n	8009324 <HAL_TIM_ConfigClockSource+0x1bc>
 8009224:	2b70      	cmp	r3, #112	; 0x70
 8009226:	d01a      	beq.n	800925e <HAL_TIM_ConfigClockSource+0xf6>
 8009228:	2b70      	cmp	r3, #112	; 0x70
 800922a:	d87b      	bhi.n	8009324 <HAL_TIM_ConfigClockSource+0x1bc>
 800922c:	2b60      	cmp	r3, #96	; 0x60
 800922e:	d050      	beq.n	80092d2 <HAL_TIM_ConfigClockSource+0x16a>
 8009230:	2b60      	cmp	r3, #96	; 0x60
 8009232:	d877      	bhi.n	8009324 <HAL_TIM_ConfigClockSource+0x1bc>
 8009234:	2b50      	cmp	r3, #80	; 0x50
 8009236:	d03c      	beq.n	80092b2 <HAL_TIM_ConfigClockSource+0x14a>
 8009238:	2b50      	cmp	r3, #80	; 0x50
 800923a:	d873      	bhi.n	8009324 <HAL_TIM_ConfigClockSource+0x1bc>
 800923c:	2b40      	cmp	r3, #64	; 0x40
 800923e:	d058      	beq.n	80092f2 <HAL_TIM_ConfigClockSource+0x18a>
 8009240:	2b40      	cmp	r3, #64	; 0x40
 8009242:	d86f      	bhi.n	8009324 <HAL_TIM_ConfigClockSource+0x1bc>
 8009244:	2b30      	cmp	r3, #48	; 0x30
 8009246:	d064      	beq.n	8009312 <HAL_TIM_ConfigClockSource+0x1aa>
 8009248:	2b30      	cmp	r3, #48	; 0x30
 800924a:	d86b      	bhi.n	8009324 <HAL_TIM_ConfigClockSource+0x1bc>
 800924c:	2b20      	cmp	r3, #32
 800924e:	d060      	beq.n	8009312 <HAL_TIM_ConfigClockSource+0x1aa>
 8009250:	2b20      	cmp	r3, #32
 8009252:	d867      	bhi.n	8009324 <HAL_TIM_ConfigClockSource+0x1bc>
 8009254:	2b00      	cmp	r3, #0
 8009256:	d05c      	beq.n	8009312 <HAL_TIM_ConfigClockSource+0x1aa>
 8009258:	2b10      	cmp	r3, #16
 800925a:	d05a      	beq.n	8009312 <HAL_TIM_ConfigClockSource+0x1aa>
 800925c:	e062      	b.n	8009324 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800926e:	f000 fc89 	bl	8009b84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009280:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	609a      	str	r2, [r3, #8]
      break;
 800928a:	e04f      	b.n	800932c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800929c:	f000 fc72 	bl	8009b84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689a      	ldr	r2, [r3, #8]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092ae:	609a      	str	r2, [r3, #8]
      break;
 80092b0:	e03c      	b.n	800932c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092be:	461a      	mov	r2, r3
 80092c0:	f000 fbe2 	bl	8009a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2150      	movs	r1, #80	; 0x50
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 fc3c 	bl	8009b48 <TIM_ITRx_SetConfig>
      break;
 80092d0:	e02c      	b.n	800932c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80092de:	461a      	mov	r2, r3
 80092e0:	f000 fc01 	bl	8009ae6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2160      	movs	r1, #96	; 0x60
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 fc2c 	bl	8009b48 <TIM_ITRx_SetConfig>
      break;
 80092f0:	e01c      	b.n	800932c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092fe:	461a      	mov	r2, r3
 8009300:	f000 fbc2 	bl	8009a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2140      	movs	r1, #64	; 0x40
 800930a:	4618      	mov	r0, r3
 800930c:	f000 fc1c 	bl	8009b48 <TIM_ITRx_SetConfig>
      break;
 8009310:	e00c      	b.n	800932c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4619      	mov	r1, r3
 800931c:	4610      	mov	r0, r2
 800931e:	f000 fc13 	bl	8009b48 <TIM_ITRx_SetConfig>
      break;
 8009322:	e003      	b.n	800932c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	73fb      	strb	r3, [r7, #15]
      break;
 8009328:	e000      	b.n	800932c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800932a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800933c:	7bfb      	ldrb	r3, [r7, #15]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	ffceff88 	.word	0xffceff88
 800934c:	00100040 	.word	0x00100040
 8009350:	00100030 	.word	0x00100030
 8009354:	00100020 	.word	0x00100020

08009358 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a40      	ldr	r2, [pc, #256]	; (80094bc <TIM_Base_SetConfig+0x114>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d013      	beq.n	80093e8 <TIM_Base_SetConfig+0x40>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c6:	d00f      	beq.n	80093e8 <TIM_Base_SetConfig+0x40>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a3d      	ldr	r2, [pc, #244]	; (80094c0 <TIM_Base_SetConfig+0x118>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d00b      	beq.n	80093e8 <TIM_Base_SetConfig+0x40>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a3c      	ldr	r2, [pc, #240]	; (80094c4 <TIM_Base_SetConfig+0x11c>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d007      	beq.n	80093e8 <TIM_Base_SetConfig+0x40>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a3b      	ldr	r2, [pc, #236]	; (80094c8 <TIM_Base_SetConfig+0x120>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d003      	beq.n	80093e8 <TIM_Base_SetConfig+0x40>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a3a      	ldr	r2, [pc, #232]	; (80094cc <TIM_Base_SetConfig+0x124>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d108      	bne.n	80093fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a2f      	ldr	r2, [pc, #188]	; (80094bc <TIM_Base_SetConfig+0x114>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d01f      	beq.n	8009442 <TIM_Base_SetConfig+0x9a>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009408:	d01b      	beq.n	8009442 <TIM_Base_SetConfig+0x9a>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a2c      	ldr	r2, [pc, #176]	; (80094c0 <TIM_Base_SetConfig+0x118>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d017      	beq.n	8009442 <TIM_Base_SetConfig+0x9a>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a2b      	ldr	r2, [pc, #172]	; (80094c4 <TIM_Base_SetConfig+0x11c>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d013      	beq.n	8009442 <TIM_Base_SetConfig+0x9a>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a2a      	ldr	r2, [pc, #168]	; (80094c8 <TIM_Base_SetConfig+0x120>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d00f      	beq.n	8009442 <TIM_Base_SetConfig+0x9a>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a29      	ldr	r2, [pc, #164]	; (80094cc <TIM_Base_SetConfig+0x124>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d00b      	beq.n	8009442 <TIM_Base_SetConfig+0x9a>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a28      	ldr	r2, [pc, #160]	; (80094d0 <TIM_Base_SetConfig+0x128>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d007      	beq.n	8009442 <TIM_Base_SetConfig+0x9a>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a27      	ldr	r2, [pc, #156]	; (80094d4 <TIM_Base_SetConfig+0x12c>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d003      	beq.n	8009442 <TIM_Base_SetConfig+0x9a>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a26      	ldr	r2, [pc, #152]	; (80094d8 <TIM_Base_SetConfig+0x130>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d108      	bne.n	8009454 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	4313      	orrs	r3, r2
 8009452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	4313      	orrs	r3, r2
 8009460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	689a      	ldr	r2, [r3, #8]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a10      	ldr	r2, [pc, #64]	; (80094bc <TIM_Base_SetConfig+0x114>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d00f      	beq.n	80094a0 <TIM_Base_SetConfig+0xf8>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a12      	ldr	r2, [pc, #72]	; (80094cc <TIM_Base_SetConfig+0x124>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d00b      	beq.n	80094a0 <TIM_Base_SetConfig+0xf8>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a11      	ldr	r2, [pc, #68]	; (80094d0 <TIM_Base_SetConfig+0x128>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d007      	beq.n	80094a0 <TIM_Base_SetConfig+0xf8>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a10      	ldr	r2, [pc, #64]	; (80094d4 <TIM_Base_SetConfig+0x12c>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d003      	beq.n	80094a0 <TIM_Base_SetConfig+0xf8>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a0f      	ldr	r2, [pc, #60]	; (80094d8 <TIM_Base_SetConfig+0x130>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d103      	bne.n	80094a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	691a      	ldr	r2, [r3, #16]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	615a      	str	r2, [r3, #20]
}
 80094ae:	bf00      	nop
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	40010000 	.word	0x40010000
 80094c0:	40000400 	.word	0x40000400
 80094c4:	40000800 	.word	0x40000800
 80094c8:	40000c00 	.word	0x40000c00
 80094cc:	40010400 	.word	0x40010400
 80094d0:	40014000 	.word	0x40014000
 80094d4:	40014400 	.word	0x40014400
 80094d8:	40014800 	.word	0x40014800

080094dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094dc:	b480      	push	{r7}
 80094de:	b087      	sub	sp, #28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a1b      	ldr	r3, [r3, #32]
 80094ea:	f023 0201 	bic.w	r2, r3, #1
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	4b37      	ldr	r3, [pc, #220]	; (80095e4 <TIM_OC1_SetConfig+0x108>)
 8009508:	4013      	ands	r3, r2
 800950a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f023 0303 	bic.w	r3, r3, #3
 8009512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	4313      	orrs	r3, r2
 800951c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f023 0302 	bic.w	r3, r3, #2
 8009524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	4313      	orrs	r3, r2
 800952e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a2d      	ldr	r2, [pc, #180]	; (80095e8 <TIM_OC1_SetConfig+0x10c>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d00f      	beq.n	8009558 <TIM_OC1_SetConfig+0x7c>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a2c      	ldr	r2, [pc, #176]	; (80095ec <TIM_OC1_SetConfig+0x110>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d00b      	beq.n	8009558 <TIM_OC1_SetConfig+0x7c>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a2b      	ldr	r2, [pc, #172]	; (80095f0 <TIM_OC1_SetConfig+0x114>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d007      	beq.n	8009558 <TIM_OC1_SetConfig+0x7c>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a2a      	ldr	r2, [pc, #168]	; (80095f4 <TIM_OC1_SetConfig+0x118>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d003      	beq.n	8009558 <TIM_OC1_SetConfig+0x7c>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a29      	ldr	r2, [pc, #164]	; (80095f8 <TIM_OC1_SetConfig+0x11c>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d10c      	bne.n	8009572 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f023 0308 	bic.w	r3, r3, #8
 800955e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	697a      	ldr	r2, [r7, #20]
 8009566:	4313      	orrs	r3, r2
 8009568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f023 0304 	bic.w	r3, r3, #4
 8009570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a1c      	ldr	r2, [pc, #112]	; (80095e8 <TIM_OC1_SetConfig+0x10c>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d00f      	beq.n	800959a <TIM_OC1_SetConfig+0xbe>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a1b      	ldr	r2, [pc, #108]	; (80095ec <TIM_OC1_SetConfig+0x110>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d00b      	beq.n	800959a <TIM_OC1_SetConfig+0xbe>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a1a      	ldr	r2, [pc, #104]	; (80095f0 <TIM_OC1_SetConfig+0x114>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d007      	beq.n	800959a <TIM_OC1_SetConfig+0xbe>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a19      	ldr	r2, [pc, #100]	; (80095f4 <TIM_OC1_SetConfig+0x118>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d003      	beq.n	800959a <TIM_OC1_SetConfig+0xbe>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a18      	ldr	r2, [pc, #96]	; (80095f8 <TIM_OC1_SetConfig+0x11c>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d111      	bne.n	80095be <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	621a      	str	r2, [r3, #32]
}
 80095d8:	bf00      	nop
 80095da:	371c      	adds	r7, #28
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	fffeff8f 	.word	0xfffeff8f
 80095e8:	40010000 	.word	0x40010000
 80095ec:	40010400 	.word	0x40010400
 80095f0:	40014000 	.word	0x40014000
 80095f4:	40014400 	.word	0x40014400
 80095f8:	40014800 	.word	0x40014800

080095fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b087      	sub	sp, #28
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	f023 0210 	bic.w	r2, r3, #16
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	4b34      	ldr	r3, [pc, #208]	; (80096f8 <TIM_OC2_SetConfig+0xfc>)
 8009628:	4013      	ands	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	021b      	lsls	r3, r3, #8
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	4313      	orrs	r3, r2
 800963e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	f023 0320 	bic.w	r3, r3, #32
 8009646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	011b      	lsls	r3, r3, #4
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	4313      	orrs	r3, r2
 8009652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a29      	ldr	r2, [pc, #164]	; (80096fc <TIM_OC2_SetConfig+0x100>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d003      	beq.n	8009664 <TIM_OC2_SetConfig+0x68>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a28      	ldr	r2, [pc, #160]	; (8009700 <TIM_OC2_SetConfig+0x104>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d10d      	bne.n	8009680 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800966a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	011b      	lsls	r3, r3, #4
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	4313      	orrs	r3, r2
 8009676:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800967e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a1e      	ldr	r2, [pc, #120]	; (80096fc <TIM_OC2_SetConfig+0x100>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d00f      	beq.n	80096a8 <TIM_OC2_SetConfig+0xac>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a1d      	ldr	r2, [pc, #116]	; (8009700 <TIM_OC2_SetConfig+0x104>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d00b      	beq.n	80096a8 <TIM_OC2_SetConfig+0xac>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a1c      	ldr	r2, [pc, #112]	; (8009704 <TIM_OC2_SetConfig+0x108>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d007      	beq.n	80096a8 <TIM_OC2_SetConfig+0xac>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a1b      	ldr	r2, [pc, #108]	; (8009708 <TIM_OC2_SetConfig+0x10c>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d003      	beq.n	80096a8 <TIM_OC2_SetConfig+0xac>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a1a      	ldr	r2, [pc, #104]	; (800970c <TIM_OC2_SetConfig+0x110>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d113      	bne.n	80096d0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	685a      	ldr	r2, [r3, #4]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	621a      	str	r2, [r3, #32]
}
 80096ea:	bf00      	nop
 80096ec:	371c      	adds	r7, #28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	feff8fff 	.word	0xfeff8fff
 80096fc:	40010000 	.word	0x40010000
 8009700:	40010400 	.word	0x40010400
 8009704:	40014000 	.word	0x40014000
 8009708:	40014400 	.word	0x40014400
 800970c:	40014800 	.word	0x40014800

08009710 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009710:	b480      	push	{r7}
 8009712:	b087      	sub	sp, #28
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	4b33      	ldr	r3, [pc, #204]	; (8009808 <TIM_OC3_SetConfig+0xf8>)
 800973c:	4013      	ands	r3, r2
 800973e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f023 0303 	bic.w	r3, r3, #3
 8009746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	021b      	lsls	r3, r3, #8
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	4313      	orrs	r3, r2
 8009764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a28      	ldr	r2, [pc, #160]	; (800980c <TIM_OC3_SetConfig+0xfc>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d003      	beq.n	8009776 <TIM_OC3_SetConfig+0x66>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a27      	ldr	r2, [pc, #156]	; (8009810 <TIM_OC3_SetConfig+0x100>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d10d      	bne.n	8009792 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800977c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	021b      	lsls	r3, r3, #8
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	4313      	orrs	r3, r2
 8009788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a1d      	ldr	r2, [pc, #116]	; (800980c <TIM_OC3_SetConfig+0xfc>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d00f      	beq.n	80097ba <TIM_OC3_SetConfig+0xaa>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a1c      	ldr	r2, [pc, #112]	; (8009810 <TIM_OC3_SetConfig+0x100>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d00b      	beq.n	80097ba <TIM_OC3_SetConfig+0xaa>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a1b      	ldr	r2, [pc, #108]	; (8009814 <TIM_OC3_SetConfig+0x104>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d007      	beq.n	80097ba <TIM_OC3_SetConfig+0xaa>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a1a      	ldr	r2, [pc, #104]	; (8009818 <TIM_OC3_SetConfig+0x108>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d003      	beq.n	80097ba <TIM_OC3_SetConfig+0xaa>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a19      	ldr	r2, [pc, #100]	; (800981c <TIM_OC3_SetConfig+0x10c>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d113      	bne.n	80097e2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	695b      	ldr	r3, [r3, #20]
 80097ce:	011b      	lsls	r3, r3, #4
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	011b      	lsls	r3, r3, #4
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	4313      	orrs	r3, r2
 80097e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	685a      	ldr	r2, [r3, #4]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	697a      	ldr	r2, [r7, #20]
 80097fa:	621a      	str	r2, [r3, #32]
}
 80097fc:	bf00      	nop
 80097fe:	371c      	adds	r7, #28
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr
 8009808:	fffeff8f 	.word	0xfffeff8f
 800980c:	40010000 	.word	0x40010000
 8009810:	40010400 	.word	0x40010400
 8009814:	40014000 	.word	0x40014000
 8009818:	40014400 	.word	0x40014400
 800981c:	40014800 	.word	0x40014800

08009820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009820:	b480      	push	{r7}
 8009822:	b087      	sub	sp, #28
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a1b      	ldr	r3, [r3, #32]
 800983a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	4b24      	ldr	r3, [pc, #144]	; (80098dc <TIM_OC4_SetConfig+0xbc>)
 800984c:	4013      	ands	r3, r2
 800984e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	021b      	lsls	r3, r3, #8
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	4313      	orrs	r3, r2
 8009862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800986a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	031b      	lsls	r3, r3, #12
 8009872:	693a      	ldr	r2, [r7, #16]
 8009874:	4313      	orrs	r3, r2
 8009876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a19      	ldr	r2, [pc, #100]	; (80098e0 <TIM_OC4_SetConfig+0xc0>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d00f      	beq.n	80098a0 <TIM_OC4_SetConfig+0x80>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a18      	ldr	r2, [pc, #96]	; (80098e4 <TIM_OC4_SetConfig+0xc4>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d00b      	beq.n	80098a0 <TIM_OC4_SetConfig+0x80>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a17      	ldr	r2, [pc, #92]	; (80098e8 <TIM_OC4_SetConfig+0xc8>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d007      	beq.n	80098a0 <TIM_OC4_SetConfig+0x80>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a16      	ldr	r2, [pc, #88]	; (80098ec <TIM_OC4_SetConfig+0xcc>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d003      	beq.n	80098a0 <TIM_OC4_SetConfig+0x80>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a15      	ldr	r2, [pc, #84]	; (80098f0 <TIM_OC4_SetConfig+0xd0>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d109      	bne.n	80098b4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	019b      	lsls	r3, r3, #6
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	685a      	ldr	r2, [r3, #4]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	621a      	str	r2, [r3, #32]
}
 80098ce:	bf00      	nop
 80098d0:	371c      	adds	r7, #28
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	feff8fff 	.word	0xfeff8fff
 80098e0:	40010000 	.word	0x40010000
 80098e4:	40010400 	.word	0x40010400
 80098e8:	40014000 	.word	0x40014000
 80098ec:	40014400 	.word	0x40014400
 80098f0:	40014800 	.word	0x40014800

080098f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b087      	sub	sp, #28
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a1b      	ldr	r3, [r3, #32]
 800990e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800991a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	4b21      	ldr	r3, [pc, #132]	; (80099a4 <TIM_OC5_SetConfig+0xb0>)
 8009920:	4013      	ands	r3, r2
 8009922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	4313      	orrs	r3, r2
 800992c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009934:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	041b      	lsls	r3, r3, #16
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	4313      	orrs	r3, r2
 8009940:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a18      	ldr	r2, [pc, #96]	; (80099a8 <TIM_OC5_SetConfig+0xb4>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d00f      	beq.n	800996a <TIM_OC5_SetConfig+0x76>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a17      	ldr	r2, [pc, #92]	; (80099ac <TIM_OC5_SetConfig+0xb8>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d00b      	beq.n	800996a <TIM_OC5_SetConfig+0x76>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a16      	ldr	r2, [pc, #88]	; (80099b0 <TIM_OC5_SetConfig+0xbc>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d007      	beq.n	800996a <TIM_OC5_SetConfig+0x76>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a15      	ldr	r2, [pc, #84]	; (80099b4 <TIM_OC5_SetConfig+0xc0>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d003      	beq.n	800996a <TIM_OC5_SetConfig+0x76>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a14      	ldr	r2, [pc, #80]	; (80099b8 <TIM_OC5_SetConfig+0xc4>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d109      	bne.n	800997e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009970:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	695b      	ldr	r3, [r3, #20]
 8009976:	021b      	lsls	r3, r3, #8
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	4313      	orrs	r3, r2
 800997c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	697a      	ldr	r2, [r7, #20]
 8009982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	685a      	ldr	r2, [r3, #4]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	621a      	str	r2, [r3, #32]
}
 8009998:	bf00      	nop
 800999a:	371c      	adds	r7, #28
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	fffeff8f 	.word	0xfffeff8f
 80099a8:	40010000 	.word	0x40010000
 80099ac:	40010400 	.word	0x40010400
 80099b0:	40014000 	.word	0x40014000
 80099b4:	40014400 	.word	0x40014400
 80099b8:	40014800 	.word	0x40014800

080099bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80099bc:	b480      	push	{r7}
 80099be:	b087      	sub	sp, #28
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	4b22      	ldr	r3, [pc, #136]	; (8009a70 <TIM_OC6_SetConfig+0xb4>)
 80099e8:	4013      	ands	r3, r2
 80099ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	021b      	lsls	r3, r3, #8
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80099fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	051b      	lsls	r3, r3, #20
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a19      	ldr	r2, [pc, #100]	; (8009a74 <TIM_OC6_SetConfig+0xb8>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d00f      	beq.n	8009a34 <TIM_OC6_SetConfig+0x78>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a18      	ldr	r2, [pc, #96]	; (8009a78 <TIM_OC6_SetConfig+0xbc>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d00b      	beq.n	8009a34 <TIM_OC6_SetConfig+0x78>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a17      	ldr	r2, [pc, #92]	; (8009a7c <TIM_OC6_SetConfig+0xc0>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d007      	beq.n	8009a34 <TIM_OC6_SetConfig+0x78>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a16      	ldr	r2, [pc, #88]	; (8009a80 <TIM_OC6_SetConfig+0xc4>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d003      	beq.n	8009a34 <TIM_OC6_SetConfig+0x78>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a15      	ldr	r2, [pc, #84]	; (8009a84 <TIM_OC6_SetConfig+0xc8>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d109      	bne.n	8009a48 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	695b      	ldr	r3, [r3, #20]
 8009a40:	029b      	lsls	r3, r3, #10
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	697a      	ldr	r2, [r7, #20]
 8009a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	621a      	str	r2, [r3, #32]
}
 8009a62:	bf00      	nop
 8009a64:	371c      	adds	r7, #28
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	feff8fff 	.word	0xfeff8fff
 8009a74:	40010000 	.word	0x40010000
 8009a78:	40010400 	.word	0x40010400
 8009a7c:	40014000 	.word	0x40014000
 8009a80:	40014400 	.word	0x40014400
 8009a84:	40014800 	.word	0x40014800

08009a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6a1b      	ldr	r3, [r3, #32]
 8009a9e:	f023 0201 	bic.w	r2, r3, #1
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	011b      	lsls	r3, r3, #4
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f023 030a 	bic.w	r3, r3, #10
 8009ac4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	621a      	str	r2, [r3, #32]
}
 8009ada:	bf00      	nop
 8009adc:	371c      	adds	r7, #28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b087      	sub	sp, #28
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	60f8      	str	r0, [r7, #12]
 8009aee:	60b9      	str	r1, [r7, #8]
 8009af0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	f023 0210 	bic.w	r2, r3, #16
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6a1b      	ldr	r3, [r3, #32]
 8009b08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	031b      	lsls	r3, r3, #12
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	011b      	lsls	r3, r3, #4
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	697a      	ldr	r2, [r7, #20]
 8009b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	621a      	str	r2, [r3, #32]
}
 8009b3a:	bf00      	nop
 8009b3c:	371c      	adds	r7, #28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
	...

08009b48 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	4b09      	ldr	r3, [pc, #36]	; (8009b80 <TIM_ITRx_SetConfig+0x38>)
 8009b5c:	4013      	ands	r3, r2
 8009b5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b60:	683a      	ldr	r2, [r7, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	f043 0307 	orr.w	r3, r3, #7
 8009b6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	609a      	str	r2, [r3, #8]
}
 8009b72:	bf00      	nop
 8009b74:	3714      	adds	r7, #20
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	ffcfff8f 	.word	0xffcfff8f

08009b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
 8009b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	021a      	lsls	r2, r3, #8
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	431a      	orrs	r2, r3
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	697a      	ldr	r2, [r7, #20]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	609a      	str	r2, [r3, #8]
}
 8009bb8:	bf00      	nop
 8009bba:	371c      	adds	r7, #28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d101      	bne.n	8009bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009bd8:	2302      	movs	r3, #2
 8009bda:	e06d      	b.n	8009cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2202      	movs	r2, #2
 8009be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a30      	ldr	r2, [pc, #192]	; (8009cc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d004      	beq.n	8009c10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a2f      	ldr	r2, [pc, #188]	; (8009cc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d108      	bne.n	8009c22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009c16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a20      	ldr	r2, [pc, #128]	; (8009cc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d022      	beq.n	8009c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c4e:	d01d      	beq.n	8009c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a1d      	ldr	r2, [pc, #116]	; (8009ccc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d018      	beq.n	8009c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a1c      	ldr	r2, [pc, #112]	; (8009cd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d013      	beq.n	8009c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a1a      	ldr	r2, [pc, #104]	; (8009cd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d00e      	beq.n	8009c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a15      	ldr	r2, [pc, #84]	; (8009cc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d009      	beq.n	8009c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a16      	ldr	r2, [pc, #88]	; (8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d004      	beq.n	8009c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a15      	ldr	r2, [pc, #84]	; (8009cdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d10c      	bne.n	8009ca6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3714      	adds	r7, #20
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr
 8009cc4:	40010000 	.word	0x40010000
 8009cc8:	40010400 	.word	0x40010400
 8009ccc:	40000400 	.word	0x40000400
 8009cd0:	40000800 	.word	0x40000800
 8009cd4:	40000c00 	.word	0x40000c00
 8009cd8:	40001800 	.word	0x40001800
 8009cdc:	40014000 	.word	0x40014000

08009ce0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d101      	bne.n	8009cfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	e065      	b.n	8009dc8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	695b      	ldr	r3, [r3, #20]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	041b      	lsls	r3, r3, #16
 8009d72:	4313      	orrs	r3, r2
 8009d74:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a16      	ldr	r2, [pc, #88]	; (8009dd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d004      	beq.n	8009d8a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a14      	ldr	r2, [pc, #80]	; (8009dd8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d115      	bne.n	8009db6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d94:	051b      	lsls	r3, r3, #20
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	69db      	ldr	r3, [r3, #28]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	6a1b      	ldr	r3, [r3, #32]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr
 8009dd4:	40010000 	.word	0x40010000
 8009dd8:	40010400 	.word	0x40010400

08009ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <__NVIC_SetPriority>:
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	6039      	str	r1, [r7, #0]
 8009e22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009e24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	db0a      	blt.n	8009e42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	490c      	ldr	r1, [pc, #48]	; (8009e64 <__NVIC_SetPriority+0x4c>)
 8009e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e36:	0112      	lsls	r2, r2, #4
 8009e38:	b2d2      	uxtb	r2, r2
 8009e3a:	440b      	add	r3, r1
 8009e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009e40:	e00a      	b.n	8009e58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	4908      	ldr	r1, [pc, #32]	; (8009e68 <__NVIC_SetPriority+0x50>)
 8009e48:	88fb      	ldrh	r3, [r7, #6]
 8009e4a:	f003 030f 	and.w	r3, r3, #15
 8009e4e:	3b04      	subs	r3, #4
 8009e50:	0112      	lsls	r2, r2, #4
 8009e52:	b2d2      	uxtb	r2, r2
 8009e54:	440b      	add	r3, r1
 8009e56:	761a      	strb	r2, [r3, #24]
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	e000e100 	.word	0xe000e100
 8009e68:	e000ed00 	.word	0xe000ed00

08009e6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009e70:	4b05      	ldr	r3, [pc, #20]	; (8009e88 <SysTick_Handler+0x1c>)
 8009e72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009e74:	f001 ff34 	bl	800bce0 <xTaskGetSchedulerState>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d001      	beq.n	8009e82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009e7e:	f002 fe23 	bl	800cac8 <xPortSysTickHandler>
  }
}
 8009e82:	bf00      	nop
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	e000e010 	.word	0xe000e010

08009e8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009e90:	2100      	movs	r1, #0
 8009e92:	f06f 0004 	mvn.w	r0, #4
 8009e96:	f7ff ffbf 	bl	8009e18 <__NVIC_SetPriority>
#endif
}
 8009e9a:	bf00      	nop
 8009e9c:	bd80      	pop	{r7, pc}
	...

08009ea0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ea6:	f3ef 8305 	mrs	r3, IPSR
 8009eaa:	603b      	str	r3, [r7, #0]
  return(result);
 8009eac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d003      	beq.n	8009eba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009eb2:	f06f 0305 	mvn.w	r3, #5
 8009eb6:	607b      	str	r3, [r7, #4]
 8009eb8:	e00c      	b.n	8009ed4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009eba:	4b0a      	ldr	r3, [pc, #40]	; (8009ee4 <osKernelInitialize+0x44>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d105      	bne.n	8009ece <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009ec2:	4b08      	ldr	r3, [pc, #32]	; (8009ee4 <osKernelInitialize+0x44>)
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	607b      	str	r3, [r7, #4]
 8009ecc:	e002      	b.n	8009ed4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009ece:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ed4:	687b      	ldr	r3, [r7, #4]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	370c      	adds	r7, #12
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	24000218 	.word	0x24000218

08009ee8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009eee:	f3ef 8305 	mrs	r3, IPSR
 8009ef2:	603b      	str	r3, [r7, #0]
  return(result);
 8009ef4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009efa:	f06f 0305 	mvn.w	r3, #5
 8009efe:	607b      	str	r3, [r7, #4]
 8009f00:	e010      	b.n	8009f24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009f02:	4b0b      	ldr	r3, [pc, #44]	; (8009f30 <osKernelStart+0x48>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d109      	bne.n	8009f1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009f0a:	f7ff ffbf 	bl	8009e8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009f0e:	4b08      	ldr	r3, [pc, #32]	; (8009f30 <osKernelStart+0x48>)
 8009f10:	2202      	movs	r2, #2
 8009f12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009f14:	f001 fa6a 	bl	800b3ec <vTaskStartScheduler>
      stat = osOK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	607b      	str	r3, [r7, #4]
 8009f1c:	e002      	b.n	8009f24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009f24:	687b      	ldr	r3, [r7, #4]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	24000218 	.word	0x24000218

08009f34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b08e      	sub	sp, #56	; 0x38
 8009f38:	af04      	add	r7, sp, #16
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009f40:	2300      	movs	r3, #0
 8009f42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f44:	f3ef 8305 	mrs	r3, IPSR
 8009f48:	617b      	str	r3, [r7, #20]
  return(result);
 8009f4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d17e      	bne.n	800a04e <osThreadNew+0x11a>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d07b      	beq.n	800a04e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009f56:	2380      	movs	r3, #128	; 0x80
 8009f58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009f5a:	2318      	movs	r3, #24
 8009f5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009f62:	f04f 33ff 	mov.w	r3, #4294967295
 8009f66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d045      	beq.n	8009ffa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d002      	beq.n	8009f7c <osThreadNew+0x48>
        name = attr->name;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d008      	beq.n	8009fa2 <osThreadNew+0x6e>
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	2b38      	cmp	r3, #56	; 0x38
 8009f94:	d805      	bhi.n	8009fa2 <osThreadNew+0x6e>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d001      	beq.n	8009fa6 <osThreadNew+0x72>
        return (NULL);
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	e054      	b.n	800a050 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d003      	beq.n	8009fb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	695b      	ldr	r3, [r3, #20]
 8009fb2:	089b      	lsrs	r3, r3, #2
 8009fb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00e      	beq.n	8009fdc <osThreadNew+0xa8>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	2bab      	cmp	r3, #171	; 0xab
 8009fc4:	d90a      	bls.n	8009fdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d006      	beq.n	8009fdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	695b      	ldr	r3, [r3, #20]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d002      	beq.n	8009fdc <osThreadNew+0xa8>
        mem = 1;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	61bb      	str	r3, [r7, #24]
 8009fda:	e010      	b.n	8009ffe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10c      	bne.n	8009ffe <osThreadNew+0xca>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d108      	bne.n	8009ffe <osThreadNew+0xca>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d104      	bne.n	8009ffe <osThreadNew+0xca>
          mem = 0;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	61bb      	str	r3, [r7, #24]
 8009ff8:	e001      	b.n	8009ffe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d110      	bne.n	800a026 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a00c:	9202      	str	r2, [sp, #8]
 800a00e:	9301      	str	r3, [sp, #4]
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	6a3a      	ldr	r2, [r7, #32]
 800a018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f000 fff6 	bl	800b00c <xTaskCreateStatic>
 800a020:	4603      	mov	r3, r0
 800a022:	613b      	str	r3, [r7, #16]
 800a024:	e013      	b.n	800a04e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d110      	bne.n	800a04e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	b29a      	uxth	r2, r3
 800a030:	f107 0310 	add.w	r3, r7, #16
 800a034:	9301      	str	r3, [sp, #4]
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f001 f841 	bl	800b0c6 <xTaskCreate>
 800a044:	4603      	mov	r3, r0
 800a046:	2b01      	cmp	r3, #1
 800a048:	d001      	beq.n	800a04e <osThreadNew+0x11a>
            hTask = NULL;
 800a04a:	2300      	movs	r3, #0
 800a04c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a04e:	693b      	ldr	r3, [r7, #16]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3728      	adds	r7, #40	; 0x28
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a060:	f3ef 8305 	mrs	r3, IPSR
 800a064:	60bb      	str	r3, [r7, #8]
  return(result);
 800a066:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d003      	beq.n	800a074 <osDelay+0x1c>
    stat = osErrorISR;
 800a06c:	f06f 0305 	mvn.w	r3, #5
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	e007      	b.n	800a084 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a074:	2300      	movs	r3, #0
 800a076:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d002      	beq.n	800a084 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f001 f980 	bl	800b384 <vTaskDelay>
    }
  }

  return (stat);
 800a084:	68fb      	ldr	r3, [r7, #12]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a08e:	b580      	push	{r7, lr}
 800a090:	b08a      	sub	sp, #40	; 0x28
 800a092:	af02      	add	r7, sp, #8
 800a094:	60f8      	str	r0, [r7, #12]
 800a096:	60b9      	str	r1, [r7, #8]
 800a098:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a09a:	2300      	movs	r3, #0
 800a09c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a09e:	f3ef 8305 	mrs	r3, IPSR
 800a0a2:	613b      	str	r3, [r7, #16]
  return(result);
 800a0a4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d15f      	bne.n	800a16a <osMessageQueueNew+0xdc>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d05c      	beq.n	800a16a <osMessageQueueNew+0xdc>
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d059      	beq.n	800a16a <osMessageQueueNew+0xdc>
    mem = -1;
 800a0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d029      	beq.n	800a116 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d012      	beq.n	800a0f0 <osMessageQueueNew+0x62>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	2b4f      	cmp	r3, #79	; 0x4f
 800a0d0:	d90e      	bls.n	800a0f0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00a      	beq.n	800a0f0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	695a      	ldr	r2, [r3, #20]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	68b9      	ldr	r1, [r7, #8]
 800a0e2:	fb01 f303 	mul.w	r3, r1, r3
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d302      	bcc.n	800a0f0 <osMessageQueueNew+0x62>
        mem = 1;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	61bb      	str	r3, [r7, #24]
 800a0ee:	e014      	b.n	800a11a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d110      	bne.n	800a11a <osMessageQueueNew+0x8c>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10c      	bne.n	800a11a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a104:	2b00      	cmp	r3, #0
 800a106:	d108      	bne.n	800a11a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d104      	bne.n	800a11a <osMessageQueueNew+0x8c>
          mem = 0;
 800a110:	2300      	movs	r3, #0
 800a112:	61bb      	str	r3, [r7, #24]
 800a114:	e001      	b.n	800a11a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a116:	2300      	movs	r3, #0
 800a118:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d10b      	bne.n	800a138 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	691a      	ldr	r2, [r3, #16]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	2100      	movs	r1, #0
 800a12a:	9100      	str	r1, [sp, #0]
 800a12c:	68b9      	ldr	r1, [r7, #8]
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f000 fa2e 	bl	800a590 <xQueueGenericCreateStatic>
 800a134:	61f8      	str	r0, [r7, #28]
 800a136:	e008      	b.n	800a14a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d105      	bne.n	800a14a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a13e:	2200      	movs	r2, #0
 800a140:	68b9      	ldr	r1, [r7, #8]
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f000 fa9c 	bl	800a680 <xQueueGenericCreate>
 800a148:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00c      	beq.n	800a16a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d003      	beq.n	800a15e <osMessageQueueNew+0xd0>
        name = attr->name;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	e001      	b.n	800a162 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a15e:	2300      	movs	r3, #0
 800a160:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a162:	6979      	ldr	r1, [r7, #20]
 800a164:	69f8      	ldr	r0, [r7, #28]
 800a166:	f000 fef3 	bl	800af50 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a16a:	69fb      	ldr	r3, [r7, #28]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3720      	adds	r7, #32
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a174:	b580      	push	{r7, lr}
 800a176:	b088      	sub	sp, #32
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	603b      	str	r3, [r7, #0]
 800a180:	4613      	mov	r3, r2
 800a182:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a188:	2300      	movs	r3, #0
 800a18a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a18c:	f3ef 8305 	mrs	r3, IPSR
 800a190:	617b      	str	r3, [r7, #20]
  return(result);
 800a192:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a194:	2b00      	cmp	r3, #0
 800a196:	d028      	beq.n	800a1ea <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d005      	beq.n	800a1aa <osMessageQueuePut+0x36>
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <osMessageQueuePut+0x36>
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d003      	beq.n	800a1b2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a1aa:	f06f 0303 	mvn.w	r3, #3
 800a1ae:	61fb      	str	r3, [r7, #28]
 800a1b0:	e038      	b.n	800a224 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a1b6:	f107 0210 	add.w	r2, r7, #16
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	68b9      	ldr	r1, [r7, #8]
 800a1be:	69b8      	ldr	r0, [r7, #24]
 800a1c0:	f000 fbba 	bl	800a938 <xQueueGenericSendFromISR>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d003      	beq.n	800a1d2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a1ca:	f06f 0302 	mvn.w	r3, #2
 800a1ce:	61fb      	str	r3, [r7, #28]
 800a1d0:	e028      	b.n	800a224 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d025      	beq.n	800a224 <osMessageQueuePut+0xb0>
 800a1d8:	4b15      	ldr	r3, [pc, #84]	; (800a230 <osMessageQueuePut+0xbc>)
 800a1da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1de:	601a      	str	r2, [r3, #0]
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	e01c      	b.n	800a224 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d002      	beq.n	800a1f6 <osMessageQueuePut+0x82>
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d103      	bne.n	800a1fe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a1f6:	f06f 0303 	mvn.w	r3, #3
 800a1fa:	61fb      	str	r3, [r7, #28]
 800a1fc:	e012      	b.n	800a224 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a1fe:	2300      	movs	r3, #0
 800a200:	683a      	ldr	r2, [r7, #0]
 800a202:	68b9      	ldr	r1, [r7, #8]
 800a204:	69b8      	ldr	r0, [r7, #24]
 800a206:	f000 fa99 	bl	800a73c <xQueueGenericSend>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d009      	beq.n	800a224 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d003      	beq.n	800a21e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a216:	f06f 0301 	mvn.w	r3, #1
 800a21a:	61fb      	str	r3, [r7, #28]
 800a21c:	e002      	b.n	800a224 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a21e:	f06f 0302 	mvn.w	r3, #2
 800a222:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a224:	69fb      	ldr	r3, [r7, #28]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3720      	adds	r7, #32
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	e000ed04 	.word	0xe000ed04

0800a234 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a234:	b580      	push	{r7, lr}
 800a236:	b088      	sub	sp, #32
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a246:	2300      	movs	r3, #0
 800a248:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a24a:	f3ef 8305 	mrs	r3, IPSR
 800a24e:	617b      	str	r3, [r7, #20]
  return(result);
 800a250:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a252:	2b00      	cmp	r3, #0
 800a254:	d028      	beq.n	800a2a8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d005      	beq.n	800a268 <osMessageQueueGet+0x34>
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d002      	beq.n	800a268 <osMessageQueueGet+0x34>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a268:	f06f 0303 	mvn.w	r3, #3
 800a26c:	61fb      	str	r3, [r7, #28]
 800a26e:	e037      	b.n	800a2e0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a270:	2300      	movs	r3, #0
 800a272:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a274:	f107 0310 	add.w	r3, r7, #16
 800a278:	461a      	mov	r2, r3
 800a27a:	68b9      	ldr	r1, [r7, #8]
 800a27c:	69b8      	ldr	r0, [r7, #24]
 800a27e:	f000 fcd7 	bl	800ac30 <xQueueReceiveFromISR>
 800a282:	4603      	mov	r3, r0
 800a284:	2b01      	cmp	r3, #1
 800a286:	d003      	beq.n	800a290 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a288:	f06f 0302 	mvn.w	r3, #2
 800a28c:	61fb      	str	r3, [r7, #28]
 800a28e:	e027      	b.n	800a2e0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d024      	beq.n	800a2e0 <osMessageQueueGet+0xac>
 800a296:	4b15      	ldr	r3, [pc, #84]	; (800a2ec <osMessageQueueGet+0xb8>)
 800a298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	e01b      	b.n	800a2e0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d002      	beq.n	800a2b4 <osMessageQueueGet+0x80>
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d103      	bne.n	800a2bc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a2b4:	f06f 0303 	mvn.w	r3, #3
 800a2b8:	61fb      	str	r3, [r7, #28]
 800a2ba:	e011      	b.n	800a2e0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	68b9      	ldr	r1, [r7, #8]
 800a2c0:	69b8      	ldr	r0, [r7, #24]
 800a2c2:	f000 fbd5 	bl	800aa70 <xQueueReceive>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d009      	beq.n	800a2e0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d003      	beq.n	800a2da <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a2d2:	f06f 0301 	mvn.w	r3, #1
 800a2d6:	61fb      	str	r3, [r7, #28]
 800a2d8:	e002      	b.n	800a2e0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a2da:	f06f 0302 	mvn.w	r3, #2
 800a2de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a2e0:	69fb      	ldr	r3, [r7, #28]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3720      	adds	r7, #32
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	e000ed04 	.word	0xe000ed04

0800a2f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	4a07      	ldr	r2, [pc, #28]	; (800a31c <vApplicationGetIdleTaskMemory+0x2c>)
 800a300:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	4a06      	ldr	r2, [pc, #24]	; (800a320 <vApplicationGetIdleTaskMemory+0x30>)
 800a306:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2280      	movs	r2, #128	; 0x80
 800a30c:	601a      	str	r2, [r3, #0]
}
 800a30e:	bf00      	nop
 800a310:	3714      	adds	r7, #20
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	2400021c 	.word	0x2400021c
 800a320:	240002c8 	.word	0x240002c8

0800a324 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	4a07      	ldr	r2, [pc, #28]	; (800a350 <vApplicationGetTimerTaskMemory+0x2c>)
 800a334:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	4a06      	ldr	r2, [pc, #24]	; (800a354 <vApplicationGetTimerTaskMemory+0x30>)
 800a33a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a342:	601a      	str	r2, [r3, #0]
}
 800a344:	bf00      	nop
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	240004c8 	.word	0x240004c8
 800a354:	24000574 	.word	0x24000574

0800a358 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f103 0208 	add.w	r2, r3, #8
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f04f 32ff 	mov.w	r2, #4294967295
 800a370:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f103 0208 	add.w	r2, r3, #8
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f103 0208 	add.w	r2, r3, #8
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a3a6:	bf00      	nop
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b085      	sub	sp, #20
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	689a      	ldr	r2, [r3, #8]
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	1c5a      	adds	r2, r3, #1
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	601a      	str	r2, [r3, #0]
}
 800a3ee:	bf00      	nop
 800a3f0:	3714      	adds	r7, #20
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b085      	sub	sp, #20
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
 800a402:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a410:	d103      	bne.n	800a41a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	60fb      	str	r3, [r7, #12]
 800a418:	e00c      	b.n	800a434 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3308      	adds	r3, #8
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	e002      	b.n	800a428 <vListInsert+0x2e>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	429a      	cmp	r2, r3
 800a432:	d2f6      	bcs.n	800a422 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	685a      	ldr	r2, [r3, #4]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	683a      	ldr	r2, [r7, #0]
 800a44e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	1c5a      	adds	r2, r3, #1
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	601a      	str	r2, [r3, #0]
}
 800a460:	bf00      	nop
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	6892      	ldr	r2, [r2, #8]
 800a482:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	6852      	ldr	r2, [r2, #4]
 800a48c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	429a      	cmp	r2, r3
 800a496:	d103      	bne.n	800a4a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	689a      	ldr	r2, [r3, #8]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	1e5a      	subs	r2, r3, #1
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10a      	bne.n	800a4ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a4e6:	bf00      	nop
 800a4e8:	e7fe      	b.n	800a4e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a4ea:	f002 fa5b 	bl	800c9a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f6:	68f9      	ldr	r1, [r7, #12]
 800a4f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4fa:	fb01 f303 	mul.w	r3, r1, r3
 800a4fe:	441a      	add	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a51a:	3b01      	subs	r3, #1
 800a51c:	68f9      	ldr	r1, [r7, #12]
 800a51e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a520:	fb01 f303 	mul.w	r3, r1, r3
 800a524:	441a      	add	r2, r3
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	22ff      	movs	r2, #255	; 0xff
 800a52e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	22ff      	movs	r2, #255	; 0xff
 800a536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d114      	bne.n	800a56a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d01a      	beq.n	800a57e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3310      	adds	r3, #16
 800a54c:	4618      	mov	r0, r3
 800a54e:	f001 fa05 	bl	800b95c <xTaskRemoveFromEventList>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d012      	beq.n	800a57e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a558:	4b0c      	ldr	r3, [pc, #48]	; (800a58c <xQueueGenericReset+0xcc>)
 800a55a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a55e:	601a      	str	r2, [r3, #0]
 800a560:	f3bf 8f4f 	dsb	sy
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	e009      	b.n	800a57e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	3310      	adds	r3, #16
 800a56e:	4618      	mov	r0, r3
 800a570:	f7ff fef2 	bl	800a358 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	3324      	adds	r3, #36	; 0x24
 800a578:	4618      	mov	r0, r3
 800a57a:	f7ff feed 	bl	800a358 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a57e:	f002 fa41 	bl	800ca04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a582:	2301      	movs	r3, #1
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	e000ed04 	.word	0xe000ed04

0800a590 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a590:	b580      	push	{r7, lr}
 800a592:	b08e      	sub	sp, #56	; 0x38
 800a594:	af02      	add	r7, sp, #8
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
 800a59c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10a      	bne.n	800a5ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5b6:	bf00      	nop
 800a5b8:	e7fe      	b.n	800a5b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10a      	bne.n	800a5d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5d2:	bf00      	nop
 800a5d4:	e7fe      	b.n	800a5d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <xQueueGenericCreateStatic+0x52>
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <xQueueGenericCreateStatic+0x56>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e000      	b.n	800a5e8 <xQueueGenericCreateStatic+0x58>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10a      	bne.n	800a602 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	623b      	str	r3, [r7, #32]
}
 800a5fe:	bf00      	nop
 800a600:	e7fe      	b.n	800a600 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d102      	bne.n	800a60e <xQueueGenericCreateStatic+0x7e>
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <xQueueGenericCreateStatic+0x82>
 800a60e:	2301      	movs	r3, #1
 800a610:	e000      	b.n	800a614 <xQueueGenericCreateStatic+0x84>
 800a612:	2300      	movs	r3, #0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10a      	bne.n	800a62e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	61fb      	str	r3, [r7, #28]
}
 800a62a:	bf00      	nop
 800a62c:	e7fe      	b.n	800a62c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a62e:	2350      	movs	r3, #80	; 0x50
 800a630:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	2b50      	cmp	r3, #80	; 0x50
 800a636:	d00a      	beq.n	800a64e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63c:	f383 8811 	msr	BASEPRI, r3
 800a640:	f3bf 8f6f 	isb	sy
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	61bb      	str	r3, [r7, #24]
}
 800a64a:	bf00      	nop
 800a64c:	e7fe      	b.n	800a64c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a64e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00d      	beq.n	800a676 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65c:	2201      	movs	r2, #1
 800a65e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a662:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	4613      	mov	r3, r2
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	68b9      	ldr	r1, [r7, #8]
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f000 f83f 	bl	800a6f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a678:	4618      	mov	r0, r3
 800a67a:	3730      	adds	r7, #48	; 0x30
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a680:	b580      	push	{r7, lr}
 800a682:	b08a      	sub	sp, #40	; 0x28
 800a684:	af02      	add	r7, sp, #8
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	4613      	mov	r3, r2
 800a68c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10a      	bne.n	800a6aa <xQueueGenericCreate+0x2a>
	__asm volatile
 800a694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	613b      	str	r3, [r7, #16]
}
 800a6a6:	bf00      	nop
 800a6a8:	e7fe      	b.n	800a6a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	68ba      	ldr	r2, [r7, #8]
 800a6ae:	fb02 f303 	mul.w	r3, r2, r3
 800a6b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	3350      	adds	r3, #80	; 0x50
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f002 fa95 	bl	800cbe8 <pvPortMalloc>
 800a6be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d011      	beq.n	800a6ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	3350      	adds	r3, #80	; 0x50
 800a6ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6d8:	79fa      	ldrb	r2, [r7, #7]
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	9300      	str	r3, [sp, #0]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	68b9      	ldr	r1, [r7, #8]
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f000 f805 	bl	800a6f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a6ea:	69bb      	ldr	r3, [r7, #24]
	}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3720      	adds	r7, #32
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
 800a700:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d103      	bne.n	800a710 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	69ba      	ldr	r2, [r7, #24]
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	e002      	b.n	800a716 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a722:	2101      	movs	r1, #1
 800a724:	69b8      	ldr	r0, [r7, #24]
 800a726:	f7ff fecb 	bl	800a4c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	78fa      	ldrb	r2, [r7, #3]
 800a72e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a732:	bf00      	nop
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
	...

0800a73c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b08e      	sub	sp, #56	; 0x38
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
 800a748:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a74a:	2300      	movs	r3, #0
 800a74c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10a      	bne.n	800a76e <xQueueGenericSend+0x32>
	__asm volatile
 800a758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a76a:	bf00      	nop
 800a76c:	e7fe      	b.n	800a76c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d103      	bne.n	800a77c <xQueueGenericSend+0x40>
 800a774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d101      	bne.n	800a780 <xQueueGenericSend+0x44>
 800a77c:	2301      	movs	r3, #1
 800a77e:	e000      	b.n	800a782 <xQueueGenericSend+0x46>
 800a780:	2300      	movs	r3, #0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10a      	bne.n	800a79c <xQueueGenericSend+0x60>
	__asm volatile
 800a786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78a:	f383 8811 	msr	BASEPRI, r3
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a798:	bf00      	nop
 800a79a:	e7fe      	b.n	800a79a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d103      	bne.n	800a7aa <xQueueGenericSend+0x6e>
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d101      	bne.n	800a7ae <xQueueGenericSend+0x72>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e000      	b.n	800a7b0 <xQueueGenericSend+0x74>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10a      	bne.n	800a7ca <xQueueGenericSend+0x8e>
	__asm volatile
 800a7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	623b      	str	r3, [r7, #32]
}
 800a7c6:	bf00      	nop
 800a7c8:	e7fe      	b.n	800a7c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7ca:	f001 fa89 	bl	800bce0 <xTaskGetSchedulerState>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d102      	bne.n	800a7da <xQueueGenericSend+0x9e>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d101      	bne.n	800a7de <xQueueGenericSend+0xa2>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e000      	b.n	800a7e0 <xQueueGenericSend+0xa4>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10a      	bne.n	800a7fa <xQueueGenericSend+0xbe>
	__asm volatile
 800a7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	61fb      	str	r3, [r7, #28]
}
 800a7f6:	bf00      	nop
 800a7f8:	e7fe      	b.n	800a7f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7fa:	f002 f8d3 	bl	800c9a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a806:	429a      	cmp	r2, r3
 800a808:	d302      	bcc.n	800a810 <xQueueGenericSend+0xd4>
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	d129      	bne.n	800a864 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a810:	683a      	ldr	r2, [r7, #0]
 800a812:	68b9      	ldr	r1, [r7, #8]
 800a814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a816:	f000 fa8b 	bl	800ad30 <prvCopyDataToQueue>
 800a81a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a820:	2b00      	cmp	r3, #0
 800a822:	d010      	beq.n	800a846 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a826:	3324      	adds	r3, #36	; 0x24
 800a828:	4618      	mov	r0, r3
 800a82a:	f001 f897 	bl	800b95c <xTaskRemoveFromEventList>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d013      	beq.n	800a85c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a834:	4b3f      	ldr	r3, [pc, #252]	; (800a934 <xQueueGenericSend+0x1f8>)
 800a836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a83a:	601a      	str	r2, [r3, #0]
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	e00a      	b.n	800a85c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d007      	beq.n	800a85c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a84c:	4b39      	ldr	r3, [pc, #228]	; (800a934 <xQueueGenericSend+0x1f8>)
 800a84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a852:	601a      	str	r2, [r3, #0]
 800a854:	f3bf 8f4f 	dsb	sy
 800a858:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a85c:	f002 f8d2 	bl	800ca04 <vPortExitCritical>
				return pdPASS;
 800a860:	2301      	movs	r3, #1
 800a862:	e063      	b.n	800a92c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d103      	bne.n	800a872 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a86a:	f002 f8cb 	bl	800ca04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a86e:	2300      	movs	r3, #0
 800a870:	e05c      	b.n	800a92c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a874:	2b00      	cmp	r3, #0
 800a876:	d106      	bne.n	800a886 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a878:	f107 0314 	add.w	r3, r7, #20
 800a87c:	4618      	mov	r0, r3
 800a87e:	f001 f8d1 	bl	800ba24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a882:	2301      	movs	r3, #1
 800a884:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a886:	f002 f8bd 	bl	800ca04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a88a:	f000 fe21 	bl	800b4d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a88e:	f002 f889 	bl	800c9a4 <vPortEnterCritical>
 800a892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a898:	b25b      	sxtb	r3, r3
 800a89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a89e:	d103      	bne.n	800a8a8 <xQueueGenericSend+0x16c>
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8ae:	b25b      	sxtb	r3, r3
 800a8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b4:	d103      	bne.n	800a8be <xQueueGenericSend+0x182>
 800a8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8be:	f002 f8a1 	bl	800ca04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8c2:	1d3a      	adds	r2, r7, #4
 800a8c4:	f107 0314 	add.w	r3, r7, #20
 800a8c8:	4611      	mov	r1, r2
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f001 f8c0 	bl	800ba50 <xTaskCheckForTimeOut>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d124      	bne.n	800a920 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a8d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8d8:	f000 fb22 	bl	800af20 <prvIsQueueFull>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d018      	beq.n	800a914 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e4:	3310      	adds	r3, #16
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f000 ffe6 	bl	800b8bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a8f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8f2:	f000 faad 	bl	800ae50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a8f6:	f000 fdf9 	bl	800b4ec <xTaskResumeAll>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f47f af7c 	bne.w	800a7fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a902:	4b0c      	ldr	r3, [pc, #48]	; (800a934 <xQueueGenericSend+0x1f8>)
 800a904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	e772      	b.n	800a7fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a916:	f000 fa9b 	bl	800ae50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a91a:	f000 fde7 	bl	800b4ec <xTaskResumeAll>
 800a91e:	e76c      	b.n	800a7fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a922:	f000 fa95 	bl	800ae50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a926:	f000 fde1 	bl	800b4ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a92a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3738      	adds	r7, #56	; 0x38
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	e000ed04 	.word	0xe000ed04

0800a938 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b090      	sub	sp, #64	; 0x40
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
 800a944:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10a      	bne.n	800a966 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a962:	bf00      	nop
 800a964:	e7fe      	b.n	800a964 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d103      	bne.n	800a974 <xQueueGenericSendFromISR+0x3c>
 800a96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a970:	2b00      	cmp	r3, #0
 800a972:	d101      	bne.n	800a978 <xQueueGenericSendFromISR+0x40>
 800a974:	2301      	movs	r3, #1
 800a976:	e000      	b.n	800a97a <xQueueGenericSendFromISR+0x42>
 800a978:	2300      	movs	r3, #0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d10a      	bne.n	800a994 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a990:	bf00      	nop
 800a992:	e7fe      	b.n	800a992 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	2b02      	cmp	r3, #2
 800a998:	d103      	bne.n	800a9a2 <xQueueGenericSendFromISR+0x6a>
 800a99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d101      	bne.n	800a9a6 <xQueueGenericSendFromISR+0x6e>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e000      	b.n	800a9a8 <xQueueGenericSendFromISR+0x70>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10a      	bne.n	800a9c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b0:	f383 8811 	msr	BASEPRI, r3
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	623b      	str	r3, [r7, #32]
}
 800a9be:	bf00      	nop
 800a9c0:	e7fe      	b.n	800a9c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9c2:	f002 f8d1 	bl	800cb68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a9c6:	f3ef 8211 	mrs	r2, BASEPRI
 800a9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ce:	f383 8811 	msr	BASEPRI, r3
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	f3bf 8f4f 	dsb	sy
 800a9da:	61fa      	str	r2, [r7, #28]
 800a9dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a9de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d302      	bcc.n	800a9f4 <xQueueGenericSendFromISR+0xbc>
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	d12f      	bne.n	800aa54 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa02:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa04:	683a      	ldr	r2, [r7, #0]
 800aa06:	68b9      	ldr	r1, [r7, #8]
 800aa08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa0a:	f000 f991 	bl	800ad30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aa12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa16:	d112      	bne.n	800aa3e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d016      	beq.n	800aa4e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa22:	3324      	adds	r3, #36	; 0x24
 800aa24:	4618      	mov	r0, r3
 800aa26:	f000 ff99 	bl	800b95c <xTaskRemoveFromEventList>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d00e      	beq.n	800aa4e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00b      	beq.n	800aa4e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	601a      	str	r2, [r3, #0]
 800aa3c:	e007      	b.n	800aa4e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa42:	3301      	adds	r3, #1
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	b25a      	sxtb	r2, r3
 800aa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800aa52:	e001      	b.n	800aa58 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa54:	2300      	movs	r3, #0
 800aa56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa5a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3740      	adds	r7, #64	; 0x40
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
	...

0800aa70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b08c      	sub	sp, #48	; 0x30
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10a      	bne.n	800aaa0 <xQueueReceive+0x30>
	__asm volatile
 800aa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	623b      	str	r3, [r7, #32]
}
 800aa9c:	bf00      	nop
 800aa9e:	e7fe      	b.n	800aa9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d103      	bne.n	800aaae <xQueueReceive+0x3e>
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d101      	bne.n	800aab2 <xQueueReceive+0x42>
 800aaae:	2301      	movs	r3, #1
 800aab0:	e000      	b.n	800aab4 <xQueueReceive+0x44>
 800aab2:	2300      	movs	r3, #0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10a      	bne.n	800aace <xQueueReceive+0x5e>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	61fb      	str	r3, [r7, #28]
}
 800aaca:	bf00      	nop
 800aacc:	e7fe      	b.n	800aacc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aace:	f001 f907 	bl	800bce0 <xTaskGetSchedulerState>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d102      	bne.n	800aade <xQueueReceive+0x6e>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <xQueueReceive+0x72>
 800aade:	2301      	movs	r3, #1
 800aae0:	e000      	b.n	800aae4 <xQueueReceive+0x74>
 800aae2:	2300      	movs	r3, #0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <xQueueReceive+0x8e>
	__asm volatile
 800aae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	61bb      	str	r3, [r7, #24]
}
 800aafa:	bf00      	nop
 800aafc:	e7fe      	b.n	800aafc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aafe:	f001 ff51 	bl	800c9a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d01f      	beq.n	800ab4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab0e:	68b9      	ldr	r1, [r7, #8]
 800ab10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab12:	f000 f977 	bl	800ae04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab18:	1e5a      	subs	r2, r3, #1
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00f      	beq.n	800ab46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab28:	3310      	adds	r3, #16
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f000 ff16 	bl	800b95c <xTaskRemoveFromEventList>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d007      	beq.n	800ab46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab36:	4b3d      	ldr	r3, [pc, #244]	; (800ac2c <xQueueReceive+0x1bc>)
 800ab38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab3c:	601a      	str	r2, [r3, #0]
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab46:	f001 ff5d 	bl	800ca04 <vPortExitCritical>
				return pdPASS;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e069      	b.n	800ac22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d103      	bne.n	800ab5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab54:	f001 ff56 	bl	800ca04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	e062      	b.n	800ac22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d106      	bne.n	800ab70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab62:	f107 0310 	add.w	r3, r7, #16
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 ff5c 	bl	800ba24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab70:	f001 ff48 	bl	800ca04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab74:	f000 fcac 	bl	800b4d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab78:	f001 ff14 	bl	800c9a4 <vPortEnterCritical>
 800ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab82:	b25b      	sxtb	r3, r3
 800ab84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab88:	d103      	bne.n	800ab92 <xQueueReceive+0x122>
 800ab8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab98:	b25b      	sxtb	r3, r3
 800ab9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9e:	d103      	bne.n	800aba8 <xQueueReceive+0x138>
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aba8:	f001 ff2c 	bl	800ca04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abac:	1d3a      	adds	r2, r7, #4
 800abae:	f107 0310 	add.w	r3, r7, #16
 800abb2:	4611      	mov	r1, r2
 800abb4:	4618      	mov	r0, r3
 800abb6:	f000 ff4b 	bl	800ba50 <xTaskCheckForTimeOut>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d123      	bne.n	800ac08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abc2:	f000 f997 	bl	800aef4 <prvIsQueueEmpty>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d017      	beq.n	800abfc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abce:	3324      	adds	r3, #36	; 0x24
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	4611      	mov	r1, r2
 800abd4:	4618      	mov	r0, r3
 800abd6:	f000 fe71 	bl	800b8bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abdc:	f000 f938 	bl	800ae50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abe0:	f000 fc84 	bl	800b4ec <xTaskResumeAll>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d189      	bne.n	800aafe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800abea:	4b10      	ldr	r3, [pc, #64]	; (800ac2c <xQueueReceive+0x1bc>)
 800abec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abf0:	601a      	str	r2, [r3, #0]
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	e780      	b.n	800aafe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abfe:	f000 f927 	bl	800ae50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac02:	f000 fc73 	bl	800b4ec <xTaskResumeAll>
 800ac06:	e77a      	b.n	800aafe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac0a:	f000 f921 	bl	800ae50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac0e:	f000 fc6d 	bl	800b4ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac14:	f000 f96e 	bl	800aef4 <prvIsQueueEmpty>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f43f af6f 	beq.w	800aafe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3730      	adds	r7, #48	; 0x30
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	e000ed04 	.word	0xe000ed04

0800ac30 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b08e      	sub	sp, #56	; 0x38
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10a      	bne.n	800ac5c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ac46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4a:	f383 8811 	msr	BASEPRI, r3
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	623b      	str	r3, [r7, #32]
}
 800ac58:	bf00      	nop
 800ac5a:	e7fe      	b.n	800ac5a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d103      	bne.n	800ac6a <xQueueReceiveFromISR+0x3a>
 800ac62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d101      	bne.n	800ac6e <xQueueReceiveFromISR+0x3e>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e000      	b.n	800ac70 <xQueueReceiveFromISR+0x40>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10a      	bne.n	800ac8a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	61fb      	str	r3, [r7, #28]
}
 800ac86:	bf00      	nop
 800ac88:	e7fe      	b.n	800ac88 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac8a:	f001 ff6d 	bl	800cb68 <vPortValidateInterruptPriority>
	__asm volatile
 800ac8e:	f3ef 8211 	mrs	r2, BASEPRI
 800ac92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac96:	f383 8811 	msr	BASEPRI, r3
 800ac9a:	f3bf 8f6f 	isb	sy
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	61ba      	str	r2, [r7, #24]
 800aca4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aca6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aca8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d02f      	beq.n	800ad16 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800acb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acc0:	68b9      	ldr	r1, [r7, #8]
 800acc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acc4:	f000 f89e 	bl	800ae04 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800acc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acca:	1e5a      	subs	r2, r3, #1
 800accc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800acd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800acd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd8:	d112      	bne.n	800ad00 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acdc:	691b      	ldr	r3, [r3, #16]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d016      	beq.n	800ad10 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ace2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace4:	3310      	adds	r3, #16
 800ace6:	4618      	mov	r0, r3
 800ace8:	f000 fe38 	bl	800b95c <xTaskRemoveFromEventList>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00e      	beq.n	800ad10 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00b      	beq.n	800ad10 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	601a      	str	r2, [r3, #0]
 800acfe:	e007      	b.n	800ad10 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ad00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad04:	3301      	adds	r3, #1
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	b25a      	sxtb	r2, r3
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ad10:	2301      	movs	r3, #1
 800ad12:	637b      	str	r3, [r7, #52]	; 0x34
 800ad14:	e001      	b.n	800ad1a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ad16:	2300      	movs	r3, #0
 800ad18:	637b      	str	r3, [r7, #52]	; 0x34
 800ad1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	f383 8811 	msr	BASEPRI, r3
}
 800ad24:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3738      	adds	r7, #56	; 0x38
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10d      	bne.n	800ad6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d14d      	bne.n	800adf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f000 ffde 	bl	800bd1c <xTaskPriorityDisinherit>
 800ad60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	609a      	str	r2, [r3, #8]
 800ad68:	e043      	b.n	800adf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d119      	bne.n	800ada4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6858      	ldr	r0, [r3, #4]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad78:	461a      	mov	r2, r3
 800ad7a:	68b9      	ldr	r1, [r7, #8]
 800ad7c:	f002 f9a2 	bl	800d0c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	685a      	ldr	r2, [r3, #4]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad88:	441a      	add	r2, r3
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	685a      	ldr	r2, [r3, #4]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d32b      	bcc.n	800adf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	605a      	str	r2, [r3, #4]
 800ada2:	e026      	b.n	800adf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	68d8      	ldr	r0, [r3, #12]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adac:	461a      	mov	r2, r3
 800adae:	68b9      	ldr	r1, [r7, #8]
 800adb0:	f002 f988 	bl	800d0c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	68da      	ldr	r2, [r3, #12]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adbc:	425b      	negs	r3, r3
 800adbe:	441a      	add	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	68da      	ldr	r2, [r3, #12]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d207      	bcs.n	800ade0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	689a      	ldr	r2, [r3, #8]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add8:	425b      	negs	r3, r3
 800adda:	441a      	add	r2, r3
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	d105      	bne.n	800adf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d002      	beq.n	800adf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	3b01      	subs	r3, #1
 800adf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	1c5a      	adds	r2, r3, #1
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800adfa:	697b      	ldr	r3, [r7, #20]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3718      	adds	r7, #24
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d018      	beq.n	800ae48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	68da      	ldr	r2, [r3, #12]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1e:	441a      	add	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	68da      	ldr	r2, [r3, #12]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d303      	bcc.n	800ae38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	68d9      	ldr	r1, [r3, #12]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae40:	461a      	mov	r2, r3
 800ae42:	6838      	ldr	r0, [r7, #0]
 800ae44:	f002 f93e 	bl	800d0c4 <memcpy>
	}
}
 800ae48:	bf00      	nop
 800ae4a:	3708      	adds	r7, #8
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae58:	f001 fda4 	bl	800c9a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae64:	e011      	b.n	800ae8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d012      	beq.n	800ae94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	3324      	adds	r3, #36	; 0x24
 800ae72:	4618      	mov	r0, r3
 800ae74:	f000 fd72 	bl	800b95c <xTaskRemoveFromEventList>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae7e:	f000 fe49 	bl	800bb14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae82:	7bfb      	ldrb	r3, [r7, #15]
 800ae84:	3b01      	subs	r3, #1
 800ae86:	b2db      	uxtb	r3, r3
 800ae88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	dce9      	bgt.n	800ae66 <prvUnlockQueue+0x16>
 800ae92:	e000      	b.n	800ae96 <prvUnlockQueue+0x46>
					break;
 800ae94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	22ff      	movs	r2, #255	; 0xff
 800ae9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ae9e:	f001 fdb1 	bl	800ca04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aea2:	f001 fd7f 	bl	800c9a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aeae:	e011      	b.n	800aed4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d012      	beq.n	800aede <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	3310      	adds	r3, #16
 800aebc:	4618      	mov	r0, r3
 800aebe:	f000 fd4d 	bl	800b95c <xTaskRemoveFromEventList>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d001      	beq.n	800aecc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aec8:	f000 fe24 	bl	800bb14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aecc:	7bbb      	ldrb	r3, [r7, #14]
 800aece:	3b01      	subs	r3, #1
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	dce9      	bgt.n	800aeb0 <prvUnlockQueue+0x60>
 800aedc:	e000      	b.n	800aee0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aede:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	22ff      	movs	r2, #255	; 0xff
 800aee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aee8:	f001 fd8c 	bl	800ca04 <vPortExitCritical>
}
 800aeec:	bf00      	nop
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aefc:	f001 fd52 	bl	800c9a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af04:	2b00      	cmp	r3, #0
 800af06:	d102      	bne.n	800af0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af08:	2301      	movs	r3, #1
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	e001      	b.n	800af12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af0e:	2300      	movs	r3, #0
 800af10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af12:	f001 fd77 	bl	800ca04 <vPortExitCritical>

	return xReturn;
 800af16:	68fb      	ldr	r3, [r7, #12]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af28:	f001 fd3c 	bl	800c9a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af34:	429a      	cmp	r2, r3
 800af36:	d102      	bne.n	800af3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af38:	2301      	movs	r3, #1
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	e001      	b.n	800af42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af3e:	2300      	movs	r3, #0
 800af40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af42:	f001 fd5f 	bl	800ca04 <vPortExitCritical>

	return xReturn;
 800af46:	68fb      	ldr	r3, [r7, #12]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af5a:	2300      	movs	r3, #0
 800af5c:	60fb      	str	r3, [r7, #12]
 800af5e:	e014      	b.n	800af8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af60:	4a0f      	ldr	r2, [pc, #60]	; (800afa0 <vQueueAddToRegistry+0x50>)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d10b      	bne.n	800af84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af6c:	490c      	ldr	r1, [pc, #48]	; (800afa0 <vQueueAddToRegistry+0x50>)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	683a      	ldr	r2, [r7, #0]
 800af72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af76:	4a0a      	ldr	r2, [pc, #40]	; (800afa0 <vQueueAddToRegistry+0x50>)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	00db      	lsls	r3, r3, #3
 800af7c:	4413      	add	r3, r2
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800af82:	e006      	b.n	800af92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	3301      	adds	r3, #1
 800af88:	60fb      	str	r3, [r7, #12]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2b07      	cmp	r3, #7
 800af8e:	d9e7      	bls.n	800af60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800af90:	bf00      	nop
 800af92:	bf00      	nop
 800af94:	3714      	adds	r7, #20
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	24000974 	.word	0x24000974

0800afa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800afb4:	f001 fcf6 	bl	800c9a4 <vPortEnterCritical>
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afbe:	b25b      	sxtb	r3, r3
 800afc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc4:	d103      	bne.n	800afce <vQueueWaitForMessageRestricted+0x2a>
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afd4:	b25b      	sxtb	r3, r3
 800afd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afda:	d103      	bne.n	800afe4 <vQueueWaitForMessageRestricted+0x40>
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	2200      	movs	r2, #0
 800afe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afe4:	f001 fd0e 	bl	800ca04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afec:	2b00      	cmp	r3, #0
 800afee:	d106      	bne.n	800affe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	3324      	adds	r3, #36	; 0x24
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	68b9      	ldr	r1, [r7, #8]
 800aff8:	4618      	mov	r0, r3
 800affa:	f000 fc83 	bl	800b904 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800affe:	6978      	ldr	r0, [r7, #20]
 800b000:	f7ff ff26 	bl	800ae50 <prvUnlockQueue>
	}
 800b004:	bf00      	nop
 800b006:	3718      	adds	r7, #24
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b08e      	sub	sp, #56	; 0x38
 800b010:	af04      	add	r7, sp, #16
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]
 800b018:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10a      	bne.n	800b036 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	623b      	str	r3, [r7, #32]
}
 800b032:	bf00      	nop
 800b034:	e7fe      	b.n	800b034 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d10a      	bne.n	800b052 <xTaskCreateStatic+0x46>
	__asm volatile
 800b03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b040:	f383 8811 	msr	BASEPRI, r3
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	61fb      	str	r3, [r7, #28]
}
 800b04e:	bf00      	nop
 800b050:	e7fe      	b.n	800b050 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b052:	23ac      	movs	r3, #172	; 0xac
 800b054:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	2bac      	cmp	r3, #172	; 0xac
 800b05a:	d00a      	beq.n	800b072 <xTaskCreateStatic+0x66>
	__asm volatile
 800b05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b060:	f383 8811 	msr	BASEPRI, r3
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	61bb      	str	r3, [r7, #24]
}
 800b06e:	bf00      	nop
 800b070:	e7fe      	b.n	800b070 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b072:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b076:	2b00      	cmp	r3, #0
 800b078:	d01e      	beq.n	800b0b8 <xTaskCreateStatic+0xac>
 800b07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d01b      	beq.n	800b0b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b082:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b088:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08c:	2202      	movs	r2, #2
 800b08e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b092:	2300      	movs	r3, #0
 800b094:	9303      	str	r3, [sp, #12]
 800b096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b098:	9302      	str	r3, [sp, #8]
 800b09a:	f107 0314 	add.w	r3, r7, #20
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	68b9      	ldr	r1, [r7, #8]
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f000 f850 	bl	800b150 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0b2:	f000 f8f7 	bl	800b2a4 <prvAddNewTaskToReadyList>
 800b0b6:	e001      	b.n	800b0bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b0bc:	697b      	ldr	r3, [r7, #20]
	}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3728      	adds	r7, #40	; 0x28
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b08c      	sub	sp, #48	; 0x30
 800b0ca:	af04      	add	r7, sp, #16
 800b0cc:	60f8      	str	r0, [r7, #12]
 800b0ce:	60b9      	str	r1, [r7, #8]
 800b0d0:	603b      	str	r3, [r7, #0]
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b0d6:	88fb      	ldrh	r3, [r7, #6]
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f001 fd84 	bl	800cbe8 <pvPortMalloc>
 800b0e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00e      	beq.n	800b106 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b0e8:	20ac      	movs	r0, #172	; 0xac
 800b0ea:	f001 fd7d 	bl	800cbe8 <pvPortMalloc>
 800b0ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d003      	beq.n	800b0fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	697a      	ldr	r2, [r7, #20]
 800b0fa:	631a      	str	r2, [r3, #48]	; 0x30
 800b0fc:	e005      	b.n	800b10a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b0fe:	6978      	ldr	r0, [r7, #20]
 800b100:	f001 fe3e 	bl	800cd80 <vPortFree>
 800b104:	e001      	b.n	800b10a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b106:	2300      	movs	r3, #0
 800b108:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d017      	beq.n	800b140 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	2200      	movs	r2, #0
 800b114:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b118:	88fa      	ldrh	r2, [r7, #6]
 800b11a:	2300      	movs	r3, #0
 800b11c:	9303      	str	r3, [sp, #12]
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	9302      	str	r3, [sp, #8]
 800b122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b124:	9301      	str	r3, [sp, #4]
 800b126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	68b9      	ldr	r1, [r7, #8]
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f000 f80e 	bl	800b150 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b134:	69f8      	ldr	r0, [r7, #28]
 800b136:	f000 f8b5 	bl	800b2a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b13a:	2301      	movs	r3, #1
 800b13c:	61bb      	str	r3, [r7, #24]
 800b13e:	e002      	b.n	800b146 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b140:	f04f 33ff 	mov.w	r3, #4294967295
 800b144:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b146:	69bb      	ldr	r3, [r7, #24]
	}
 800b148:	4618      	mov	r0, r3
 800b14a:	3720      	adds	r7, #32
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b088      	sub	sp, #32
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
 800b15c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b160:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	461a      	mov	r2, r3
 800b168:	21a5      	movs	r1, #165	; 0xa5
 800b16a:	f001 ff27 	bl	800cfbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b172:	6879      	ldr	r1, [r7, #4]
 800b174:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b178:	440b      	add	r3, r1
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4413      	add	r3, r2
 800b17e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	f023 0307 	bic.w	r3, r3, #7
 800b186:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	f003 0307 	and.w	r3, r3, #7
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00a      	beq.n	800b1a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	617b      	str	r3, [r7, #20]
}
 800b1a4:	bf00      	nop
 800b1a6:	e7fe      	b.n	800b1a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d01f      	beq.n	800b1ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	61fb      	str	r3, [r7, #28]
 800b1b2:	e012      	b.n	800b1da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b1b4:	68ba      	ldr	r2, [r7, #8]
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	7819      	ldrb	r1, [r3, #0]
 800b1bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	3334      	adds	r3, #52	; 0x34
 800b1c4:	460a      	mov	r2, r1
 800b1c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d006      	beq.n	800b1e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	61fb      	str	r3, [r7, #28]
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	2b0f      	cmp	r3, #15
 800b1de:	d9e9      	bls.n	800b1b4 <prvInitialiseNewTask+0x64>
 800b1e0:	e000      	b.n	800b1e4 <prvInitialiseNewTask+0x94>
			{
				break;
 800b1e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b1ec:	e003      	b.n	800b1f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f8:	2b37      	cmp	r3, #55	; 0x37
 800b1fa:	d901      	bls.n	800b200 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b1fc:	2337      	movs	r3, #55	; 0x37
 800b1fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b204:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b20a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20e:	2200      	movs	r2, #0
 800b210:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b214:	3304      	adds	r3, #4
 800b216:	4618      	mov	r0, r3
 800b218:	f7ff f8be 	bl	800a398 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21e:	3318      	adds	r3, #24
 800b220:	4618      	mov	r0, r3
 800b222:	f7ff f8b9 	bl	800a398 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b22a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b234:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b23a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23e:	2200      	movs	r2, #0
 800b240:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b244:	2200      	movs	r2, #0
 800b246:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24c:	2200      	movs	r2, #0
 800b24e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b254:	3358      	adds	r3, #88	; 0x58
 800b256:	224c      	movs	r2, #76	; 0x4c
 800b258:	2100      	movs	r1, #0
 800b25a:	4618      	mov	r0, r3
 800b25c:	f001 feae 	bl	800cfbc <memset>
 800b260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b262:	4a0d      	ldr	r2, [pc, #52]	; (800b298 <prvInitialiseNewTask+0x148>)
 800b264:	65da      	str	r2, [r3, #92]	; 0x5c
 800b266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b268:	4a0c      	ldr	r2, [pc, #48]	; (800b29c <prvInitialiseNewTask+0x14c>)
 800b26a:	661a      	str	r2, [r3, #96]	; 0x60
 800b26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26e:	4a0c      	ldr	r2, [pc, #48]	; (800b2a0 <prvInitialiseNewTask+0x150>)
 800b270:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b272:	683a      	ldr	r2, [r7, #0]
 800b274:	68f9      	ldr	r1, [r7, #12]
 800b276:	69b8      	ldr	r0, [r7, #24]
 800b278:	f001 fa6a 	bl	800c750 <pxPortInitialiseStack>
 800b27c:	4602      	mov	r2, r0
 800b27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b280:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b284:	2b00      	cmp	r3, #0
 800b286:	d002      	beq.n	800b28e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b28c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b28e:	bf00      	nop
 800b290:	3720      	adds	r7, #32
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	24004c10 	.word	0x24004c10
 800b29c:	24004c78 	.word	0x24004c78
 800b2a0:	24004ce0 	.word	0x24004ce0

0800b2a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b2ac:	f001 fb7a 	bl	800c9a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b2b0:	4b2d      	ldr	r3, [pc, #180]	; (800b368 <prvAddNewTaskToReadyList+0xc4>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	4a2c      	ldr	r2, [pc, #176]	; (800b368 <prvAddNewTaskToReadyList+0xc4>)
 800b2b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b2ba:	4b2c      	ldr	r3, [pc, #176]	; (800b36c <prvAddNewTaskToReadyList+0xc8>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d109      	bne.n	800b2d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2c2:	4a2a      	ldr	r2, [pc, #168]	; (800b36c <prvAddNewTaskToReadyList+0xc8>)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2c8:	4b27      	ldr	r3, [pc, #156]	; (800b368 <prvAddNewTaskToReadyList+0xc4>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d110      	bne.n	800b2f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b2d0:	f000 fc44 	bl	800bb5c <prvInitialiseTaskLists>
 800b2d4:	e00d      	b.n	800b2f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b2d6:	4b26      	ldr	r3, [pc, #152]	; (800b370 <prvAddNewTaskToReadyList+0xcc>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d109      	bne.n	800b2f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b2de:	4b23      	ldr	r3, [pc, #140]	; (800b36c <prvAddNewTaskToReadyList+0xc8>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d802      	bhi.n	800b2f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2ec:	4a1f      	ldr	r2, [pc, #124]	; (800b36c <prvAddNewTaskToReadyList+0xc8>)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b2f2:	4b20      	ldr	r3, [pc, #128]	; (800b374 <prvAddNewTaskToReadyList+0xd0>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	4a1e      	ldr	r2, [pc, #120]	; (800b374 <prvAddNewTaskToReadyList+0xd0>)
 800b2fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b2fc:	4b1d      	ldr	r3, [pc, #116]	; (800b374 <prvAddNewTaskToReadyList+0xd0>)
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b308:	4b1b      	ldr	r3, [pc, #108]	; (800b378 <prvAddNewTaskToReadyList+0xd4>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d903      	bls.n	800b318 <prvAddNewTaskToReadyList+0x74>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b314:	4a18      	ldr	r2, [pc, #96]	; (800b378 <prvAddNewTaskToReadyList+0xd4>)
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b31c:	4613      	mov	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	4413      	add	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4a15      	ldr	r2, [pc, #84]	; (800b37c <prvAddNewTaskToReadyList+0xd8>)
 800b326:	441a      	add	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3304      	adds	r3, #4
 800b32c:	4619      	mov	r1, r3
 800b32e:	4610      	mov	r0, r2
 800b330:	f7ff f83f 	bl	800a3b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b334:	f001 fb66 	bl	800ca04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b338:	4b0d      	ldr	r3, [pc, #52]	; (800b370 <prvAddNewTaskToReadyList+0xcc>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00e      	beq.n	800b35e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b340:	4b0a      	ldr	r3, [pc, #40]	; (800b36c <prvAddNewTaskToReadyList+0xc8>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d207      	bcs.n	800b35e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b34e:	4b0c      	ldr	r3, [pc, #48]	; (800b380 <prvAddNewTaskToReadyList+0xdc>)
 800b350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b354:	601a      	str	r2, [r3, #0]
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b35e:	bf00      	nop
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	24000e88 	.word	0x24000e88
 800b36c:	240009b4 	.word	0x240009b4
 800b370:	24000e94 	.word	0x24000e94
 800b374:	24000ea4 	.word	0x24000ea4
 800b378:	24000e90 	.word	0x24000e90
 800b37c:	240009b8 	.word	0x240009b8
 800b380:	e000ed04 	.word	0xe000ed04

0800b384 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b38c:	2300      	movs	r3, #0
 800b38e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d017      	beq.n	800b3c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b396:	4b13      	ldr	r3, [pc, #76]	; (800b3e4 <vTaskDelay+0x60>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00a      	beq.n	800b3b4 <vTaskDelay+0x30>
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	60bb      	str	r3, [r7, #8]
}
 800b3b0:	bf00      	nop
 800b3b2:	e7fe      	b.n	800b3b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b3b4:	f000 f88c 	bl	800b4d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fe26 	bl	800c00c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3c0:	f000 f894 	bl	800b4ec <xTaskResumeAll>
 800b3c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d107      	bne.n	800b3dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b3cc:	4b06      	ldr	r3, [pc, #24]	; (800b3e8 <vTaskDelay+0x64>)
 800b3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3d2:	601a      	str	r2, [r3, #0]
 800b3d4:	f3bf 8f4f 	dsb	sy
 800b3d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3dc:	bf00      	nop
 800b3de:	3710      	adds	r7, #16
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	24000eb0 	.word	0x24000eb0
 800b3e8:	e000ed04 	.word	0xe000ed04

0800b3ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b08a      	sub	sp, #40	; 0x28
 800b3f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b3fa:	463a      	mov	r2, r7
 800b3fc:	1d39      	adds	r1, r7, #4
 800b3fe:	f107 0308 	add.w	r3, r7, #8
 800b402:	4618      	mov	r0, r3
 800b404:	f7fe ff74 	bl	800a2f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b408:	6839      	ldr	r1, [r7, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	9202      	str	r2, [sp, #8]
 800b410:	9301      	str	r3, [sp, #4]
 800b412:	2300      	movs	r3, #0
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	2300      	movs	r3, #0
 800b418:	460a      	mov	r2, r1
 800b41a:	4925      	ldr	r1, [pc, #148]	; (800b4b0 <vTaskStartScheduler+0xc4>)
 800b41c:	4825      	ldr	r0, [pc, #148]	; (800b4b4 <vTaskStartScheduler+0xc8>)
 800b41e:	f7ff fdf5 	bl	800b00c <xTaskCreateStatic>
 800b422:	4603      	mov	r3, r0
 800b424:	4a24      	ldr	r2, [pc, #144]	; (800b4b8 <vTaskStartScheduler+0xcc>)
 800b426:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b428:	4b23      	ldr	r3, [pc, #140]	; (800b4b8 <vTaskStartScheduler+0xcc>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d002      	beq.n	800b436 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b430:	2301      	movs	r3, #1
 800b432:	617b      	str	r3, [r7, #20]
 800b434:	e001      	b.n	800b43a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b436:	2300      	movs	r3, #0
 800b438:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d102      	bne.n	800b446 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b440:	f000 fe38 	bl	800c0b4 <xTimerCreateTimerTask>
 800b444:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d11d      	bne.n	800b488 <vTaskStartScheduler+0x9c>
	__asm volatile
 800b44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b450:	f383 8811 	msr	BASEPRI, r3
 800b454:	f3bf 8f6f 	isb	sy
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	613b      	str	r3, [r7, #16]
}
 800b45e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b460:	4b16      	ldr	r3, [pc, #88]	; (800b4bc <vTaskStartScheduler+0xd0>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	3358      	adds	r3, #88	; 0x58
 800b466:	4a16      	ldr	r2, [pc, #88]	; (800b4c0 <vTaskStartScheduler+0xd4>)
 800b468:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b46a:	4b16      	ldr	r3, [pc, #88]	; (800b4c4 <vTaskStartScheduler+0xd8>)
 800b46c:	f04f 32ff 	mov.w	r2, #4294967295
 800b470:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b472:	4b15      	ldr	r3, [pc, #84]	; (800b4c8 <vTaskStartScheduler+0xdc>)
 800b474:	2201      	movs	r2, #1
 800b476:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b478:	4b14      	ldr	r3, [pc, #80]	; (800b4cc <vTaskStartScheduler+0xe0>)
 800b47a:	2200      	movs	r2, #0
 800b47c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b47e:	f7f5 f893 	bl	80005a8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b482:	f001 f9ed 	bl	800c860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b486:	e00e      	b.n	800b4a6 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b48e:	d10a      	bne.n	800b4a6 <vTaskStartScheduler+0xba>
	__asm volatile
 800b490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b494:	f383 8811 	msr	BASEPRI, r3
 800b498:	f3bf 8f6f 	isb	sy
 800b49c:	f3bf 8f4f 	dsb	sy
 800b4a0:	60fb      	str	r3, [r7, #12]
}
 800b4a2:	bf00      	nop
 800b4a4:	e7fe      	b.n	800b4a4 <vTaskStartScheduler+0xb8>
}
 800b4a6:	bf00      	nop
 800b4a8:	3718      	adds	r7, #24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	0800d1dc 	.word	0x0800d1dc
 800b4b4:	0800bb2d 	.word	0x0800bb2d
 800b4b8:	24000eac 	.word	0x24000eac
 800b4bc:	240009b4 	.word	0x240009b4
 800b4c0:	24000060 	.word	0x24000060
 800b4c4:	24000ea8 	.word	0x24000ea8
 800b4c8:	24000e94 	.word	0x24000e94
 800b4cc:	24000e8c 	.word	0x24000e8c

0800b4d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b4d4:	4b04      	ldr	r3, [pc, #16]	; (800b4e8 <vTaskSuspendAll+0x18>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	4a03      	ldr	r2, [pc, #12]	; (800b4e8 <vTaskSuspendAll+0x18>)
 800b4dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b4de:	bf00      	nop
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	24000eb0 	.word	0x24000eb0

0800b4ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b4fa:	4b42      	ldr	r3, [pc, #264]	; (800b604 <xTaskResumeAll+0x118>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d10a      	bne.n	800b518 <xTaskResumeAll+0x2c>
	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	603b      	str	r3, [r7, #0]
}
 800b514:	bf00      	nop
 800b516:	e7fe      	b.n	800b516 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b518:	f001 fa44 	bl	800c9a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b51c:	4b39      	ldr	r3, [pc, #228]	; (800b604 <xTaskResumeAll+0x118>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	3b01      	subs	r3, #1
 800b522:	4a38      	ldr	r2, [pc, #224]	; (800b604 <xTaskResumeAll+0x118>)
 800b524:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b526:	4b37      	ldr	r3, [pc, #220]	; (800b604 <xTaskResumeAll+0x118>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d162      	bne.n	800b5f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b52e:	4b36      	ldr	r3, [pc, #216]	; (800b608 <xTaskResumeAll+0x11c>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d05e      	beq.n	800b5f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b536:	e02f      	b.n	800b598 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b538:	4b34      	ldr	r3, [pc, #208]	; (800b60c <xTaskResumeAll+0x120>)
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	3318      	adds	r3, #24
 800b544:	4618      	mov	r0, r3
 800b546:	f7fe ff91 	bl	800a46c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	3304      	adds	r3, #4
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fe ff8c 	bl	800a46c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b558:	4b2d      	ldr	r3, [pc, #180]	; (800b610 <xTaskResumeAll+0x124>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d903      	bls.n	800b568 <xTaskResumeAll+0x7c>
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b564:	4a2a      	ldr	r2, [pc, #168]	; (800b610 <xTaskResumeAll+0x124>)
 800b566:	6013      	str	r3, [r2, #0]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b56c:	4613      	mov	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	4a27      	ldr	r2, [pc, #156]	; (800b614 <xTaskResumeAll+0x128>)
 800b576:	441a      	add	r2, r3
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	3304      	adds	r3, #4
 800b57c:	4619      	mov	r1, r3
 800b57e:	4610      	mov	r0, r2
 800b580:	f7fe ff17 	bl	800a3b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b588:	4b23      	ldr	r3, [pc, #140]	; (800b618 <xTaskResumeAll+0x12c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58e:	429a      	cmp	r2, r3
 800b590:	d302      	bcc.n	800b598 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b592:	4b22      	ldr	r3, [pc, #136]	; (800b61c <xTaskResumeAll+0x130>)
 800b594:	2201      	movs	r2, #1
 800b596:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b598:	4b1c      	ldr	r3, [pc, #112]	; (800b60c <xTaskResumeAll+0x120>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1cb      	bne.n	800b538 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d001      	beq.n	800b5aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5a6:	f000 fb7b 	bl	800bca0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b5aa:	4b1d      	ldr	r3, [pc, #116]	; (800b620 <xTaskResumeAll+0x134>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d010      	beq.n	800b5d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5b6:	f000 f847 	bl	800b648 <xTaskIncrementTick>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d002      	beq.n	800b5c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b5c0:	4b16      	ldr	r3, [pc, #88]	; (800b61c <xTaskResumeAll+0x130>)
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1f1      	bne.n	800b5b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b5d2:	4b13      	ldr	r3, [pc, #76]	; (800b620 <xTaskResumeAll+0x134>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5d8:	4b10      	ldr	r3, [pc, #64]	; (800b61c <xTaskResumeAll+0x130>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d009      	beq.n	800b5f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5e4:	4b0f      	ldr	r3, [pc, #60]	; (800b624 <xTaskResumeAll+0x138>)
 800b5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5ea:	601a      	str	r2, [r3, #0]
 800b5ec:	f3bf 8f4f 	dsb	sy
 800b5f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5f4:	f001 fa06 	bl	800ca04 <vPortExitCritical>

	return xAlreadyYielded;
 800b5f8:	68bb      	ldr	r3, [r7, #8]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	24000eb0 	.word	0x24000eb0
 800b608:	24000e88 	.word	0x24000e88
 800b60c:	24000e48 	.word	0x24000e48
 800b610:	24000e90 	.word	0x24000e90
 800b614:	240009b8 	.word	0x240009b8
 800b618:	240009b4 	.word	0x240009b4
 800b61c:	24000e9c 	.word	0x24000e9c
 800b620:	24000e98 	.word	0x24000e98
 800b624:	e000ed04 	.word	0xe000ed04

0800b628 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b62e:	4b05      	ldr	r3, [pc, #20]	; (800b644 <xTaskGetTickCount+0x1c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b634:	687b      	ldr	r3, [r7, #4]
}
 800b636:	4618      	mov	r0, r3
 800b638:	370c      	adds	r7, #12
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	24000e8c 	.word	0x24000e8c

0800b648 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b64e:	2300      	movs	r3, #0
 800b650:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b652:	4b4f      	ldr	r3, [pc, #316]	; (800b790 <xTaskIncrementTick+0x148>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	f040 808f 	bne.w	800b77a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b65c:	4b4d      	ldr	r3, [pc, #308]	; (800b794 <xTaskIncrementTick+0x14c>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	3301      	adds	r3, #1
 800b662:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b664:	4a4b      	ldr	r2, [pc, #300]	; (800b794 <xTaskIncrementTick+0x14c>)
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d120      	bne.n	800b6b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b670:	4b49      	ldr	r3, [pc, #292]	; (800b798 <xTaskIncrementTick+0x150>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00a      	beq.n	800b690 <xTaskIncrementTick+0x48>
	__asm volatile
 800b67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67e:	f383 8811 	msr	BASEPRI, r3
 800b682:	f3bf 8f6f 	isb	sy
 800b686:	f3bf 8f4f 	dsb	sy
 800b68a:	603b      	str	r3, [r7, #0]
}
 800b68c:	bf00      	nop
 800b68e:	e7fe      	b.n	800b68e <xTaskIncrementTick+0x46>
 800b690:	4b41      	ldr	r3, [pc, #260]	; (800b798 <xTaskIncrementTick+0x150>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	60fb      	str	r3, [r7, #12]
 800b696:	4b41      	ldr	r3, [pc, #260]	; (800b79c <xTaskIncrementTick+0x154>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a3f      	ldr	r2, [pc, #252]	; (800b798 <xTaskIncrementTick+0x150>)
 800b69c:	6013      	str	r3, [r2, #0]
 800b69e:	4a3f      	ldr	r2, [pc, #252]	; (800b79c <xTaskIncrementTick+0x154>)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6013      	str	r3, [r2, #0]
 800b6a4:	4b3e      	ldr	r3, [pc, #248]	; (800b7a0 <xTaskIncrementTick+0x158>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	4a3d      	ldr	r2, [pc, #244]	; (800b7a0 <xTaskIncrementTick+0x158>)
 800b6ac:	6013      	str	r3, [r2, #0]
 800b6ae:	f000 faf7 	bl	800bca0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6b2:	4b3c      	ldr	r3, [pc, #240]	; (800b7a4 <xTaskIncrementTick+0x15c>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d349      	bcc.n	800b750 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6bc:	4b36      	ldr	r3, [pc, #216]	; (800b798 <xTaskIncrementTick+0x150>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d104      	bne.n	800b6d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6c6:	4b37      	ldr	r3, [pc, #220]	; (800b7a4 <xTaskIncrementTick+0x15c>)
 800b6c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6cc:	601a      	str	r2, [r3, #0]
					break;
 800b6ce:	e03f      	b.n	800b750 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6d0:	4b31      	ldr	r3, [pc, #196]	; (800b798 <xTaskIncrementTick+0x150>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6e0:	693a      	ldr	r2, [r7, #16]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d203      	bcs.n	800b6f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b6e8:	4a2e      	ldr	r2, [pc, #184]	; (800b7a4 <xTaskIncrementTick+0x15c>)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b6ee:	e02f      	b.n	800b750 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7fe feb9 	bl	800a46c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d004      	beq.n	800b70c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	3318      	adds	r3, #24
 800b706:	4618      	mov	r0, r3
 800b708:	f7fe feb0 	bl	800a46c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b710:	4b25      	ldr	r3, [pc, #148]	; (800b7a8 <xTaskIncrementTick+0x160>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	429a      	cmp	r2, r3
 800b716:	d903      	bls.n	800b720 <xTaskIncrementTick+0xd8>
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71c:	4a22      	ldr	r2, [pc, #136]	; (800b7a8 <xTaskIncrementTick+0x160>)
 800b71e:	6013      	str	r3, [r2, #0]
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b724:	4613      	mov	r3, r2
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	4413      	add	r3, r2
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	4a1f      	ldr	r2, [pc, #124]	; (800b7ac <xTaskIncrementTick+0x164>)
 800b72e:	441a      	add	r2, r3
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	3304      	adds	r3, #4
 800b734:	4619      	mov	r1, r3
 800b736:	4610      	mov	r0, r2
 800b738:	f7fe fe3b 	bl	800a3b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b740:	4b1b      	ldr	r3, [pc, #108]	; (800b7b0 <xTaskIncrementTick+0x168>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b746:	429a      	cmp	r2, r3
 800b748:	d3b8      	bcc.n	800b6bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b74a:	2301      	movs	r3, #1
 800b74c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b74e:	e7b5      	b.n	800b6bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b750:	4b17      	ldr	r3, [pc, #92]	; (800b7b0 <xTaskIncrementTick+0x168>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b756:	4915      	ldr	r1, [pc, #84]	; (800b7ac <xTaskIncrementTick+0x164>)
 800b758:	4613      	mov	r3, r2
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	4413      	add	r3, r2
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	440b      	add	r3, r1
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d901      	bls.n	800b76c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b768:	2301      	movs	r3, #1
 800b76a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b76c:	4b11      	ldr	r3, [pc, #68]	; (800b7b4 <xTaskIncrementTick+0x16c>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d007      	beq.n	800b784 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b774:	2301      	movs	r3, #1
 800b776:	617b      	str	r3, [r7, #20]
 800b778:	e004      	b.n	800b784 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b77a:	4b0f      	ldr	r3, [pc, #60]	; (800b7b8 <xTaskIncrementTick+0x170>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	3301      	adds	r3, #1
 800b780:	4a0d      	ldr	r2, [pc, #52]	; (800b7b8 <xTaskIncrementTick+0x170>)
 800b782:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b784:	697b      	ldr	r3, [r7, #20]
}
 800b786:	4618      	mov	r0, r3
 800b788:	3718      	adds	r7, #24
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	24000eb0 	.word	0x24000eb0
 800b794:	24000e8c 	.word	0x24000e8c
 800b798:	24000e40 	.word	0x24000e40
 800b79c:	24000e44 	.word	0x24000e44
 800b7a0:	24000ea0 	.word	0x24000ea0
 800b7a4:	24000ea8 	.word	0x24000ea8
 800b7a8:	24000e90 	.word	0x24000e90
 800b7ac:	240009b8 	.word	0x240009b8
 800b7b0:	240009b4 	.word	0x240009b4
 800b7b4:	24000e9c 	.word	0x24000e9c
 800b7b8:	24000e98 	.word	0x24000e98

0800b7bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7c2:	4b36      	ldr	r3, [pc, #216]	; (800b89c <vTaskSwitchContext+0xe0>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d003      	beq.n	800b7d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7ca:	4b35      	ldr	r3, [pc, #212]	; (800b8a0 <vTaskSwitchContext+0xe4>)
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7d0:	e05f      	b.n	800b892 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800b7d2:	4b33      	ldr	r3, [pc, #204]	; (800b8a0 <vTaskSwitchContext+0xe4>)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b7d8:	f7f4 feed 	bl	80005b6 <getRunTimeCounterValue>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	4a31      	ldr	r2, [pc, #196]	; (800b8a4 <vTaskSwitchContext+0xe8>)
 800b7e0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b7e2:	4b30      	ldr	r3, [pc, #192]	; (800b8a4 <vTaskSwitchContext+0xe8>)
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	4b30      	ldr	r3, [pc, #192]	; (800b8a8 <vTaskSwitchContext+0xec>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d909      	bls.n	800b802 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b7ee:	4b2f      	ldr	r3, [pc, #188]	; (800b8ac <vTaskSwitchContext+0xf0>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b7f4:	4a2b      	ldr	r2, [pc, #172]	; (800b8a4 <vTaskSwitchContext+0xe8>)
 800b7f6:	6810      	ldr	r0, [r2, #0]
 800b7f8:	4a2b      	ldr	r2, [pc, #172]	; (800b8a8 <vTaskSwitchContext+0xec>)
 800b7fa:	6812      	ldr	r2, [r2, #0]
 800b7fc:	1a82      	subs	r2, r0, r2
 800b7fe:	440a      	add	r2, r1
 800b800:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b802:	4b28      	ldr	r3, [pc, #160]	; (800b8a4 <vTaskSwitchContext+0xe8>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4a28      	ldr	r2, [pc, #160]	; (800b8a8 <vTaskSwitchContext+0xec>)
 800b808:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b80a:	4b29      	ldr	r3, [pc, #164]	; (800b8b0 <vTaskSwitchContext+0xf4>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	60fb      	str	r3, [r7, #12]
 800b810:	e010      	b.n	800b834 <vTaskSwitchContext+0x78>
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10a      	bne.n	800b82e <vTaskSwitchContext+0x72>
	__asm volatile
 800b818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81c:	f383 8811 	msr	BASEPRI, r3
 800b820:	f3bf 8f6f 	isb	sy
 800b824:	f3bf 8f4f 	dsb	sy
 800b828:	607b      	str	r3, [r7, #4]
}
 800b82a:	bf00      	nop
 800b82c:	e7fe      	b.n	800b82c <vTaskSwitchContext+0x70>
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	3b01      	subs	r3, #1
 800b832:	60fb      	str	r3, [r7, #12]
 800b834:	491f      	ldr	r1, [pc, #124]	; (800b8b4 <vTaskSwitchContext+0xf8>)
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	4613      	mov	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	4413      	add	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	440b      	add	r3, r1
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d0e4      	beq.n	800b812 <vTaskSwitchContext+0x56>
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	4613      	mov	r3, r2
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	4413      	add	r3, r2
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	4a18      	ldr	r2, [pc, #96]	; (800b8b4 <vTaskSwitchContext+0xf8>)
 800b854:	4413      	add	r3, r2
 800b856:	60bb      	str	r3, [r7, #8]
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	605a      	str	r2, [r3, #4]
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	685a      	ldr	r2, [r3, #4]
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	3308      	adds	r3, #8
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d104      	bne.n	800b878 <vTaskSwitchContext+0xbc>
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	685a      	ldr	r2, [r3, #4]
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	605a      	str	r2, [r3, #4]
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	4a0b      	ldr	r2, [pc, #44]	; (800b8ac <vTaskSwitchContext+0xf0>)
 800b880:	6013      	str	r3, [r2, #0]
 800b882:	4a0b      	ldr	r2, [pc, #44]	; (800b8b0 <vTaskSwitchContext+0xf4>)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b888:	4b08      	ldr	r3, [pc, #32]	; (800b8ac <vTaskSwitchContext+0xf0>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3358      	adds	r3, #88	; 0x58
 800b88e:	4a0a      	ldr	r2, [pc, #40]	; (800b8b8 <vTaskSwitchContext+0xfc>)
 800b890:	6013      	str	r3, [r2, #0]
}
 800b892:	bf00      	nop
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	24000eb0 	.word	0x24000eb0
 800b8a0:	24000e9c 	.word	0x24000e9c
 800b8a4:	24000eb8 	.word	0x24000eb8
 800b8a8:	24000eb4 	.word	0x24000eb4
 800b8ac:	240009b4 	.word	0x240009b4
 800b8b0:	24000e90 	.word	0x24000e90
 800b8b4:	240009b8 	.word	0x240009b8
 800b8b8:	24000060 	.word	0x24000060

0800b8bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10a      	bne.n	800b8e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d0:	f383 8811 	msr	BASEPRI, r3
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	f3bf 8f4f 	dsb	sy
 800b8dc:	60fb      	str	r3, [r7, #12]
}
 800b8de:	bf00      	nop
 800b8e0:	e7fe      	b.n	800b8e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8e2:	4b07      	ldr	r3, [pc, #28]	; (800b900 <vTaskPlaceOnEventList+0x44>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	3318      	adds	r3, #24
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f7fe fd85 	bl	800a3fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8f0:	2101      	movs	r1, #1
 800b8f2:	6838      	ldr	r0, [r7, #0]
 800b8f4:	f000 fb8a 	bl	800c00c <prvAddCurrentTaskToDelayedList>
}
 800b8f8:	bf00      	nop
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	240009b4 	.word	0x240009b4

0800b904 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b904:	b580      	push	{r7, lr}
 800b906:	b086      	sub	sp, #24
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d10a      	bne.n	800b92c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	617b      	str	r3, [r7, #20]
}
 800b928:	bf00      	nop
 800b92a:	e7fe      	b.n	800b92a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b92c:	4b0a      	ldr	r3, [pc, #40]	; (800b958 <vTaskPlaceOnEventListRestricted+0x54>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	3318      	adds	r3, #24
 800b932:	4619      	mov	r1, r3
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f7fe fd3c 	bl	800a3b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d002      	beq.n	800b946 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b940:	f04f 33ff 	mov.w	r3, #4294967295
 800b944:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b946:	6879      	ldr	r1, [r7, #4]
 800b948:	68b8      	ldr	r0, [r7, #8]
 800b94a:	f000 fb5f 	bl	800c00c <prvAddCurrentTaskToDelayedList>
	}
 800b94e:	bf00      	nop
 800b950:	3718      	adds	r7, #24
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	240009b4 	.word	0x240009b4

0800b95c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b086      	sub	sp, #24
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10a      	bne.n	800b988 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	60fb      	str	r3, [r7, #12]
}
 800b984:	bf00      	nop
 800b986:	e7fe      	b.n	800b986 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	3318      	adds	r3, #24
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7fe fd6d 	bl	800a46c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b992:	4b1e      	ldr	r3, [pc, #120]	; (800ba0c <xTaskRemoveFromEventList+0xb0>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d11d      	bne.n	800b9d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	3304      	adds	r3, #4
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fe fd64 	bl	800a46c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a8:	4b19      	ldr	r3, [pc, #100]	; (800ba10 <xTaskRemoveFromEventList+0xb4>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d903      	bls.n	800b9b8 <xTaskRemoveFromEventList+0x5c>
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b4:	4a16      	ldr	r2, [pc, #88]	; (800ba10 <xTaskRemoveFromEventList+0xb4>)
 800b9b6:	6013      	str	r3, [r2, #0]
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9bc:	4613      	mov	r3, r2
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	4413      	add	r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4a13      	ldr	r2, [pc, #76]	; (800ba14 <xTaskRemoveFromEventList+0xb8>)
 800b9c6:	441a      	add	r2, r3
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	3304      	adds	r3, #4
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	4610      	mov	r0, r2
 800b9d0:	f7fe fcef 	bl	800a3b2 <vListInsertEnd>
 800b9d4:	e005      	b.n	800b9e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	3318      	adds	r3, #24
 800b9da:	4619      	mov	r1, r3
 800b9dc:	480e      	ldr	r0, [pc, #56]	; (800ba18 <xTaskRemoveFromEventList+0xbc>)
 800b9de:	f7fe fce8 	bl	800a3b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e6:	4b0d      	ldr	r3, [pc, #52]	; (800ba1c <xTaskRemoveFromEventList+0xc0>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d905      	bls.n	800b9fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9f4:	4b0a      	ldr	r3, [pc, #40]	; (800ba20 <xTaskRemoveFromEventList+0xc4>)
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	601a      	str	r2, [r3, #0]
 800b9fa:	e001      	b.n	800ba00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba00:	697b      	ldr	r3, [r7, #20]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3718      	adds	r7, #24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	24000eb0 	.word	0x24000eb0
 800ba10:	24000e90 	.word	0x24000e90
 800ba14:	240009b8 	.word	0x240009b8
 800ba18:	24000e48 	.word	0x24000e48
 800ba1c:	240009b4 	.word	0x240009b4
 800ba20:	24000e9c 	.word	0x24000e9c

0800ba24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba2c:	4b06      	ldr	r3, [pc, #24]	; (800ba48 <vTaskInternalSetTimeOutState+0x24>)
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba34:	4b05      	ldr	r3, [pc, #20]	; (800ba4c <vTaskInternalSetTimeOutState+0x28>)
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	605a      	str	r2, [r3, #4]
}
 800ba3c:	bf00      	nop
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	24000ea0 	.word	0x24000ea0
 800ba4c:	24000e8c 	.word	0x24000e8c

0800ba50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b088      	sub	sp, #32
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10a      	bne.n	800ba76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	613b      	str	r3, [r7, #16]
}
 800ba72:	bf00      	nop
 800ba74:	e7fe      	b.n	800ba74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10a      	bne.n	800ba92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	60fb      	str	r3, [r7, #12]
}
 800ba8e:	bf00      	nop
 800ba90:	e7fe      	b.n	800ba90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ba92:	f000 ff87 	bl	800c9a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba96:	4b1d      	ldr	r3, [pc, #116]	; (800bb0c <xTaskCheckForTimeOut+0xbc>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	69ba      	ldr	r2, [r7, #24]
 800baa2:	1ad3      	subs	r3, r2, r3
 800baa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baae:	d102      	bne.n	800bab6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bab0:	2300      	movs	r3, #0
 800bab2:	61fb      	str	r3, [r7, #28]
 800bab4:	e023      	b.n	800bafe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	4b15      	ldr	r3, [pc, #84]	; (800bb10 <xTaskCheckForTimeOut+0xc0>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d007      	beq.n	800bad2 <xTaskCheckForTimeOut+0x82>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	69ba      	ldr	r2, [r7, #24]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d302      	bcc.n	800bad2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bacc:	2301      	movs	r3, #1
 800bace:	61fb      	str	r3, [r7, #28]
 800bad0:	e015      	b.n	800bafe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d20b      	bcs.n	800baf4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	1ad2      	subs	r2, r2, r3
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f7ff ff9b 	bl	800ba24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800baee:	2300      	movs	r3, #0
 800baf0:	61fb      	str	r3, [r7, #28]
 800baf2:	e004      	b.n	800bafe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	2200      	movs	r2, #0
 800baf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bafa:	2301      	movs	r3, #1
 800bafc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bafe:	f000 ff81 	bl	800ca04 <vPortExitCritical>

	return xReturn;
 800bb02:	69fb      	ldr	r3, [r7, #28]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3720      	adds	r7, #32
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	24000e8c 	.word	0x24000e8c
 800bb10:	24000ea0 	.word	0x24000ea0

0800bb14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb14:	b480      	push	{r7}
 800bb16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb18:	4b03      	ldr	r3, [pc, #12]	; (800bb28 <vTaskMissedYield+0x14>)
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	601a      	str	r2, [r3, #0]
}
 800bb1e:	bf00      	nop
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	24000e9c 	.word	0x24000e9c

0800bb2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb34:	f000 f852 	bl	800bbdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb38:	4b06      	ldr	r3, [pc, #24]	; (800bb54 <prvIdleTask+0x28>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d9f9      	bls.n	800bb34 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb40:	4b05      	ldr	r3, [pc, #20]	; (800bb58 <prvIdleTask+0x2c>)
 800bb42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb46:	601a      	str	r2, [r3, #0]
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb50:	e7f0      	b.n	800bb34 <prvIdleTask+0x8>
 800bb52:	bf00      	nop
 800bb54:	240009b8 	.word	0x240009b8
 800bb58:	e000ed04 	.word	0xe000ed04

0800bb5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb62:	2300      	movs	r3, #0
 800bb64:	607b      	str	r3, [r7, #4]
 800bb66:	e00c      	b.n	800bb82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4a12      	ldr	r2, [pc, #72]	; (800bbbc <prvInitialiseTaskLists+0x60>)
 800bb74:	4413      	add	r3, r2
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fe fbee 	bl	800a358 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	3301      	adds	r3, #1
 800bb80:	607b      	str	r3, [r7, #4]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2b37      	cmp	r3, #55	; 0x37
 800bb86:	d9ef      	bls.n	800bb68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb88:	480d      	ldr	r0, [pc, #52]	; (800bbc0 <prvInitialiseTaskLists+0x64>)
 800bb8a:	f7fe fbe5 	bl	800a358 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb8e:	480d      	ldr	r0, [pc, #52]	; (800bbc4 <prvInitialiseTaskLists+0x68>)
 800bb90:	f7fe fbe2 	bl	800a358 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb94:	480c      	ldr	r0, [pc, #48]	; (800bbc8 <prvInitialiseTaskLists+0x6c>)
 800bb96:	f7fe fbdf 	bl	800a358 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb9a:	480c      	ldr	r0, [pc, #48]	; (800bbcc <prvInitialiseTaskLists+0x70>)
 800bb9c:	f7fe fbdc 	bl	800a358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bba0:	480b      	ldr	r0, [pc, #44]	; (800bbd0 <prvInitialiseTaskLists+0x74>)
 800bba2:	f7fe fbd9 	bl	800a358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bba6:	4b0b      	ldr	r3, [pc, #44]	; (800bbd4 <prvInitialiseTaskLists+0x78>)
 800bba8:	4a05      	ldr	r2, [pc, #20]	; (800bbc0 <prvInitialiseTaskLists+0x64>)
 800bbaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bbac:	4b0a      	ldr	r3, [pc, #40]	; (800bbd8 <prvInitialiseTaskLists+0x7c>)
 800bbae:	4a05      	ldr	r2, [pc, #20]	; (800bbc4 <prvInitialiseTaskLists+0x68>)
 800bbb0:	601a      	str	r2, [r3, #0]
}
 800bbb2:	bf00      	nop
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	240009b8 	.word	0x240009b8
 800bbc0:	24000e18 	.word	0x24000e18
 800bbc4:	24000e2c 	.word	0x24000e2c
 800bbc8:	24000e48 	.word	0x24000e48
 800bbcc:	24000e5c 	.word	0x24000e5c
 800bbd0:	24000e74 	.word	0x24000e74
 800bbd4:	24000e40 	.word	0x24000e40
 800bbd8:	24000e44 	.word	0x24000e44

0800bbdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbe2:	e019      	b.n	800bc18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bbe4:	f000 fede 	bl	800c9a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbe8:	4b10      	ldr	r3, [pc, #64]	; (800bc2c <prvCheckTasksWaitingTermination+0x50>)
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	3304      	adds	r3, #4
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7fe fc39 	bl	800a46c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbfa:	4b0d      	ldr	r3, [pc, #52]	; (800bc30 <prvCheckTasksWaitingTermination+0x54>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	4a0b      	ldr	r2, [pc, #44]	; (800bc30 <prvCheckTasksWaitingTermination+0x54>)
 800bc02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc04:	4b0b      	ldr	r3, [pc, #44]	; (800bc34 <prvCheckTasksWaitingTermination+0x58>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	4a0a      	ldr	r2, [pc, #40]	; (800bc34 <prvCheckTasksWaitingTermination+0x58>)
 800bc0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc0e:	f000 fef9 	bl	800ca04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 f810 	bl	800bc38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc18:	4b06      	ldr	r3, [pc, #24]	; (800bc34 <prvCheckTasksWaitingTermination+0x58>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1e1      	bne.n	800bbe4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc20:	bf00      	nop
 800bc22:	bf00      	nop
 800bc24:	3708      	adds	r7, #8
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	24000e5c 	.word	0x24000e5c
 800bc30:	24000e88 	.word	0x24000e88
 800bc34:	24000e70 	.word	0x24000e70

0800bc38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	3358      	adds	r3, #88	; 0x58
 800bc44:	4618      	mov	r0, r3
 800bc46:	f001 f9c1 	bl	800cfcc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d108      	bne.n	800bc66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f001 f891 	bl	800cd80 <vPortFree>
				vPortFree( pxTCB );
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f001 f88e 	bl	800cd80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc64:	e018      	b.n	800bc98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d103      	bne.n	800bc78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f001 f885 	bl	800cd80 <vPortFree>
	}
 800bc76:	e00f      	b.n	800bc98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	d00a      	beq.n	800bc98 <prvDeleteTCB+0x60>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	60fb      	str	r3, [r7, #12]
}
 800bc94:	bf00      	nop
 800bc96:	e7fe      	b.n	800bc96 <prvDeleteTCB+0x5e>
	}
 800bc98:	bf00      	nop
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bca6:	4b0c      	ldr	r3, [pc, #48]	; (800bcd8 <prvResetNextTaskUnblockTime+0x38>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d104      	bne.n	800bcba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bcb0:	4b0a      	ldr	r3, [pc, #40]	; (800bcdc <prvResetNextTaskUnblockTime+0x3c>)
 800bcb2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bcb8:	e008      	b.n	800bccc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcba:	4b07      	ldr	r3, [pc, #28]	; (800bcd8 <prvResetNextTaskUnblockTime+0x38>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	4a04      	ldr	r2, [pc, #16]	; (800bcdc <prvResetNextTaskUnblockTime+0x3c>)
 800bcca:	6013      	str	r3, [r2, #0]
}
 800bccc:	bf00      	nop
 800bcce:	370c      	adds	r7, #12
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr
 800bcd8:	24000e40 	.word	0x24000e40
 800bcdc:	24000ea8 	.word	0x24000ea8

0800bce0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bce6:	4b0b      	ldr	r3, [pc, #44]	; (800bd14 <xTaskGetSchedulerState+0x34>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d102      	bne.n	800bcf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	607b      	str	r3, [r7, #4]
 800bcf2:	e008      	b.n	800bd06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcf4:	4b08      	ldr	r3, [pc, #32]	; (800bd18 <xTaskGetSchedulerState+0x38>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d102      	bne.n	800bd02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bcfc:	2302      	movs	r3, #2
 800bcfe:	607b      	str	r3, [r7, #4]
 800bd00:	e001      	b.n	800bd06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd02:	2300      	movs	r3, #0
 800bd04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd06:	687b      	ldr	r3, [r7, #4]
	}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr
 800bd14:	24000e94 	.word	0x24000e94
 800bd18:	24000eb0 	.word	0x24000eb0

0800bd1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d056      	beq.n	800bde0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd32:	4b2e      	ldr	r3, [pc, #184]	; (800bdec <xTaskPriorityDisinherit+0xd0>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	693a      	ldr	r2, [r7, #16]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d00a      	beq.n	800bd52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd40:	f383 8811 	msr	BASEPRI, r3
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	60fb      	str	r3, [r7, #12]
}
 800bd4e:	bf00      	nop
 800bd50:	e7fe      	b.n	800bd50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d10a      	bne.n	800bd70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	60bb      	str	r3, [r7, #8]
}
 800bd6c:	bf00      	nop
 800bd6e:	e7fe      	b.n	800bd6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd74:	1e5a      	subs	r2, r3, #1
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d02c      	beq.n	800bde0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d128      	bne.n	800bde0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	3304      	adds	r3, #4
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7fe fb6a 	bl	800a46c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb0:	4b0f      	ldr	r3, [pc, #60]	; (800bdf0 <xTaskPriorityDisinherit+0xd4>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d903      	bls.n	800bdc0 <xTaskPriorityDisinherit+0xa4>
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdbc:	4a0c      	ldr	r2, [pc, #48]	; (800bdf0 <xTaskPriorityDisinherit+0xd4>)
 800bdbe:	6013      	str	r3, [r2, #0]
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	009b      	lsls	r3, r3, #2
 800bdc8:	4413      	add	r3, r2
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	4a09      	ldr	r2, [pc, #36]	; (800bdf4 <xTaskPriorityDisinherit+0xd8>)
 800bdce:	441a      	add	r2, r3
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	3304      	adds	r3, #4
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	4610      	mov	r0, r2
 800bdd8:	f7fe faeb 	bl	800a3b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bddc:	2301      	movs	r3, #1
 800bdde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bde0:	697b      	ldr	r3, [r7, #20]
	}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	240009b4 	.word	0x240009b4
 800bdf0:	24000e90 	.word	0x24000e90
 800bdf4:	240009b8 	.word	0x240009b8

0800bdf8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800be02:	f000 fdcf 	bl	800c9a4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800be06:	4b20      	ldr	r3, [pc, #128]	; (800be88 <ulTaskNotifyTake+0x90>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d113      	bne.n	800be3a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800be12:	4b1d      	ldr	r3, [pc, #116]	; (800be88 <ulTaskNotifyTake+0x90>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d00b      	beq.n	800be3a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be22:	2101      	movs	r1, #1
 800be24:	6838      	ldr	r0, [r7, #0]
 800be26:	f000 f8f1 	bl	800c00c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800be2a:	4b18      	ldr	r3, [pc, #96]	; (800be8c <ulTaskNotifyTake+0x94>)
 800be2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be30:	601a      	str	r2, [r3, #0]
 800be32:	f3bf 8f4f 	dsb	sy
 800be36:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800be3a:	f000 fde3 	bl	800ca04 <vPortExitCritical>

		taskENTER_CRITICAL();
 800be3e:	f000 fdb1 	bl	800c9a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800be42:	4b11      	ldr	r3, [pc, #68]	; (800be88 <ulTaskNotifyTake+0x90>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800be4a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00e      	beq.n	800be70 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d005      	beq.n	800be64 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800be58:	4b0b      	ldr	r3, [pc, #44]	; (800be88 <ulTaskNotifyTake+0x90>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2200      	movs	r2, #0
 800be5e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800be62:	e005      	b.n	800be70 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800be64:	4b08      	ldr	r3, [pc, #32]	; (800be88 <ulTaskNotifyTake+0x90>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	3a01      	subs	r2, #1
 800be6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be70:	4b05      	ldr	r3, [pc, #20]	; (800be88 <ulTaskNotifyTake+0x90>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2200      	movs	r2, #0
 800be76:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		}
		taskEXIT_CRITICAL();
 800be7a:	f000 fdc3 	bl	800ca04 <vPortExitCritical>

		return ulReturn;
 800be7e:	68fb      	ldr	r3, [r7, #12]
	}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	240009b4 	.word	0x240009b4
 800be8c:	e000ed04 	.word	0xe000ed04

0800be90 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800be90:	b580      	push	{r7, lr}
 800be92:	b08a      	sub	sp, #40	; 0x28
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	603b      	str	r3, [r7, #0]
 800be9c:	4613      	mov	r3, r2
 800be9e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bea0:	2301      	movs	r3, #1
 800bea2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d10a      	bne.n	800bec0 <xTaskGenericNotify+0x30>
	__asm volatile
 800beaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beae:	f383 8811 	msr	BASEPRI, r3
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	f3bf 8f4f 	dsb	sy
 800beba:	61bb      	str	r3, [r7, #24]
}
 800bebc:	bf00      	nop
 800bebe:	e7fe      	b.n	800bebe <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bec4:	f000 fd6e 	bl	800c9a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d004      	beq.n	800bed8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bece:	6a3b      	ldr	r3, [r7, #32]
 800bed0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800bede:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bee0:	6a3b      	ldr	r3, [r7, #32]
 800bee2:	2202      	movs	r2, #2
 800bee4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

			switch( eAction )
 800bee8:	79fb      	ldrb	r3, [r7, #7]
 800beea:	2b04      	cmp	r3, #4
 800beec:	d82d      	bhi.n	800bf4a <xTaskGenericNotify+0xba>
 800beee:	a201      	add	r2, pc, #4	; (adr r2, 800bef4 <xTaskGenericNotify+0x64>)
 800bef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef4:	0800bf6d 	.word	0x0800bf6d
 800bef8:	0800bf09 	.word	0x0800bf09
 800befc:	0800bf1b 	.word	0x0800bf1b
 800bf00:	0800bf2b 	.word	0x0800bf2b
 800bf04:	0800bf35 	.word	0x0800bf35
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bf08:	6a3b      	ldr	r3, [r7, #32]
 800bf0a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	431a      	orrs	r2, r3
 800bf12:	6a3b      	ldr	r3, [r7, #32]
 800bf14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
					break;
 800bf18:	e02b      	b.n	800bf72 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bf1a:	6a3b      	ldr	r3, [r7, #32]
 800bf1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf20:	1c5a      	adds	r2, r3, #1
 800bf22:	6a3b      	ldr	r3, [r7, #32]
 800bf24:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
					break;
 800bf28:	e023      	b.n	800bf72 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bf2a:	6a3b      	ldr	r3, [r7, #32]
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
					break;
 800bf32:	e01e      	b.n	800bf72 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bf34:	7ffb      	ldrb	r3, [r7, #31]
 800bf36:	2b02      	cmp	r3, #2
 800bf38:	d004      	beq.n	800bf44 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bf3a:	6a3b      	ldr	r3, [r7, #32]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bf42:	e016      	b.n	800bf72 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800bf44:	2300      	movs	r3, #0
 800bf46:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800bf48:	e013      	b.n	800bf72 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800bf4a:	6a3b      	ldr	r3, [r7, #32]
 800bf4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf54:	d00c      	beq.n	800bf70 <xTaskGenericNotify+0xe0>
	__asm volatile
 800bf56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5a:	f383 8811 	msr	BASEPRI, r3
 800bf5e:	f3bf 8f6f 	isb	sy
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	617b      	str	r3, [r7, #20]
}
 800bf68:	bf00      	nop
 800bf6a:	e7fe      	b.n	800bf6a <xTaskGenericNotify+0xda>
					break;
 800bf6c:	bf00      	nop
 800bf6e:	e000      	b.n	800bf72 <xTaskGenericNotify+0xe2>

					break;
 800bf70:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bf72:	7ffb      	ldrb	r3, [r7, #31]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d13a      	bne.n	800bfee <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf78:	6a3b      	ldr	r3, [r7, #32]
 800bf7a:	3304      	adds	r3, #4
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7fe fa75 	bl	800a46c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bf82:	6a3b      	ldr	r3, [r7, #32]
 800bf84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf86:	4b1d      	ldr	r3, [pc, #116]	; (800bffc <xTaskGenericNotify+0x16c>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d903      	bls.n	800bf96 <xTaskGenericNotify+0x106>
 800bf8e:	6a3b      	ldr	r3, [r7, #32]
 800bf90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf92:	4a1a      	ldr	r2, [pc, #104]	; (800bffc <xTaskGenericNotify+0x16c>)
 800bf94:	6013      	str	r3, [r2, #0]
 800bf96:	6a3b      	ldr	r3, [r7, #32]
 800bf98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	4a17      	ldr	r2, [pc, #92]	; (800c000 <xTaskGenericNotify+0x170>)
 800bfa4:	441a      	add	r2, r3
 800bfa6:	6a3b      	ldr	r3, [r7, #32]
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	4619      	mov	r1, r3
 800bfac:	4610      	mov	r0, r2
 800bfae:	f7fe fa00 	bl	800a3b2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bfb2:	6a3b      	ldr	r3, [r7, #32]
 800bfb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00a      	beq.n	800bfd0 <xTaskGenericNotify+0x140>
	__asm volatile
 800bfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfbe:	f383 8811 	msr	BASEPRI, r3
 800bfc2:	f3bf 8f6f 	isb	sy
 800bfc6:	f3bf 8f4f 	dsb	sy
 800bfca:	613b      	str	r3, [r7, #16]
}
 800bfcc:	bf00      	nop
 800bfce:	e7fe      	b.n	800bfce <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bfd0:	6a3b      	ldr	r3, [r7, #32]
 800bfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd4:	4b0b      	ldr	r3, [pc, #44]	; (800c004 <xTaskGenericNotify+0x174>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d907      	bls.n	800bfee <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800bfde:	4b0a      	ldr	r3, [pc, #40]	; (800c008 <xTaskGenericNotify+0x178>)
 800bfe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	f3bf 8f4f 	dsb	sy
 800bfea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bfee:	f000 fd09 	bl	800ca04 <vPortExitCritical>

		return xReturn;
 800bff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3728      	adds	r7, #40	; 0x28
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	24000e90 	.word	0x24000e90
 800c000:	240009b8 	.word	0x240009b8
 800c004:	240009b4 	.word	0x240009b4
 800c008:	e000ed04 	.word	0xe000ed04

0800c00c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c016:	4b21      	ldr	r3, [pc, #132]	; (800c09c <prvAddCurrentTaskToDelayedList+0x90>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c01c:	4b20      	ldr	r3, [pc, #128]	; (800c0a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	3304      	adds	r3, #4
 800c022:	4618      	mov	r0, r3
 800c024:	f7fe fa22 	bl	800a46c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c02e:	d10a      	bne.n	800c046 <prvAddCurrentTaskToDelayedList+0x3a>
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d007      	beq.n	800c046 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c036:	4b1a      	ldr	r3, [pc, #104]	; (800c0a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	3304      	adds	r3, #4
 800c03c:	4619      	mov	r1, r3
 800c03e:	4819      	ldr	r0, [pc, #100]	; (800c0a4 <prvAddCurrentTaskToDelayedList+0x98>)
 800c040:	f7fe f9b7 	bl	800a3b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c044:	e026      	b.n	800c094 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4413      	add	r3, r2
 800c04c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c04e:	4b14      	ldr	r3, [pc, #80]	; (800c0a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	68ba      	ldr	r2, [r7, #8]
 800c054:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c056:	68ba      	ldr	r2, [r7, #8]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d209      	bcs.n	800c072 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c05e:	4b12      	ldr	r3, [pc, #72]	; (800c0a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	4b0f      	ldr	r3, [pc, #60]	; (800c0a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	3304      	adds	r3, #4
 800c068:	4619      	mov	r1, r3
 800c06a:	4610      	mov	r0, r2
 800c06c:	f7fe f9c5 	bl	800a3fa <vListInsert>
}
 800c070:	e010      	b.n	800c094 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c072:	4b0e      	ldr	r3, [pc, #56]	; (800c0ac <prvAddCurrentTaskToDelayedList+0xa0>)
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	4b0a      	ldr	r3, [pc, #40]	; (800c0a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	3304      	adds	r3, #4
 800c07c:	4619      	mov	r1, r3
 800c07e:	4610      	mov	r0, r2
 800c080:	f7fe f9bb 	bl	800a3fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c084:	4b0a      	ldr	r3, [pc, #40]	; (800c0b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	68ba      	ldr	r2, [r7, #8]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d202      	bcs.n	800c094 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c08e:	4a08      	ldr	r2, [pc, #32]	; (800c0b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	6013      	str	r3, [r2, #0]
}
 800c094:	bf00      	nop
 800c096:	3710      	adds	r7, #16
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	24000e8c 	.word	0x24000e8c
 800c0a0:	240009b4 	.word	0x240009b4
 800c0a4:	24000e74 	.word	0x24000e74
 800c0a8:	24000e44 	.word	0x24000e44
 800c0ac:	24000e40 	.word	0x24000e40
 800c0b0:	24000ea8 	.word	0x24000ea8

0800c0b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b08a      	sub	sp, #40	; 0x28
 800c0b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c0be:	f000 fb07 	bl	800c6d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c0c2:	4b1c      	ldr	r3, [pc, #112]	; (800c134 <xTimerCreateTimerTask+0x80>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d021      	beq.n	800c10e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c0d2:	1d3a      	adds	r2, r7, #4
 800c0d4:	f107 0108 	add.w	r1, r7, #8
 800c0d8:	f107 030c 	add.w	r3, r7, #12
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fe f921 	bl	800a324 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c0e2:	6879      	ldr	r1, [r7, #4]
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	68fa      	ldr	r2, [r7, #12]
 800c0e8:	9202      	str	r2, [sp, #8]
 800c0ea:	9301      	str	r3, [sp, #4]
 800c0ec:	2302      	movs	r3, #2
 800c0ee:	9300      	str	r3, [sp, #0]
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	460a      	mov	r2, r1
 800c0f4:	4910      	ldr	r1, [pc, #64]	; (800c138 <xTimerCreateTimerTask+0x84>)
 800c0f6:	4811      	ldr	r0, [pc, #68]	; (800c13c <xTimerCreateTimerTask+0x88>)
 800c0f8:	f7fe ff88 	bl	800b00c <xTaskCreateStatic>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	4a10      	ldr	r2, [pc, #64]	; (800c140 <xTimerCreateTimerTask+0x8c>)
 800c100:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c102:	4b0f      	ldr	r3, [pc, #60]	; (800c140 <xTimerCreateTimerTask+0x8c>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d001      	beq.n	800c10e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c10a:	2301      	movs	r3, #1
 800c10c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d10a      	bne.n	800c12a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	613b      	str	r3, [r7, #16]
}
 800c126:	bf00      	nop
 800c128:	e7fe      	b.n	800c128 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c12a:	697b      	ldr	r3, [r7, #20]
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3718      	adds	r7, #24
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	24000eec 	.word	0x24000eec
 800c138:	0800d1e4 	.word	0x0800d1e4
 800c13c:	0800c279 	.word	0x0800c279
 800c140:	24000ef0 	.word	0x24000ef0

0800c144 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b08a      	sub	sp, #40	; 0x28
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
 800c150:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c152:	2300      	movs	r3, #0
 800c154:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10a      	bne.n	800c172 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c160:	f383 8811 	msr	BASEPRI, r3
 800c164:	f3bf 8f6f 	isb	sy
 800c168:	f3bf 8f4f 	dsb	sy
 800c16c:	623b      	str	r3, [r7, #32]
}
 800c16e:	bf00      	nop
 800c170:	e7fe      	b.n	800c170 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c172:	4b1a      	ldr	r3, [pc, #104]	; (800c1dc <xTimerGenericCommand+0x98>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d02a      	beq.n	800c1d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	2b05      	cmp	r3, #5
 800c18a:	dc18      	bgt.n	800c1be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c18c:	f7ff fda8 	bl	800bce0 <xTaskGetSchedulerState>
 800c190:	4603      	mov	r3, r0
 800c192:	2b02      	cmp	r3, #2
 800c194:	d109      	bne.n	800c1aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c196:	4b11      	ldr	r3, [pc, #68]	; (800c1dc <xTimerGenericCommand+0x98>)
 800c198:	6818      	ldr	r0, [r3, #0]
 800c19a:	f107 0110 	add.w	r1, r7, #16
 800c19e:	2300      	movs	r3, #0
 800c1a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1a2:	f7fe facb 	bl	800a73c <xQueueGenericSend>
 800c1a6:	6278      	str	r0, [r7, #36]	; 0x24
 800c1a8:	e012      	b.n	800c1d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c1aa:	4b0c      	ldr	r3, [pc, #48]	; (800c1dc <xTimerGenericCommand+0x98>)
 800c1ac:	6818      	ldr	r0, [r3, #0]
 800c1ae:	f107 0110 	add.w	r1, r7, #16
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f7fe fac1 	bl	800a73c <xQueueGenericSend>
 800c1ba:	6278      	str	r0, [r7, #36]	; 0x24
 800c1bc:	e008      	b.n	800c1d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c1be:	4b07      	ldr	r3, [pc, #28]	; (800c1dc <xTimerGenericCommand+0x98>)
 800c1c0:	6818      	ldr	r0, [r3, #0]
 800c1c2:	f107 0110 	add.w	r1, r7, #16
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	683a      	ldr	r2, [r7, #0]
 800c1ca:	f7fe fbb5 	bl	800a938 <xQueueGenericSendFromISR>
 800c1ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3728      	adds	r7, #40	; 0x28
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	24000eec 	.word	0x24000eec

0800c1e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b088      	sub	sp, #32
 800c1e4:	af02      	add	r7, sp, #8
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1ea:	4b22      	ldr	r3, [pc, #136]	; (800c274 <prvProcessExpiredTimer+0x94>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7fe f937 	bl	800a46c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c204:	f003 0304 	and.w	r3, r3, #4
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d022      	beq.n	800c252 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	699a      	ldr	r2, [r3, #24]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	18d1      	adds	r1, r2, r3
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	6978      	ldr	r0, [r7, #20]
 800c21a:	f000 f8d1 	bl	800c3c0 <prvInsertTimerInActiveList>
 800c21e:	4603      	mov	r3, r0
 800c220:	2b00      	cmp	r3, #0
 800c222:	d01f      	beq.n	800c264 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c224:	2300      	movs	r3, #0
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	2300      	movs	r3, #0
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	2100      	movs	r1, #0
 800c22e:	6978      	ldr	r0, [r7, #20]
 800c230:	f7ff ff88 	bl	800c144 <xTimerGenericCommand>
 800c234:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d113      	bne.n	800c264 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	60fb      	str	r3, [r7, #12]
}
 800c24e:	bf00      	nop
 800c250:	e7fe      	b.n	800c250 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c258:	f023 0301 	bic.w	r3, r3, #1
 800c25c:	b2da      	uxtb	r2, r3
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	6a1b      	ldr	r3, [r3, #32]
 800c268:	6978      	ldr	r0, [r7, #20]
 800c26a:	4798      	blx	r3
}
 800c26c:	bf00      	nop
 800c26e:	3718      	adds	r7, #24
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	24000ee4 	.word	0x24000ee4

0800c278 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c280:	f107 0308 	add.w	r3, r7, #8
 800c284:	4618      	mov	r0, r3
 800c286:	f000 f857 	bl	800c338 <prvGetNextExpireTime>
 800c28a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	4619      	mov	r1, r3
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	f000 f803 	bl	800c29c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c296:	f000 f8d5 	bl	800c444 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c29a:	e7f1      	b.n	800c280 <prvTimerTask+0x8>

0800c29c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c2a6:	f7ff f913 	bl	800b4d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2aa:	f107 0308 	add.w	r3, r7, #8
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f000 f866 	bl	800c380 <prvSampleTimeNow>
 800c2b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d130      	bne.n	800c31e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d10a      	bne.n	800c2d8 <prvProcessTimerOrBlockTask+0x3c>
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d806      	bhi.n	800c2d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c2ca:	f7ff f90f 	bl	800b4ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c2ce:	68f9      	ldr	r1, [r7, #12]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f7ff ff85 	bl	800c1e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c2d6:	e024      	b.n	800c322 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d008      	beq.n	800c2f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2de:	4b13      	ldr	r3, [pc, #76]	; (800c32c <prvProcessTimerOrBlockTask+0x90>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d101      	bne.n	800c2ec <prvProcessTimerOrBlockTask+0x50>
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e000      	b.n	800c2ee <prvProcessTimerOrBlockTask+0x52>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c2f0:	4b0f      	ldr	r3, [pc, #60]	; (800c330 <prvProcessTimerOrBlockTask+0x94>)
 800c2f2:	6818      	ldr	r0, [r3, #0]
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	683a      	ldr	r2, [r7, #0]
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	f7fe fe51 	bl	800afa4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c302:	f7ff f8f3 	bl	800b4ec <xTaskResumeAll>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d10a      	bne.n	800c322 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c30c:	4b09      	ldr	r3, [pc, #36]	; (800c334 <prvProcessTimerOrBlockTask+0x98>)
 800c30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c312:	601a      	str	r2, [r3, #0]
 800c314:	f3bf 8f4f 	dsb	sy
 800c318:	f3bf 8f6f 	isb	sy
}
 800c31c:	e001      	b.n	800c322 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c31e:	f7ff f8e5 	bl	800b4ec <xTaskResumeAll>
}
 800c322:	bf00      	nop
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	24000ee8 	.word	0x24000ee8
 800c330:	24000eec 	.word	0x24000eec
 800c334:	e000ed04 	.word	0xe000ed04

0800c338 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c340:	4b0e      	ldr	r3, [pc, #56]	; (800c37c <prvGetNextExpireTime+0x44>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d101      	bne.n	800c34e <prvGetNextExpireTime+0x16>
 800c34a:	2201      	movs	r2, #1
 800c34c:	e000      	b.n	800c350 <prvGetNextExpireTime+0x18>
 800c34e:	2200      	movs	r2, #0
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d105      	bne.n	800c368 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c35c:	4b07      	ldr	r3, [pc, #28]	; (800c37c <prvGetNextExpireTime+0x44>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	60fb      	str	r3, [r7, #12]
 800c366:	e001      	b.n	800c36c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c368:	2300      	movs	r3, #0
 800c36a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c36c:	68fb      	ldr	r3, [r7, #12]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3714      	adds	r7, #20
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop
 800c37c:	24000ee4 	.word	0x24000ee4

0800c380 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c388:	f7ff f94e 	bl	800b628 <xTaskGetTickCount>
 800c38c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c38e:	4b0b      	ldr	r3, [pc, #44]	; (800c3bc <prvSampleTimeNow+0x3c>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	68fa      	ldr	r2, [r7, #12]
 800c394:	429a      	cmp	r2, r3
 800c396:	d205      	bcs.n	800c3a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c398:	f000 f936 	bl	800c608 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	601a      	str	r2, [r3, #0]
 800c3a2:	e002      	b.n	800c3aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c3aa:	4a04      	ldr	r2, [pc, #16]	; (800c3bc <prvSampleTimeNow+0x3c>)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	24000ef4 	.word	0x24000ef4

0800c3c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b086      	sub	sp, #24
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	607a      	str	r2, [r7, #4]
 800c3cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	68ba      	ldr	r2, [r7, #8]
 800c3d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c3de:	68ba      	ldr	r2, [r7, #8]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d812      	bhi.n	800c40c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	1ad2      	subs	r2, r2, r3
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	699b      	ldr	r3, [r3, #24]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d302      	bcc.n	800c3fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	617b      	str	r3, [r7, #20]
 800c3f8:	e01b      	b.n	800c432 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c3fa:	4b10      	ldr	r3, [pc, #64]	; (800c43c <prvInsertTimerInActiveList+0x7c>)
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	3304      	adds	r3, #4
 800c402:	4619      	mov	r1, r3
 800c404:	4610      	mov	r0, r2
 800c406:	f7fd fff8 	bl	800a3fa <vListInsert>
 800c40a:	e012      	b.n	800c432 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	429a      	cmp	r2, r3
 800c412:	d206      	bcs.n	800c422 <prvInsertTimerInActiveList+0x62>
 800c414:	68ba      	ldr	r2, [r7, #8]
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d302      	bcc.n	800c422 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c41c:	2301      	movs	r3, #1
 800c41e:	617b      	str	r3, [r7, #20]
 800c420:	e007      	b.n	800c432 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c422:	4b07      	ldr	r3, [pc, #28]	; (800c440 <prvInsertTimerInActiveList+0x80>)
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3304      	adds	r3, #4
 800c42a:	4619      	mov	r1, r3
 800c42c:	4610      	mov	r0, r2
 800c42e:	f7fd ffe4 	bl	800a3fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c432:	697b      	ldr	r3, [r7, #20]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3718      	adds	r7, #24
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	24000ee8 	.word	0x24000ee8
 800c440:	24000ee4 	.word	0x24000ee4

0800c444 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b08e      	sub	sp, #56	; 0x38
 800c448:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c44a:	e0ca      	b.n	800c5e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	da18      	bge.n	800c484 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c452:	1d3b      	adds	r3, r7, #4
 800c454:	3304      	adds	r3, #4
 800c456:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d10a      	bne.n	800c474 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c462:	f383 8811 	msr	BASEPRI, r3
 800c466:	f3bf 8f6f 	isb	sy
 800c46a:	f3bf 8f4f 	dsb	sy
 800c46e:	61fb      	str	r3, [r7, #28]
}
 800c470:	bf00      	nop
 800c472:	e7fe      	b.n	800c472 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c47a:	6850      	ldr	r0, [r2, #4]
 800c47c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c47e:	6892      	ldr	r2, [r2, #8]
 800c480:	4611      	mov	r1, r2
 800c482:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	f2c0 80ab 	blt.w	800c5e2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c492:	695b      	ldr	r3, [r3, #20]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d004      	beq.n	800c4a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49a:	3304      	adds	r3, #4
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7fd ffe5 	bl	800a46c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c4a2:	463b      	mov	r3, r7
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7ff ff6b 	bl	800c380 <prvSampleTimeNow>
 800c4aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2b09      	cmp	r3, #9
 800c4b0:	f200 8096 	bhi.w	800c5e0 <prvProcessReceivedCommands+0x19c>
 800c4b4:	a201      	add	r2, pc, #4	; (adr r2, 800c4bc <prvProcessReceivedCommands+0x78>)
 800c4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ba:	bf00      	nop
 800c4bc:	0800c4e5 	.word	0x0800c4e5
 800c4c0:	0800c4e5 	.word	0x0800c4e5
 800c4c4:	0800c4e5 	.word	0x0800c4e5
 800c4c8:	0800c559 	.word	0x0800c559
 800c4cc:	0800c56d 	.word	0x0800c56d
 800c4d0:	0800c5b7 	.word	0x0800c5b7
 800c4d4:	0800c4e5 	.word	0x0800c4e5
 800c4d8:	0800c4e5 	.word	0x0800c4e5
 800c4dc:	0800c559 	.word	0x0800c559
 800c4e0:	0800c56d 	.word	0x0800c56d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4ea:	f043 0301 	orr.w	r3, r3, #1
 800c4ee:	b2da      	uxtb	r2, r3
 800c4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fa:	699b      	ldr	r3, [r3, #24]
 800c4fc:	18d1      	adds	r1, r2, r3
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c504:	f7ff ff5c 	bl	800c3c0 <prvInsertTimerInActiveList>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d069      	beq.n	800c5e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c510:	6a1b      	ldr	r3, [r3, #32]
 800c512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c514:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c51c:	f003 0304 	and.w	r3, r3, #4
 800c520:	2b00      	cmp	r3, #0
 800c522:	d05e      	beq.n	800c5e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c524:	68ba      	ldr	r2, [r7, #8]
 800c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	441a      	add	r2, r3
 800c52c:	2300      	movs	r3, #0
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	2300      	movs	r3, #0
 800c532:	2100      	movs	r1, #0
 800c534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c536:	f7ff fe05 	bl	800c144 <xTimerGenericCommand>
 800c53a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c53c:	6a3b      	ldr	r3, [r7, #32]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d14f      	bne.n	800c5e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	61bb      	str	r3, [r7, #24]
}
 800c554:	bf00      	nop
 800c556:	e7fe      	b.n	800c556 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c55e:	f023 0301 	bic.w	r3, r3, #1
 800c562:	b2da      	uxtb	r2, r3
 800c564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c56a:	e03a      	b.n	800c5e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c572:	f043 0301 	orr.w	r3, r3, #1
 800c576:	b2da      	uxtb	r2, r3
 800c578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c582:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c586:	699b      	ldr	r3, [r3, #24]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10a      	bne.n	800c5a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c590:	f383 8811 	msr	BASEPRI, r3
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	617b      	str	r3, [r7, #20]
}
 800c59e:	bf00      	nop
 800c5a0:	e7fe      	b.n	800c5a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a4:	699a      	ldr	r2, [r3, #24]
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a8:	18d1      	adds	r1, r2, r3
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5b0:	f7ff ff06 	bl	800c3c0 <prvInsertTimerInActiveList>
					break;
 800c5b4:	e015      	b.n	800c5e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5bc:	f003 0302 	and.w	r3, r3, #2
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d103      	bne.n	800c5cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c5c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5c6:	f000 fbdb 	bl	800cd80 <vPortFree>
 800c5ca:	e00a      	b.n	800c5e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5d2:	f023 0301 	bic.w	r3, r3, #1
 800c5d6:	b2da      	uxtb	r2, r3
 800c5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c5de:	e000      	b.n	800c5e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c5e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5e2:	4b08      	ldr	r3, [pc, #32]	; (800c604 <prvProcessReceivedCommands+0x1c0>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	1d39      	adds	r1, r7, #4
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fe fa40 	bl	800aa70 <xQueueReceive>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f47f af2a 	bne.w	800c44c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c5f8:	bf00      	nop
 800c5fa:	bf00      	nop
 800c5fc:	3730      	adds	r7, #48	; 0x30
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	24000eec 	.word	0x24000eec

0800c608 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b088      	sub	sp, #32
 800c60c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c60e:	e048      	b.n	800c6a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c610:	4b2d      	ldr	r3, [pc, #180]	; (800c6c8 <prvSwitchTimerLists+0xc0>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c61a:	4b2b      	ldr	r3, [pc, #172]	; (800c6c8 <prvSwitchTimerLists+0xc0>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	3304      	adds	r3, #4
 800c628:	4618      	mov	r0, r3
 800c62a:	f7fd ff1f 	bl	800a46c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6a1b      	ldr	r3, [r3, #32]
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c63c:	f003 0304 	and.w	r3, r3, #4
 800c640:	2b00      	cmp	r3, #0
 800c642:	d02e      	beq.n	800c6a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	699b      	ldr	r3, [r3, #24]
 800c648:	693a      	ldr	r2, [r7, #16]
 800c64a:	4413      	add	r3, r2
 800c64c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	429a      	cmp	r2, r3
 800c654:	d90e      	bls.n	800c674 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	68ba      	ldr	r2, [r7, #8]
 800c65a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c662:	4b19      	ldr	r3, [pc, #100]	; (800c6c8 <prvSwitchTimerLists+0xc0>)
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	3304      	adds	r3, #4
 800c66a:	4619      	mov	r1, r3
 800c66c:	4610      	mov	r0, r2
 800c66e:	f7fd fec4 	bl	800a3fa <vListInsert>
 800c672:	e016      	b.n	800c6a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c674:	2300      	movs	r3, #0
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	2300      	movs	r3, #0
 800c67a:	693a      	ldr	r2, [r7, #16]
 800c67c:	2100      	movs	r1, #0
 800c67e:	68f8      	ldr	r0, [r7, #12]
 800c680:	f7ff fd60 	bl	800c144 <xTimerGenericCommand>
 800c684:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d10a      	bne.n	800c6a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c690:	f383 8811 	msr	BASEPRI, r3
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	603b      	str	r3, [r7, #0]
}
 800c69e:	bf00      	nop
 800c6a0:	e7fe      	b.n	800c6a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6a2:	4b09      	ldr	r3, [pc, #36]	; (800c6c8 <prvSwitchTimerLists+0xc0>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1b1      	bne.n	800c610 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c6ac:	4b06      	ldr	r3, [pc, #24]	; (800c6c8 <prvSwitchTimerLists+0xc0>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c6b2:	4b06      	ldr	r3, [pc, #24]	; (800c6cc <prvSwitchTimerLists+0xc4>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a04      	ldr	r2, [pc, #16]	; (800c6c8 <prvSwitchTimerLists+0xc0>)
 800c6b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c6ba:	4a04      	ldr	r2, [pc, #16]	; (800c6cc <prvSwitchTimerLists+0xc4>)
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	6013      	str	r3, [r2, #0]
}
 800c6c0:	bf00      	nop
 800c6c2:	3718      	adds	r7, #24
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	24000ee4 	.word	0x24000ee4
 800c6cc:	24000ee8 	.word	0x24000ee8

0800c6d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c6d6:	f000 f965 	bl	800c9a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c6da:	4b15      	ldr	r3, [pc, #84]	; (800c730 <prvCheckForValidListAndQueue+0x60>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d120      	bne.n	800c724 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c6e2:	4814      	ldr	r0, [pc, #80]	; (800c734 <prvCheckForValidListAndQueue+0x64>)
 800c6e4:	f7fd fe38 	bl	800a358 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c6e8:	4813      	ldr	r0, [pc, #76]	; (800c738 <prvCheckForValidListAndQueue+0x68>)
 800c6ea:	f7fd fe35 	bl	800a358 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c6ee:	4b13      	ldr	r3, [pc, #76]	; (800c73c <prvCheckForValidListAndQueue+0x6c>)
 800c6f0:	4a10      	ldr	r2, [pc, #64]	; (800c734 <prvCheckForValidListAndQueue+0x64>)
 800c6f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c6f4:	4b12      	ldr	r3, [pc, #72]	; (800c740 <prvCheckForValidListAndQueue+0x70>)
 800c6f6:	4a10      	ldr	r2, [pc, #64]	; (800c738 <prvCheckForValidListAndQueue+0x68>)
 800c6f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	9300      	str	r3, [sp, #0]
 800c6fe:	4b11      	ldr	r3, [pc, #68]	; (800c744 <prvCheckForValidListAndQueue+0x74>)
 800c700:	4a11      	ldr	r2, [pc, #68]	; (800c748 <prvCheckForValidListAndQueue+0x78>)
 800c702:	2110      	movs	r1, #16
 800c704:	200a      	movs	r0, #10
 800c706:	f7fd ff43 	bl	800a590 <xQueueGenericCreateStatic>
 800c70a:	4603      	mov	r3, r0
 800c70c:	4a08      	ldr	r2, [pc, #32]	; (800c730 <prvCheckForValidListAndQueue+0x60>)
 800c70e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c710:	4b07      	ldr	r3, [pc, #28]	; (800c730 <prvCheckForValidListAndQueue+0x60>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d005      	beq.n	800c724 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c718:	4b05      	ldr	r3, [pc, #20]	; (800c730 <prvCheckForValidListAndQueue+0x60>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	490b      	ldr	r1, [pc, #44]	; (800c74c <prvCheckForValidListAndQueue+0x7c>)
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fe fc16 	bl	800af50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c724:	f000 f96e 	bl	800ca04 <vPortExitCritical>
}
 800c728:	bf00      	nop
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	24000eec 	.word	0x24000eec
 800c734:	24000ebc 	.word	0x24000ebc
 800c738:	24000ed0 	.word	0x24000ed0
 800c73c:	24000ee4 	.word	0x24000ee4
 800c740:	24000ee8 	.word	0x24000ee8
 800c744:	24000f98 	.word	0x24000f98
 800c748:	24000ef8 	.word	0x24000ef8
 800c74c:	0800d1ec 	.word	0x0800d1ec

0800c750 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c750:	b480      	push	{r7}
 800c752:	b085      	sub	sp, #20
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	3b04      	subs	r3, #4
 800c760:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	3b04      	subs	r3, #4
 800c76e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	f023 0201 	bic.w	r2, r3, #1
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	3b04      	subs	r3, #4
 800c77e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c780:	4a0c      	ldr	r2, [pc, #48]	; (800c7b4 <pxPortInitialiseStack+0x64>)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	3b14      	subs	r3, #20
 800c78a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	3b04      	subs	r3, #4
 800c796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f06f 0202 	mvn.w	r2, #2
 800c79e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	3b20      	subs	r3, #32
 800c7a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3714      	adds	r7, #20
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr
 800c7b4:	0800c7b9 	.word	0x0800c7b9

0800c7b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7c2:	4b12      	ldr	r3, [pc, #72]	; (800c80c <prvTaskExitError+0x54>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ca:	d00a      	beq.n	800c7e2 <prvTaskExitError+0x2a>
	__asm volatile
 800c7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d0:	f383 8811 	msr	BASEPRI, r3
 800c7d4:	f3bf 8f6f 	isb	sy
 800c7d8:	f3bf 8f4f 	dsb	sy
 800c7dc:	60fb      	str	r3, [r7, #12]
}
 800c7de:	bf00      	nop
 800c7e0:	e7fe      	b.n	800c7e0 <prvTaskExitError+0x28>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	60bb      	str	r3, [r7, #8]
}
 800c7f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7f6:	bf00      	nop
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d0fc      	beq.n	800c7f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7fe:	bf00      	nop
 800c800:	bf00      	nop
 800c802:	3714      	adds	r7, #20
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr
 800c80c:	24000010 	.word	0x24000010

0800c810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c810:	4b07      	ldr	r3, [pc, #28]	; (800c830 <pxCurrentTCBConst2>)
 800c812:	6819      	ldr	r1, [r3, #0]
 800c814:	6808      	ldr	r0, [r1, #0]
 800c816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81a:	f380 8809 	msr	PSP, r0
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f04f 0000 	mov.w	r0, #0
 800c826:	f380 8811 	msr	BASEPRI, r0
 800c82a:	4770      	bx	lr
 800c82c:	f3af 8000 	nop.w

0800c830 <pxCurrentTCBConst2>:
 800c830:	240009b4 	.word	0x240009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop

0800c838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c838:	4808      	ldr	r0, [pc, #32]	; (800c85c <prvPortStartFirstTask+0x24>)
 800c83a:	6800      	ldr	r0, [r0, #0]
 800c83c:	6800      	ldr	r0, [r0, #0]
 800c83e:	f380 8808 	msr	MSP, r0
 800c842:	f04f 0000 	mov.w	r0, #0
 800c846:	f380 8814 	msr	CONTROL, r0
 800c84a:	b662      	cpsie	i
 800c84c:	b661      	cpsie	f
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	f3bf 8f6f 	isb	sy
 800c856:	df00      	svc	0
 800c858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c85a:	bf00      	nop
 800c85c:	e000ed08 	.word	0xe000ed08

0800c860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b086      	sub	sp, #24
 800c864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c866:	4b46      	ldr	r3, [pc, #280]	; (800c980 <xPortStartScheduler+0x120>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4a46      	ldr	r2, [pc, #280]	; (800c984 <xPortStartScheduler+0x124>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d10a      	bne.n	800c886 <xPortStartScheduler+0x26>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	613b      	str	r3, [r7, #16]
}
 800c882:	bf00      	nop
 800c884:	e7fe      	b.n	800c884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c886:	4b3e      	ldr	r3, [pc, #248]	; (800c980 <xPortStartScheduler+0x120>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a3f      	ldr	r2, [pc, #252]	; (800c988 <xPortStartScheduler+0x128>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d10a      	bne.n	800c8a6 <xPortStartScheduler+0x46>
	__asm volatile
 800c890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c894:	f383 8811 	msr	BASEPRI, r3
 800c898:	f3bf 8f6f 	isb	sy
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	60fb      	str	r3, [r7, #12]
}
 800c8a2:	bf00      	nop
 800c8a4:	e7fe      	b.n	800c8a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c8a6:	4b39      	ldr	r3, [pc, #228]	; (800c98c <xPortStartScheduler+0x12c>)
 800c8a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	22ff      	movs	r2, #255	; 0xff
 800c8b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8c0:	78fb      	ldrb	r3, [r7, #3]
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c8c8:	b2da      	uxtb	r2, r3
 800c8ca:	4b31      	ldr	r3, [pc, #196]	; (800c990 <xPortStartScheduler+0x130>)
 800c8cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8ce:	4b31      	ldr	r3, [pc, #196]	; (800c994 <xPortStartScheduler+0x134>)
 800c8d0:	2207      	movs	r2, #7
 800c8d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8d4:	e009      	b.n	800c8ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c8d6:	4b2f      	ldr	r3, [pc, #188]	; (800c994 <xPortStartScheduler+0x134>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	4a2d      	ldr	r2, [pc, #180]	; (800c994 <xPortStartScheduler+0x134>)
 800c8de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c8e0:	78fb      	ldrb	r3, [r7, #3]
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	005b      	lsls	r3, r3, #1
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8ea:	78fb      	ldrb	r3, [r7, #3]
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8f2:	2b80      	cmp	r3, #128	; 0x80
 800c8f4:	d0ef      	beq.n	800c8d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8f6:	4b27      	ldr	r3, [pc, #156]	; (800c994 <xPortStartScheduler+0x134>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f1c3 0307 	rsb	r3, r3, #7
 800c8fe:	2b04      	cmp	r3, #4
 800c900:	d00a      	beq.n	800c918 <xPortStartScheduler+0xb8>
	__asm volatile
 800c902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c906:	f383 8811 	msr	BASEPRI, r3
 800c90a:	f3bf 8f6f 	isb	sy
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	60bb      	str	r3, [r7, #8]
}
 800c914:	bf00      	nop
 800c916:	e7fe      	b.n	800c916 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c918:	4b1e      	ldr	r3, [pc, #120]	; (800c994 <xPortStartScheduler+0x134>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	021b      	lsls	r3, r3, #8
 800c91e:	4a1d      	ldr	r2, [pc, #116]	; (800c994 <xPortStartScheduler+0x134>)
 800c920:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c922:	4b1c      	ldr	r3, [pc, #112]	; (800c994 <xPortStartScheduler+0x134>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c92a:	4a1a      	ldr	r2, [pc, #104]	; (800c994 <xPortStartScheduler+0x134>)
 800c92c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	b2da      	uxtb	r2, r3
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c936:	4b18      	ldr	r3, [pc, #96]	; (800c998 <xPortStartScheduler+0x138>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a17      	ldr	r2, [pc, #92]	; (800c998 <xPortStartScheduler+0x138>)
 800c93c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c942:	4b15      	ldr	r3, [pc, #84]	; (800c998 <xPortStartScheduler+0x138>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a14      	ldr	r2, [pc, #80]	; (800c998 <xPortStartScheduler+0x138>)
 800c948:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c94c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c94e:	f000 f8dd 	bl	800cb0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c952:	4b12      	ldr	r3, [pc, #72]	; (800c99c <xPortStartScheduler+0x13c>)
 800c954:	2200      	movs	r2, #0
 800c956:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c958:	f000 f8fc 	bl	800cb54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c95c:	4b10      	ldr	r3, [pc, #64]	; (800c9a0 <xPortStartScheduler+0x140>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a0f      	ldr	r2, [pc, #60]	; (800c9a0 <xPortStartScheduler+0x140>)
 800c962:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c966:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c968:	f7ff ff66 	bl	800c838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c96c:	f7fe ff26 	bl	800b7bc <vTaskSwitchContext>
	prvTaskExitError();
 800c970:	f7ff ff22 	bl	800c7b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	3718      	adds	r7, #24
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	e000ed00 	.word	0xe000ed00
 800c984:	410fc271 	.word	0x410fc271
 800c988:	410fc270 	.word	0x410fc270
 800c98c:	e000e400 	.word	0xe000e400
 800c990:	24000fe8 	.word	0x24000fe8
 800c994:	24000fec 	.word	0x24000fec
 800c998:	e000ed20 	.word	0xe000ed20
 800c99c:	24000010 	.word	0x24000010
 800c9a0:	e000ef34 	.word	0xe000ef34

0800c9a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
	__asm volatile
 800c9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ae:	f383 8811 	msr	BASEPRI, r3
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	f3bf 8f4f 	dsb	sy
 800c9ba:	607b      	str	r3, [r7, #4]
}
 800c9bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c9be:	4b0f      	ldr	r3, [pc, #60]	; (800c9fc <vPortEnterCritical+0x58>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	4a0d      	ldr	r2, [pc, #52]	; (800c9fc <vPortEnterCritical+0x58>)
 800c9c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c9c8:	4b0c      	ldr	r3, [pc, #48]	; (800c9fc <vPortEnterCritical+0x58>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d10f      	bne.n	800c9f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c9d0:	4b0b      	ldr	r3, [pc, #44]	; (800ca00 <vPortEnterCritical+0x5c>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00a      	beq.n	800c9f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	603b      	str	r3, [r7, #0]
}
 800c9ec:	bf00      	nop
 800c9ee:	e7fe      	b.n	800c9ee <vPortEnterCritical+0x4a>
	}
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr
 800c9fc:	24000010 	.word	0x24000010
 800ca00:	e000ed04 	.word	0xe000ed04

0800ca04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca0a:	4b12      	ldr	r3, [pc, #72]	; (800ca54 <vPortExitCritical+0x50>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d10a      	bne.n	800ca28 <vPortExitCritical+0x24>
	__asm volatile
 800ca12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca16:	f383 8811 	msr	BASEPRI, r3
 800ca1a:	f3bf 8f6f 	isb	sy
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	607b      	str	r3, [r7, #4]
}
 800ca24:	bf00      	nop
 800ca26:	e7fe      	b.n	800ca26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca28:	4b0a      	ldr	r3, [pc, #40]	; (800ca54 <vPortExitCritical+0x50>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	4a09      	ldr	r2, [pc, #36]	; (800ca54 <vPortExitCritical+0x50>)
 800ca30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca32:	4b08      	ldr	r3, [pc, #32]	; (800ca54 <vPortExitCritical+0x50>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d105      	bne.n	800ca46 <vPortExitCritical+0x42>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	f383 8811 	msr	BASEPRI, r3
}
 800ca44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca46:	bf00      	nop
 800ca48:	370c      	adds	r7, #12
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	24000010 	.word	0x24000010
	...

0800ca60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca60:	f3ef 8009 	mrs	r0, PSP
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	4b15      	ldr	r3, [pc, #84]	; (800cac0 <pxCurrentTCBConst>)
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	f01e 0f10 	tst.w	lr, #16
 800ca70:	bf08      	it	eq
 800ca72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7a:	6010      	str	r0, [r2, #0]
 800ca7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca84:	f380 8811 	msr	BASEPRI, r0
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	f7fe fe94 	bl	800b7bc <vTaskSwitchContext>
 800ca94:	f04f 0000 	mov.w	r0, #0
 800ca98:	f380 8811 	msr	BASEPRI, r0
 800ca9c:	bc09      	pop	{r0, r3}
 800ca9e:	6819      	ldr	r1, [r3, #0]
 800caa0:	6808      	ldr	r0, [r1, #0]
 800caa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa6:	f01e 0f10 	tst.w	lr, #16
 800caaa:	bf08      	it	eq
 800caac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cab0:	f380 8809 	msr	PSP, r0
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop
 800cabc:	f3af 8000 	nop.w

0800cac0 <pxCurrentTCBConst>:
 800cac0:	240009b4 	.word	0x240009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cac4:	bf00      	nop
 800cac6:	bf00      	nop

0800cac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	607b      	str	r3, [r7, #4]
}
 800cae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cae2:	f7fe fdb1 	bl	800b648 <xTaskIncrementTick>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d003      	beq.n	800caf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800caec:	4b06      	ldr	r3, [pc, #24]	; (800cb08 <xPortSysTickHandler+0x40>)
 800caee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caf2:	601a      	str	r2, [r3, #0]
 800caf4:	2300      	movs	r3, #0
 800caf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	f383 8811 	msr	BASEPRI, r3
}
 800cafe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb00:	bf00      	nop
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	e000ed04 	.word	0xe000ed04

0800cb0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb10:	4b0b      	ldr	r3, [pc, #44]	; (800cb40 <vPortSetupTimerInterrupt+0x34>)
 800cb12:	2200      	movs	r2, #0
 800cb14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb16:	4b0b      	ldr	r3, [pc, #44]	; (800cb44 <vPortSetupTimerInterrupt+0x38>)
 800cb18:	2200      	movs	r2, #0
 800cb1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb1c:	4b0a      	ldr	r3, [pc, #40]	; (800cb48 <vPortSetupTimerInterrupt+0x3c>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a0a      	ldr	r2, [pc, #40]	; (800cb4c <vPortSetupTimerInterrupt+0x40>)
 800cb22:	fba2 2303 	umull	r2, r3, r2, r3
 800cb26:	099b      	lsrs	r3, r3, #6
 800cb28:	4a09      	ldr	r2, [pc, #36]	; (800cb50 <vPortSetupTimerInterrupt+0x44>)
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb2e:	4b04      	ldr	r3, [pc, #16]	; (800cb40 <vPortSetupTimerInterrupt+0x34>)
 800cb30:	2207      	movs	r2, #7
 800cb32:	601a      	str	r2, [r3, #0]
}
 800cb34:	bf00      	nop
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	e000e010 	.word	0xe000e010
 800cb44:	e000e018 	.word	0xe000e018
 800cb48:	24000000 	.word	0x24000000
 800cb4c:	10624dd3 	.word	0x10624dd3
 800cb50:	e000e014 	.word	0xe000e014

0800cb54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb64 <vPortEnableVFP+0x10>
 800cb58:	6801      	ldr	r1, [r0, #0]
 800cb5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb5e:	6001      	str	r1, [r0, #0]
 800cb60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb62:	bf00      	nop
 800cb64:	e000ed88 	.word	0xe000ed88

0800cb68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb6e:	f3ef 8305 	mrs	r3, IPSR
 800cb72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2b0f      	cmp	r3, #15
 800cb78:	d914      	bls.n	800cba4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb7a:	4a17      	ldr	r2, [pc, #92]	; (800cbd8 <vPortValidateInterruptPriority+0x70>)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	4413      	add	r3, r2
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb84:	4b15      	ldr	r3, [pc, #84]	; (800cbdc <vPortValidateInterruptPriority+0x74>)
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	7afa      	ldrb	r2, [r7, #11]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d20a      	bcs.n	800cba4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb92:	f383 8811 	msr	BASEPRI, r3
 800cb96:	f3bf 8f6f 	isb	sy
 800cb9a:	f3bf 8f4f 	dsb	sy
 800cb9e:	607b      	str	r3, [r7, #4]
}
 800cba0:	bf00      	nop
 800cba2:	e7fe      	b.n	800cba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cba4:	4b0e      	ldr	r3, [pc, #56]	; (800cbe0 <vPortValidateInterruptPriority+0x78>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cbac:	4b0d      	ldr	r3, [pc, #52]	; (800cbe4 <vPortValidateInterruptPriority+0x7c>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d90a      	bls.n	800cbca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	603b      	str	r3, [r7, #0]
}
 800cbc6:	bf00      	nop
 800cbc8:	e7fe      	b.n	800cbc8 <vPortValidateInterruptPriority+0x60>
	}
 800cbca:	bf00      	nop
 800cbcc:	3714      	adds	r7, #20
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	e000e3f0 	.word	0xe000e3f0
 800cbdc:	24000fe8 	.word	0x24000fe8
 800cbe0:	e000ed0c 	.word	0xe000ed0c
 800cbe4:	24000fec 	.word	0x24000fec

0800cbe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b08a      	sub	sp, #40	; 0x28
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cbf4:	f7fe fc6c 	bl	800b4d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cbf8:	4b5b      	ldr	r3, [pc, #364]	; (800cd68 <pvPortMalloc+0x180>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d101      	bne.n	800cc04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cc00:	f000 f920 	bl	800ce44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cc04:	4b59      	ldr	r3, [pc, #356]	; (800cd6c <pvPortMalloc+0x184>)
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	4013      	ands	r3, r2
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f040 8093 	bne.w	800cd38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d01d      	beq.n	800cc54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cc18:	2208      	movs	r2, #8
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f003 0307 	and.w	r3, r3, #7
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d014      	beq.n	800cc54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f023 0307 	bic.w	r3, r3, #7
 800cc30:	3308      	adds	r3, #8
 800cc32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f003 0307 	and.w	r3, r3, #7
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d00a      	beq.n	800cc54 <pvPortMalloc+0x6c>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	617b      	str	r3, [r7, #20]
}
 800cc50:	bf00      	nop
 800cc52:	e7fe      	b.n	800cc52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d06e      	beq.n	800cd38 <pvPortMalloc+0x150>
 800cc5a:	4b45      	ldr	r3, [pc, #276]	; (800cd70 <pvPortMalloc+0x188>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d869      	bhi.n	800cd38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc64:	4b43      	ldr	r3, [pc, #268]	; (800cd74 <pvPortMalloc+0x18c>)
 800cc66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc68:	4b42      	ldr	r3, [pc, #264]	; (800cd74 <pvPortMalloc+0x18c>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc6e:	e004      	b.n	800cc7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d903      	bls.n	800cc8c <pvPortMalloc+0xa4>
 800cc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1f1      	bne.n	800cc70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc8c:	4b36      	ldr	r3, [pc, #216]	; (800cd68 <pvPortMalloc+0x180>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d050      	beq.n	800cd38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc96:	6a3b      	ldr	r3, [r7, #32]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2208      	movs	r2, #8
 800cc9c:	4413      	add	r3, r2
 800cc9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	6a3b      	ldr	r3, [r7, #32]
 800cca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccaa:	685a      	ldr	r2, [r3, #4]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	1ad2      	subs	r2, r2, r3
 800ccb0:	2308      	movs	r3, #8
 800ccb2:	005b      	lsls	r3, r3, #1
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d91f      	bls.n	800ccf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ccb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	f003 0307 	and.w	r3, r3, #7
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00a      	beq.n	800cce0 <pvPortMalloc+0xf8>
	__asm volatile
 800ccca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccce:	f383 8811 	msr	BASEPRI, r3
 800ccd2:	f3bf 8f6f 	isb	sy
 800ccd6:	f3bf 8f4f 	dsb	sy
 800ccda:	613b      	str	r3, [r7, #16]
}
 800ccdc:	bf00      	nop
 800ccde:	e7fe      	b.n	800ccde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce2:	685a      	ldr	r2, [r3, #4]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	1ad2      	subs	r2, r2, r3
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ccec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ccf2:	69b8      	ldr	r0, [r7, #24]
 800ccf4:	f000 f908 	bl	800cf08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ccf8:	4b1d      	ldr	r3, [pc, #116]	; (800cd70 <pvPortMalloc+0x188>)
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	4a1b      	ldr	r2, [pc, #108]	; (800cd70 <pvPortMalloc+0x188>)
 800cd04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd06:	4b1a      	ldr	r3, [pc, #104]	; (800cd70 <pvPortMalloc+0x188>)
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	4b1b      	ldr	r3, [pc, #108]	; (800cd78 <pvPortMalloc+0x190>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d203      	bcs.n	800cd1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd12:	4b17      	ldr	r3, [pc, #92]	; (800cd70 <pvPortMalloc+0x188>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a18      	ldr	r2, [pc, #96]	; (800cd78 <pvPortMalloc+0x190>)
 800cd18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	4b13      	ldr	r3, [pc, #76]	; (800cd6c <pvPortMalloc+0x184>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	431a      	orrs	r2, r3
 800cd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cd2e:	4b13      	ldr	r3, [pc, #76]	; (800cd7c <pvPortMalloc+0x194>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	3301      	adds	r3, #1
 800cd34:	4a11      	ldr	r2, [pc, #68]	; (800cd7c <pvPortMalloc+0x194>)
 800cd36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd38:	f7fe fbd8 	bl	800b4ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd3c:	69fb      	ldr	r3, [r7, #28]
 800cd3e:	f003 0307 	and.w	r3, r3, #7
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d00a      	beq.n	800cd5c <pvPortMalloc+0x174>
	__asm volatile
 800cd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	60fb      	str	r3, [r7, #12]
}
 800cd58:	bf00      	nop
 800cd5a:	e7fe      	b.n	800cd5a <pvPortMalloc+0x172>
	return pvReturn;
 800cd5c:	69fb      	ldr	r3, [r7, #28]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3728      	adds	r7, #40	; 0x28
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
 800cd66:	bf00      	nop
 800cd68:	24004bf8 	.word	0x24004bf8
 800cd6c:	24004c0c 	.word	0x24004c0c
 800cd70:	24004bfc 	.word	0x24004bfc
 800cd74:	24004bf0 	.word	0x24004bf0
 800cd78:	24004c00 	.word	0x24004c00
 800cd7c:	24004c04 	.word	0x24004c04

0800cd80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d04d      	beq.n	800ce2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd92:	2308      	movs	r3, #8
 800cd94:	425b      	negs	r3, r3
 800cd96:	697a      	ldr	r2, [r7, #20]
 800cd98:	4413      	add	r3, r2
 800cd9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	685a      	ldr	r2, [r3, #4]
 800cda4:	4b24      	ldr	r3, [pc, #144]	; (800ce38 <vPortFree+0xb8>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4013      	ands	r3, r2
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10a      	bne.n	800cdc4 <vPortFree+0x44>
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	60fb      	str	r3, [r7, #12]
}
 800cdc0:	bf00      	nop
 800cdc2:	e7fe      	b.n	800cdc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00a      	beq.n	800cde2 <vPortFree+0x62>
	__asm volatile
 800cdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd0:	f383 8811 	msr	BASEPRI, r3
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	f3bf 8f4f 	dsb	sy
 800cddc:	60bb      	str	r3, [r7, #8]
}
 800cdde:	bf00      	nop
 800cde0:	e7fe      	b.n	800cde0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	685a      	ldr	r2, [r3, #4]
 800cde6:	4b14      	ldr	r3, [pc, #80]	; (800ce38 <vPortFree+0xb8>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4013      	ands	r3, r2
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d01e      	beq.n	800ce2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d11a      	bne.n	800ce2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	685a      	ldr	r2, [r3, #4]
 800cdfc:	4b0e      	ldr	r3, [pc, #56]	; (800ce38 <vPortFree+0xb8>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	43db      	mvns	r3, r3
 800ce02:	401a      	ands	r2, r3
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ce08:	f7fe fb62 	bl	800b4d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	685a      	ldr	r2, [r3, #4]
 800ce10:	4b0a      	ldr	r3, [pc, #40]	; (800ce3c <vPortFree+0xbc>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4413      	add	r3, r2
 800ce16:	4a09      	ldr	r2, [pc, #36]	; (800ce3c <vPortFree+0xbc>)
 800ce18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce1a:	6938      	ldr	r0, [r7, #16]
 800ce1c:	f000 f874 	bl	800cf08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce20:	4b07      	ldr	r3, [pc, #28]	; (800ce40 <vPortFree+0xc0>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	3301      	adds	r3, #1
 800ce26:	4a06      	ldr	r2, [pc, #24]	; (800ce40 <vPortFree+0xc0>)
 800ce28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ce2a:	f7fe fb5f 	bl	800b4ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce2e:	bf00      	nop
 800ce30:	3718      	adds	r7, #24
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	24004c0c 	.word	0x24004c0c
 800ce3c:	24004bfc 	.word	0x24004bfc
 800ce40:	24004c08 	.word	0x24004c08

0800ce44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce44:	b480      	push	{r7}
 800ce46:	b085      	sub	sp, #20
 800ce48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ce4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce50:	4b27      	ldr	r3, [pc, #156]	; (800cef0 <prvHeapInit+0xac>)
 800ce52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f003 0307 	and.w	r3, r3, #7
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00c      	beq.n	800ce78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	3307      	adds	r3, #7
 800ce62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f023 0307 	bic.w	r3, r3, #7
 800ce6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce6c:	68ba      	ldr	r2, [r7, #8]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	1ad3      	subs	r3, r2, r3
 800ce72:	4a1f      	ldr	r2, [pc, #124]	; (800cef0 <prvHeapInit+0xac>)
 800ce74:	4413      	add	r3, r2
 800ce76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce7c:	4a1d      	ldr	r2, [pc, #116]	; (800cef4 <prvHeapInit+0xb0>)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce82:	4b1c      	ldr	r3, [pc, #112]	; (800cef4 <prvHeapInit+0xb0>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	68ba      	ldr	r2, [r7, #8]
 800ce8c:	4413      	add	r3, r2
 800ce8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce90:	2208      	movs	r2, #8
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	1a9b      	subs	r3, r3, r2
 800ce96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f023 0307 	bic.w	r3, r3, #7
 800ce9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	4a15      	ldr	r2, [pc, #84]	; (800cef8 <prvHeapInit+0xb4>)
 800cea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cea6:	4b14      	ldr	r3, [pc, #80]	; (800cef8 <prvHeapInit+0xb4>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ceae:	4b12      	ldr	r3, [pc, #72]	; (800cef8 <prvHeapInit+0xb4>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	1ad2      	subs	r2, r2, r3
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cec4:	4b0c      	ldr	r3, [pc, #48]	; (800cef8 <prvHeapInit+0xb4>)
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	4a0a      	ldr	r2, [pc, #40]	; (800cefc <prvHeapInit+0xb8>)
 800ced2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	4a09      	ldr	r2, [pc, #36]	; (800cf00 <prvHeapInit+0xbc>)
 800ceda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cedc:	4b09      	ldr	r3, [pc, #36]	; (800cf04 <prvHeapInit+0xc0>)
 800cede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cee2:	601a      	str	r2, [r3, #0]
}
 800cee4:	bf00      	nop
 800cee6:	3714      	adds	r7, #20
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr
 800cef0:	24000ff0 	.word	0x24000ff0
 800cef4:	24004bf0 	.word	0x24004bf0
 800cef8:	24004bf8 	.word	0x24004bf8
 800cefc:	24004c00 	.word	0x24004c00
 800cf00:	24004bfc 	.word	0x24004bfc
 800cf04:	24004c0c 	.word	0x24004c0c

0800cf08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf10:	4b28      	ldr	r3, [pc, #160]	; (800cfb4 <prvInsertBlockIntoFreeList+0xac>)
 800cf12:	60fb      	str	r3, [r7, #12]
 800cf14:	e002      	b.n	800cf1c <prvInsertBlockIntoFreeList+0x14>
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	60fb      	str	r3, [r7, #12]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d8f7      	bhi.n	800cf16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	68ba      	ldr	r2, [r7, #8]
 800cf30:	4413      	add	r3, r2
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d108      	bne.n	800cf4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	685a      	ldr	r2, [r3, #4]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	441a      	add	r2, r3
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	68ba      	ldr	r2, [r7, #8]
 800cf54:	441a      	add	r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d118      	bne.n	800cf90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	4b15      	ldr	r3, [pc, #84]	; (800cfb8 <prvInsertBlockIntoFreeList+0xb0>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d00d      	beq.n	800cf86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	685a      	ldr	r2, [r3, #4]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	441a      	add	r2, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	601a      	str	r2, [r3, #0]
 800cf84:	e008      	b.n	800cf98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf86:	4b0c      	ldr	r3, [pc, #48]	; (800cfb8 <prvInsertBlockIntoFreeList+0xb0>)
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	601a      	str	r2, [r3, #0]
 800cf8e:	e003      	b.n	800cf98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d002      	beq.n	800cfa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfa6:	bf00      	nop
 800cfa8:	3714      	adds	r7, #20
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop
 800cfb4:	24004bf0 	.word	0x24004bf0
 800cfb8:	24004bf8 	.word	0x24004bf8

0800cfbc <memset>:
 800cfbc:	4402      	add	r2, r0
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d100      	bne.n	800cfc6 <memset+0xa>
 800cfc4:	4770      	bx	lr
 800cfc6:	f803 1b01 	strb.w	r1, [r3], #1
 800cfca:	e7f9      	b.n	800cfc0 <memset+0x4>

0800cfcc <_reclaim_reent>:
 800cfcc:	4b29      	ldr	r3, [pc, #164]	; (800d074 <_reclaim_reent+0xa8>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4283      	cmp	r3, r0
 800cfd2:	b570      	push	{r4, r5, r6, lr}
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	d04b      	beq.n	800d070 <_reclaim_reent+0xa4>
 800cfd8:	69c3      	ldr	r3, [r0, #28]
 800cfda:	b143      	cbz	r3, 800cfee <_reclaim_reent+0x22>
 800cfdc:	68db      	ldr	r3, [r3, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d144      	bne.n	800d06c <_reclaim_reent+0xa0>
 800cfe2:	69e3      	ldr	r3, [r4, #28]
 800cfe4:	6819      	ldr	r1, [r3, #0]
 800cfe6:	b111      	cbz	r1, 800cfee <_reclaim_reent+0x22>
 800cfe8:	4620      	mov	r0, r4
 800cfea:	f000 f879 	bl	800d0e0 <_free_r>
 800cfee:	6961      	ldr	r1, [r4, #20]
 800cff0:	b111      	cbz	r1, 800cff8 <_reclaim_reent+0x2c>
 800cff2:	4620      	mov	r0, r4
 800cff4:	f000 f874 	bl	800d0e0 <_free_r>
 800cff8:	69e1      	ldr	r1, [r4, #28]
 800cffa:	b111      	cbz	r1, 800d002 <_reclaim_reent+0x36>
 800cffc:	4620      	mov	r0, r4
 800cffe:	f000 f86f 	bl	800d0e0 <_free_r>
 800d002:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d004:	b111      	cbz	r1, 800d00c <_reclaim_reent+0x40>
 800d006:	4620      	mov	r0, r4
 800d008:	f000 f86a 	bl	800d0e0 <_free_r>
 800d00c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d00e:	b111      	cbz	r1, 800d016 <_reclaim_reent+0x4a>
 800d010:	4620      	mov	r0, r4
 800d012:	f000 f865 	bl	800d0e0 <_free_r>
 800d016:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d018:	b111      	cbz	r1, 800d020 <_reclaim_reent+0x54>
 800d01a:	4620      	mov	r0, r4
 800d01c:	f000 f860 	bl	800d0e0 <_free_r>
 800d020:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d022:	b111      	cbz	r1, 800d02a <_reclaim_reent+0x5e>
 800d024:	4620      	mov	r0, r4
 800d026:	f000 f85b 	bl	800d0e0 <_free_r>
 800d02a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d02c:	b111      	cbz	r1, 800d034 <_reclaim_reent+0x68>
 800d02e:	4620      	mov	r0, r4
 800d030:	f000 f856 	bl	800d0e0 <_free_r>
 800d034:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d036:	b111      	cbz	r1, 800d03e <_reclaim_reent+0x72>
 800d038:	4620      	mov	r0, r4
 800d03a:	f000 f851 	bl	800d0e0 <_free_r>
 800d03e:	6a23      	ldr	r3, [r4, #32]
 800d040:	b1b3      	cbz	r3, 800d070 <_reclaim_reent+0xa4>
 800d042:	4620      	mov	r0, r4
 800d044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d048:	4718      	bx	r3
 800d04a:	5949      	ldr	r1, [r1, r5]
 800d04c:	b941      	cbnz	r1, 800d060 <_reclaim_reent+0x94>
 800d04e:	3504      	adds	r5, #4
 800d050:	69e3      	ldr	r3, [r4, #28]
 800d052:	2d80      	cmp	r5, #128	; 0x80
 800d054:	68d9      	ldr	r1, [r3, #12]
 800d056:	d1f8      	bne.n	800d04a <_reclaim_reent+0x7e>
 800d058:	4620      	mov	r0, r4
 800d05a:	f000 f841 	bl	800d0e0 <_free_r>
 800d05e:	e7c0      	b.n	800cfe2 <_reclaim_reent+0x16>
 800d060:	680e      	ldr	r6, [r1, #0]
 800d062:	4620      	mov	r0, r4
 800d064:	f000 f83c 	bl	800d0e0 <_free_r>
 800d068:	4631      	mov	r1, r6
 800d06a:	e7ef      	b.n	800d04c <_reclaim_reent+0x80>
 800d06c:	2500      	movs	r5, #0
 800d06e:	e7ef      	b.n	800d050 <_reclaim_reent+0x84>
 800d070:	bd70      	pop	{r4, r5, r6, pc}
 800d072:	bf00      	nop
 800d074:	24000060 	.word	0x24000060

0800d078 <__libc_init_array>:
 800d078:	b570      	push	{r4, r5, r6, lr}
 800d07a:	4d0d      	ldr	r5, [pc, #52]	; (800d0b0 <__libc_init_array+0x38>)
 800d07c:	4c0d      	ldr	r4, [pc, #52]	; (800d0b4 <__libc_init_array+0x3c>)
 800d07e:	1b64      	subs	r4, r4, r5
 800d080:	10a4      	asrs	r4, r4, #2
 800d082:	2600      	movs	r6, #0
 800d084:	42a6      	cmp	r6, r4
 800d086:	d109      	bne.n	800d09c <__libc_init_array+0x24>
 800d088:	4d0b      	ldr	r5, [pc, #44]	; (800d0b8 <__libc_init_array+0x40>)
 800d08a:	4c0c      	ldr	r4, [pc, #48]	; (800d0bc <__libc_init_array+0x44>)
 800d08c:	f000 f880 	bl	800d190 <_init>
 800d090:	1b64      	subs	r4, r4, r5
 800d092:	10a4      	asrs	r4, r4, #2
 800d094:	2600      	movs	r6, #0
 800d096:	42a6      	cmp	r6, r4
 800d098:	d105      	bne.n	800d0a6 <__libc_init_array+0x2e>
 800d09a:	bd70      	pop	{r4, r5, r6, pc}
 800d09c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0a0:	4798      	blx	r3
 800d0a2:	3601      	adds	r6, #1
 800d0a4:	e7ee      	b.n	800d084 <__libc_init_array+0xc>
 800d0a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0aa:	4798      	blx	r3
 800d0ac:	3601      	adds	r6, #1
 800d0ae:	e7f2      	b.n	800d096 <__libc_init_array+0x1e>
 800d0b0:	08011294 	.word	0x08011294
 800d0b4:	08011294 	.word	0x08011294
 800d0b8:	08011294 	.word	0x08011294
 800d0bc:	08011298 	.word	0x08011298

0800d0c0 <__retarget_lock_acquire_recursive>:
 800d0c0:	4770      	bx	lr

0800d0c2 <__retarget_lock_release_recursive>:
 800d0c2:	4770      	bx	lr

0800d0c4 <memcpy>:
 800d0c4:	440a      	add	r2, r1
 800d0c6:	4291      	cmp	r1, r2
 800d0c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0cc:	d100      	bne.n	800d0d0 <memcpy+0xc>
 800d0ce:	4770      	bx	lr
 800d0d0:	b510      	push	{r4, lr}
 800d0d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0da:	4291      	cmp	r1, r2
 800d0dc:	d1f9      	bne.n	800d0d2 <memcpy+0xe>
 800d0de:	bd10      	pop	{r4, pc}

0800d0e0 <_free_r>:
 800d0e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0e2:	2900      	cmp	r1, #0
 800d0e4:	d044      	beq.n	800d170 <_free_r+0x90>
 800d0e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0ea:	9001      	str	r0, [sp, #4]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f1a1 0404 	sub.w	r4, r1, #4
 800d0f2:	bfb8      	it	lt
 800d0f4:	18e4      	addlt	r4, r4, r3
 800d0f6:	f000 f83f 	bl	800d178 <__malloc_lock>
 800d0fa:	4a1e      	ldr	r2, [pc, #120]	; (800d174 <_free_r+0x94>)
 800d0fc:	9801      	ldr	r0, [sp, #4]
 800d0fe:	6813      	ldr	r3, [r2, #0]
 800d100:	b933      	cbnz	r3, 800d110 <_free_r+0x30>
 800d102:	6063      	str	r3, [r4, #4]
 800d104:	6014      	str	r4, [r2, #0]
 800d106:	b003      	add	sp, #12
 800d108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d10c:	f000 b83a 	b.w	800d184 <__malloc_unlock>
 800d110:	42a3      	cmp	r3, r4
 800d112:	d908      	bls.n	800d126 <_free_r+0x46>
 800d114:	6825      	ldr	r5, [r4, #0]
 800d116:	1961      	adds	r1, r4, r5
 800d118:	428b      	cmp	r3, r1
 800d11a:	bf01      	itttt	eq
 800d11c:	6819      	ldreq	r1, [r3, #0]
 800d11e:	685b      	ldreq	r3, [r3, #4]
 800d120:	1949      	addeq	r1, r1, r5
 800d122:	6021      	streq	r1, [r4, #0]
 800d124:	e7ed      	b.n	800d102 <_free_r+0x22>
 800d126:	461a      	mov	r2, r3
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	b10b      	cbz	r3, 800d130 <_free_r+0x50>
 800d12c:	42a3      	cmp	r3, r4
 800d12e:	d9fa      	bls.n	800d126 <_free_r+0x46>
 800d130:	6811      	ldr	r1, [r2, #0]
 800d132:	1855      	adds	r5, r2, r1
 800d134:	42a5      	cmp	r5, r4
 800d136:	d10b      	bne.n	800d150 <_free_r+0x70>
 800d138:	6824      	ldr	r4, [r4, #0]
 800d13a:	4421      	add	r1, r4
 800d13c:	1854      	adds	r4, r2, r1
 800d13e:	42a3      	cmp	r3, r4
 800d140:	6011      	str	r1, [r2, #0]
 800d142:	d1e0      	bne.n	800d106 <_free_r+0x26>
 800d144:	681c      	ldr	r4, [r3, #0]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	6053      	str	r3, [r2, #4]
 800d14a:	440c      	add	r4, r1
 800d14c:	6014      	str	r4, [r2, #0]
 800d14e:	e7da      	b.n	800d106 <_free_r+0x26>
 800d150:	d902      	bls.n	800d158 <_free_r+0x78>
 800d152:	230c      	movs	r3, #12
 800d154:	6003      	str	r3, [r0, #0]
 800d156:	e7d6      	b.n	800d106 <_free_r+0x26>
 800d158:	6825      	ldr	r5, [r4, #0]
 800d15a:	1961      	adds	r1, r4, r5
 800d15c:	428b      	cmp	r3, r1
 800d15e:	bf04      	itt	eq
 800d160:	6819      	ldreq	r1, [r3, #0]
 800d162:	685b      	ldreq	r3, [r3, #4]
 800d164:	6063      	str	r3, [r4, #4]
 800d166:	bf04      	itt	eq
 800d168:	1949      	addeq	r1, r1, r5
 800d16a:	6021      	streq	r1, [r4, #0]
 800d16c:	6054      	str	r4, [r2, #4]
 800d16e:	e7ca      	b.n	800d106 <_free_r+0x26>
 800d170:	b003      	add	sp, #12
 800d172:	bd30      	pop	{r4, r5, pc}
 800d174:	24004d4c 	.word	0x24004d4c

0800d178 <__malloc_lock>:
 800d178:	4801      	ldr	r0, [pc, #4]	; (800d180 <__malloc_lock+0x8>)
 800d17a:	f7ff bfa1 	b.w	800d0c0 <__retarget_lock_acquire_recursive>
 800d17e:	bf00      	nop
 800d180:	24004d48 	.word	0x24004d48

0800d184 <__malloc_unlock>:
 800d184:	4801      	ldr	r0, [pc, #4]	; (800d18c <__malloc_unlock+0x8>)
 800d186:	f7ff bf9c 	b.w	800d0c2 <__retarget_lock_release_recursive>
 800d18a:	bf00      	nop
 800d18c:	24004d48 	.word	0x24004d48

0800d190 <_init>:
 800d190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d192:	bf00      	nop
 800d194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d196:	bc08      	pop	{r3}
 800d198:	469e      	mov	lr, r3
 800d19a:	4770      	bx	lr

0800d19c <_fini>:
 800d19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19e:	bf00      	nop
 800d1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1a2:	bc08      	pop	{r3}
 800d1a4:	469e      	mov	lr, r3
 800d1a6:	4770      	bx	lr
