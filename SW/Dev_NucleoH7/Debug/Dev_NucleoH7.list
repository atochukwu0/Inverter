
Dev_NucleoH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006430  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080066c8  080066c8  000166c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006708  08006708  00016708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800670c  0800670c  0001670c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08006710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08006720  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006780  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b0  240000d0  080067e0  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000780  080067e0  00020780  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a26  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027ec  00000000  00000000  00037b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  0003a358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bca  00000000  00000000  0003b298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003718e  00000000  00000000  0003be62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014187  00000000  00000000  00072ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0015da4a  00000000  00000000  00087177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000040d8  00000000  00000000  001e4bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001e8c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080066b0 	.word	0x080066b0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080066b0 	.word	0x080066b0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fd12 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f80a 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f982 	bl	80008e8 <MX_GPIO_Init>
  MX_ETH_Init();
 80005e4:	f000 f8b6 	bl	8000754 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f900 	bl	80007ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ec:	f000 f94a 	bl	8000884 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x1c>
	...

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b09e      	sub	sp, #120	; 0x78
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005fe:	224c      	movs	r2, #76	; 0x4c
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f006 f828 	bl	8006658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2220      	movs	r2, #32
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f006 f821 	bl	8006658 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000616:	2002      	movs	r0, #2
 8000618:	f001 fde2 	bl	80021e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b49      	ldr	r3, [pc, #292]	; (8000748 <SystemClock_Config+0x154>)
 8000622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000624:	4a48      	ldr	r2, [pc, #288]	; (8000748 <SystemClock_Config+0x154>)
 8000626:	f023 0301 	bic.w	r3, r3, #1
 800062a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800062c:	4b46      	ldr	r3, [pc, #280]	; (8000748 <SystemClock_Config+0x154>)
 800062e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b45      	ldr	r3, [pc, #276]	; (800074c <SystemClock_Config+0x158>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4a44      	ldr	r2, [pc, #272]	; (800074c <SystemClock_Config+0x158>)
 800063c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000640:	6193      	str	r3, [r2, #24]
 8000642:	4b42      	ldr	r3, [pc, #264]	; (800074c <SystemClock_Config+0x158>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800064e:	bf00      	nop
 8000650:	4b3e      	ldr	r3, [pc, #248]	; (800074c <SystemClock_Config+0x158>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800065c:	d1f8      	bne.n	8000650 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065e:	4b3c      	ldr	r3, [pc, #240]	; (8000750 <SystemClock_Config+0x15c>)
 8000660:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000664:	4a3a      	ldr	r2, [pc, #232]	; (8000750 <SystemClock_Config+0x15c>)
 8000666:	f043 0302 	orr.w	r3, r3, #2
 800066a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800066e:	4b38      	ldr	r3, [pc, #224]	; (8000750 <SystemClock_Config+0x15c>)
 8000670:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000674:	f003 0302 	and.w	r3, r3, #2
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b32      	ldr	r3, [pc, #200]	; (800074c <SystemClock_Config+0x158>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a31      	ldr	r2, [pc, #196]	; (800074c <SystemClock_Config+0x158>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b2f      	ldr	r3, [pc, #188]	; (800074c <SystemClock_Config+0x158>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <SystemClock_Config+0x154>)
 8000698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069a:	4a2b      	ldr	r2, [pc, #172]	; (8000748 <SystemClock_Config+0x154>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006a2:	4b29      	ldr	r3, [pc, #164]	; (8000748 <SystemClock_Config+0x154>)
 80006a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ae:	bf00      	nop
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <SystemClock_Config+0x158>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006bc:	d1f8      	bne.n	80006b0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006be:	2321      	movs	r3, #33	; 0x21
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d0:	2302      	movs	r3, #2
 80006d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80006d8:	2378      	movs	r3, #120	; 0x78
 80006da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006e8:	230c      	movs	r3, #12
 80006ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fdbb 	bl	8002274 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000704:	f000 f9cc 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	233f      	movs	r3, #63	; 0x3f
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2303      	movs	r3, #3
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000714:	2308      	movs	r3, #8
 8000716:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000718:	2340      	movs	r3, #64	; 0x40
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000726:	2340      	movs	r3, #64	; 0x40
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2104      	movs	r1, #4
 8000730:	4618      	mov	r0, r3
 8000732:	f002 f9f9 	bl	8002b28 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 800073c:	f000 f9b0 	bl	8000aa0 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3778      	adds	r7, #120	; 0x78
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58000400 	.word	0x58000400
 800074c:	58024800 	.word	0x58024800
 8000750:	58024400 	.word	0x58024400

08000754 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_ETH_Init+0x80>)
 800075a:	4a1f      	ldr	r2, [pc, #124]	; (80007d8 <MX_ETH_Init+0x84>)
 800075c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_ETH_Init+0x88>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_ETH_Init+0x88>)
 8000766:	2280      	movs	r2, #128	; 0x80
 8000768:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_ETH_Init+0x88>)
 800076c:	22e1      	movs	r2, #225	; 0xe1
 800076e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_ETH_Init+0x88>)
 8000772:	2200      	movs	r2, #0
 8000774:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_ETH_Init+0x88>)
 8000778:	2200      	movs	r2, #0
 800077a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_ETH_Init+0x88>)
 800077e:	2200      	movs	r2, #0
 8000780:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_ETH_Init+0x80>)
 8000784:	4a15      	ldr	r2, [pc, #84]	; (80007dc <MX_ETH_Init+0x88>)
 8000786:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_ETH_Init+0x80>)
 800078a:	2201      	movs	r2, #1
 800078c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_ETH_Init+0x80>)
 8000790:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <MX_ETH_Init+0x8c>)
 8000792:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_ETH_Init+0x80>)
 8000796:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <MX_ETH_Init+0x90>)
 8000798:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_ETH_Init+0x80>)
 800079c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007a0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <MX_ETH_Init+0x80>)
 80007a4:	f000 fde6 	bl	8001374 <HAL_ETH_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80007ae:	f000 f977 	bl	8000aa0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007b2:	2238      	movs	r2, #56	; 0x38
 80007b4:	2100      	movs	r1, #0
 80007b6:	480c      	ldr	r0, [pc, #48]	; (80007e8 <MX_ETH_Init+0x94>)
 80007b8:	f005 ff4e 	bl	8006658 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <MX_ETH_Init+0x94>)
 80007be:	2221      	movs	r2, #33	; 0x21
 80007c0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_ETH_Init+0x94>)
 80007c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007c8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <MX_ETH_Init+0x94>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	24000124 	.word	0x24000124
 80007d8:	40028000 	.word	0x40028000
 80007dc:	24000774 	.word	0x24000774
 80007e0:	24000070 	.word	0x24000070
 80007e4:	24000010 	.word	0x24000010
 80007e8:	240000ec 	.word	0x240000ec

080007ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_USART3_UART_Init+0x90>)
 80007f2:	4a23      	ldr	r2, [pc, #140]	; (8000880 <MX_USART3_UART_Init+0x94>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_USART3_UART_Init+0x90>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_USART3_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_USART3_UART_Init+0x90>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_USART3_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_USART3_UART_Init+0x90>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_USART3_UART_Init+0x90>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_USART3_UART_Init+0x90>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_USART3_UART_Init+0x90>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART3_UART_Init+0x90>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART3_UART_Init+0x90>)
 8000830:	2200      	movs	r2, #0
 8000832:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <MX_USART3_UART_Init+0x90>)
 8000836:	f004 fb2f 	bl	8004e98 <HAL_UART_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000840:	f000 f92e 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000844:	2100      	movs	r1, #0
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <MX_USART3_UART_Init+0x90>)
 8000848:	f005 fb31 	bl	8005eae <HAL_UARTEx_SetTxFifoThreshold>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000852:	f000 f925 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000856:	2100      	movs	r1, #0
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <MX_USART3_UART_Init+0x90>)
 800085a:	f005 fb66 	bl	8005f2a <HAL_UARTEx_SetRxFifoThreshold>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000864:	f000 f91c 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_USART3_UART_Init+0x90>)
 800086a:	f005 fae7 	bl	8005e3c <HAL_UARTEx_DisableFifoMode>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000874:	f000 f914 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	240001d4 	.word	0x240001d4
 8000880:	40004800 	.word	0x40004800

08000884 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800088a:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800088c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000890:	2209      	movs	r2, #9
 8000892:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000896:	2202      	movs	r2, #2
 8000898:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008cc:	f001 fb3f 	bl	8001f4e <HAL_PCD_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80008d6:	f000 f8e3 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	24000268 	.word	0x24000268
 80008e4:	40080000 	.word	0x40080000

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b62      	ldr	r3, [pc, #392]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	4a60      	ldr	r2, [pc, #384]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090e:	4b5e      	ldr	r3, [pc, #376]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	f003 0304 	and.w	r3, r3, #4
 8000918:	61bb      	str	r3, [r7, #24]
 800091a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091c:	4b5a      	ldr	r3, [pc, #360]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000922:	4a59      	ldr	r2, [pc, #356]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092c:	4b56      	ldr	r3, [pc, #344]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b53      	ldr	r3, [pc, #332]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	4a51      	ldr	r2, [pc, #324]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094a:	4b4f      	ldr	r3, [pc, #316]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000958:	4b4b      	ldr	r3, [pc, #300]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	4a4a      	ldr	r2, [pc, #296]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000968:	4b47      	ldr	r3, [pc, #284]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	4b44      	ldr	r3, [pc, #272]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	4a42      	ldr	r2, [pc, #264]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 800097e:	f043 0308 	orr.w	r3, r3, #8
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000986:	4b40      	ldr	r3, [pc, #256]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	f003 0308 	and.w	r3, r3, #8
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000994:	4b3c      	ldr	r3, [pc, #240]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099a:	4a3b      	ldr	r2, [pc, #236]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 800099c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a4:	4b38      	ldr	r3, [pc, #224]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b2:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	4a33      	ldr	r2, [pc, #204]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 80009ba:	f043 0310 	orr.w	r3, r3, #16
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c2:	4b31      	ldr	r3, [pc, #196]	; (8000a88 <MX_GPIO_Init+0x1a0>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	f003 0310 	and.w	r3, r3, #16
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f244 0101 	movw	r1, #16385	; 0x4001
 80009d6:	482d      	ldr	r0, [pc, #180]	; (8000a8c <MX_GPIO_Init+0x1a4>)
 80009d8:	f001 faa0 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e2:	482b      	ldr	r0, [pc, #172]	; (8000a90 <MX_GPIO_Init+0x1a8>)
 80009e4:	f001 fa9a 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2102      	movs	r1, #2
 80009ec:	4829      	ldr	r0, [pc, #164]	; (8000a94 <MX_GPIO_Init+0x1ac>)
 80009ee:	f001 fa95 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4824      	ldr	r0, [pc, #144]	; (8000a98 <MX_GPIO_Init+0x1b0>)
 8000a08:	f001 f8d8 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a0c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4819      	ldr	r0, [pc, #100]	; (8000a8c <MX_GPIO_Init+0x1a4>)
 8000a26:	f001 f8c9 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	4813      	ldr	r0, [pc, #76]	; (8000a90 <MX_GPIO_Init+0x1a8>)
 8000a44:	f001 f8ba 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480f      	ldr	r0, [pc, #60]	; (8000a9c <MX_GPIO_Init+0x1b4>)
 8000a5e:	f001 f8ad 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4806      	ldr	r0, [pc, #24]	; (8000a94 <MX_GPIO_Init+0x1ac>)
 8000a7a:	f001 f89f 	bl	8001bbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7e:	bf00      	nop
 8000a80:	3730      	adds	r7, #48	; 0x30
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	58024400 	.word	0x58024400
 8000a8c:	58020400 	.word	0x58020400
 8000a90:	58020c00 	.word	0x58020c00
 8000a94:	58021000 	.word	0x58021000
 8000a98:	58020800 	.word	0x58020800
 8000a9c:	58021800 	.word	0x58021800

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_MspInit+0x30>)
 8000ab4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab8:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x30>)
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x30>)
 8000ac4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	58024400 	.word	0x58024400

08000ae0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a59      	ldr	r2, [pc, #356]	; (8000c64 <HAL_ETH_MspInit+0x184>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	f040 80ab 	bne.w	8000c5a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b04:	4b58      	ldr	r3, [pc, #352]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000b06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b0a:	4a57      	ldr	r2, [pc, #348]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b14:	4b54      	ldr	r3, [pc, #336]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000b16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b1e:	623b      	str	r3, [r7, #32]
 8000b20:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b22:	4b51      	ldr	r3, [pc, #324]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000b24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b28:	4a4f      	ldr	r2, [pc, #316]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b32:	4b4d      	ldr	r3, [pc, #308]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000b34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b3c:	61fb      	str	r3, [r7, #28]
 8000b3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b40:	4b49      	ldr	r3, [pc, #292]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000b42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b46:	4a48      	ldr	r2, [pc, #288]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b50:	4b45      	ldr	r3, [pc, #276]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000b52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b42      	ldr	r3, [pc, #264]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b64:	4a40      	ldr	r2, [pc, #256]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6e:	4b3e      	ldr	r3, [pc, #248]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b3a      	ldr	r3, [pc, #232]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b82:	4a39      	ldr	r2, [pc, #228]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8c:	4b36      	ldr	r3, [pc, #216]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b33      	ldr	r3, [pc, #204]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba0:	4a31      	ldr	r2, [pc, #196]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000baa:	4b2f      	ldr	r3, [pc, #188]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbe:	4a2a      	ldr	r2, [pc, #168]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc8:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <HAL_ETH_MspInit+0x188>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000bd6:	2332      	movs	r3, #50	; 0x32
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be6:	230b      	movs	r3, #11
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	481e      	ldr	r0, [pc, #120]	; (8000c6c <HAL_ETH_MspInit+0x18c>)
 8000bf2:	f000 ffe3 	bl	8001bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bf6:	2386      	movs	r3, #134	; 0x86
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c06:	230b      	movs	r3, #11
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4817      	ldr	r0, [pc, #92]	; (8000c70 <HAL_ETH_MspInit+0x190>)
 8000c12:	f000 ffd3 	bl	8001bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c28:	230b      	movs	r3, #11
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	4810      	ldr	r0, [pc, #64]	; (8000c74 <HAL_ETH_MspInit+0x194>)
 8000c34:	f000 ffc2 	bl	8001bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c38:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4a:	230b      	movs	r3, #11
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	4808      	ldr	r0, [pc, #32]	; (8000c78 <HAL_ETH_MspInit+0x198>)
 8000c56:	f000 ffb1 	bl	8001bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3738      	adds	r7, #56	; 0x38
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40028000 	.word	0x40028000
 8000c68:	58024400 	.word	0x58024400
 8000c6c:	58020800 	.word	0x58020800
 8000c70:	58020000 	.word	0x58020000
 8000c74:	58020400 	.word	0x58020400
 8000c78:	58021800 	.word	0x58021800

08000c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0ba      	sub	sp, #232	; 0xe8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	22c0      	movs	r2, #192	; 0xc0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f005 fcdb 	bl	8006658 <memset>
  if(huart->Instance==USART3)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a27      	ldr	r2, [pc, #156]	; (8000d44 <HAL_UART_MspInit+0xc8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d146      	bne.n	8000d3a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cac:	f04f 0202 	mov.w	r2, #2
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fabc 	bl	8003240 <HAL_RCCEx_PeriphCLKConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000cce:	f7ff fee7 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <HAL_UART_MspInit+0xcc>)
 8000cd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	; (8000d48 <HAL_UART_MspInit+0xcc>)
 8000cda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_UART_MspInit+0xcc>)
 8000ce4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_UART_MspInit+0xcc>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <HAL_UART_MspInit+0xcc>)
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_UART_MspInit+0xcc>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_UART_MspInit+0xd0>)
 8000d36:	f000 ff41 	bl	8001bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	37e8      	adds	r7, #232	; 0xe8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40004800 	.word	0x40004800
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	58020c00 	.word	0x58020c00

08000d50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b0ba      	sub	sp, #232	; 0xe8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	22c0      	movs	r2, #192	; 0xc0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f005 fc71 	bl	8006658 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a30      	ldr	r2, [pc, #192]	; (8000e3c <HAL_PCD_MspInit+0xec>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d159      	bne.n	8000e34 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d80:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000d8c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 fa51 	bl	8003240 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000da4:	f7ff fe7c 	bl	8000aa0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000da8:	f001 fa54 	bl	8002254 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <HAL_PCD_MspInit+0xf0>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db2:	4a23      	ldr	r2, [pc, #140]	; (8000e40 <HAL_PCD_MspInit+0xf0>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dbc:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <HAL_PCD_MspInit+0xf0>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000dca:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000dce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000de4:	230a      	movs	r3, #10
 8000de6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dee:	4619      	mov	r1, r3
 8000df0:	4814      	ldr	r0, [pc, #80]	; (8000e44 <HAL_PCD_MspInit+0xf4>)
 8000df2:	f000 fee3 	bl	8001bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480c      	ldr	r0, [pc, #48]	; (8000e44 <HAL_PCD_MspInit+0xf4>)
 8000e12:	f000 fed3 	bl	8001bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_PCD_MspInit+0xf0>)
 8000e18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e1c:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_PCD_MspInit+0xf0>)
 8000e1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_PCD_MspInit+0xf0>)
 8000e28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e34:	bf00      	nop
 8000e36:	37e8      	adds	r7, #232	; 0xe8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40080000 	.word	0x40080000
 8000e40:	58024400 	.word	0x58024400
 8000e44:	58020000 	.word	0x58020000

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e4c:	e7fe      	b.n	8000e4c <NMI_Handler+0x4>

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 f926 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ea0:	4b37      	ldr	r3, [pc, #220]	; (8000f80 <SystemInit+0xe4>)
 8000ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea6:	4a36      	ldr	r2, [pc, #216]	; (8000f80 <SystemInit+0xe4>)
 8000ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eb0:	4b34      	ldr	r3, [pc, #208]	; (8000f84 <SystemInit+0xe8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 030f 	and.w	r3, r3, #15
 8000eb8:	2b06      	cmp	r3, #6
 8000eba:	d807      	bhi.n	8000ecc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ebc:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <SystemInit+0xe8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f023 030f 	bic.w	r3, r3, #15
 8000ec4:	4a2f      	ldr	r2, [pc, #188]	; (8000f84 <SystemInit+0xe8>)
 8000ec6:	f043 0307 	orr.w	r3, r3, #7
 8000eca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ecc:	4b2e      	ldr	r3, [pc, #184]	; (8000f88 <SystemInit+0xec>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a2d      	ldr	r2, [pc, #180]	; (8000f88 <SystemInit+0xec>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <SystemInit+0xec>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ede:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <SystemInit+0xec>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4929      	ldr	r1, [pc, #164]	; (8000f88 <SystemInit+0xec>)
 8000ee4:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <SystemInit+0xf0>)
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <SystemInit+0xe8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d007      	beq.n	8000f06 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ef6:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <SystemInit+0xe8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f023 030f 	bic.w	r3, r3, #15
 8000efe:	4a21      	ldr	r2, [pc, #132]	; (8000f84 <SystemInit+0xe8>)
 8000f00:	f043 0307 	orr.w	r3, r3, #7
 8000f04:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <SystemInit+0xec>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <SystemInit+0xec>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <SystemInit+0xec>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <SystemInit+0xec>)
 8000f1a:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <SystemInit+0xf4>)
 8000f1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <SystemInit+0xec>)
 8000f20:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <SystemInit+0xf8>)
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <SystemInit+0xec>)
 8000f26:	4a1c      	ldr	r2, [pc, #112]	; (8000f98 <SystemInit+0xfc>)
 8000f28:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <SystemInit+0xec>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <SystemInit+0xec>)
 8000f32:	4a19      	ldr	r2, [pc, #100]	; (8000f98 <SystemInit+0xfc>)
 8000f34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <SystemInit+0xec>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <SystemInit+0xec>)
 8000f3e:	4a16      	ldr	r2, [pc, #88]	; (8000f98 <SystemInit+0xfc>)
 8000f40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <SystemInit+0xec>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <SystemInit+0xec>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <SystemInit+0xec>)
 8000f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <SystemInit+0xec>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <SystemInit+0x100>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <SystemInit+0x104>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f66:	d202      	bcs.n	8000f6e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <SystemInit+0x108>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <SystemInit+0x10c>)
 8000f70:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00
 8000f84:	52002000 	.word	0x52002000
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f90:	02020200 	.word	0x02020200
 8000f94:	01ff0000 	.word	0x01ff0000
 8000f98:	01010280 	.word	0x01010280
 8000f9c:	5c001000 	.word	0x5c001000
 8000fa0:	ffff0000 	.word	0xffff0000
 8000fa4:	51008108 	.word	0x51008108
 8000fa8:	52004000 	.word	0x52004000

08000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb0:	f7ff ff74 	bl	8000e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fb6:	490d      	ldr	r1, [pc, #52]	; (8000fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fcc:	4c0a      	ldr	r4, [pc, #40]	; (8000ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fda:	f005 fb45 	bl	8006668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fde:	f7ff faf9 	bl	80005d4 <main>
  bx  lr
 8000fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fe8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fec:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ff0:	08006710 	.word	0x08006710
  ldr r2, =_sbss
 8000ff4:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000ff8:	24000780 	.word	0x24000780

08000ffc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC3_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001006:	2003      	movs	r0, #3
 8001008:	f000 f982 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800100c:	f001 ff42 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8001010:	4602      	mov	r2, r0
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_Init+0x68>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	0a1b      	lsrs	r3, r3, #8
 8001018:	f003 030f 	and.w	r3, r3, #15
 800101c:	4913      	ldr	r1, [pc, #76]	; (800106c <HAL_Init+0x6c>)
 800101e:	5ccb      	ldrb	r3, [r1, r3]
 8001020:	f003 031f 	and.w	r3, r3, #31
 8001024:	fa22 f303 	lsr.w	r3, r2, r3
 8001028:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_Init+0x68>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	4a0e      	ldr	r2, [pc, #56]	; (800106c <HAL_Init+0x6c>)
 8001034:	5cd3      	ldrb	r3, [r2, r3]
 8001036:	f003 031f 	and.w	r3, r3, #31
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	fa22 f303 	lsr.w	r3, r2, r3
 8001040:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <HAL_Init+0x70>)
 8001042:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001044:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <HAL_Init+0x74>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f814 	bl	8001078 <HAL_InitTick>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e002      	b.n	8001060 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800105a:	f7ff fd27 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	58024400 	.word	0x58024400
 800106c:	080066c8 	.word	0x080066c8
 8001070:	24000004 	.word	0x24000004
 8001074:	24000000 	.word	0x24000000

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_InitTick+0x60>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e021      	b.n	80010d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_InitTick+0x64>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_InitTick+0x60>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f959 	bl	800135a <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00e      	b.n	80010d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d80a      	bhi.n	80010ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f000 f931 	bl	8001326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c4:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <HAL_InitTick+0x68>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2400000c 	.word	0x2400000c
 80010dc:	24000000 	.word	0x24000000
 80010e0:	24000008 	.word	0x24000008

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	2400000c 	.word	0x2400000c
 8001108:	2400077c 	.word	0x2400077c

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	2400077c 	.word	0x2400077c

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff ffee 	bl	800110c <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffde 	bl	800110c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2400000c 	.word	0x2400000c

0800116c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetREVID+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	0c1b      	lsrs	r3, r3, #16
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	5c001000 	.word	0x5c001000

08001184 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001194:	4904      	ldr	r1, [pc, #16]	; (80011a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	58000400 	.word	0x58000400

080011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <__NVIC_SetPriorityGrouping+0x40>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <__NVIC_SetPriorityGrouping+0x40>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00
 80011f0:	05fa0000 	.word	0x05fa0000

080011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <__NVIC_GetPriorityGrouping+0x18>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f003 0307 	and.w	r3, r3, #7
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	; (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012dc:	d301      	bcc.n	80012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012de:	2301      	movs	r3, #1
 80012e0:	e00f      	b.n	8001302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <SysTick_Config+0x40>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ea:	210f      	movs	r1, #15
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f7ff ff8e 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <SysTick_Config+0x40>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <SysTick_Config+0x40>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff47 	bl	80011ac <__NVIC_SetPriorityGrouping>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001334:	f7ff ff5e 	bl	80011f4 <__NVIC_GetPriorityGrouping>
 8001338:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	6978      	ldr	r0, [r7, #20]
 8001340:	f7ff ff90 	bl	8001264 <NVIC_EncodePriority>
 8001344:	4602      	mov	r2, r0
 8001346:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff5f 	bl	8001210 <__NVIC_SetPriority>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffb2 	bl	80012cc <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e0cf      	b.n	8001526 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800138c:	2b00      	cmp	r3, #0
 800138e:	d106      	bne.n	800139e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2223      	movs	r2, #35	; 0x23
 8001394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff fba1 	bl	8000ae0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	4b64      	ldr	r3, [pc, #400]	; (8001530 <HAL_ETH_Init+0x1bc>)
 80013a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013a4:	4a62      	ldr	r2, [pc, #392]	; (8001530 <HAL_ETH_Init+0x1bc>)
 80013a6:	f043 0302 	orr.w	r3, r3, #2
 80013aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013ae:	4b60      	ldr	r3, [pc, #384]	; (8001530 <HAL_ETH_Init+0x1bc>)
 80013b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7a1b      	ldrb	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d103      	bne.n	80013cc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff fedd 	bl	8001184 <HAL_SYSCFG_ETHInterfaceSelect>
 80013ca:	e003      	b.n	80013d4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80013cc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80013d0:	f7ff fed8 	bl	8001184 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80013d4:	4b57      	ldr	r3, [pc, #348]	; (8001534 <HAL_ETH_Init+0x1c0>)
 80013d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f0:	f7ff fe8c 	bl	800110c <HAL_GetTick>
 80013f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013f6:	e011      	b.n	800141c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013f8:	f7ff fe88 	bl	800110c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001406:	d909      	bls.n	800141c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2204      	movs	r2, #4
 800140c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	22e0      	movs	r2, #224	; 0xe0
 8001414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e084      	b.n	8001526 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1e4      	bne.n	80013f8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 f886 	bl	8001540 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001434:	f001 fea8 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 8001438:	4603      	mov	r3, r0
 800143a:	4a3f      	ldr	r2, [pc, #252]	; (8001538 <HAL_ETH_Init+0x1c4>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	0c9a      	lsrs	r2, r3, #18
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3a01      	subs	r2, #1
 8001448:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 fa71 	bl	8001934 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800145e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800146a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800146e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d009      	beq.n	8001492 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	22e0      	movs	r2, #224	; 0xe0
 800148a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e049      	b.n	8001526 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800149a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800149e:	4b27      	ldr	r3, [pc, #156]	; (800153c <HAL_ETH_Init+0x1c8>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6952      	ldr	r2, [r2, #20]
 80014a6:	0051      	lsls	r1, r2, #1
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	430b      	orrs	r3, r1
 80014ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014b2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fad9 	bl	8001a6e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fb1f 	bl	8001b00 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	3305      	adds	r3, #5
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	021a      	lsls	r2, r3, #8
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	3304      	adds	r3, #4
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	3303      	adds	r3, #3
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	061a      	lsls	r2, r3, #24
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	3302      	adds	r3, #2
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	041b      	lsls	r3, r3, #16
 80014f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	3301      	adds	r3, #1
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001500:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800150e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001510:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2210      	movs	r2, #16
 8001520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	58024400 	.word	0x58024400
 8001534:	58000400 	.word	0x58000400
 8001538:	431bde83 	.word	0x431bde83
 800153c:	ffff8001 	.word	0xffff8001

08001540 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001550:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001558:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800155a:	f001 fe15 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 800155e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4a1e      	ldr	r2, [pc, #120]	; (80015dc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d908      	bls.n	800157a <HAL_ETH_SetMDIOClockRange+0x3a>
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d804      	bhi.n	800157a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e027      	b.n	80015ca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d908      	bls.n	8001594 <HAL_ETH_SetMDIOClockRange+0x54>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d204      	bcs.n	8001594 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	e01a      	b.n	80015ca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4a13      	ldr	r2, [pc, #76]	; (80015e4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d303      	bcc.n	80015a4 <HAL_ETH_SetMDIOClockRange+0x64>
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d911      	bls.n	80015c8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d908      	bls.n	80015be <HAL_ETH_SetMDIOClockRange+0x7e>
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <HAL_ETH_SetMDIOClockRange+0xac>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d804      	bhi.n	80015be <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	e005      	b.n	80015ca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	e000      	b.n	80015ca <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80015c8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	01312cff 	.word	0x01312cff
 80015e0:	02160ebf 	.word	0x02160ebf
 80015e4:	03938700 	.word	0x03938700
 80015e8:	05f5e0ff 	.word	0x05f5e0ff
 80015ec:	08f0d17f 	.word	0x08f0d17f

080015f0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001602:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	791b      	ldrb	r3, [r3, #4]
 8001608:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800160a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	7b1b      	ldrb	r3, [r3, #12]
 8001610:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001612:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	7b5b      	ldrb	r3, [r3, #13]
 8001618:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800161a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	7b9b      	ldrb	r3, [r3, #14]
 8001620:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001622:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	7bdb      	ldrb	r3, [r3, #15]
 8001628:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800162a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	7c12      	ldrb	r2, [r2, #16]
 8001630:	2a00      	cmp	r2, #0
 8001632:	d102      	bne.n	800163a <ETH_SetMACConfig+0x4a>
 8001634:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001638:	e000      	b.n	800163c <ETH_SetMACConfig+0x4c>
 800163a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800163c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	7c52      	ldrb	r2, [r2, #17]
 8001642:	2a00      	cmp	r2, #0
 8001644:	d102      	bne.n	800164c <ETH_SetMACConfig+0x5c>
 8001646:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800164a:	e000      	b.n	800164e <ETH_SetMACConfig+0x5e>
 800164c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800164e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	7c9b      	ldrb	r3, [r3, #18]
 8001654:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001656:	431a      	orrs	r2, r3
               macconf->Speed |
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800165c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001662:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	7f1b      	ldrb	r3, [r3, #28]
 8001668:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800166a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	7f5b      	ldrb	r3, [r3, #29]
 8001670:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001672:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	7f92      	ldrb	r2, [r2, #30]
 8001678:	2a00      	cmp	r2, #0
 800167a:	d102      	bne.n	8001682 <ETH_SetMACConfig+0x92>
 800167c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001680:	e000      	b.n	8001684 <ETH_SetMACConfig+0x94>
 8001682:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001684:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	7fdb      	ldrb	r3, [r3, #31]
 800168a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800168c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001694:	2a00      	cmp	r2, #0
 8001696:	d102      	bne.n	800169e <ETH_SetMACConfig+0xae>
 8001698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800169c:	e000      	b.n	80016a0 <ETH_SetMACConfig+0xb0>
 800169e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80016a0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80016a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016ae:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80016b0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80016b6:	4313      	orrs	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b56      	ldr	r3, [pc, #344]	; (800181c <ETH_SetMACConfig+0x22c>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	68f9      	ldr	r1, [r7, #12]
 80016ca:	430b      	orrs	r3, r1
 80016cc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016da:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016e4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80016ee:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80016f8:	2a00      	cmp	r2, #0
 80016fa:	d102      	bne.n	8001702 <ETH_SetMACConfig+0x112>
 80016fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001700:	e000      	b.n	8001704 <ETH_SetMACConfig+0x114>
 8001702:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001704:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800170a:	4313      	orrs	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	4b42      	ldr	r3, [pc, #264]	; (8001820 <ETH_SetMACConfig+0x230>)
 8001716:	4013      	ands	r3, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	68f9      	ldr	r1, [r7, #12]
 800171e:	430b      	orrs	r3, r1
 8001720:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001728:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800172e:	4313      	orrs	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	4b3a      	ldr	r3, [pc, #232]	; (8001824 <ETH_SetMACConfig+0x234>)
 800173a:	4013      	ands	r3, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	68f9      	ldr	r1, [r7, #12]
 8001742:	430b      	orrs	r3, r1
 8001744:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800174c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001752:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800175a:	2a00      	cmp	r2, #0
 800175c:	d101      	bne.n	8001762 <ETH_SetMACConfig+0x172>
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	e000      	b.n	8001764 <ETH_SetMACConfig+0x174>
 8001762:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001764:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800176c:	4313      	orrs	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001776:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800177a:	4013      	ands	r3, r2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	68f9      	ldr	r1, [r7, #12]
 8001782:	430b      	orrs	r3, r1
 8001784:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800178c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001794:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001796:	4313      	orrs	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a2:	f023 0103 	bic.w	r1, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80017ba:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80017d6:	2a00      	cmp	r2, #0
 80017d8:	d101      	bne.n	80017de <ETH_SetMACConfig+0x1ee>
 80017da:	2240      	movs	r2, #64	; 0x40
 80017dc:	e000      	b.n	80017e0 <ETH_SetMACConfig+0x1f0>
 80017de:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80017e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80017e8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80017f2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80017f4:	4313      	orrs	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001800:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	430a      	orrs	r2, r1
 800180c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	00048083 	.word	0x00048083
 8001820:	c0f88000 	.word	0xc0f88000
 8001824:	fffffef0 	.word	0xfffffef0

08001828 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b38      	ldr	r3, [pc, #224]	; (8001920 <ETH_SetDMAConfig+0xf8>)
 800183e:	4013      	ands	r3, r2
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	6811      	ldr	r1, [r2, #0]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	430b      	orrs	r3, r1
 800184a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800184e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	791b      	ldrb	r3, [r3, #4]
 8001854:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800185a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	7b1b      	ldrb	r3, [r3, #12]
 8001860:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001862:	4313      	orrs	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <ETH_SetDMAConfig+0xfc>)
 8001872:	4013      	ands	r3, r2
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	430b      	orrs	r3, r1
 800187c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001880:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	7b5b      	ldrb	r3, [r3, #13]
 8001886:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800188c:	4313      	orrs	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001898:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800189c:	4b22      	ldr	r3, [pc, #136]	; (8001928 <ETH_SetDMAConfig+0x100>)
 800189e:	4013      	ands	r3, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	68f9      	ldr	r1, [r7, #12]
 80018a6:	430b      	orrs	r3, r1
 80018a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018ac:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	7d1b      	ldrb	r3, [r3, #20]
 80018b8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80018ba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	7f5b      	ldrb	r3, [r3, #29]
 80018c0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80018c2:	4313      	orrs	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <ETH_SetDMAConfig+0x104>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	68f9      	ldr	r1, [r7, #12]
 80018dc:	430b      	orrs	r3, r1
 80018de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018e2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	7f1b      	ldrb	r3, [r3, #28]
 80018ea:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018f0:	4313      	orrs	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <ETH_SetDMAConfig+0x108>)
 8001902:	4013      	ands	r3, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	68f9      	ldr	r1, [r7, #12]
 800190a:	430b      	orrs	r3, r1
 800190c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001910:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	ffff87fd 	.word	0xffff87fd
 8001924:	ffff2ffe 	.word	0xffff2ffe
 8001928:	fffec000 	.word	0xfffec000
 800192c:	ffc0efef 	.word	0xffc0efef
 8001930:	7fc0ffff 	.word	0x7fc0ffff

08001934 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0a4      	sub	sp, #144	; 0x90
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800193c:	2301      	movs	r3, #1
 800193e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001942:	2300      	movs	r3, #0
 8001944:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001952:	2301      	movs	r3, #1
 8001954:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001958:	2301      	movs	r3, #1
 800195a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800195e:	2301      	movs	r3, #1
 8001960:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800196a:	2301      	movs	r3, #1
 800196c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001974:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800197c:	2300      	movs	r3, #0
 800197e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800198c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001990:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001998:	2300      	movs	r3, #0
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800199c:	2301      	movs	r3, #1
 800199e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80019ae:	2300      	movs	r3, #0
 80019b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80019b6:	2300      	movs	r3, #0
 80019b8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80019c6:	2301      	movs	r3, #1
 80019c8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80019cc:	2320      	movs	r3, #32
 80019ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80019d2:	2301      	movs	r3, #1
 80019d4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80019de:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80019e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019e8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80019f0:	2302      	movs	r3, #2
 80019f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fde6 	bl	80015f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a24:	2301      	movs	r3, #1
 8001a26:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a4c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001a54:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a5a:	f107 0308 	add.w	r3, r7, #8
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff fee1 	bl	8001828 <ETH_SetDMAConfig>
}
 8001a66:	bf00      	nop
 8001a68:	3790      	adds	r7, #144	; 0x90
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b085      	sub	sp, #20
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	e01d      	b.n	8001ab8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68d9      	ldr	r1, [r3, #12]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	440b      	add	r3, r1
 8001a8c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2200      	movs	r2, #0
 8001a98:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	3206      	adds	r2, #6
 8001aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d9de      	bls.n	8001a7c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001acc:	461a      	mov	r2, r3
 8001ace:	2303      	movs	r3, #3
 8001ad0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	e023      	b.n	8001b56 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6919      	ldr	r1, [r3, #16]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2200      	movs	r2, #0
 8001b42:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	3212      	adds	r2, #18
 8001b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	3301      	adds	r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d9d8      	bls.n	8001b0e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b82:	461a      	mov	r2, r3
 8001b84:	2303      	movs	r3, #3
 8001b86:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b96:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001baa:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bca:	4b89      	ldr	r3, [pc, #548]	; (8001df0 <HAL_GPIO_Init+0x234>)
 8001bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bce:	e194      	b.n	8001efa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8186 	beq.w	8001ef4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d005      	beq.n	8001c00 <HAL_GPIO_Init+0x44>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d130      	bne.n	8001c62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c36:	2201      	movs	r2, #1
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	f003 0201 	and.w	r2, r3, #1
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d017      	beq.n	8001c9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d123      	bne.n	8001cf2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	08da      	lsrs	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3208      	adds	r2, #8
 8001cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	08da      	lsrs	r2, r3, #3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3208      	adds	r2, #8
 8001cec:	69b9      	ldr	r1, [r7, #24]
 8001cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0203 	and.w	r2, r3, #3
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 80e0 	beq.w	8001ef4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d34:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <HAL_GPIO_Init+0x238>)
 8001d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d3a:	4a2e      	ldr	r2, [pc, #184]	; (8001df4 <HAL_GPIO_Init+0x238>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d44:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <HAL_GPIO_Init+0x238>)
 8001d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d52:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <HAL_GPIO_Init+0x23c>)
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	3302      	adds	r3, #2
 8001d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	220f      	movs	r2, #15
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a20      	ldr	r2, [pc, #128]	; (8001dfc <HAL_GPIO_Init+0x240>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d052      	beq.n	8001e24 <HAL_GPIO_Init+0x268>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <HAL_GPIO_Init+0x244>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d031      	beq.n	8001dea <HAL_GPIO_Init+0x22e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <HAL_GPIO_Init+0x248>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d02b      	beq.n	8001de6 <HAL_GPIO_Init+0x22a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <HAL_GPIO_Init+0x24c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d025      	beq.n	8001de2 <HAL_GPIO_Init+0x226>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <HAL_GPIO_Init+0x250>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d01f      	beq.n	8001dde <HAL_GPIO_Init+0x222>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <HAL_GPIO_Init+0x254>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d019      	beq.n	8001dda <HAL_GPIO_Init+0x21e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a1a      	ldr	r2, [pc, #104]	; (8001e14 <HAL_GPIO_Init+0x258>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_GPIO_Init+0x21a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a19      	ldr	r2, [pc, #100]	; (8001e18 <HAL_GPIO_Init+0x25c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00d      	beq.n	8001dd2 <HAL_GPIO_Init+0x216>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <HAL_GPIO_Init+0x260>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d007      	beq.n	8001dce <HAL_GPIO_Init+0x212>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <HAL_GPIO_Init+0x264>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d101      	bne.n	8001dca <HAL_GPIO_Init+0x20e>
 8001dc6:	2309      	movs	r3, #9
 8001dc8:	e02d      	b.n	8001e26 <HAL_GPIO_Init+0x26a>
 8001dca:	230a      	movs	r3, #10
 8001dcc:	e02b      	b.n	8001e26 <HAL_GPIO_Init+0x26a>
 8001dce:	2308      	movs	r3, #8
 8001dd0:	e029      	b.n	8001e26 <HAL_GPIO_Init+0x26a>
 8001dd2:	2307      	movs	r3, #7
 8001dd4:	e027      	b.n	8001e26 <HAL_GPIO_Init+0x26a>
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	e025      	b.n	8001e26 <HAL_GPIO_Init+0x26a>
 8001dda:	2305      	movs	r3, #5
 8001ddc:	e023      	b.n	8001e26 <HAL_GPIO_Init+0x26a>
 8001dde:	2304      	movs	r3, #4
 8001de0:	e021      	b.n	8001e26 <HAL_GPIO_Init+0x26a>
 8001de2:	2303      	movs	r3, #3
 8001de4:	e01f      	b.n	8001e26 <HAL_GPIO_Init+0x26a>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e01d      	b.n	8001e26 <HAL_GPIO_Init+0x26a>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e01b      	b.n	8001e26 <HAL_GPIO_Init+0x26a>
 8001dee:	bf00      	nop
 8001df0:	58000080 	.word	0x58000080
 8001df4:	58024400 	.word	0x58024400
 8001df8:	58000400 	.word	0x58000400
 8001dfc:	58020000 	.word	0x58020000
 8001e00:	58020400 	.word	0x58020400
 8001e04:	58020800 	.word	0x58020800
 8001e08:	58020c00 	.word	0x58020c00
 8001e0c:	58021000 	.word	0x58021000
 8001e10:	58021400 	.word	0x58021400
 8001e14:	58021800 	.word	0x58021800
 8001e18:	58021c00 	.word	0x58021c00
 8001e1c:	58022000 	.word	0x58022000
 8001e20:	58022400 	.word	0x58022400
 8001e24:	2300      	movs	r3, #0
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	f002 0203 	and.w	r2, r2, #3
 8001e2c:	0092      	lsls	r2, r2, #2
 8001e2e:	4093      	lsls	r3, r2
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e36:	4938      	ldr	r1, [pc, #224]	; (8001f18 <HAL_GPIO_Init+0x35c>)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f47f ae63 	bne.w	8001bd0 <HAL_GPIO_Init+0x14>
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	3724      	adds	r7, #36	; 0x24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	58000400 	.word	0x58000400

08001f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f2c:	787b      	ldrb	r3, [r7, #1]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f38:	e003      	b.n	8001f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f3a:	887b      	ldrh	r3, [r7, #2]
 8001f3c:	041a      	lsls	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	619a      	str	r2, [r3, #24]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f50:	b08f      	sub	sp, #60	; 0x3c
 8001f52:	af0a      	add	r7, sp, #40	; 0x28
 8001f54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e116      	b.n	800218e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7fe fee8 	bl	8000d50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2203      	movs	r2, #3
 8001f84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f004 f8be 	bl	8006120 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	687e      	ldr	r6, [r7, #4]
 8001fac:	466d      	mov	r5, sp
 8001fae:	f106 0410 	add.w	r4, r6, #16
 8001fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fc2:	1d33      	adds	r3, r6, #4
 8001fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc6:	6838      	ldr	r0, [r7, #0]
 8001fc8:	f004 f83c 	bl	8006044 <USB_CoreInit>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0d7      	b.n	800218e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f004 f8ac 	bl	8006142 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	e04a      	b.n	8002086 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	333d      	adds	r3, #61	; 0x3d
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	333c      	adds	r3, #60	; 0x3c
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	b298      	uxth	r0, r3
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	3356      	adds	r3, #86	; 0x56
 800202c:	4602      	mov	r2, r0
 800202e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	3340      	adds	r3, #64	; 0x40
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	3344      	adds	r3, #68	; 0x44
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	3348      	adds	r3, #72	; 0x48
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	334c      	adds	r3, #76	; 0x4c
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	3301      	adds	r3, #1
 8002084:	73fb      	strb	r3, [r7, #15]
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	429a      	cmp	r2, r3
 800208e:	d3af      	bcc.n	8001ff0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	e044      	b.n	8002120 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	3301      	adds	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	429a      	cmp	r2, r3
 8002128:	d3b5      	bcc.n	8002096 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	687e      	ldr	r6, [r7, #4]
 8002132:	466d      	mov	r5, sp
 8002134:	f106 0410 	add.w	r4, r6, #16
 8002138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800213a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800213c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800213e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002140:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002144:	e885 0003 	stmia.w	r5, {r0, r1}
 8002148:	1d33      	adds	r3, r6, #4
 800214a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800214c:	6838      	ldr	r0, [r7, #0]
 800214e:	f004 f845 	bl	80061dc <USB_DevInit>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e014      	b.n	800218e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	2b01      	cmp	r3, #1
 800217a:	d102      	bne.n	8002182 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f80b 	bl	8002198 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f004 fa03 	bl	8006592 <USB_DevDisconnect>

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002198 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_PCDEx_ActivateLPM+0x44>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	10000003 	.word	0x10000003

080021e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80021e8:	4b19      	ldr	r3, [pc, #100]	; (8002250 <HAL_PWREx_ConfigSupply+0x70>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d00a      	beq.n	800220a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021f4:	4b16      	ldr	r3, [pc, #88]	; (8002250 <HAL_PWREx_ConfigSupply+0x70>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d001      	beq.n	8002206 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e01f      	b.n	8002246 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e01d      	b.n	8002246 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_PWREx_ConfigSupply+0x70>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f023 0207 	bic.w	r2, r3, #7
 8002212:	490f      	ldr	r1, [pc, #60]	; (8002250 <HAL_PWREx_ConfigSupply+0x70>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4313      	orrs	r3, r2
 8002218:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800221a:	f7fe ff77 	bl	800110c <HAL_GetTick>
 800221e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002220:	e009      	b.n	8002236 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002222:	f7fe ff73 	bl	800110c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002230:	d901      	bls.n	8002236 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e007      	b.n	8002246 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_PWREx_ConfigSupply+0x70>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800223e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002242:	d1ee      	bne.n	8002222 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	58024800 	.word	0x58024800

08002254 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a04      	ldr	r2, [pc, #16]	; (8002270 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800225e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002262:	60d3      	str	r3, [r2, #12]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	58024800 	.word	0x58024800

08002274 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08c      	sub	sp, #48	; 0x30
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	f000 bc48 	b.w	8002b18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8088 	beq.w	80023a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002296:	4b99      	ldr	r3, [pc, #612]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022a0:	4b96      	ldr	r3, [pc, #600]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	2b10      	cmp	r3, #16
 80022aa:	d007      	beq.n	80022bc <HAL_RCC_OscConfig+0x48>
 80022ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ae:	2b18      	cmp	r3, #24
 80022b0:	d111      	bne.n	80022d6 <HAL_RCC_OscConfig+0x62>
 80022b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d10c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	4b8f      	ldr	r3, [pc, #572]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d06d      	beq.n	80023a4 <HAL_RCC_OscConfig+0x130>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d169      	bne.n	80023a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	f000 bc21 	b.w	8002b18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x7a>
 80022e0:	4b86      	ldr	r3, [pc, #536]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a85      	ldr	r2, [pc, #532]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e02e      	b.n	800234c <HAL_RCC_OscConfig+0xd8>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x9c>
 80022f6:	4b81      	ldr	r3, [pc, #516]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a80      	ldr	r2, [pc, #512]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b7e      	ldr	r3, [pc, #504]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a7d      	ldr	r2, [pc, #500]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e01d      	b.n	800234c <HAL_RCC_OscConfig+0xd8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0xc0>
 800231a:	4b78      	ldr	r3, [pc, #480]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a77      	ldr	r2, [pc, #476]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b75      	ldr	r3, [pc, #468]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a74      	ldr	r2, [pc, #464]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0xd8>
 8002334:	4b71      	ldr	r3, [pc, #452]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a70      	ldr	r2, [pc, #448]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b6e      	ldr	r3, [pc, #440]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6d      	ldr	r2, [pc, #436]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d013      	beq.n	800237c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe feda 	bl	800110c <HAL_GetTick>
 8002358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe fed6 	bl	800110c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e3d4      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800236e:	4b63      	ldr	r3, [pc, #396]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0xe8>
 800237a:	e014      	b.n	80023a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe fec6 	bl	800110c <HAL_GetTick>
 8002380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002384:	f7fe fec2 	bl	800110c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e3c0      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002396:	4b59      	ldr	r3, [pc, #356]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x110>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80ca 	beq.w	8002548 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b4:	4b51      	ldr	r3, [pc, #324]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023be:	4b4f      	ldr	r3, [pc, #316]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <HAL_RCC_OscConfig+0x166>
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	2b18      	cmp	r3, #24
 80023ce:	d156      	bne.n	800247e <HAL_RCC_OscConfig+0x20a>
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d151      	bne.n	800247e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023da:	4b48      	ldr	r3, [pc, #288]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <HAL_RCC_OscConfig+0x17e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e392      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023f2:	4b42      	ldr	r3, [pc, #264]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0219 	bic.w	r2, r3, #25
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	493f      	ldr	r1, [pc, #252]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fe82 	bl	800110c <HAL_GetTick>
 8002408:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240c:	f7fe fe7e 	bl	800110c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e37c      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800241e:	4b37      	ldr	r3, [pc, #220]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242a:	f7fe fe9f 	bl	800116c <HAL_GetREVID>
 800242e:	4603      	mov	r3, r0
 8002430:	f241 0203 	movw	r2, #4099	; 0x1003
 8002434:	4293      	cmp	r3, r2
 8002436:	d817      	bhi.n	8002468 <HAL_RCC_OscConfig+0x1f4>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2b40      	cmp	r3, #64	; 0x40
 800243e:	d108      	bne.n	8002452 <HAL_RCC_OscConfig+0x1de>
 8002440:	4b2e      	ldr	r3, [pc, #184]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002448:	4a2c      	ldr	r2, [pc, #176]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 800244a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800244e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002450:	e07a      	b.n	8002548 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002452:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	031b      	lsls	r3, r3, #12
 8002460:	4926      	ldr	r1, [pc, #152]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002462:	4313      	orrs	r3, r2
 8002464:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002466:	e06f      	b.n	8002548 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002468:	4b24      	ldr	r3, [pc, #144]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	061b      	lsls	r3, r3, #24
 8002476:	4921      	ldr	r1, [pc, #132]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800247c:	e064      	b.n	8002548 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d047      	beq.n	8002516 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 0219 	bic.w	r2, r3, #25
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	491a      	ldr	r1, [pc, #104]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fe38 	bl	800110c <HAL_GetTick>
 800249c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a0:	f7fe fe34 	bl	800110c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e332      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	f7fe fe55 	bl	800116c <HAL_GetREVID>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d819      	bhi.n	8002500 <HAL_RCC_OscConfig+0x28c>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b40      	cmp	r3, #64	; 0x40
 80024d2:	d108      	bne.n	80024e6 <HAL_RCC_OscConfig+0x272>
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024dc:	4a07      	ldr	r2, [pc, #28]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 80024de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e2:	6053      	str	r3, [r2, #4]
 80024e4:	e030      	b.n	8002548 <HAL_RCC_OscConfig+0x2d4>
 80024e6:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	031b      	lsls	r3, r3, #12
 80024f4:	4901      	ldr	r1, [pc, #4]	; (80024fc <HAL_RCC_OscConfig+0x288>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
 80024fa:	e025      	b.n	8002548 <HAL_RCC_OscConfig+0x2d4>
 80024fc:	58024400 	.word	0x58024400
 8002500:	4b9a      	ldr	r3, [pc, #616]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	4997      	ldr	r1, [pc, #604]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
 8002514:	e018      	b.n	8002548 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002516:	4b95      	ldr	r3, [pc, #596]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a94      	ldr	r2, [pc, #592]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7fe fdf3 	bl	800110c <HAL_GetTick>
 8002526:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252a:	f7fe fdef 	bl	800110c <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e2ed      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800253c:	4b8b      	ldr	r3, [pc, #556]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80a9 	beq.w	80026a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002556:	4b85      	ldr	r3, [pc, #532]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800255e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002560:	4b82      	ldr	r3, [pc, #520]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b08      	cmp	r3, #8
 800256a:	d007      	beq.n	800257c <HAL_RCC_OscConfig+0x308>
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b18      	cmp	r3, #24
 8002570:	d13a      	bne.n	80025e8 <HAL_RCC_OscConfig+0x374>
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d135      	bne.n	80025e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800257c:	4b7b      	ldr	r3, [pc, #492]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_OscConfig+0x320>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b80      	cmp	r3, #128	; 0x80
 800258e:	d001      	beq.n	8002594 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e2c1      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002594:	f7fe fdea 	bl	800116c <HAL_GetREVID>
 8002598:	4603      	mov	r3, r0
 800259a:	f241 0203 	movw	r2, #4099	; 0x1003
 800259e:	4293      	cmp	r3, r2
 80025a0:	d817      	bhi.n	80025d2 <HAL_RCC_OscConfig+0x35e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	d108      	bne.n	80025bc <HAL_RCC_OscConfig+0x348>
 80025aa:	4b70      	ldr	r3, [pc, #448]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80025b2:	4a6e      	ldr	r2, [pc, #440]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 80025b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025ba:	e075      	b.n	80026a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025bc:	4b6b      	ldr	r3, [pc, #428]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	069b      	lsls	r3, r3, #26
 80025ca:	4968      	ldr	r1, [pc, #416]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025d0:	e06a      	b.n	80026a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025d2:	4b66      	ldr	r3, [pc, #408]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	061b      	lsls	r3, r3, #24
 80025e0:	4962      	ldr	r1, [pc, #392]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025e6:	e05f      	b.n	80026a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d042      	beq.n	8002676 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025f0:	4b5e      	ldr	r3, [pc, #376]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a5d      	ldr	r2, [pc, #372]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 80025f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe fd86 	bl	800110c <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002604:	f7fe fd82 	bl	800110c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e280      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002616:	4b55      	ldr	r3, [pc, #340]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002622:	f7fe fda3 	bl	800116c <HAL_GetREVID>
 8002626:	4603      	mov	r3, r0
 8002628:	f241 0203 	movw	r2, #4099	; 0x1003
 800262c:	4293      	cmp	r3, r2
 800262e:	d817      	bhi.n	8002660 <HAL_RCC_OscConfig+0x3ec>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	2b20      	cmp	r3, #32
 8002636:	d108      	bne.n	800264a <HAL_RCC_OscConfig+0x3d6>
 8002638:	4b4c      	ldr	r3, [pc, #304]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002640:	4a4a      	ldr	r2, [pc, #296]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002642:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002646:	6053      	str	r3, [r2, #4]
 8002648:	e02e      	b.n	80026a8 <HAL_RCC_OscConfig+0x434>
 800264a:	4b48      	ldr	r3, [pc, #288]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	069b      	lsls	r3, r3, #26
 8002658:	4944      	ldr	r1, [pc, #272]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
 800265e:	e023      	b.n	80026a8 <HAL_RCC_OscConfig+0x434>
 8002660:	4b42      	ldr	r3, [pc, #264]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	493f      	ldr	r1, [pc, #252]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002670:	4313      	orrs	r3, r2
 8002672:	60cb      	str	r3, [r1, #12]
 8002674:	e018      	b.n	80026a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002676:	4b3d      	ldr	r3, [pc, #244]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a3c      	ldr	r2, [pc, #240]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 800267c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7fe fd43 	bl	800110c <HAL_GetTick>
 8002686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800268a:	f7fe fd3f 	bl	800110c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e23d      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800269c:	4b33      	ldr	r3, [pc, #204]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d036      	beq.n	8002722 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d019      	beq.n	80026f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026bc:	4b2b      	ldr	r3, [pc, #172]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 80026be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c0:	4a2a      	ldr	r2, [pc, #168]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7fe fd20 	bl	800110c <HAL_GetTick>
 80026cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d0:	f7fe fd1c 	bl	800110c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e21a      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026e2:	4b22      	ldr	r3, [pc, #136]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 80026e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x45c>
 80026ee:	e018      	b.n	8002722 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f0:	4b1e      	ldr	r3, [pc, #120]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 80026f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f4:	4a1d      	ldr	r2, [pc, #116]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7fe fd06 	bl	800110c <HAL_GetTick>
 8002700:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002704:	f7fe fd02 	bl	800110c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e200      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	d039      	beq.n	80027a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d01c      	beq.n	8002770 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a0c      	ldr	r2, [pc, #48]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 800273c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002740:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002742:	f7fe fce3 	bl	800110c <HAL_GetTick>
 8002746:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800274a:	f7fe fcdf 	bl	800110c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1dd      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_RCC_OscConfig+0x4f8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x4d6>
 8002768:	e01b      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
 800276a:	bf00      	nop
 800276c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002770:	4b9b      	ldr	r3, [pc, #620]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a9a      	ldr	r2, [pc, #616]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800277a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800277c:	f7fe fcc6 	bl	800110c <HAL_GetTick>
 8002780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002784:	f7fe fcc2 	bl	800110c <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e1c0      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002796:	4b92      	ldr	r3, [pc, #584]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8081 	beq.w	80028b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027b0:	4b8c      	ldr	r3, [pc, #560]	; (80029e4 <HAL_RCC_OscConfig+0x770>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a8b      	ldr	r2, [pc, #556]	; (80029e4 <HAL_RCC_OscConfig+0x770>)
 80027b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027bc:	f7fe fca6 	bl	800110c <HAL_GetTick>
 80027c0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c4:	f7fe fca2 	bl	800110c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1a0      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027d6:	4b83      	ldr	r3, [pc, #524]	; (80029e4 <HAL_RCC_OscConfig+0x770>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d106      	bne.n	80027f8 <HAL_RCC_OscConfig+0x584>
 80027ea:	4b7d      	ldr	r3, [pc, #500]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	4a7c      	ldr	r2, [pc, #496]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6713      	str	r3, [r2, #112]	; 0x70
 80027f6:	e02d      	b.n	8002854 <HAL_RCC_OscConfig+0x5e0>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10c      	bne.n	800281a <HAL_RCC_OscConfig+0x5a6>
 8002800:	4b77      	ldr	r3, [pc, #476]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	4a76      	ldr	r2, [pc, #472]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	6713      	str	r3, [r2, #112]	; 0x70
 800280c:	4b74      	ldr	r3, [pc, #464]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	4a73      	ldr	r2, [pc, #460]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002812:	f023 0304 	bic.w	r3, r3, #4
 8002816:	6713      	str	r3, [r2, #112]	; 0x70
 8002818:	e01c      	b.n	8002854 <HAL_RCC_OscConfig+0x5e0>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b05      	cmp	r3, #5
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x5c8>
 8002822:	4b6f      	ldr	r3, [pc, #444]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	4a6e      	ldr	r2, [pc, #440]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	6713      	str	r3, [r2, #112]	; 0x70
 800282e:	4b6c      	ldr	r3, [pc, #432]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	4a6b      	ldr	r2, [pc, #428]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6713      	str	r3, [r2, #112]	; 0x70
 800283a:	e00b      	b.n	8002854 <HAL_RCC_OscConfig+0x5e0>
 800283c:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	4a67      	ldr	r2, [pc, #412]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	6713      	str	r3, [r2, #112]	; 0x70
 8002848:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	4a64      	ldr	r2, [pc, #400]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800284e:	f023 0304 	bic.w	r3, r3, #4
 8002852:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d015      	beq.n	8002888 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7fe fc56 	bl	800110c <HAL_GetTick>
 8002860:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002862:	e00a      	b.n	800287a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002864:	f7fe fc52 	bl	800110c <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e14e      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800287a:	4b59      	ldr	r3, [pc, #356]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0ee      	beq.n	8002864 <HAL_RCC_OscConfig+0x5f0>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002888:	f7fe fc40 	bl	800110c <HAL_GetTick>
 800288c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002890:	f7fe fc3c 	bl	800110c <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	; 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e138      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028a6:	4b4e      	ldr	r3, [pc, #312]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1ee      	bne.n	8002890 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 812d 	beq.w	8002b16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028bc:	4b48      	ldr	r3, [pc, #288]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028c4:	2b18      	cmp	r3, #24
 80028c6:	f000 80bd 	beq.w	8002a44 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	f040 809e 	bne.w	8002a10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d4:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a41      	ldr	r2, [pc, #260]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80028da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fc14 	bl	800110c <HAL_GetTick>
 80028e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe fc10 	bl	800110c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e10e      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028fa:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002906:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800290a:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <HAL_RCC_OscConfig+0x774>)
 800290c:	4013      	ands	r3, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002916:	0112      	lsls	r2, r2, #4
 8002918:	430a      	orrs	r2, r1
 800291a:	4931      	ldr	r1, [pc, #196]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800291c:	4313      	orrs	r3, r2
 800291e:	628b      	str	r3, [r1, #40]	; 0x28
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	3b01      	subs	r3, #1
 8002926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292e:	3b01      	subs	r3, #1
 8002930:	025b      	lsls	r3, r3, #9
 8002932:	b29b      	uxth	r3, r3
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	3b01      	subs	r3, #1
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	3b01      	subs	r3, #1
 800294a:	061b      	lsls	r3, r3, #24
 800294c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002950:	4923      	ldr	r1, [pc, #140]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002952:	4313      	orrs	r3, r2
 8002954:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	4a21      	ldr	r2, [pc, #132]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002962:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002966:	4b21      	ldr	r3, [pc, #132]	; (80029ec <HAL_RCC_OscConfig+0x778>)
 8002968:	4013      	ands	r3, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800296e:	00d2      	lsls	r2, r2, #3
 8002970:	491b      	ldr	r1, [pc, #108]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002972:	4313      	orrs	r3, r2
 8002974:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	f023 020c 	bic.w	r2, r3, #12
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4917      	ldr	r1, [pc, #92]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002984:	4313      	orrs	r3, r2
 8002986:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	f023 0202 	bic.w	r2, r3, #2
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002994:	4912      	ldr	r1, [pc, #72]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002996:	4313      	orrs	r3, r2
 8002998:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	4a10      	ldr	r2, [pc, #64]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7fe fb99 	bl	800110c <HAL_GetTick>
 80029da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029dc:	e011      	b.n	8002a02 <HAL_RCC_OscConfig+0x78e>
 80029de:	bf00      	nop
 80029e0:	58024400 	.word	0x58024400
 80029e4:	58024800 	.word	0x58024800
 80029e8:	fffffc0c 	.word	0xfffffc0c
 80029ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fb8c 	bl	800110c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e08a      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x77c>
 8002a0e:	e082      	b.n	8002b16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a10:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a42      	ldr	r2, [pc, #264]	; (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fb76 	bl	800110c <HAL_GetTick>
 8002a20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a24:	f7fe fb72 	bl	800110c <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e070      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a36:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x7b0>
 8002a42:	e068      	b.n	8002b16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a44:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a4a:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d031      	beq.n	8002abc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0203 	and.w	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d12a      	bne.n	8002abc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d122      	bne.n	8002abc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d11a      	bne.n	8002abc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	0a5b      	lsrs	r3, r3, #9
 8002a8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d111      	bne.n	8002abc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	0c1b      	lsrs	r3, r3, #16
 8002a9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d108      	bne.n	8002abc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	0e1b      	lsrs	r3, r3, #24
 8002aae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e02b      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002ac0:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac4:	08db      	lsrs	r3, r3, #3
 8002ac6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002aca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d01f      	beq.n	8002b16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ad6:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	4a11      	ldr	r2, [pc, #68]	; (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ae2:	f7fe fb13 	bl	800110c <HAL_GetTick>
 8002ae6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ae8:	bf00      	nop
 8002aea:	f7fe fb0f 	bl	800110c <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d0f9      	beq.n	8002aea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002afa:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <HAL_RCC_OscConfig+0x8b0>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b02:	00d2      	lsls	r2, r2, #3
 8002b04:	4906      	ldr	r1, [pc, #24]	; (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b0a:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3730      	adds	r7, #48	; 0x30
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	58024400 	.word	0x58024400
 8002b24:	ffff0007 	.word	0xffff0007

08002b28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e19c      	b.n	8002e76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b8a      	ldr	r3, [pc, #552]	; (8002d68 <HAL_RCC_ClockConfig+0x240>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d910      	bls.n	8002b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b87      	ldr	r3, [pc, #540]	; (8002d68 <HAL_RCC_ClockConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 020f 	bic.w	r2, r3, #15
 8002b52:	4985      	ldr	r1, [pc, #532]	; (8002d68 <HAL_RCC_ClockConfig+0x240>)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b83      	ldr	r3, [pc, #524]	; (8002d68 <HAL_RCC_ClockConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e184      	b.n	8002e76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d010      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	4b7b      	ldr	r3, [pc, #492]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d908      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b88:	4b78      	ldr	r3, [pc, #480]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	4975      	ldr	r1, [pc, #468]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d010      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	4b70      	ldr	r3, [pc, #448]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d908      	bls.n	8002bc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bb6:	4b6d      	ldr	r3, [pc, #436]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	496a      	ldr	r1, [pc, #424]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d010      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699a      	ldr	r2, [r3, #24]
 8002bd8:	4b64      	ldr	r3, [pc, #400]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d908      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002be4:	4b61      	ldr	r3, [pc, #388]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	495e      	ldr	r1, [pc, #376]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d010      	beq.n	8002c24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	4b59      	ldr	r3, [pc, #356]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d908      	bls.n	8002c24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c12:	4b56      	ldr	r3, [pc, #344]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	4953      	ldr	r1, [pc, #332]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d010      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	4b4d      	ldr	r3, [pc, #308]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d908      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c40:	4b4a      	ldr	r3, [pc, #296]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f023 020f 	bic.w	r2, r3, #15
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4947      	ldr	r1, [pc, #284]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d055      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c5e:	4b43      	ldr	r3, [pc, #268]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	4940      	ldr	r1, [pc, #256]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d107      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c78:	4b3c      	ldr	r3, [pc, #240]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d121      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0f6      	b.n	8002e76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d107      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c90:	4b36      	ldr	r3, [pc, #216]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d115      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0ea      	b.n	8002e76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ca8:	4b30      	ldr	r3, [pc, #192]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0de      	b.n	8002e76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cb8:	4b2c      	ldr	r3, [pc, #176]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0d6      	b.n	8002e76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cc8:	4b28      	ldr	r3, [pc, #160]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f023 0207 	bic.w	r2, r3, #7
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4925      	ldr	r1, [pc, #148]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cda:	f7fe fa17 	bl	800110c <HAL_GetTick>
 8002cde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce2:	f7fe fa13 	bl	800110c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0be      	b.n	8002e76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf8:	4b1c      	ldr	r3, [pc, #112]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d1eb      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d010      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d208      	bcs.n	8002d38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f023 020f 	bic.w	r2, r3, #15
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	490e      	ldr	r1, [pc, #56]	; (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_ClockConfig+0x240>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d214      	bcs.n	8002d70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_RCC_ClockConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 020f 	bic.w	r2, r3, #15
 8002d4e:	4906      	ldr	r1, [pc, #24]	; (8002d68 <HAL_RCC_ClockConfig+0x240>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <HAL_RCC_ClockConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e086      	b.n	8002e76 <HAL_RCC_ClockConfig+0x34e>
 8002d68:	52002000 	.word	0x52002000
 8002d6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d010      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	4b3f      	ldr	r3, [pc, #252]	; (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d208      	bcs.n	8002d9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d8c:	4b3c      	ldr	r3, [pc, #240]	; (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	4939      	ldr	r1, [pc, #228]	; (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d010      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	4b34      	ldr	r3, [pc, #208]	; (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d208      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dba:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	492e      	ldr	r1, [pc, #184]	; (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d010      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	4b28      	ldr	r3, [pc, #160]	; (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d208      	bcs.n	8002dfa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002de8:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	4922      	ldr	r1, [pc, #136]	; (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d010      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d208      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e16:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	4917      	ldr	r1, [pc, #92]	; (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e28:	f000 f834 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	f003 030f 	and.w	r3, r3, #15
 8002e38:	4912      	ldr	r1, [pc, #72]	; (8002e84 <HAL_RCC_ClockConfig+0x35c>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
 8002e44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	4a0d      	ldr	r2, [pc, #52]	; (8002e84 <HAL_RCC_ClockConfig+0x35c>)
 8002e50:	5cd3      	ldrb	r3, [r2, r3]
 8002e52:	f003 031f 	and.w	r3, r3, #31
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5c:	4a0a      	ldr	r2, [pc, #40]	; (8002e88 <HAL_RCC_ClockConfig+0x360>)
 8002e5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e60:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <HAL_RCC_ClockConfig+0x364>)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <HAL_RCC_ClockConfig+0x368>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe f904 	bl	8001078 <HAL_InitTick>
 8002e70:	4603      	mov	r3, r0
 8002e72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	58024400 	.word	0x58024400
 8002e84:	080066c8 	.word	0x080066c8
 8002e88:	24000004 	.word	0x24000004
 8002e8c:	24000000 	.word	0x24000000
 8002e90:	24000008 	.word	0x24000008

08002e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b089      	sub	sp, #36	; 0x24
 8002e98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e9a:	4bb3      	ldr	r3, [pc, #716]	; (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ea2:	2b18      	cmp	r3, #24
 8002ea4:	f200 8155 	bhi.w	8003152 <HAL_RCC_GetSysClockFreq+0x2be>
 8002ea8:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eae:	bf00      	nop
 8002eb0:	08002f15 	.word	0x08002f15
 8002eb4:	08003153 	.word	0x08003153
 8002eb8:	08003153 	.word	0x08003153
 8002ebc:	08003153 	.word	0x08003153
 8002ec0:	08003153 	.word	0x08003153
 8002ec4:	08003153 	.word	0x08003153
 8002ec8:	08003153 	.word	0x08003153
 8002ecc:	08003153 	.word	0x08003153
 8002ed0:	08002f3b 	.word	0x08002f3b
 8002ed4:	08003153 	.word	0x08003153
 8002ed8:	08003153 	.word	0x08003153
 8002edc:	08003153 	.word	0x08003153
 8002ee0:	08003153 	.word	0x08003153
 8002ee4:	08003153 	.word	0x08003153
 8002ee8:	08003153 	.word	0x08003153
 8002eec:	08003153 	.word	0x08003153
 8002ef0:	08002f41 	.word	0x08002f41
 8002ef4:	08003153 	.word	0x08003153
 8002ef8:	08003153 	.word	0x08003153
 8002efc:	08003153 	.word	0x08003153
 8002f00:	08003153 	.word	0x08003153
 8002f04:	08003153 	.word	0x08003153
 8002f08:	08003153 	.word	0x08003153
 8002f0c:	08003153 	.word	0x08003153
 8002f10:	08002f47 	.word	0x08002f47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f14:	4b94      	ldr	r3, [pc, #592]	; (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d009      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f20:	4b91      	ldr	r3, [pc, #580]	; (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	08db      	lsrs	r3, r3, #3
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	4a90      	ldr	r2, [pc, #576]	; (800316c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f32:	e111      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f34:	4b8d      	ldr	r3, [pc, #564]	; (800316c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f36:	61bb      	str	r3, [r7, #24]
      break;
 8002f38:	e10e      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f3a:	4b8d      	ldr	r3, [pc, #564]	; (8003170 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f3c:	61bb      	str	r3, [r7, #24]
      break;
 8002f3e:	e10b      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f40:	4b8c      	ldr	r3, [pc, #560]	; (8003174 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f42:	61bb      	str	r3, [r7, #24]
      break;
 8002f44:	e108      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f46:	4b88      	ldr	r3, [pc, #544]	; (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f50:	4b85      	ldr	r3, [pc, #532]	; (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f5c:	4b82      	ldr	r3, [pc, #520]	; (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f66:	4b80      	ldr	r3, [pc, #512]	; (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6a:	08db      	lsrs	r3, r3, #3
 8002f6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	ee07 3a90 	vmov	s15, r3
 8002f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80e1 	beq.w	800314c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	f000 8083 	beq.w	8003098 <HAL_RCC_GetSysClockFreq+0x204>
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	f200 80a1 	bhi.w	80030dc <HAL_RCC_GetSysClockFreq+0x248>
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x114>
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d056      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002fa6:	e099      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fa8:	4b6f      	ldr	r3, [pc, #444]	; (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d02d      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fb4:	4b6c      	ldr	r3, [pc, #432]	; (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	08db      	lsrs	r3, r3, #3
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	4a6b      	ldr	r2, [pc, #428]	; (800316c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	ee07 3a90 	vmov	s15, r3
 8002fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fde:	4b62      	ldr	r3, [pc, #392]	; (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe6:	ee07 3a90 	vmov	s15, r3
 8002fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ff2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003178 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800300e:	e087      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800317c <HAL_RCC_GetSysClockFreq+0x2e8>
 800301e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003022:	4b51      	ldr	r3, [pc, #324]	; (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003032:	ed97 6a02 	vldr	s12, [r7, #8]
 8003036:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800303a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800303e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800304a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003052:	e065      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003180 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003066:	4b40      	ldr	r3, [pc, #256]	; (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003076:	ed97 6a02 	vldr	s12, [r7, #8]
 800307a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800307e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800308a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800308e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003096:	e043      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003184 <HAL_RCC_GetSysClockFreq+0x2f0>
 80030a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030aa:	4b2f      	ldr	r3, [pc, #188]	; (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80030be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003178 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030da:	e021      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	ee07 3a90 	vmov	s15, r3
 80030e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003180 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ee:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003102:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003178 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800310a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800310e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800311e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003120:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	0a5b      	lsrs	r3, r3, #9
 8003126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800312a:	3301      	adds	r3, #1
 800312c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	ee07 3a90 	vmov	s15, r3
 8003134:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003138:	edd7 6a07 	vldr	s13, [r7, #28]
 800313c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003144:	ee17 3a90 	vmov	r3, s15
 8003148:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800314a:	e005      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	61bb      	str	r3, [r7, #24]
      break;
 8003150:	e002      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003152:	4b07      	ldr	r3, [pc, #28]	; (8003170 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003154:	61bb      	str	r3, [r7, #24]
      break;
 8003156:	bf00      	nop
  }

  return sysclockfreq;
 8003158:	69bb      	ldr	r3, [r7, #24]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3724      	adds	r7, #36	; 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	58024400 	.word	0x58024400
 800316c:	03d09000 	.word	0x03d09000
 8003170:	003d0900 	.word	0x003d0900
 8003174:	007a1200 	.word	0x007a1200
 8003178:	46000000 	.word	0x46000000
 800317c:	4c742400 	.word	0x4c742400
 8003180:	4a742400 	.word	0x4a742400
 8003184:	4af42400 	.word	0x4af42400

08003188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800318e:	f7ff fe81 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8003192:	4602      	mov	r2, r0
 8003194:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	0a1b      	lsrs	r3, r3, #8
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	490f      	ldr	r1, [pc, #60]	; (80031dc <HAL_RCC_GetHCLKFreq+0x54>)
 80031a0:	5ccb      	ldrb	r3, [r1, r3]
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	fa22 f303 	lsr.w	r3, r2, r3
 80031aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031ac:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	4a09      	ldr	r2, [pc, #36]	; (80031dc <HAL_RCC_GetHCLKFreq+0x54>)
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	fa22 f303 	lsr.w	r3, r2, r3
 80031c2:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80031c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031c6:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	58024400 	.word	0x58024400
 80031dc:	080066c8 	.word	0x080066c8
 80031e0:	24000004 	.word	0x24000004
 80031e4:	24000000 	.word	0x24000000

080031e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80031ec:	f7ff ffcc 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	4904      	ldr	r1, [pc, #16]	; (8003210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031fe:	5ccb      	ldrb	r3, [r1, r3]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	58024400 	.word	0x58024400
 8003210:	080066c8 	.word	0x080066c8

08003214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003218:	f7ff ffb6 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	0a1b      	lsrs	r3, r3, #8
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	4904      	ldr	r1, [pc, #16]	; (800323c <HAL_RCC_GetPCLK2Freq+0x28>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	58024400 	.word	0x58024400
 800323c:	080066c8 	.word	0x080066c8

08003240 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003244:	b0ca      	sub	sp, #296	; 0x128
 8003246:	af00      	add	r7, sp, #0
 8003248:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800324c:	2300      	movs	r3, #0
 800324e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003252:	2300      	movs	r3, #0
 8003254:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003260:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003264:	2500      	movs	r5, #0
 8003266:	ea54 0305 	orrs.w	r3, r4, r5
 800326a:	d049      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800326c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003272:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003276:	d02f      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003278:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800327c:	d828      	bhi.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800327e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003282:	d01a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003284:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003288:	d822      	bhi.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800328e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003292:	d007      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003294:	e01c      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003296:	4bb8      	ldr	r3, [pc, #736]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329a:	4ab7      	ldr	r2, [pc, #732]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800329c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032a2:	e01a      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032a8:	3308      	adds	r3, #8
 80032aa:	2102      	movs	r1, #2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f001 fc8f 	bl	8004bd0 <RCCEx_PLL2_Config>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032b8:	e00f      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032be:	3328      	adds	r3, #40	; 0x28
 80032c0:	2102      	movs	r1, #2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 fd36 	bl	8004d34 <RCCEx_PLL3_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032ce:	e004      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032d6:	e000      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80032d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10a      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80032e2:	4ba5      	ldr	r3, [pc, #660]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80032ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032f0:	4aa1      	ldr	r2, [pc, #644]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032f2:	430b      	orrs	r3, r1
 80032f4:	6513      	str	r3, [r2, #80]	; 0x50
 80032f6:	e003      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800330c:	f04f 0900 	mov.w	r9, #0
 8003310:	ea58 0309 	orrs.w	r3, r8, r9
 8003314:	d047      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331c:	2b04      	cmp	r3, #4
 800331e:	d82a      	bhi.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003320:	a201      	add	r2, pc, #4	; (adr r2, 8003328 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003326:	bf00      	nop
 8003328:	0800333d 	.word	0x0800333d
 800332c:	0800334b 	.word	0x0800334b
 8003330:	08003361 	.word	0x08003361
 8003334:	0800337f 	.word	0x0800337f
 8003338:	0800337f 	.word	0x0800337f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800333c:	4b8e      	ldr	r3, [pc, #568]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	4a8d      	ldr	r2, [pc, #564]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003346:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003348:	e01a      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800334a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800334e:	3308      	adds	r3, #8
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f001 fc3c 	bl	8004bd0 <RCCEx_PLL2_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800335e:	e00f      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003364:	3328      	adds	r3, #40	; 0x28
 8003366:	2100      	movs	r1, #0
 8003368:	4618      	mov	r0, r3
 800336a:	f001 fce3 	bl	8004d34 <RCCEx_PLL3_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003374:	e004      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800337c:	e000      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800337e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003388:	4b7b      	ldr	r3, [pc, #492]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800338a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338c:	f023 0107 	bic.w	r1, r3, #7
 8003390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	4a78      	ldr	r2, [pc, #480]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003398:	430b      	orrs	r3, r1
 800339a:	6513      	str	r3, [r2, #80]	; 0x50
 800339c:	e003      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80033a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80033b2:	f04f 0b00 	mov.w	fp, #0
 80033b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80033ba:	d04c      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80033bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c6:	d030      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80033c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033cc:	d829      	bhi.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033ce:	2bc0      	cmp	r3, #192	; 0xc0
 80033d0:	d02d      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80033d2:	2bc0      	cmp	r3, #192	; 0xc0
 80033d4:	d825      	bhi.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033d6:	2b80      	cmp	r3, #128	; 0x80
 80033d8:	d018      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80033da:	2b80      	cmp	r3, #128	; 0x80
 80033dc:	d821      	bhi.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	d007      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80033e6:	e01c      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e8:	4b63      	ldr	r3, [pc, #396]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	4a62      	ldr	r2, [pc, #392]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033f4:	e01c      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033fa:	3308      	adds	r3, #8
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 fbe6 	bl	8004bd0 <RCCEx_PLL2_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800340a:	e011      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800340c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003410:	3328      	adds	r3, #40	; 0x28
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f001 fc8d 	bl	8004d34 <RCCEx_PLL3_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003420:	e006      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003428:	e002      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800342a:	bf00      	nop
 800342c:	e000      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800342e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003430:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10a      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003438:	4b4f      	ldr	r3, [pc, #316]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800343a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003446:	4a4c      	ldr	r2, [pc, #304]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003448:	430b      	orrs	r3, r1
 800344a:	6513      	str	r3, [r2, #80]	; 0x50
 800344c:	e003      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003452:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003462:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003466:	2300      	movs	r3, #0
 8003468:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800346c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003470:	460b      	mov	r3, r1
 8003472:	4313      	orrs	r3, r2
 8003474:	d053      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800347a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800347e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003482:	d035      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003484:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003488:	d82e      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800348a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800348e:	d031      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003490:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003494:	d828      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800349a:	d01a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800349c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034a0:	d822      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80034a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034aa:	d007      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80034ac:	e01c      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ae:	4b32      	ldr	r3, [pc, #200]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	4a31      	ldr	r2, [pc, #196]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034ba:	e01c      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c0:	3308      	adds	r3, #8
 80034c2:	2100      	movs	r1, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f001 fb83 	bl	8004bd0 <RCCEx_PLL2_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80034d0:	e011      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034d6:	3328      	adds	r3, #40	; 0x28
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 fc2a 	bl	8004d34 <RCCEx_PLL3_Config>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034e6:	e006      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034ee:	e002      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034f0:	bf00      	nop
 80034f2:	e000      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10b      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034fe:	4b1e      	ldr	r3, [pc, #120]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003502:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800350a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800350e:	4a1a      	ldr	r2, [pc, #104]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003510:	430b      	orrs	r3, r1
 8003512:	6593      	str	r3, [r2, #88]	; 0x58
 8003514:	e003      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800351a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800351e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800352a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800352e:	2300      	movs	r3, #0
 8003530:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003534:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003538:	460b      	mov	r3, r1
 800353a:	4313      	orrs	r3, r2
 800353c:	d056      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800353e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003542:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003546:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800354a:	d038      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800354c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003550:	d831      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003552:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003556:	d034      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003558:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800355c:	d82b      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800355e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003562:	d01d      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003568:	d825      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d006      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800356e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003574:	e01f      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003576:	bf00      	nop
 8003578:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800357c:	4ba2      	ldr	r3, [pc, #648]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	4aa1      	ldr	r2, [pc, #644]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003586:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003588:	e01c      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358e:	3308      	adds	r3, #8
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f001 fb1c 	bl	8004bd0 <RCCEx_PLL2_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800359e:	e011      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a4:	3328      	adds	r3, #40	; 0x28
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 fbc3 	bl	8004d34 <RCCEx_PLL3_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035b4:	e006      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035bc:	e002      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80035c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80035cc:	4b8e      	ldr	r3, [pc, #568]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80035d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035dc:	4a8a      	ldr	r2, [pc, #552]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035de:	430b      	orrs	r3, r1
 80035e0:	6593      	str	r3, [r2, #88]	; 0x58
 80035e2:	e003      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80035f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80035fc:	2300      	movs	r3, #0
 80035fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003602:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003606:	460b      	mov	r3, r1
 8003608:	4313      	orrs	r3, r2
 800360a:	d03a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003612:	2b30      	cmp	r3, #48	; 0x30
 8003614:	d01f      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003616:	2b30      	cmp	r3, #48	; 0x30
 8003618:	d819      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800361a:	2b20      	cmp	r3, #32
 800361c:	d00c      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800361e:	2b20      	cmp	r3, #32
 8003620:	d815      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d019      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003626:	2b10      	cmp	r3, #16
 8003628:	d111      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362a:	4b77      	ldr	r3, [pc, #476]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	4a76      	ldr	r2, [pc, #472]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003636:	e011      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800363c:	3308      	adds	r3, #8
 800363e:	2102      	movs	r1, #2
 8003640:	4618      	mov	r0, r3
 8003642:	f001 fac5 	bl	8004bd0 <RCCEx_PLL2_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800364c:	e006      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003654:	e002      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003656:	bf00      	nop
 8003658:	e000      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800365a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003664:	4b68      	ldr	r3, [pc, #416]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003668:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800366c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	4a65      	ldr	r2, [pc, #404]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003674:	430b      	orrs	r3, r1
 8003676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003678:	e003      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800367e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800368e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003692:	2300      	movs	r3, #0
 8003694:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003698:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800369c:	460b      	mov	r3, r1
 800369e:	4313      	orrs	r3, r2
 80036a0:	d051      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80036a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ac:	d035      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80036ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036b2:	d82e      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036b8:	d031      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80036ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036be:	d828      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c4:	d01a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80036c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ca:	d822      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80036d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d4:	d007      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80036d6:	e01c      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d8:	4b4b      	ldr	r3, [pc, #300]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	4a4a      	ldr	r2, [pc, #296]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036e4:	e01c      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ea:	3308      	adds	r3, #8
 80036ec:	2100      	movs	r1, #0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f001 fa6e 	bl	8004bd0 <RCCEx_PLL2_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036fa:	e011      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003700:	3328      	adds	r3, #40	; 0x28
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f001 fb15 	bl	8004d34 <RCCEx_PLL3_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003710:	e006      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003718:	e002      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800371a:	bf00      	nop
 800371c:	e000      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800371e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003728:	4b37      	ldr	r3, [pc, #220]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800372a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003736:	4a34      	ldr	r2, [pc, #208]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003738:	430b      	orrs	r3, r1
 800373a:	6513      	str	r3, [r2, #80]	; 0x50
 800373c:	e003      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003742:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003752:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003756:	2300      	movs	r3, #0
 8003758:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800375c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003760:	460b      	mov	r3, r1
 8003762:	4313      	orrs	r3, r2
 8003764:	d056      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800376c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003770:	d033      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003772:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003776:	d82c      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003778:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800377c:	d02f      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800377e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003782:	d826      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003784:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003788:	d02b      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800378a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800378e:	d820      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003794:	d012      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003796:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800379a:	d81a      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d022      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d115      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037aa:	3308      	adds	r3, #8
 80037ac:	2101      	movs	r1, #1
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 fa0e 	bl	8004bd0 <RCCEx_PLL2_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037ba:	e015      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c0:	3328      	adds	r3, #40	; 0x28
 80037c2:	2101      	movs	r1, #1
 80037c4:	4618      	mov	r0, r3
 80037c6:	f001 fab5 	bl	8004d34 <RCCEx_PLL3_Config>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037d0:	e00a      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037d8:	e006      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037da:	bf00      	nop
 80037dc:	e004      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037de:	bf00      	nop
 80037e0:	e002      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037e2:	bf00      	nop
 80037e4:	e000      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10d      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80037f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037fe:	4a02      	ldr	r2, [pc, #8]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003800:	430b      	orrs	r3, r1
 8003802:	6513      	str	r3, [r2, #80]	; 0x50
 8003804:	e006      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003806:	bf00      	nop
 8003808:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003810:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800382a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800382e:	460b      	mov	r3, r1
 8003830:	4313      	orrs	r3, r2
 8003832:	d055      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800383c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003840:	d033      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003842:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003846:	d82c      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d02f      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800384e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003852:	d826      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003854:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003858:	d02b      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800385a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800385e:	d820      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003864:	d012      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800386a:	d81a      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800386c:	2b00      	cmp	r3, #0
 800386e:	d022      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003870:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003874:	d115      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800387a:	3308      	adds	r3, #8
 800387c:	2101      	movs	r1, #1
 800387e:	4618      	mov	r0, r3
 8003880:	f001 f9a6 	bl	8004bd0 <RCCEx_PLL2_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800388a:	e015      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003890:	3328      	adds	r3, #40	; 0x28
 8003892:	2101      	movs	r1, #1
 8003894:	4618      	mov	r0, r3
 8003896:	f001 fa4d 	bl	8004d34 <RCCEx_PLL3_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038a0:	e00a      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038a8:	e006      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038aa:	bf00      	nop
 80038ac:	e004      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038ae:	bf00      	nop
 80038b0:	e002      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038b2:	bf00      	nop
 80038b4:	e000      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10b      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038c0:	4ba3      	ldr	r3, [pc, #652]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80038c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038d0:	4a9f      	ldr	r2, [pc, #636]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038d2:	430b      	orrs	r3, r1
 80038d4:	6593      	str	r3, [r2, #88]	; 0x58
 80038d6:	e003      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80038ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80038f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038fa:	460b      	mov	r3, r1
 80038fc:	4313      	orrs	r3, r2
 80038fe:	d037      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800390a:	d00e      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800390c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003910:	d816      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d018      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800391a:	d111      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391c:	4b8c      	ldr	r3, [pc, #560]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	4a8b      	ldr	r2, [pc, #556]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003928:	e00f      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800392e:	3308      	adds	r3, #8
 8003930:	2101      	movs	r1, #1
 8003932:	4618      	mov	r0, r3
 8003934:	f001 f94c 	bl	8004bd0 <RCCEx_PLL2_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800393e:	e004      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003946:	e000      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10a      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003952:	4b7f      	ldr	r3, [pc, #508]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003956:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800395a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	4a7b      	ldr	r2, [pc, #492]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003962:	430b      	orrs	r3, r1
 8003964:	6513      	str	r3, [r2, #80]	; 0x50
 8003966:	e003      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003968:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800396c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800397c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003980:	2300      	movs	r3, #0
 8003982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003986:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800398a:	460b      	mov	r3, r1
 800398c:	4313      	orrs	r3, r2
 800398e:	d039      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003996:	2b03      	cmp	r3, #3
 8003998:	d81c      	bhi.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800399a:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a0:	080039dd 	.word	0x080039dd
 80039a4:	080039b1 	.word	0x080039b1
 80039a8:	080039bf 	.word	0x080039bf
 80039ac:	080039dd 	.word	0x080039dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b0:	4b67      	ldr	r3, [pc, #412]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	4a66      	ldr	r2, [pc, #408]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039bc:	e00f      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c2:	3308      	adds	r3, #8
 80039c4:	2102      	movs	r1, #2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 f902 	bl	8004bd0 <RCCEx_PLL2_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039d2:	e004      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039da:	e000      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80039dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039e6:	4b5a      	ldr	r3, [pc, #360]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ea:	f023 0103 	bic.w	r1, r3, #3
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f4:	4a56      	ldr	r2, [pc, #344]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039f6:	430b      	orrs	r3, r1
 80039f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039fa:	e003      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003a10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f000 809f 	beq.w	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a26:	4b4b      	ldr	r3, [pc, #300]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a4a      	ldr	r2, [pc, #296]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a32:	f7fd fb6b 	bl	800110c <HAL_GetTick>
 8003a36:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a3a:	e00b      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3c:	f7fd fb66 	bl	800110c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b64      	cmp	r3, #100	; 0x64
 8003a4a:	d903      	bls.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a52:	e005      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a54:	4b3f      	ldr	r3, [pc, #252]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0ed      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003a60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d179      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a68:	4b39      	ldr	r3, [pc, #228]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a74:	4053      	eors	r3, r2
 8003a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d015      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a7e:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a8a:	4b31      	ldr	r3, [pc, #196]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8e:	4a30      	ldr	r2, [pc, #192]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a94:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a96:	4b2e      	ldr	r3, [pc, #184]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9a:	4a2d      	ldr	r2, [pc, #180]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003aa2:	4a2b      	ldr	r2, [pc, #172]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003aa8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab6:	d118      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fd fb28 	bl	800110c <HAL_GetTick>
 8003abc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ac0:	e00d      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac2:	f7fd fb23 	bl	800110c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003acc:	1ad2      	subs	r2, r2, r3
 8003ace:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d903      	bls.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003adc:	e005      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ade:	4b1c      	ldr	r3, [pc, #112]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0eb      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003aea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d129      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b02:	d10e      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003b04:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b14:	091a      	lsrs	r2, r3, #4
 8003b16:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	4a0d      	ldr	r2, [pc, #52]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6113      	str	r3, [r2, #16]
 8003b20:	e005      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003b22:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b2c:	6113      	str	r3, [r2, #16]
 8003b2e:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b30:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3e:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6713      	str	r3, [r2, #112]	; 0x70
 8003b44:	e00e      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003b4e:	e009      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b50:	58024400 	.word	0x58024400
 8003b54:	58024800 	.word	0x58024800
 8003b58:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f002 0301 	and.w	r3, r2, #1
 8003b70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f000 8089 	beq.w	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b8c:	2b28      	cmp	r3, #40	; 0x28
 8003b8e:	d86b      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b90:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003c71 	.word	0x08003c71
 8003b9c:	08003c69 	.word	0x08003c69
 8003ba0:	08003c69 	.word	0x08003c69
 8003ba4:	08003c69 	.word	0x08003c69
 8003ba8:	08003c69 	.word	0x08003c69
 8003bac:	08003c69 	.word	0x08003c69
 8003bb0:	08003c69 	.word	0x08003c69
 8003bb4:	08003c69 	.word	0x08003c69
 8003bb8:	08003c3d 	.word	0x08003c3d
 8003bbc:	08003c69 	.word	0x08003c69
 8003bc0:	08003c69 	.word	0x08003c69
 8003bc4:	08003c69 	.word	0x08003c69
 8003bc8:	08003c69 	.word	0x08003c69
 8003bcc:	08003c69 	.word	0x08003c69
 8003bd0:	08003c69 	.word	0x08003c69
 8003bd4:	08003c69 	.word	0x08003c69
 8003bd8:	08003c53 	.word	0x08003c53
 8003bdc:	08003c69 	.word	0x08003c69
 8003be0:	08003c69 	.word	0x08003c69
 8003be4:	08003c69 	.word	0x08003c69
 8003be8:	08003c69 	.word	0x08003c69
 8003bec:	08003c69 	.word	0x08003c69
 8003bf0:	08003c69 	.word	0x08003c69
 8003bf4:	08003c69 	.word	0x08003c69
 8003bf8:	08003c71 	.word	0x08003c71
 8003bfc:	08003c69 	.word	0x08003c69
 8003c00:	08003c69 	.word	0x08003c69
 8003c04:	08003c69 	.word	0x08003c69
 8003c08:	08003c69 	.word	0x08003c69
 8003c0c:	08003c69 	.word	0x08003c69
 8003c10:	08003c69 	.word	0x08003c69
 8003c14:	08003c69 	.word	0x08003c69
 8003c18:	08003c71 	.word	0x08003c71
 8003c1c:	08003c69 	.word	0x08003c69
 8003c20:	08003c69 	.word	0x08003c69
 8003c24:	08003c69 	.word	0x08003c69
 8003c28:	08003c69 	.word	0x08003c69
 8003c2c:	08003c69 	.word	0x08003c69
 8003c30:	08003c69 	.word	0x08003c69
 8003c34:	08003c69 	.word	0x08003c69
 8003c38:	08003c71 	.word	0x08003c71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c40:	3308      	adds	r3, #8
 8003c42:	2101      	movs	r1, #1
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 ffc3 	bl	8004bd0 <RCCEx_PLL2_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c50:	e00f      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c56:	3328      	adds	r3, #40	; 0x28
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f001 f86a 	bl	8004d34 <RCCEx_PLL3_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c66:	e004      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c6e:	e000      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c7a:	4bbf      	ldr	r3, [pc, #764]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c88:	4abb      	ldr	r2, [pc, #748]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	6553      	str	r3, [r2, #84]	; 0x54
 8003c8e:	e003      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca0:	f002 0302 	and.w	r3, r2, #2
 8003ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003cae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	d041      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cbe:	2b05      	cmp	r3, #5
 8003cc0:	d824      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003cc2:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc8:	08003d15 	.word	0x08003d15
 8003ccc:	08003ce1 	.word	0x08003ce1
 8003cd0:	08003cf7 	.word	0x08003cf7
 8003cd4:	08003d15 	.word	0x08003d15
 8003cd8:	08003d15 	.word	0x08003d15
 8003cdc:	08003d15 	.word	0x08003d15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 ff71 	bl	8004bd0 <RCCEx_PLL2_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cf4:	e00f      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cfa:	3328      	adds	r3, #40	; 0x28
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f001 f818 	bl	8004d34 <RCCEx_PLL3_Config>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d0a:	e004      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d12:	e000      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10a      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d1e:	4b96      	ldr	r3, [pc, #600]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	f023 0107 	bic.w	r1, r3, #7
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d2c:	4a92      	ldr	r2, [pc, #584]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	6553      	str	r3, [r2, #84]	; 0x54
 8003d32:	e003      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	f002 0304 	and.w	r3, r2, #4
 8003d48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	d044      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d64:	2b05      	cmp	r3, #5
 8003d66:	d825      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003d68:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003dbd 	.word	0x08003dbd
 8003d74:	08003d89 	.word	0x08003d89
 8003d78:	08003d9f 	.word	0x08003d9f
 8003d7c:	08003dbd 	.word	0x08003dbd
 8003d80:	08003dbd 	.word	0x08003dbd
 8003d84:	08003dbd 	.word	0x08003dbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d8c:	3308      	adds	r3, #8
 8003d8e:	2101      	movs	r1, #1
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 ff1d 	bl	8004bd0 <RCCEx_PLL2_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d9c:	e00f      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da2:	3328      	adds	r3, #40	; 0x28
 8003da4:	2101      	movs	r1, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 ffc4 	bl	8004d34 <RCCEx_PLL3_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003db2:	e004      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dba:	e000      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10b      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dc6:	4b6c      	ldr	r3, [pc, #432]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	f023 0107 	bic.w	r1, r3, #7
 8003dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd6:	4a68      	ldr	r2, [pc, #416]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	6593      	str	r3, [r2, #88]	; 0x58
 8003ddc:	e003      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003de2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f002 0320 	and.w	r3, r2, #32
 8003df2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003df6:	2300      	movs	r3, #0
 8003df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e00:	460b      	mov	r3, r1
 8003e02:	4313      	orrs	r3, r2
 8003e04:	d055      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e12:	d033      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e18:	d82c      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1e:	d02f      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e24:	d826      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e2a:	d02b      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003e2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e30:	d820      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e36:	d012      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e3c:	d81a      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d022      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e46:	d115      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 febd 	bl	8004bd0 <RCCEx_PLL2_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e5c:	e015      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e62:	3328      	adds	r3, #40	; 0x28
 8003e64:	2102      	movs	r1, #2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 ff64 	bl	8004d34 <RCCEx_PLL3_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e72:	e00a      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e7a:	e006      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e7c:	bf00      	nop
 8003e7e:	e004      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e80:	bf00      	nop
 8003e82:	e002      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e84:	bf00      	nop
 8003e86:	e000      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e92:	4b39      	ldr	r3, [pc, #228]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e96:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	4a35      	ldr	r2, [pc, #212]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6553      	str	r3, [r2, #84]	; 0x54
 8003ea8:	e003      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ec8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	d058      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ede:	d033      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003ee0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ee4:	d82c      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eea:	d02f      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef0:	d826      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ef2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ef6:	d02b      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003ef8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003efc:	d820      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f02:	d012      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003f04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f08:	d81a      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d022      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f12:	d115      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f18:	3308      	adds	r3, #8
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fe57 	bl	8004bd0 <RCCEx_PLL2_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f28:	e015      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2e:	3328      	adds	r3, #40	; 0x28
 8003f30:	2102      	movs	r1, #2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fefe 	bl	8004d34 <RCCEx_PLL3_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f46:	e006      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f48:	bf00      	nop
 8003f4a:	e004      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f4c:	bf00      	nop
 8003f4e:	e002      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f50:	bf00      	nop
 8003f52:	e000      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10e      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f5e:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f6e:	4a02      	ldr	r2, [pc, #8]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6593      	str	r3, [r2, #88]	; 0x58
 8003f74:	e006      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003f76:	bf00      	nop
 8003f78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003f90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f94:	2300      	movs	r3, #0
 8003f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f9a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	d055      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fb0:	d033      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003fb2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fb6:	d82c      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fbc:	d02f      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc2:	d826      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fc4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fc8:	d02b      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003fca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fce:	d820      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd4:	d012      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fda:	d81a      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d022      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe4:	d115      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fea:	3308      	adds	r3, #8
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fdee 	bl	8004bd0 <RCCEx_PLL2_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ffa:	e015      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004000:	3328      	adds	r3, #40	; 0x28
 8004002:	2102      	movs	r1, #2
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fe95 	bl	8004d34 <RCCEx_PLL3_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004010:	e00a      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004018:	e006      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800401a:	bf00      	nop
 800401c:	e004      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800401e:	bf00      	nop
 8004020:	e002      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004028:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10b      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004030:	4ba1      	ldr	r3, [pc, #644]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800403c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004040:	4a9d      	ldr	r2, [pc, #628]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004042:	430b      	orrs	r3, r1
 8004044:	6593      	str	r3, [r2, #88]	; 0x58
 8004046:	e003      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004048:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800404c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	f002 0308 	and.w	r3, r2, #8
 800405c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004060:	2300      	movs	r3, #0
 8004062:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004066:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800406a:	460b      	mov	r3, r1
 800406c:	4313      	orrs	r3, r2
 800406e:	d01e      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407c:	d10c      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004082:	3328      	adds	r3, #40	; 0x28
 8004084:	2102      	movs	r1, #2
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fe54 	bl	8004d34 <RCCEx_PLL3_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004098:	4b87      	ldr	r3, [pc, #540]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040a8:	4a83      	ldr	r2, [pc, #524]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040aa:	430b      	orrs	r3, r1
 80040ac:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f002 0310 	and.w	r3, r2, #16
 80040ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040be:	2300      	movs	r3, #0
 80040c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80040c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80040c8:	460b      	mov	r3, r1
 80040ca:	4313      	orrs	r3, r2
 80040cc:	d01e      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80040ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040da:	d10c      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e0:	3328      	adds	r3, #40	; 0x28
 80040e2:	2102      	movs	r1, #2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fe25 	bl	8004d34 <RCCEx_PLL3_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040f6:	4b70      	ldr	r3, [pc, #448]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004102:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004106:	4a6c      	ldr	r2, [pc, #432]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004108:	430b      	orrs	r3, r1
 800410a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800410c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800411c:	2300      	movs	r3, #0
 800411e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004122:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004126:	460b      	mov	r3, r1
 8004128:	4313      	orrs	r3, r2
 800412a:	d03e      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004130:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004138:	d022      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800413a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800413e:	d81b      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004148:	d00b      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800414a:	e015      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004150:	3308      	adds	r3, #8
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fd3b 	bl	8004bd0 <RCCEx_PLL2_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004160:	e00f      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004166:	3328      	adds	r3, #40	; 0x28
 8004168:	2102      	movs	r1, #2
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fde2 	bl	8004d34 <RCCEx_PLL3_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004176:	e004      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800417e:	e000      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800418a:	4b4b      	ldr	r3, [pc, #300]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004196:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800419a:	4a47      	ldr	r2, [pc, #284]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800419c:	430b      	orrs	r3, r1
 800419e:	6593      	str	r3, [r2, #88]	; 0x58
 80041a0:	e003      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80041b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80041b8:	2300      	movs	r3, #0
 80041ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80041c0:	460b      	mov	r3, r1
 80041c2:	4313      	orrs	r3, r2
 80041c4:	d03b      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80041c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041d2:	d01f      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80041d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041d8:	d818      	bhi.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80041da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041de:	d003      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80041e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041e4:	d007      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80041e6:	e011      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e8:	4b33      	ldr	r3, [pc, #204]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	4a32      	ldr	r2, [pc, #200]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041f4:	e00f      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fa:	3328      	adds	r3, #40	; 0x28
 80041fc:	2101      	movs	r1, #1
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fd98 	bl	8004d34 <RCCEx_PLL3_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800420a:	e004      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800421e:	4b26      	ldr	r3, [pc, #152]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004230:	430b      	orrs	r3, r1
 8004232:	6553      	str	r3, [r2, #84]	; 0x54
 8004234:	e003      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800423a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800424a:	673b      	str	r3, [r7, #112]	; 0x70
 800424c:	2300      	movs	r3, #0
 800424e:	677b      	str	r3, [r7, #116]	; 0x74
 8004250:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004254:	460b      	mov	r3, r1
 8004256:	4313      	orrs	r3, r2
 8004258:	d034      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800425a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800425e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004268:	d007      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800426a:	e011      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	4a11      	ldr	r2, [pc, #68]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004276:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004278:	e00e      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800427a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427e:	3308      	adds	r3, #8
 8004280:	2102      	movs	r1, #2
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fca4 	bl	8004bd0 <RCCEx_PLL2_Config>
 8004288:	4603      	mov	r3, r0
 800428a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800428e:	e003      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004298:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10d      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ae:	4a02      	ldr	r2, [pc, #8]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042b0:	430b      	orrs	r3, r1
 80042b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042b4:	e006      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80042b6:	bf00      	nop
 80042b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80042d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80042d2:	2300      	movs	r3, #0
 80042d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80042da:	460b      	mov	r3, r1
 80042dc:	4313      	orrs	r3, r2
 80042de:	d00c      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e4:	3328      	adds	r3, #40	; 0x28
 80042e6:	2102      	movs	r1, #2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fd23 	bl	8004d34 <RCCEx_PLL3_Config>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004306:	663b      	str	r3, [r7, #96]	; 0x60
 8004308:	2300      	movs	r3, #0
 800430a:	667b      	str	r3, [r7, #100]	; 0x64
 800430c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004310:	460b      	mov	r3, r1
 8004312:	4313      	orrs	r3, r2
 8004314:	d038      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800431e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004322:	d018      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004328:	d811      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800432a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432e:	d014      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004334:	d80b      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d011      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800433a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800433e:	d106      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004340:	4bc3      	ldr	r3, [pc, #780]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	4ac2      	ldr	r2, [pc, #776]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800434a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800434c:	e008      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004354:	e004      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004356:	bf00      	nop
 8004358:	e002      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800435a:	bf00      	nop
 800435c:	e000      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800435e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004360:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10b      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004368:	4bb9      	ldr	r3, [pc, #740]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004378:	4ab5      	ldr	r2, [pc, #724]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800437a:	430b      	orrs	r3, r1
 800437c:	6553      	str	r3, [r2, #84]	; 0x54
 800437e:	e003      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004384:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004394:	65bb      	str	r3, [r7, #88]	; 0x58
 8004396:	2300      	movs	r3, #0
 8004398:	65fb      	str	r3, [r7, #92]	; 0x5c
 800439a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800439e:	460b      	mov	r3, r1
 80043a0:	4313      	orrs	r3, r2
 80043a2:	d009      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043a4:	4baa      	ldr	r3, [pc, #680]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80043ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b2:	4aa7      	ldr	r2, [pc, #668]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80043c4:	653b      	str	r3, [r7, #80]	; 0x50
 80043c6:	2300      	movs	r3, #0
 80043c8:	657b      	str	r3, [r7, #84]	; 0x54
 80043ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80043ce:	460b      	mov	r3, r1
 80043d0:	4313      	orrs	r3, r2
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043d4:	4b9e      	ldr	r3, [pc, #632]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80043dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043e4:	4a9a      	ldr	r2, [pc, #616]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043e6:	430b      	orrs	r3, r1
 80043e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80043f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80043f8:	2300      	movs	r3, #0
 80043fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004400:	460b      	mov	r3, r1
 8004402:	4313      	orrs	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004406:	4b92      	ldr	r3, [pc, #584]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800440e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004414:	4a8e      	ldr	r2, [pc, #568]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004416:	430b      	orrs	r3, r1
 8004418:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800441a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004426:	643b      	str	r3, [r7, #64]	; 0x40
 8004428:	2300      	movs	r3, #0
 800442a:	647b      	str	r3, [r7, #68]	; 0x44
 800442c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004430:	460b      	mov	r3, r1
 8004432:	4313      	orrs	r3, r2
 8004434:	d00e      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004436:	4b86      	ldr	r3, [pc, #536]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	4a85      	ldr	r2, [pc, #532]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800443c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004440:	6113      	str	r3, [r2, #16]
 8004442:	4b83      	ldr	r3, [pc, #524]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004444:	6919      	ldr	r1, [r3, #16]
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800444a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800444e:	4a80      	ldr	r2, [pc, #512]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004450:	430b      	orrs	r3, r1
 8004452:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004460:	63bb      	str	r3, [r7, #56]	; 0x38
 8004462:	2300      	movs	r3, #0
 8004464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004466:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800446a:	460b      	mov	r3, r1
 800446c:	4313      	orrs	r3, r2
 800446e:	d009      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004470:	4b77      	ldr	r3, [pc, #476]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004474:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	4a74      	ldr	r2, [pc, #464]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004480:	430b      	orrs	r3, r1
 8004482:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004490:	633b      	str	r3, [r7, #48]	; 0x30
 8004492:	2300      	movs	r3, #0
 8004494:	637b      	str	r3, [r7, #52]	; 0x34
 8004496:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044a0:	4b6b      	ldr	r3, [pc, #428]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80044a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044b0:	4a67      	ldr	r2, [pc, #412]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b2:	430b      	orrs	r3, r1
 80044b4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	2100      	movs	r1, #0
 80044c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80044cc:	460b      	mov	r3, r1
 80044ce:	4313      	orrs	r3, r2
 80044d0:	d011      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d6:	3308      	adds	r3, #8
 80044d8:	2100      	movs	r1, #0
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fb78 	bl	8004bd0 <RCCEx_PLL2_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80044e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	2100      	movs	r1, #0
 8004500:	6239      	str	r1, [r7, #32]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
 8004508:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800450c:	460b      	mov	r3, r1
 800450e:	4313      	orrs	r3, r2
 8004510:	d011      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004516:	3308      	adds	r3, #8
 8004518:	2101      	movs	r1, #1
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fb58 	bl	8004bd0 <RCCEx_PLL2_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004526:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004532:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	2100      	movs	r1, #0
 8004540:	61b9      	str	r1, [r7, #24]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	61fb      	str	r3, [r7, #28]
 8004548:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800454c:	460b      	mov	r3, r1
 800454e:	4313      	orrs	r3, r2
 8004550:	d011      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004556:	3308      	adds	r3, #8
 8004558:	2102      	movs	r1, #2
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fb38 	bl	8004bd0 <RCCEx_PLL2_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004566:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004572:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	2100      	movs	r1, #0
 8004580:	6139      	str	r1, [r7, #16]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800458c:	460b      	mov	r3, r1
 800458e:	4313      	orrs	r3, r2
 8004590:	d011      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004596:	3328      	adds	r3, #40	; 0x28
 8004598:	2100      	movs	r1, #0
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fbca 	bl	8004d34 <RCCEx_PLL3_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80045a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80045b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	2100      	movs	r1, #0
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80045cc:	460b      	mov	r3, r1
 80045ce:	4313      	orrs	r3, r2
 80045d0:	d011      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d6:	3328      	adds	r3, #40	; 0x28
 80045d8:	2101      	movs	r1, #1
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fbaa 	bl	8004d34 <RCCEx_PLL3_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fe:	2100      	movs	r1, #0
 8004600:	6039      	str	r1, [r7, #0]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	e9d7 1200 	ldrd	r1, r2, [r7]
 800460c:	460b      	mov	r3, r1
 800460e:	4313      	orrs	r3, r2
 8004610:	d011      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004616:	3328      	adds	r3, #40	; 0x28
 8004618:	2102      	movs	r1, #2
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fb8a 	bl	8004d34 <RCCEx_PLL3_Config>
 8004620:	4603      	mov	r3, r0
 8004622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004632:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004636:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e000      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
}
 8004644:	4618      	mov	r0, r3
 8004646:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800464a:	46bd      	mov	sp, r7
 800464c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004650:	58024400 	.word	0x58024400

08004654 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004658:	f7fe fd96 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 800465c:	4602      	mov	r2, r0
 800465e:	4b06      	ldr	r3, [pc, #24]	; (8004678 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	091b      	lsrs	r3, r3, #4
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	4904      	ldr	r1, [pc, #16]	; (800467c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800466a:	5ccb      	ldrb	r3, [r1, r3]
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004674:	4618      	mov	r0, r3
 8004676:	bd80      	pop	{r7, pc}
 8004678:	58024400 	.word	0x58024400
 800467c:	080066c8 	.word	0x080066c8

08004680 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004680:	b480      	push	{r7}
 8004682:	b089      	sub	sp, #36	; 0x24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004688:	4ba1      	ldr	r3, [pc, #644]	; (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004692:	4b9f      	ldr	r3, [pc, #636]	; (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	0b1b      	lsrs	r3, r3, #12
 8004698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800469c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800469e:	4b9c      	ldr	r3, [pc, #624]	; (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80046aa:	4b99      	ldr	r3, [pc, #612]	; (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ae:	08db      	lsrs	r3, r3, #3
 80046b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 8111 	beq.w	80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	f000 8083 	beq.w	80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2b02      	cmp	r3, #2
 80046da:	f200 80a1 	bhi.w	8004820 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d056      	beq.n	8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046ea:	e099      	b.n	8004820 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046ec:	4b88      	ldr	r3, [pc, #544]	; (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d02d      	beq.n	8004754 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046f8:	4b85      	ldr	r3, [pc, #532]	; (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	08db      	lsrs	r3, r3, #3
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	4a84      	ldr	r2, [pc, #528]	; (8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
 8004708:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004722:	4b7b      	ldr	r3, [pc, #492]	; (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004732:	ed97 6a03 	vldr	s12, [r7, #12]
 8004736:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800473a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800473e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800474a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800474e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004752:	e087      	b.n	8004864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800491c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004766:	4b6a      	ldr	r3, [pc, #424]	; (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004776:	ed97 6a03 	vldr	s12, [r7, #12]
 800477a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800477e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800478a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800478e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004796:	e065      	b.n	8004864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004920 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047aa:	4b59      	ldr	r3, [pc, #356]	; (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80047be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047da:	e043      	b.n	8004864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ee:	4b48      	ldr	r3, [pc, #288]	; (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004802:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800480a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800481a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800481e:	e021      	b.n	8004864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004920 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800482e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004832:	4b37      	ldr	r3, [pc, #220]	; (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004842:	ed97 6a03 	vldr	s12, [r7, #12]
 8004846:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800484a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800485a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004862:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004864:	4b2a      	ldr	r3, [pc, #168]	; (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	0a5b      	lsrs	r3, r3, #9
 800486a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004876:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800487a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800487e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800488a:	ee17 2a90 	vmov	r2, s15
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004892:	4b1f      	ldr	r3, [pc, #124]	; (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	0c1b      	lsrs	r3, r3, #16
 8004898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800489c:	ee07 3a90 	vmov	s15, r3
 80048a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80048b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b8:	ee17 2a90 	vmov	r2, s15
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80048c0:	4b13      	ldr	r3, [pc, #76]	; (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	0e1b      	lsrs	r3, r3, #24
 80048c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048da:	edd7 6a07 	vldr	s13, [r7, #28]
 80048de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e6:	ee17 2a90 	vmov	r2, s15
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048ee:	e008      	b.n	8004902 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	609a      	str	r2, [r3, #8]
}
 8004902:	bf00      	nop
 8004904:	3724      	adds	r7, #36	; 0x24
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	58024400 	.word	0x58024400
 8004914:	03d09000 	.word	0x03d09000
 8004918:	46000000 	.word	0x46000000
 800491c:	4c742400 	.word	0x4c742400
 8004920:	4a742400 	.word	0x4a742400
 8004924:	4af42400 	.word	0x4af42400

08004928 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004928:	b480      	push	{r7}
 800492a:	b089      	sub	sp, #36	; 0x24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004930:	4ba1      	ldr	r3, [pc, #644]	; (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800493a:	4b9f      	ldr	r3, [pc, #636]	; (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	0d1b      	lsrs	r3, r3, #20
 8004940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004944:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004946:	4b9c      	ldr	r3, [pc, #624]	; (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	0a1b      	lsrs	r3, r3, #8
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004952:	4b99      	ldr	r3, [pc, #612]	; (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	08db      	lsrs	r3, r3, #3
 8004958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 8111 	beq.w	8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b02      	cmp	r3, #2
 800497a:	f000 8083 	beq.w	8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b02      	cmp	r3, #2
 8004982:	f200 80a1 	bhi.w	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d056      	beq.n	8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004992:	e099      	b.n	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004994:	4b88      	ldr	r3, [pc, #544]	; (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d02d      	beq.n	80049fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049a0:	4b85      	ldr	r3, [pc, #532]	; (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	08db      	lsrs	r3, r3, #3
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	4a84      	ldr	r2, [pc, #528]	; (8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
 80049b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	ee07 3a90 	vmov	s15, r3
 80049b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ca:	4b7b      	ldr	r3, [pc, #492]	; (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049da:	ed97 6a03 	vldr	s12, [r7, #12]
 80049de:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049fa:	e087      	b.n	8004b0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0e:	4b6a      	ldr	r3, [pc, #424]	; (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a22:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a3e:	e065      	b.n	8004b0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a52:	4b59      	ldr	r3, [pc, #356]	; (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a66:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a82:	e043      	b.n	8004b0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a96:	4b48      	ldr	r3, [pc, #288]	; (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aaa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ac6:	e021      	b.n	8004b0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ada:	4b37      	ldr	r3, [pc, #220]	; (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b0c:	4b2a      	ldr	r3, [pc, #168]	; (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	0a5b      	lsrs	r3, r3, #9
 8004b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b26:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b32:	ee17 2a90 	vmov	r2, s15
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b3a:	4b1f      	ldr	r3, [pc, #124]	; (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	0c1b      	lsrs	r3, r3, #16
 8004b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b44:	ee07 3a90 	vmov	s15, r3
 8004b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b54:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b60:	ee17 2a90 	vmov	r2, s15
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b68:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	0e1b      	lsrs	r3, r3, #24
 8004b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b8e:	ee17 2a90 	vmov	r2, s15
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b96:	e008      	b.n	8004baa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	609a      	str	r2, [r3, #8]
}
 8004baa:	bf00      	nop
 8004bac:	3724      	adds	r7, #36	; 0x24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	58024400 	.word	0x58024400
 8004bbc:	03d09000 	.word	0x03d09000
 8004bc0:	46000000 	.word	0x46000000
 8004bc4:	4c742400 	.word	0x4c742400
 8004bc8:	4a742400 	.word	0x4a742400
 8004bcc:	4af42400 	.word	0x4af42400

08004bd0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bde:	4b53      	ldr	r3, [pc, #332]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d101      	bne.n	8004bee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e099      	b.n	8004d22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004bee:	4b4f      	ldr	r3, [pc, #316]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a4e      	ldr	r2, [pc, #312]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004bf4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bfa:	f7fc fa87 	bl	800110c <HAL_GetTick>
 8004bfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c00:	e008      	b.n	8004c14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c02:	f7fc fa83 	bl	800110c <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e086      	b.n	8004d22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c14:	4b45      	ldr	r3, [pc, #276]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f0      	bne.n	8004c02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c20:	4b42      	ldr	r3, [pc, #264]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	031b      	lsls	r3, r3, #12
 8004c2e:	493f      	ldr	r1, [pc, #252]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	628b      	str	r3, [r1, #40]	; 0x28
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	025b      	lsls	r3, r3, #9
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	041b      	lsls	r3, r3, #16
 8004c52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	061b      	lsls	r3, r3, #24
 8004c60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c64:	4931      	ldr	r1, [pc, #196]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c6a:	4b30      	ldr	r3, [pc, #192]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	492d      	ldr	r1, [pc, #180]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c7c:	4b2b      	ldr	r3, [pc, #172]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	f023 0220 	bic.w	r2, r3, #32
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	4928      	ldr	r1, [pc, #160]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c8e:	4b27      	ldr	r3, [pc, #156]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	4a26      	ldr	r2, [pc, #152]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004c94:	f023 0310 	bic.w	r3, r3, #16
 8004c98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c9a:	4b24      	ldr	r3, [pc, #144]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004c9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c9e:	4b24      	ldr	r3, [pc, #144]	; (8004d30 <RCCEx_PLL2_Config+0x160>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	69d2      	ldr	r2, [r2, #28]
 8004ca6:	00d2      	lsls	r2, r2, #3
 8004ca8:	4920      	ldr	r1, [pc, #128]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004cae:	4b1f      	ldr	r3, [pc, #124]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	4a1e      	ldr	r2, [pc, #120]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004cb4:	f043 0310 	orr.w	r3, r3, #16
 8004cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d106      	bne.n	8004cce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004cc0:	4b1a      	ldr	r3, [pc, #104]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	4a19      	ldr	r2, [pc, #100]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004cc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ccc:	e00f      	b.n	8004cee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d106      	bne.n	8004ce2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004cd4:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	4a14      	ldr	r2, [pc, #80]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ce0:	e005      	b.n	8004cee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	4a11      	ldr	r2, [pc, #68]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004ce8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004cee:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a0e      	ldr	r2, [pc, #56]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004cf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cfa:	f7fc fa07 	bl	800110c <HAL_GetTick>
 8004cfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d00:	e008      	b.n	8004d14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d02:	f7fc fa03 	bl	800110c <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e006      	b.n	8004d22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <RCCEx_PLL2_Config+0x15c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	58024400 	.word	0x58024400
 8004d30:	ffff0007 	.word	0xffff0007

08004d34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d42:	4b53      	ldr	r3, [pc, #332]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d101      	bne.n	8004d52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e099      	b.n	8004e86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d52:	4b4f      	ldr	r3, [pc, #316]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a4e      	ldr	r2, [pc, #312]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5e:	f7fc f9d5 	bl	800110c <HAL_GetTick>
 8004d62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d64:	e008      	b.n	8004d78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d66:	f7fc f9d1 	bl	800110c <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e086      	b.n	8004e86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d78:	4b45      	ldr	r3, [pc, #276]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f0      	bne.n	8004d66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d84:	4b42      	ldr	r3, [pc, #264]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	051b      	lsls	r3, r3, #20
 8004d92:	493f      	ldr	r1, [pc, #252]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	628b      	str	r3, [r1, #40]	; 0x28
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	025b      	lsls	r3, r3, #9
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	041b      	lsls	r3, r3, #16
 8004db6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	061b      	lsls	r3, r3, #24
 8004dc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004dc8:	4931      	ldr	r1, [pc, #196]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004dce:	4b30      	ldr	r3, [pc, #192]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	492d      	ldr	r1, [pc, #180]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004de0:	4b2b      	ldr	r3, [pc, #172]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	4928      	ldr	r1, [pc, #160]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004df2:	4b27      	ldr	r3, [pc, #156]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	4a26      	ldr	r2, [pc, #152]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dfe:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e02:	4b24      	ldr	r3, [pc, #144]	; (8004e94 <RCCEx_PLL3_Config+0x160>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	69d2      	ldr	r2, [r2, #28]
 8004e0a:	00d2      	lsls	r2, r2, #3
 8004e0c:	4920      	ldr	r1, [pc, #128]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e12:	4b1f      	ldr	r3, [pc, #124]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	4a1e      	ldr	r2, [pc, #120]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e24:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	4a19      	ldr	r2, [pc, #100]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004e2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e30:	e00f      	b.n	8004e52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d106      	bne.n	8004e46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e38:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	4a14      	ldr	r2, [pc, #80]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004e3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e44:	e005      	b.n	8004e52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e46:	4b12      	ldr	r3, [pc, #72]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	4a11      	ldr	r2, [pc, #68]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004e4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e52:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a0e      	ldr	r2, [pc, #56]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e5e:	f7fc f955 	bl	800110c <HAL_GetTick>
 8004e62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e64:	e008      	b.n	8004e78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e66:	f7fc f951 	bl	800110c <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e006      	b.n	8004e86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <RCCEx_PLL3_Config+0x15c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	58024400 	.word	0x58024400
 8004e94:	ffff0007 	.word	0xffff0007

08004e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e042      	b.n	8004f30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d106      	bne.n	8004ec2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7fb fedd 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2224      	movs	r2, #36	; 0x24
 8004ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0201 	bic.w	r2, r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f82c 	bl	8004f38 <UART_SetConfig>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e022      	b.n	8004f30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fd88 	bl	8005a08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fe0f 	bl	8005b4c <UART_CheckIdleState>
 8004f2e:	4603      	mov	r3, r0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f3c:	b092      	sub	sp, #72	; 0x48
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	431a      	orrs	r2, r3
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	431a      	orrs	r2, r3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4bbe      	ldr	r3, [pc, #760]	; (8005260 <UART_SetConfig+0x328>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f70:	430b      	orrs	r3, r1
 8004f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4ab3      	ldr	r2, [pc, #716]	; (8005264 <UART_SetConfig+0x32c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	4baf      	ldr	r3, [pc, #700]	; (8005268 <UART_SetConfig+0x330>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	f023 010f 	bic.w	r1, r3, #15
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4aa6      	ldr	r2, [pc, #664]	; (800526c <UART_SetConfig+0x334>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d177      	bne.n	80050c8 <UART_SetConfig+0x190>
 8004fd8:	4ba5      	ldr	r3, [pc, #660]	; (8005270 <UART_SetConfig+0x338>)
 8004fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fe0:	2b28      	cmp	r3, #40	; 0x28
 8004fe2:	d86d      	bhi.n	80050c0 <UART_SetConfig+0x188>
 8004fe4:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <UART_SetConfig+0xb4>)
 8004fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fea:	bf00      	nop
 8004fec:	08005091 	.word	0x08005091
 8004ff0:	080050c1 	.word	0x080050c1
 8004ff4:	080050c1 	.word	0x080050c1
 8004ff8:	080050c1 	.word	0x080050c1
 8004ffc:	080050c1 	.word	0x080050c1
 8005000:	080050c1 	.word	0x080050c1
 8005004:	080050c1 	.word	0x080050c1
 8005008:	080050c1 	.word	0x080050c1
 800500c:	08005099 	.word	0x08005099
 8005010:	080050c1 	.word	0x080050c1
 8005014:	080050c1 	.word	0x080050c1
 8005018:	080050c1 	.word	0x080050c1
 800501c:	080050c1 	.word	0x080050c1
 8005020:	080050c1 	.word	0x080050c1
 8005024:	080050c1 	.word	0x080050c1
 8005028:	080050c1 	.word	0x080050c1
 800502c:	080050a1 	.word	0x080050a1
 8005030:	080050c1 	.word	0x080050c1
 8005034:	080050c1 	.word	0x080050c1
 8005038:	080050c1 	.word	0x080050c1
 800503c:	080050c1 	.word	0x080050c1
 8005040:	080050c1 	.word	0x080050c1
 8005044:	080050c1 	.word	0x080050c1
 8005048:	080050c1 	.word	0x080050c1
 800504c:	080050a9 	.word	0x080050a9
 8005050:	080050c1 	.word	0x080050c1
 8005054:	080050c1 	.word	0x080050c1
 8005058:	080050c1 	.word	0x080050c1
 800505c:	080050c1 	.word	0x080050c1
 8005060:	080050c1 	.word	0x080050c1
 8005064:	080050c1 	.word	0x080050c1
 8005068:	080050c1 	.word	0x080050c1
 800506c:	080050b1 	.word	0x080050b1
 8005070:	080050c1 	.word	0x080050c1
 8005074:	080050c1 	.word	0x080050c1
 8005078:	080050c1 	.word	0x080050c1
 800507c:	080050c1 	.word	0x080050c1
 8005080:	080050c1 	.word	0x080050c1
 8005084:	080050c1 	.word	0x080050c1
 8005088:	080050c1 	.word	0x080050c1
 800508c:	080050b9 	.word	0x080050b9
 8005090:	2301      	movs	r3, #1
 8005092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005096:	e222      	b.n	80054de <UART_SetConfig+0x5a6>
 8005098:	2304      	movs	r3, #4
 800509a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509e:	e21e      	b.n	80054de <UART_SetConfig+0x5a6>
 80050a0:	2308      	movs	r3, #8
 80050a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a6:	e21a      	b.n	80054de <UART_SetConfig+0x5a6>
 80050a8:	2310      	movs	r3, #16
 80050aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ae:	e216      	b.n	80054de <UART_SetConfig+0x5a6>
 80050b0:	2320      	movs	r3, #32
 80050b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b6:	e212      	b.n	80054de <UART_SetConfig+0x5a6>
 80050b8:	2340      	movs	r3, #64	; 0x40
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050be:	e20e      	b.n	80054de <UART_SetConfig+0x5a6>
 80050c0:	2380      	movs	r3, #128	; 0x80
 80050c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c6:	e20a      	b.n	80054de <UART_SetConfig+0x5a6>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a69      	ldr	r2, [pc, #420]	; (8005274 <UART_SetConfig+0x33c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d130      	bne.n	8005134 <UART_SetConfig+0x1fc>
 80050d2:	4b67      	ldr	r3, [pc, #412]	; (8005270 <UART_SetConfig+0x338>)
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	2b05      	cmp	r3, #5
 80050dc:	d826      	bhi.n	800512c <UART_SetConfig+0x1f4>
 80050de:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <UART_SetConfig+0x1ac>)
 80050e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e4:	080050fd 	.word	0x080050fd
 80050e8:	08005105 	.word	0x08005105
 80050ec:	0800510d 	.word	0x0800510d
 80050f0:	08005115 	.word	0x08005115
 80050f4:	0800511d 	.word	0x0800511d
 80050f8:	08005125 	.word	0x08005125
 80050fc:	2300      	movs	r3, #0
 80050fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005102:	e1ec      	b.n	80054de <UART_SetConfig+0x5a6>
 8005104:	2304      	movs	r3, #4
 8005106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800510a:	e1e8      	b.n	80054de <UART_SetConfig+0x5a6>
 800510c:	2308      	movs	r3, #8
 800510e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005112:	e1e4      	b.n	80054de <UART_SetConfig+0x5a6>
 8005114:	2310      	movs	r3, #16
 8005116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511a:	e1e0      	b.n	80054de <UART_SetConfig+0x5a6>
 800511c:	2320      	movs	r3, #32
 800511e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005122:	e1dc      	b.n	80054de <UART_SetConfig+0x5a6>
 8005124:	2340      	movs	r3, #64	; 0x40
 8005126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512a:	e1d8      	b.n	80054de <UART_SetConfig+0x5a6>
 800512c:	2380      	movs	r3, #128	; 0x80
 800512e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005132:	e1d4      	b.n	80054de <UART_SetConfig+0x5a6>
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a4f      	ldr	r2, [pc, #316]	; (8005278 <UART_SetConfig+0x340>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d130      	bne.n	80051a0 <UART_SetConfig+0x268>
 800513e:	4b4c      	ldr	r3, [pc, #304]	; (8005270 <UART_SetConfig+0x338>)
 8005140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	2b05      	cmp	r3, #5
 8005148:	d826      	bhi.n	8005198 <UART_SetConfig+0x260>
 800514a:	a201      	add	r2, pc, #4	; (adr r2, 8005150 <UART_SetConfig+0x218>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	08005169 	.word	0x08005169
 8005154:	08005171 	.word	0x08005171
 8005158:	08005179 	.word	0x08005179
 800515c:	08005181 	.word	0x08005181
 8005160:	08005189 	.word	0x08005189
 8005164:	08005191 	.word	0x08005191
 8005168:	2300      	movs	r3, #0
 800516a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516e:	e1b6      	b.n	80054de <UART_SetConfig+0x5a6>
 8005170:	2304      	movs	r3, #4
 8005172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005176:	e1b2      	b.n	80054de <UART_SetConfig+0x5a6>
 8005178:	2308      	movs	r3, #8
 800517a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517e:	e1ae      	b.n	80054de <UART_SetConfig+0x5a6>
 8005180:	2310      	movs	r3, #16
 8005182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005186:	e1aa      	b.n	80054de <UART_SetConfig+0x5a6>
 8005188:	2320      	movs	r3, #32
 800518a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518e:	e1a6      	b.n	80054de <UART_SetConfig+0x5a6>
 8005190:	2340      	movs	r3, #64	; 0x40
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005196:	e1a2      	b.n	80054de <UART_SetConfig+0x5a6>
 8005198:	2380      	movs	r3, #128	; 0x80
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800519e:	e19e      	b.n	80054de <UART_SetConfig+0x5a6>
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a35      	ldr	r2, [pc, #212]	; (800527c <UART_SetConfig+0x344>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d130      	bne.n	800520c <UART_SetConfig+0x2d4>
 80051aa:	4b31      	ldr	r3, [pc, #196]	; (8005270 <UART_SetConfig+0x338>)
 80051ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	2b05      	cmp	r3, #5
 80051b4:	d826      	bhi.n	8005204 <UART_SetConfig+0x2cc>
 80051b6:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <UART_SetConfig+0x284>)
 80051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051bc:	080051d5 	.word	0x080051d5
 80051c0:	080051dd 	.word	0x080051dd
 80051c4:	080051e5 	.word	0x080051e5
 80051c8:	080051ed 	.word	0x080051ed
 80051cc:	080051f5 	.word	0x080051f5
 80051d0:	080051fd 	.word	0x080051fd
 80051d4:	2300      	movs	r3, #0
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051da:	e180      	b.n	80054de <UART_SetConfig+0x5a6>
 80051dc:	2304      	movs	r3, #4
 80051de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e2:	e17c      	b.n	80054de <UART_SetConfig+0x5a6>
 80051e4:	2308      	movs	r3, #8
 80051e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ea:	e178      	b.n	80054de <UART_SetConfig+0x5a6>
 80051ec:	2310      	movs	r3, #16
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f2:	e174      	b.n	80054de <UART_SetConfig+0x5a6>
 80051f4:	2320      	movs	r3, #32
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fa:	e170      	b.n	80054de <UART_SetConfig+0x5a6>
 80051fc:	2340      	movs	r3, #64	; 0x40
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005202:	e16c      	b.n	80054de <UART_SetConfig+0x5a6>
 8005204:	2380      	movs	r3, #128	; 0x80
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520a:	e168      	b.n	80054de <UART_SetConfig+0x5a6>
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1b      	ldr	r2, [pc, #108]	; (8005280 <UART_SetConfig+0x348>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d142      	bne.n	800529c <UART_SetConfig+0x364>
 8005216:	4b16      	ldr	r3, [pc, #88]	; (8005270 <UART_SetConfig+0x338>)
 8005218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	2b05      	cmp	r3, #5
 8005220:	d838      	bhi.n	8005294 <UART_SetConfig+0x35c>
 8005222:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <UART_SetConfig+0x2f0>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	08005241 	.word	0x08005241
 800522c:	08005249 	.word	0x08005249
 8005230:	08005251 	.word	0x08005251
 8005234:	08005259 	.word	0x08005259
 8005238:	08005285 	.word	0x08005285
 800523c:	0800528d 	.word	0x0800528d
 8005240:	2300      	movs	r3, #0
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005246:	e14a      	b.n	80054de <UART_SetConfig+0x5a6>
 8005248:	2304      	movs	r3, #4
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524e:	e146      	b.n	80054de <UART_SetConfig+0x5a6>
 8005250:	2308      	movs	r3, #8
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005256:	e142      	b.n	80054de <UART_SetConfig+0x5a6>
 8005258:	2310      	movs	r3, #16
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525e:	e13e      	b.n	80054de <UART_SetConfig+0x5a6>
 8005260:	cfff69f3 	.word	0xcfff69f3
 8005264:	58000c00 	.word	0x58000c00
 8005268:	11fff4ff 	.word	0x11fff4ff
 800526c:	40011000 	.word	0x40011000
 8005270:	58024400 	.word	0x58024400
 8005274:	40004400 	.word	0x40004400
 8005278:	40004800 	.word	0x40004800
 800527c:	40004c00 	.word	0x40004c00
 8005280:	40005000 	.word	0x40005000
 8005284:	2320      	movs	r3, #32
 8005286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528a:	e128      	b.n	80054de <UART_SetConfig+0x5a6>
 800528c:	2340      	movs	r3, #64	; 0x40
 800528e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005292:	e124      	b.n	80054de <UART_SetConfig+0x5a6>
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529a:	e120      	b.n	80054de <UART_SetConfig+0x5a6>
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4acb      	ldr	r2, [pc, #812]	; (80055d0 <UART_SetConfig+0x698>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d176      	bne.n	8005394 <UART_SetConfig+0x45c>
 80052a6:	4bcb      	ldr	r3, [pc, #812]	; (80055d4 <UART_SetConfig+0x69c>)
 80052a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052ae:	2b28      	cmp	r3, #40	; 0x28
 80052b0:	d86c      	bhi.n	800538c <UART_SetConfig+0x454>
 80052b2:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <UART_SetConfig+0x380>)
 80052b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b8:	0800535d 	.word	0x0800535d
 80052bc:	0800538d 	.word	0x0800538d
 80052c0:	0800538d 	.word	0x0800538d
 80052c4:	0800538d 	.word	0x0800538d
 80052c8:	0800538d 	.word	0x0800538d
 80052cc:	0800538d 	.word	0x0800538d
 80052d0:	0800538d 	.word	0x0800538d
 80052d4:	0800538d 	.word	0x0800538d
 80052d8:	08005365 	.word	0x08005365
 80052dc:	0800538d 	.word	0x0800538d
 80052e0:	0800538d 	.word	0x0800538d
 80052e4:	0800538d 	.word	0x0800538d
 80052e8:	0800538d 	.word	0x0800538d
 80052ec:	0800538d 	.word	0x0800538d
 80052f0:	0800538d 	.word	0x0800538d
 80052f4:	0800538d 	.word	0x0800538d
 80052f8:	0800536d 	.word	0x0800536d
 80052fc:	0800538d 	.word	0x0800538d
 8005300:	0800538d 	.word	0x0800538d
 8005304:	0800538d 	.word	0x0800538d
 8005308:	0800538d 	.word	0x0800538d
 800530c:	0800538d 	.word	0x0800538d
 8005310:	0800538d 	.word	0x0800538d
 8005314:	0800538d 	.word	0x0800538d
 8005318:	08005375 	.word	0x08005375
 800531c:	0800538d 	.word	0x0800538d
 8005320:	0800538d 	.word	0x0800538d
 8005324:	0800538d 	.word	0x0800538d
 8005328:	0800538d 	.word	0x0800538d
 800532c:	0800538d 	.word	0x0800538d
 8005330:	0800538d 	.word	0x0800538d
 8005334:	0800538d 	.word	0x0800538d
 8005338:	0800537d 	.word	0x0800537d
 800533c:	0800538d 	.word	0x0800538d
 8005340:	0800538d 	.word	0x0800538d
 8005344:	0800538d 	.word	0x0800538d
 8005348:	0800538d 	.word	0x0800538d
 800534c:	0800538d 	.word	0x0800538d
 8005350:	0800538d 	.word	0x0800538d
 8005354:	0800538d 	.word	0x0800538d
 8005358:	08005385 	.word	0x08005385
 800535c:	2301      	movs	r3, #1
 800535e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005362:	e0bc      	b.n	80054de <UART_SetConfig+0x5a6>
 8005364:	2304      	movs	r3, #4
 8005366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536a:	e0b8      	b.n	80054de <UART_SetConfig+0x5a6>
 800536c:	2308      	movs	r3, #8
 800536e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005372:	e0b4      	b.n	80054de <UART_SetConfig+0x5a6>
 8005374:	2310      	movs	r3, #16
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537a:	e0b0      	b.n	80054de <UART_SetConfig+0x5a6>
 800537c:	2320      	movs	r3, #32
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005382:	e0ac      	b.n	80054de <UART_SetConfig+0x5a6>
 8005384:	2340      	movs	r3, #64	; 0x40
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538a:	e0a8      	b.n	80054de <UART_SetConfig+0x5a6>
 800538c:	2380      	movs	r3, #128	; 0x80
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005392:	e0a4      	b.n	80054de <UART_SetConfig+0x5a6>
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a8f      	ldr	r2, [pc, #572]	; (80055d8 <UART_SetConfig+0x6a0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d130      	bne.n	8005400 <UART_SetConfig+0x4c8>
 800539e:	4b8d      	ldr	r3, [pc, #564]	; (80055d4 <UART_SetConfig+0x69c>)
 80053a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	2b05      	cmp	r3, #5
 80053a8:	d826      	bhi.n	80053f8 <UART_SetConfig+0x4c0>
 80053aa:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <UART_SetConfig+0x478>)
 80053ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b0:	080053c9 	.word	0x080053c9
 80053b4:	080053d1 	.word	0x080053d1
 80053b8:	080053d9 	.word	0x080053d9
 80053bc:	080053e1 	.word	0x080053e1
 80053c0:	080053e9 	.word	0x080053e9
 80053c4:	080053f1 	.word	0x080053f1
 80053c8:	2300      	movs	r3, #0
 80053ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ce:	e086      	b.n	80054de <UART_SetConfig+0x5a6>
 80053d0:	2304      	movs	r3, #4
 80053d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d6:	e082      	b.n	80054de <UART_SetConfig+0x5a6>
 80053d8:	2308      	movs	r3, #8
 80053da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053de:	e07e      	b.n	80054de <UART_SetConfig+0x5a6>
 80053e0:	2310      	movs	r3, #16
 80053e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e6:	e07a      	b.n	80054de <UART_SetConfig+0x5a6>
 80053e8:	2320      	movs	r3, #32
 80053ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ee:	e076      	b.n	80054de <UART_SetConfig+0x5a6>
 80053f0:	2340      	movs	r3, #64	; 0x40
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f6:	e072      	b.n	80054de <UART_SetConfig+0x5a6>
 80053f8:	2380      	movs	r3, #128	; 0x80
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fe:	e06e      	b.n	80054de <UART_SetConfig+0x5a6>
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a75      	ldr	r2, [pc, #468]	; (80055dc <UART_SetConfig+0x6a4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d130      	bne.n	800546c <UART_SetConfig+0x534>
 800540a:	4b72      	ldr	r3, [pc, #456]	; (80055d4 <UART_SetConfig+0x69c>)
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	2b05      	cmp	r3, #5
 8005414:	d826      	bhi.n	8005464 <UART_SetConfig+0x52c>
 8005416:	a201      	add	r2, pc, #4	; (adr r2, 800541c <UART_SetConfig+0x4e4>)
 8005418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541c:	08005435 	.word	0x08005435
 8005420:	0800543d 	.word	0x0800543d
 8005424:	08005445 	.word	0x08005445
 8005428:	0800544d 	.word	0x0800544d
 800542c:	08005455 	.word	0x08005455
 8005430:	0800545d 	.word	0x0800545d
 8005434:	2300      	movs	r3, #0
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543a:	e050      	b.n	80054de <UART_SetConfig+0x5a6>
 800543c:	2304      	movs	r3, #4
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005442:	e04c      	b.n	80054de <UART_SetConfig+0x5a6>
 8005444:	2308      	movs	r3, #8
 8005446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544a:	e048      	b.n	80054de <UART_SetConfig+0x5a6>
 800544c:	2310      	movs	r3, #16
 800544e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005452:	e044      	b.n	80054de <UART_SetConfig+0x5a6>
 8005454:	2320      	movs	r3, #32
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545a:	e040      	b.n	80054de <UART_SetConfig+0x5a6>
 800545c:	2340      	movs	r3, #64	; 0x40
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005462:	e03c      	b.n	80054de <UART_SetConfig+0x5a6>
 8005464:	2380      	movs	r3, #128	; 0x80
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546a:	e038      	b.n	80054de <UART_SetConfig+0x5a6>
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a5b      	ldr	r2, [pc, #364]	; (80055e0 <UART_SetConfig+0x6a8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d130      	bne.n	80054d8 <UART_SetConfig+0x5a0>
 8005476:	4b57      	ldr	r3, [pc, #348]	; (80055d4 <UART_SetConfig+0x69c>)
 8005478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	2b05      	cmp	r3, #5
 8005480:	d826      	bhi.n	80054d0 <UART_SetConfig+0x598>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <UART_SetConfig+0x550>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	080054a1 	.word	0x080054a1
 800548c:	080054a9 	.word	0x080054a9
 8005490:	080054b1 	.word	0x080054b1
 8005494:	080054b9 	.word	0x080054b9
 8005498:	080054c1 	.word	0x080054c1
 800549c:	080054c9 	.word	0x080054c9
 80054a0:	2302      	movs	r3, #2
 80054a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a6:	e01a      	b.n	80054de <UART_SetConfig+0x5a6>
 80054a8:	2304      	movs	r3, #4
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ae:	e016      	b.n	80054de <UART_SetConfig+0x5a6>
 80054b0:	2308      	movs	r3, #8
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b6:	e012      	b.n	80054de <UART_SetConfig+0x5a6>
 80054b8:	2310      	movs	r3, #16
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054be:	e00e      	b.n	80054de <UART_SetConfig+0x5a6>
 80054c0:	2320      	movs	r3, #32
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c6:	e00a      	b.n	80054de <UART_SetConfig+0x5a6>
 80054c8:	2340      	movs	r3, #64	; 0x40
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ce:	e006      	b.n	80054de <UART_SetConfig+0x5a6>
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d6:	e002      	b.n	80054de <UART_SetConfig+0x5a6>
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a3f      	ldr	r2, [pc, #252]	; (80055e0 <UART_SetConfig+0x6a8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	f040 80f8 	bne.w	80056da <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	dc46      	bgt.n	8005580 <UART_SetConfig+0x648>
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	f2c0 8082 	blt.w	80055fc <UART_SetConfig+0x6c4>
 80054f8:	3b02      	subs	r3, #2
 80054fa:	2b1e      	cmp	r3, #30
 80054fc:	d87e      	bhi.n	80055fc <UART_SetConfig+0x6c4>
 80054fe:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <UART_SetConfig+0x5cc>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	08005587 	.word	0x08005587
 8005508:	080055fd 	.word	0x080055fd
 800550c:	0800558f 	.word	0x0800558f
 8005510:	080055fd 	.word	0x080055fd
 8005514:	080055fd 	.word	0x080055fd
 8005518:	080055fd 	.word	0x080055fd
 800551c:	0800559f 	.word	0x0800559f
 8005520:	080055fd 	.word	0x080055fd
 8005524:	080055fd 	.word	0x080055fd
 8005528:	080055fd 	.word	0x080055fd
 800552c:	080055fd 	.word	0x080055fd
 8005530:	080055fd 	.word	0x080055fd
 8005534:	080055fd 	.word	0x080055fd
 8005538:	080055fd 	.word	0x080055fd
 800553c:	080055af 	.word	0x080055af
 8005540:	080055fd 	.word	0x080055fd
 8005544:	080055fd 	.word	0x080055fd
 8005548:	080055fd 	.word	0x080055fd
 800554c:	080055fd 	.word	0x080055fd
 8005550:	080055fd 	.word	0x080055fd
 8005554:	080055fd 	.word	0x080055fd
 8005558:	080055fd 	.word	0x080055fd
 800555c:	080055fd 	.word	0x080055fd
 8005560:	080055fd 	.word	0x080055fd
 8005564:	080055fd 	.word	0x080055fd
 8005568:	080055fd 	.word	0x080055fd
 800556c:	080055fd 	.word	0x080055fd
 8005570:	080055fd 	.word	0x080055fd
 8005574:	080055fd 	.word	0x080055fd
 8005578:	080055fd 	.word	0x080055fd
 800557c:	080055ef 	.word	0x080055ef
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	d037      	beq.n	80055f4 <UART_SetConfig+0x6bc>
 8005584:	e03a      	b.n	80055fc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005586:	f7ff f865 	bl	8004654 <HAL_RCCEx_GetD3PCLK1Freq>
 800558a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800558c:	e03c      	b.n	8005608 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800558e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff f874 	bl	8004680 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800559c:	e034      	b.n	8005608 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800559e:	f107 0318 	add.w	r3, r7, #24
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff f9c0 	bl	8004928 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055ac:	e02c      	b.n	8005608 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055ae:	4b09      	ldr	r3, [pc, #36]	; (80055d4 <UART_SetConfig+0x69c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0320 	and.w	r3, r3, #32
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d016      	beq.n	80055e8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055ba:	4b06      	ldr	r3, [pc, #24]	; (80055d4 <UART_SetConfig+0x69c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	08db      	lsrs	r3, r3, #3
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	4a07      	ldr	r2, [pc, #28]	; (80055e4 <UART_SetConfig+0x6ac>)
 80055c6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055cc:	e01c      	b.n	8005608 <UART_SetConfig+0x6d0>
 80055ce:	bf00      	nop
 80055d0:	40011400 	.word	0x40011400
 80055d4:	58024400 	.word	0x58024400
 80055d8:	40007800 	.word	0x40007800
 80055dc:	40007c00 	.word	0x40007c00
 80055e0:	58000c00 	.word	0x58000c00
 80055e4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80055e8:	4b9d      	ldr	r3, [pc, #628]	; (8005860 <UART_SetConfig+0x928>)
 80055ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055ec:	e00c      	b.n	8005608 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80055ee:	4b9d      	ldr	r3, [pc, #628]	; (8005864 <UART_SetConfig+0x92c>)
 80055f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055f2:	e009      	b.n	8005608 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055fa:	e005      	b.n	8005608 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005606:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 81de 	beq.w	80059cc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	4a94      	ldr	r2, [pc, #592]	; (8005868 <UART_SetConfig+0x930>)
 8005616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800561a:	461a      	mov	r2, r3
 800561c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005622:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	4613      	mov	r3, r2
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	4413      	add	r3, r2
 800562e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005630:	429a      	cmp	r2, r3
 8005632:	d305      	bcc.n	8005640 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800563a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563c:	429a      	cmp	r2, r3
 800563e:	d903      	bls.n	8005648 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005646:	e1c1      	b.n	80059cc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564a:	2200      	movs	r2, #0
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	60fa      	str	r2, [r7, #12]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	4a84      	ldr	r2, [pc, #528]	; (8005868 <UART_SetConfig+0x930>)
 8005656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800565a:	b29b      	uxth	r3, r3
 800565c:	2200      	movs	r2, #0
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	607a      	str	r2, [r7, #4]
 8005662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005666:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800566a:	f7fa fe35 	bl	80002d8 <__aeabi_uldivmod>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4610      	mov	r0, r2
 8005674:	4619      	mov	r1, r3
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	020b      	lsls	r3, r1, #8
 8005680:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005684:	0202      	lsls	r2, r0, #8
 8005686:	6979      	ldr	r1, [r7, #20]
 8005688:	6849      	ldr	r1, [r1, #4]
 800568a:	0849      	lsrs	r1, r1, #1
 800568c:	2000      	movs	r0, #0
 800568e:	460c      	mov	r4, r1
 8005690:	4605      	mov	r5, r0
 8005692:	eb12 0804 	adds.w	r8, r2, r4
 8005696:	eb43 0905 	adc.w	r9, r3, r5
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	469a      	mov	sl, r3
 80056a2:	4693      	mov	fp, r2
 80056a4:	4652      	mov	r2, sl
 80056a6:	465b      	mov	r3, fp
 80056a8:	4640      	mov	r0, r8
 80056aa:	4649      	mov	r1, r9
 80056ac:	f7fa fe14 	bl	80002d8 <__aeabi_uldivmod>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4613      	mov	r3, r2
 80056b6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056be:	d308      	bcc.n	80056d2 <UART_SetConfig+0x79a>
 80056c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056c6:	d204      	bcs.n	80056d2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056ce:	60da      	str	r2, [r3, #12]
 80056d0:	e17c      	b.n	80059cc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80056d8:	e178      	b.n	80059cc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e2:	f040 80c5 	bne.w	8005870 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80056e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	dc48      	bgt.n	8005780 <UART_SetConfig+0x848>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	db7b      	blt.n	80057ea <UART_SetConfig+0x8b2>
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	d879      	bhi.n	80057ea <UART_SetConfig+0x8b2>
 80056f6:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <UART_SetConfig+0x7c4>)
 80056f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fc:	08005787 	.word	0x08005787
 8005700:	0800578f 	.word	0x0800578f
 8005704:	080057eb 	.word	0x080057eb
 8005708:	080057eb 	.word	0x080057eb
 800570c:	08005797 	.word	0x08005797
 8005710:	080057eb 	.word	0x080057eb
 8005714:	080057eb 	.word	0x080057eb
 8005718:	080057eb 	.word	0x080057eb
 800571c:	080057a7 	.word	0x080057a7
 8005720:	080057eb 	.word	0x080057eb
 8005724:	080057eb 	.word	0x080057eb
 8005728:	080057eb 	.word	0x080057eb
 800572c:	080057eb 	.word	0x080057eb
 8005730:	080057eb 	.word	0x080057eb
 8005734:	080057eb 	.word	0x080057eb
 8005738:	080057eb 	.word	0x080057eb
 800573c:	080057b7 	.word	0x080057b7
 8005740:	080057eb 	.word	0x080057eb
 8005744:	080057eb 	.word	0x080057eb
 8005748:	080057eb 	.word	0x080057eb
 800574c:	080057eb 	.word	0x080057eb
 8005750:	080057eb 	.word	0x080057eb
 8005754:	080057eb 	.word	0x080057eb
 8005758:	080057eb 	.word	0x080057eb
 800575c:	080057eb 	.word	0x080057eb
 8005760:	080057eb 	.word	0x080057eb
 8005764:	080057eb 	.word	0x080057eb
 8005768:	080057eb 	.word	0x080057eb
 800576c:	080057eb 	.word	0x080057eb
 8005770:	080057eb 	.word	0x080057eb
 8005774:	080057eb 	.word	0x080057eb
 8005778:	080057eb 	.word	0x080057eb
 800577c:	080057dd 	.word	0x080057dd
 8005780:	2b40      	cmp	r3, #64	; 0x40
 8005782:	d02e      	beq.n	80057e2 <UART_SetConfig+0x8aa>
 8005784:	e031      	b.n	80057ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005786:	f7fd fd2f 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 800578a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800578c:	e033      	b.n	80057f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800578e:	f7fd fd41 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 8005792:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005794:	e02f      	b.n	80057f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800579a:	4618      	mov	r0, r3
 800579c:	f7fe ff70 	bl	8004680 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057a4:	e027      	b.n	80057f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057a6:	f107 0318 	add.w	r3, r7, #24
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff f8bc 	bl	8004928 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057b4:	e01f      	b.n	80057f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057b6:	4b2d      	ldr	r3, [pc, #180]	; (800586c <UART_SetConfig+0x934>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057c2:	4b2a      	ldr	r3, [pc, #168]	; (800586c <UART_SetConfig+0x934>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	08db      	lsrs	r3, r3, #3
 80057c8:	f003 0303 	and.w	r3, r3, #3
 80057cc:	4a24      	ldr	r2, [pc, #144]	; (8005860 <UART_SetConfig+0x928>)
 80057ce:	fa22 f303 	lsr.w	r3, r2, r3
 80057d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057d4:	e00f      	b.n	80057f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80057d6:	4b22      	ldr	r3, [pc, #136]	; (8005860 <UART_SetConfig+0x928>)
 80057d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057da:	e00c      	b.n	80057f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057dc:	4b21      	ldr	r3, [pc, #132]	; (8005864 <UART_SetConfig+0x92c>)
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057e0:	e009      	b.n	80057f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057e8:	e005      	b.n	80057f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80057f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 80e7 	beq.w	80059cc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	4a19      	ldr	r2, [pc, #100]	; (8005868 <UART_SetConfig+0x930>)
 8005804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005808:	461a      	mov	r2, r3
 800580a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005810:	005a      	lsls	r2, r3, #1
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	085b      	lsrs	r3, r3, #1
 8005818:	441a      	add	r2, r3
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005822:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	2b0f      	cmp	r3, #15
 8005828:	d916      	bls.n	8005858 <UART_SetConfig+0x920>
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005830:	d212      	bcs.n	8005858 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005834:	b29b      	uxth	r3, r3
 8005836:	f023 030f 	bic.w	r3, r3, #15
 800583a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583e:	085b      	lsrs	r3, r3, #1
 8005840:	b29b      	uxth	r3, r3
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	b29a      	uxth	r2, r3
 8005848:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800584a:	4313      	orrs	r3, r2
 800584c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005854:	60da      	str	r2, [r3, #12]
 8005856:	e0b9      	b.n	80059cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800585e:	e0b5      	b.n	80059cc <UART_SetConfig+0xa94>
 8005860:	03d09000 	.word	0x03d09000
 8005864:	003d0900 	.word	0x003d0900
 8005868:	080066d8 	.word	0x080066d8
 800586c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005870:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005874:	2b20      	cmp	r3, #32
 8005876:	dc49      	bgt.n	800590c <UART_SetConfig+0x9d4>
 8005878:	2b00      	cmp	r3, #0
 800587a:	db7c      	blt.n	8005976 <UART_SetConfig+0xa3e>
 800587c:	2b20      	cmp	r3, #32
 800587e:	d87a      	bhi.n	8005976 <UART_SetConfig+0xa3e>
 8005880:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <UART_SetConfig+0x950>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	08005913 	.word	0x08005913
 800588c:	0800591b 	.word	0x0800591b
 8005890:	08005977 	.word	0x08005977
 8005894:	08005977 	.word	0x08005977
 8005898:	08005923 	.word	0x08005923
 800589c:	08005977 	.word	0x08005977
 80058a0:	08005977 	.word	0x08005977
 80058a4:	08005977 	.word	0x08005977
 80058a8:	08005933 	.word	0x08005933
 80058ac:	08005977 	.word	0x08005977
 80058b0:	08005977 	.word	0x08005977
 80058b4:	08005977 	.word	0x08005977
 80058b8:	08005977 	.word	0x08005977
 80058bc:	08005977 	.word	0x08005977
 80058c0:	08005977 	.word	0x08005977
 80058c4:	08005977 	.word	0x08005977
 80058c8:	08005943 	.word	0x08005943
 80058cc:	08005977 	.word	0x08005977
 80058d0:	08005977 	.word	0x08005977
 80058d4:	08005977 	.word	0x08005977
 80058d8:	08005977 	.word	0x08005977
 80058dc:	08005977 	.word	0x08005977
 80058e0:	08005977 	.word	0x08005977
 80058e4:	08005977 	.word	0x08005977
 80058e8:	08005977 	.word	0x08005977
 80058ec:	08005977 	.word	0x08005977
 80058f0:	08005977 	.word	0x08005977
 80058f4:	08005977 	.word	0x08005977
 80058f8:	08005977 	.word	0x08005977
 80058fc:	08005977 	.word	0x08005977
 8005900:	08005977 	.word	0x08005977
 8005904:	08005977 	.word	0x08005977
 8005908:	08005969 	.word	0x08005969
 800590c:	2b40      	cmp	r3, #64	; 0x40
 800590e:	d02e      	beq.n	800596e <UART_SetConfig+0xa36>
 8005910:	e031      	b.n	8005976 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005912:	f7fd fc69 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8005916:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005918:	e033      	b.n	8005982 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800591a:	f7fd fc7b 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 800591e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005920:	e02f      	b.n	8005982 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005926:	4618      	mov	r0, r3
 8005928:	f7fe feaa 	bl	8004680 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005930:	e027      	b.n	8005982 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005932:	f107 0318 	add.w	r3, r7, #24
 8005936:	4618      	mov	r0, r3
 8005938:	f7fe fff6 	bl	8004928 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005940:	e01f      	b.n	8005982 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005942:	4b2d      	ldr	r3, [pc, #180]	; (80059f8 <UART_SetConfig+0xac0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800594e:	4b2a      	ldr	r3, [pc, #168]	; (80059f8 <UART_SetConfig+0xac0>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	08db      	lsrs	r3, r3, #3
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	4a28      	ldr	r2, [pc, #160]	; (80059fc <UART_SetConfig+0xac4>)
 800595a:	fa22 f303 	lsr.w	r3, r2, r3
 800595e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005960:	e00f      	b.n	8005982 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005962:	4b26      	ldr	r3, [pc, #152]	; (80059fc <UART_SetConfig+0xac4>)
 8005964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005966:	e00c      	b.n	8005982 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005968:	4b25      	ldr	r3, [pc, #148]	; (8005a00 <UART_SetConfig+0xac8>)
 800596a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800596c:	e009      	b.n	8005982 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800596e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005974:	e005      	b.n	8005982 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005980:	bf00      	nop
    }

    if (pclk != 0U)
 8005982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005984:	2b00      	cmp	r3, #0
 8005986:	d021      	beq.n	80059cc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	4a1d      	ldr	r2, [pc, #116]	; (8005a04 <UART_SetConfig+0xacc>)
 800598e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005992:	461a      	mov	r2, r3
 8005994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005996:	fbb3 f2f2 	udiv	r2, r3, r2
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	441a      	add	r2, r3
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	2b0f      	cmp	r3, #15
 80059b0:	d909      	bls.n	80059c6 <UART_SetConfig+0xa8e>
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b8:	d205      	bcs.n	80059c6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	b29a      	uxth	r2, r3
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60da      	str	r2, [r3, #12]
 80059c4:	e002      	b.n	80059cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2200      	movs	r2, #0
 80059e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2200      	movs	r2, #0
 80059e6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80059e8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3748      	adds	r7, #72	; 0x48
 80059f0:	46bd      	mov	sp, r7
 80059f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059f6:	bf00      	nop
 80059f8:	58024400 	.word	0x58024400
 80059fc:	03d09000 	.word	0x03d09000
 8005a00:	003d0900 	.word	0x003d0900
 8005a04:	080066d8 	.word	0x080066d8

08005a08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9c:	f003 0310 	and.w	r3, r3, #16
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00a      	beq.n	8005aba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abe:	f003 0320 	and.w	r3, r3, #32
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01a      	beq.n	8005b1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b06:	d10a      	bne.n	8005b1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	605a      	str	r2, [r3, #4]
  }
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b098      	sub	sp, #96	; 0x60
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b5c:	f7fb fad6 	bl	800110c <HAL_GetTick>
 8005b60:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d12f      	bne.n	8005bd0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f88e 	bl	8005ca0 <UART_WaitOnFlagUntilTimeout>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d022      	beq.n	8005bd0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b9e:	653b      	str	r3, [r7, #80]	; 0x50
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8005baa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e6      	bne.n	8005b8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e063      	b.n	8005c98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d149      	bne.n	8005c72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bde:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be6:	2200      	movs	r2, #0
 8005be8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f857 	bl	8005ca0 <UART_WaitOnFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d03c      	beq.n	8005c72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	623b      	str	r3, [r7, #32]
   return(result);
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c16:	633b      	str	r3, [r7, #48]	; 0x30
 8005c18:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e6      	bne.n	8005bf8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3308      	adds	r3, #8
 8005c30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
 8005c40:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3308      	adds	r3, #8
 8005c48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c4a:	61fa      	str	r2, [r7, #28]
 8005c4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	69b9      	ldr	r1, [r7, #24]
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	617b      	str	r3, [r7, #20]
   return(result);
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1e5      	bne.n	8005c2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e012      	b.n	8005c98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3758      	adds	r7, #88	; 0x58
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	4613      	mov	r3, r2
 8005cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb0:	e049      	b.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb8:	d045      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cba:	f7fb fa27 	bl	800110c <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d302      	bcc.n	8005cd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e048      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0304 	and.w	r3, r3, #4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d031      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d110      	bne.n	8005d12 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f839 	bl	8005d70 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2208      	movs	r2, #8
 8005d02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e029      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d20:	d111      	bne.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f81f 	bl	8005d70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e00f      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69da      	ldr	r2, [r3, #28]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	bf0c      	ite	eq
 8005d56:	2301      	moveq	r3, #1
 8005d58:	2300      	movne	r3, #0
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d0a6      	beq.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b095      	sub	sp, #84	; 0x54
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d96:	643b      	str	r3, [r7, #64]	; 0x40
 8005d98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e6      	bne.n	8005d78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3308      	adds	r3, #8
 8005db0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	4b1e      	ldr	r3, [pc, #120]	; (8005e38 <UART_EndRxTransfer+0xc8>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3308      	adds	r3, #8
 8005dc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e5      	bne.n	8005daa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d118      	bne.n	8005e18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f023 0310 	bic.w	r3, r3, #16
 8005dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e04:	61bb      	str	r3, [r7, #24]
 8005e06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e08:	6979      	ldr	r1, [r7, #20]
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	e841 2300 	strex	r3, r2, [r1]
 8005e10:	613b      	str	r3, [r7, #16]
   return(result);
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e6      	bne.n	8005de6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005e2c:	bf00      	nop
 8005e2e:	3754      	adds	r7, #84	; 0x54
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	effffffe 	.word	0xeffffffe

08005e3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e027      	b.n	8005ea2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2224      	movs	r2, #36	; 0x24
 8005e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0201 	bic.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e02d      	b.n	8005f22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2224      	movs	r2, #36	; 0x24
 8005ed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0201 	bic.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f850 	bl	8005fa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e02d      	b.n	8005f9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2224      	movs	r2, #36	; 0x24
 8005f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0201 	bic.w	r2, r2, #1
 8005f68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f812 	bl	8005fa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d108      	bne.n	8005fca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fc8:	e031      	b.n	800602e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fca:	2310      	movs	r3, #16
 8005fcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fce:	2310      	movs	r3, #16
 8005fd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	0e5b      	lsrs	r3, r3, #25
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	0f5b      	lsrs	r3, r3, #29
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ff2:	7bbb      	ldrb	r3, [r7, #14]
 8005ff4:	7b3a      	ldrb	r2, [r7, #12]
 8005ff6:	4911      	ldr	r1, [pc, #68]	; (800603c <UARTEx_SetNbDataToProcess+0x94>)
 8005ff8:	5c8a      	ldrb	r2, [r1, r2]
 8005ffa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ffe:	7b3a      	ldrb	r2, [r7, #12]
 8006000:	490f      	ldr	r1, [pc, #60]	; (8006040 <UARTEx_SetNbDataToProcess+0x98>)
 8006002:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006004:	fb93 f3f2 	sdiv	r3, r3, r2
 8006008:	b29a      	uxth	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	7b7a      	ldrb	r2, [r7, #13]
 8006014:	4909      	ldr	r1, [pc, #36]	; (800603c <UARTEx_SetNbDataToProcess+0x94>)
 8006016:	5c8a      	ldrb	r2, [r1, r2]
 8006018:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800601c:	7b7a      	ldrb	r2, [r7, #13]
 800601e:	4908      	ldr	r1, [pc, #32]	; (8006040 <UARTEx_SetNbDataToProcess+0x98>)
 8006020:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006022:	fb93 f3f2 	sdiv	r3, r3, r2
 8006026:	b29a      	uxth	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	080066f0 	.word	0x080066f0
 8006040:	080066f8 	.word	0x080066f8

08006044 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006044:	b084      	sub	sp, #16
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	f107 001c 	add.w	r0, r7, #28
 8006052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	2b01      	cmp	r3, #1
 800605a:	d120      	bne.n	800609e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68da      	ldr	r2, [r3, #12]
 800606c:	4b2a      	ldr	r3, [pc, #168]	; (8006118 <USB_CoreInit+0xd4>)
 800606e:	4013      	ands	r3, r2
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006082:	2b01      	cmp	r3, #1
 8006084:	d105      	bne.n	8006092 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 faac 	bl	80065f0 <USB_CoreReset>
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]
 800609c:	e01a      	b.n	80060d4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 faa0 	bl	80065f0 <USB_CoreReset>
 80060b0:	4603      	mov	r3, r0
 80060b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d106      	bne.n	80060c8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	639a      	str	r2, [r3, #56]	; 0x38
 80060c6:	e005      	b.n	80060d4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d116      	bne.n	8006108 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060de:	b29a      	uxth	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060e8:	4b0c      	ldr	r3, [pc, #48]	; (800611c <USB_CoreInit+0xd8>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f043 0206 	orr.w	r2, r3, #6
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f043 0220 	orr.w	r2, r3, #32
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006108:	7bfb      	ldrb	r3, [r7, #15]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006114:	b004      	add	sp, #16
 8006116:	4770      	bx	lr
 8006118:	ffbdffbf 	.word	0xffbdffbf
 800611c:	03ee0000 	.word	0x03ee0000

08006120 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f023 0201 	bic.w	r2, r3, #1
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d115      	bne.n	8006190 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006170:	2001      	movs	r0, #1
 8006172:	f7fa ffd7 	bl	8001124 <HAL_Delay>
      ms++;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3301      	adds	r3, #1
 800617a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fa29 	bl	80065d4 <USB_GetMode>
 8006182:	4603      	mov	r3, r0
 8006184:	2b01      	cmp	r3, #1
 8006186:	d01e      	beq.n	80061c6 <USB_SetCurrentMode+0x84>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b31      	cmp	r3, #49	; 0x31
 800618c:	d9f0      	bls.n	8006170 <USB_SetCurrentMode+0x2e>
 800618e:	e01a      	b.n	80061c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d115      	bne.n	80061c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061a2:	2001      	movs	r0, #1
 80061a4:	f7fa ffbe 	bl	8001124 <HAL_Delay>
      ms++;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3301      	adds	r3, #1
 80061ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fa10 	bl	80065d4 <USB_GetMode>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <USB_SetCurrentMode+0x84>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b31      	cmp	r3, #49	; 0x31
 80061be:	d9f0      	bls.n	80061a2 <USB_SetCurrentMode+0x60>
 80061c0:	e001      	b.n	80061c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e005      	b.n	80061d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b32      	cmp	r3, #50	; 0x32
 80061ca:	d101      	bne.n	80061d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061dc:	b084      	sub	sp, #16
 80061de:	b580      	push	{r7, lr}
 80061e0:	b086      	sub	sp, #24
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061f6:	2300      	movs	r3, #0
 80061f8:	613b      	str	r3, [r7, #16]
 80061fa:	e009      	b.n	8006210 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	3340      	adds	r3, #64	; 0x40
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	2200      	movs	r2, #0
 8006208:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	3301      	adds	r3, #1
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b0e      	cmp	r3, #14
 8006214:	d9f2      	bls.n	80061fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006218:	2b00      	cmp	r3, #0
 800621a:	d11c      	bne.n	8006256 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800622a:	f043 0302 	orr.w	r3, r3, #2
 800622e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	e005      	b.n	8006262 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006268:	461a      	mov	r2, r3
 800626a:	2300      	movs	r3, #0
 800626c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006274:	4619      	mov	r1, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627c:	461a      	mov	r2, r3
 800627e:	680b      	ldr	r3, [r1, #0]
 8006280:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006284:	2b01      	cmp	r3, #1
 8006286:	d10c      	bne.n	80062a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	2b00      	cmp	r3, #0
 800628c:	d104      	bne.n	8006298 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800628e:	2100      	movs	r1, #0
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f965 	bl	8006560 <USB_SetDevSpeed>
 8006296:	e008      	b.n	80062aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006298:	2101      	movs	r1, #1
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f960 	bl	8006560 <USB_SetDevSpeed>
 80062a0:	e003      	b.n	80062aa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062a2:	2103      	movs	r1, #3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f95b 	bl	8006560 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062aa:	2110      	movs	r1, #16
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f8f3 	bl	8006498 <USB_FlushTxFifo>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f91f 	bl	8006500 <USB_FlushRxFifo>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d2:	461a      	mov	r2, r3
 80062d4:	2300      	movs	r3, #0
 80062d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062de:	461a      	mov	r2, r3
 80062e0:	2300      	movs	r3, #0
 80062e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ea:	461a      	mov	r2, r3
 80062ec:	2300      	movs	r3, #0
 80062ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062f0:	2300      	movs	r3, #0
 80062f2:	613b      	str	r3, [r7, #16]
 80062f4:	e043      	b.n	800637e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800630c:	d118      	bne.n	8006340 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10a      	bne.n	800632a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006320:	461a      	mov	r2, r3
 8006322:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	e013      	b.n	8006352 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006336:	461a      	mov	r2, r3
 8006338:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	e008      	b.n	8006352 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634c:	461a      	mov	r2, r3
 800634e:	2300      	movs	r3, #0
 8006350:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635e:	461a      	mov	r2, r3
 8006360:	2300      	movs	r3, #0
 8006362:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	461a      	mov	r2, r3
 8006372:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006376:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	3301      	adds	r3, #1
 800637c:	613b      	str	r3, [r7, #16]
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	429a      	cmp	r2, r3
 8006384:	d3b7      	bcc.n	80062f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006386:	2300      	movs	r3, #0
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	e043      	b.n	8006414 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800639e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063a2:	d118      	bne.n	80063d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b6:	461a      	mov	r2, r3
 80063b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	e013      	b.n	80063e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063cc:	461a      	mov	r2, r3
 80063ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	e008      	b.n	80063e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e2:	461a      	mov	r2, r3
 80063e4:	2300      	movs	r3, #0
 80063e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f4:	461a      	mov	r2, r3
 80063f6:	2300      	movs	r3, #0
 80063f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006406:	461a      	mov	r2, r3
 8006408:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800640c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	3301      	adds	r3, #1
 8006412:	613b      	str	r3, [r7, #16]
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	429a      	cmp	r2, r3
 800641a:	d3b7      	bcc.n	800638c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800642a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800642e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800643c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d105      	bne.n	8006450 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	f043 0210 	orr.w	r2, r3, #16
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	699a      	ldr	r2, [r3, #24]
 8006454:	4b0e      	ldr	r3, [pc, #56]	; (8006490 <USB_DevInit+0x2b4>)
 8006456:	4313      	orrs	r3, r2
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800645c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d005      	beq.n	800646e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	f043 0208 	orr.w	r2, r3, #8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800646e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006470:	2b01      	cmp	r3, #1
 8006472:	d105      	bne.n	8006480 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	699a      	ldr	r2, [r3, #24]
 8006478:	4b06      	ldr	r3, [pc, #24]	; (8006494 <USB_DevInit+0x2b8>)
 800647a:	4313      	orrs	r3, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006480:	7dfb      	ldrb	r3, [r7, #23]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800648c:	b004      	add	sp, #16
 800648e:	4770      	bx	lr
 8006490:	803c3800 	.word	0x803c3800
 8006494:	40000004 	.word	0x40000004

08006498 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4a13      	ldr	r2, [pc, #76]	; (80064fc <USB_FlushTxFifo+0x64>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d901      	bls.n	80064b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e01b      	b.n	80064f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	daf2      	bge.n	80064a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	019b      	lsls	r3, r3, #6
 80064c8:	f043 0220 	orr.w	r2, r3, #32
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3301      	adds	r3, #1
 80064d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4a08      	ldr	r2, [pc, #32]	; (80064fc <USB_FlushTxFifo+0x64>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d901      	bls.n	80064e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e006      	b.n	80064f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	d0f0      	beq.n	80064d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	00030d40 	.word	0x00030d40

08006500 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3301      	adds	r3, #1
 8006510:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4a11      	ldr	r2, [pc, #68]	; (800655c <USB_FlushRxFifo+0x5c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d901      	bls.n	800651e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e018      	b.n	8006550 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	daf2      	bge.n	800650c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2210      	movs	r2, #16
 800652e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3301      	adds	r3, #1
 8006534:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4a08      	ldr	r2, [pc, #32]	; (800655c <USB_FlushRxFifo+0x5c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d901      	bls.n	8006542 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e006      	b.n	8006550 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f003 0310 	and.w	r3, r3, #16
 800654a:	2b10      	cmp	r3, #16
 800654c:	d0f0      	beq.n	8006530 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	00030d40 	.word	0x00030d40

08006560 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	68f9      	ldr	r1, [r7, #12]
 800657c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006580:	4313      	orrs	r3, r2
 8006582:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065ac:	f023 0303 	bic.w	r3, r3, #3
 80065b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065c0:	f043 0302 	orr.w	r3, r3, #2
 80065c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	f003 0301 	and.w	r3, r3, #1
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3301      	adds	r3, #1
 8006600:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4a13      	ldr	r2, [pc, #76]	; (8006654 <USB_CoreReset+0x64>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d901      	bls.n	800660e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e01b      	b.n	8006646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	daf2      	bge.n	80065fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f043 0201 	orr.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3301      	adds	r3, #1
 800662a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4a09      	ldr	r2, [pc, #36]	; (8006654 <USB_CoreReset+0x64>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d901      	bls.n	8006638 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e006      	b.n	8006646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b01      	cmp	r3, #1
 8006642:	d0f0      	beq.n	8006626 <USB_CoreReset+0x36>

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	00030d40 	.word	0x00030d40

08006658 <memset>:
 8006658:	4402      	add	r2, r0
 800665a:	4603      	mov	r3, r0
 800665c:	4293      	cmp	r3, r2
 800665e:	d100      	bne.n	8006662 <memset+0xa>
 8006660:	4770      	bx	lr
 8006662:	f803 1b01 	strb.w	r1, [r3], #1
 8006666:	e7f9      	b.n	800665c <memset+0x4>

08006668 <__libc_init_array>:
 8006668:	b570      	push	{r4, r5, r6, lr}
 800666a:	4d0d      	ldr	r5, [pc, #52]	; (80066a0 <__libc_init_array+0x38>)
 800666c:	4c0d      	ldr	r4, [pc, #52]	; (80066a4 <__libc_init_array+0x3c>)
 800666e:	1b64      	subs	r4, r4, r5
 8006670:	10a4      	asrs	r4, r4, #2
 8006672:	2600      	movs	r6, #0
 8006674:	42a6      	cmp	r6, r4
 8006676:	d109      	bne.n	800668c <__libc_init_array+0x24>
 8006678:	4d0b      	ldr	r5, [pc, #44]	; (80066a8 <__libc_init_array+0x40>)
 800667a:	4c0c      	ldr	r4, [pc, #48]	; (80066ac <__libc_init_array+0x44>)
 800667c:	f000 f818 	bl	80066b0 <_init>
 8006680:	1b64      	subs	r4, r4, r5
 8006682:	10a4      	asrs	r4, r4, #2
 8006684:	2600      	movs	r6, #0
 8006686:	42a6      	cmp	r6, r4
 8006688:	d105      	bne.n	8006696 <__libc_init_array+0x2e>
 800668a:	bd70      	pop	{r4, r5, r6, pc}
 800668c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006690:	4798      	blx	r3
 8006692:	3601      	adds	r6, #1
 8006694:	e7ee      	b.n	8006674 <__libc_init_array+0xc>
 8006696:	f855 3b04 	ldr.w	r3, [r5], #4
 800669a:	4798      	blx	r3
 800669c:	3601      	adds	r6, #1
 800669e:	e7f2      	b.n	8006686 <__libc_init_array+0x1e>
 80066a0:	08006708 	.word	0x08006708
 80066a4:	08006708 	.word	0x08006708
 80066a8:	08006708 	.word	0x08006708
 80066ac:	0800670c 	.word	0x0800670c

080066b0 <_init>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	bf00      	nop
 80066b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066b6:	bc08      	pop	{r3}
 80066b8:	469e      	mov	lr, r3
 80066ba:	4770      	bx	lr

080066bc <_fini>:
 80066bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066be:	bf00      	nop
 80066c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c2:	bc08      	pop	{r3}
 80066c4:	469e      	mov	lr, r3
 80066c6:	4770      	bx	lr
