
Dev_NucleoH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cce8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800cf88  0800cf88  0001cf88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d014  0800d014  0001d014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d018  0800d018  0001d018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  24000000  0800d01c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004cd0  24000064  0800d080  00020064  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24004d34  0800d080  00024d34  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022789  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000043cb  00000000  00000000  0004285e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a28  00000000  00000000  00046c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001414  00000000  00000000  00048658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b36a  00000000  00000000  00049a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021d80  00000000  00000000  00084dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017a414  00000000  00000000  000a6b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000070fc  00000000  00000000  00220f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005e  00000000  00000000  00228068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cf70 	.word	0x0800cf70

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	0800cf70 	.word	0x0800cf70

080002e0 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b088      	sub	sp, #32
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
 80002f4:	615a      	str	r2, [r3, #20]
 80002f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80002f8:	4b34      	ldr	r3, [pc, #208]	; (80003cc <MX_ADC3_Init+0xec>)
 80002fa:	4a35      	ldr	r2, [pc, #212]	; (80003d0 <MX_ADC3_Init+0xf0>)
 80002fc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80002fe:	4b33      	ldr	r3, [pc, #204]	; (80003cc <MX_ADC3_Init+0xec>)
 8000300:	2208      	movs	r2, #8
 8000302:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000304:	4b31      	ldr	r3, [pc, #196]	; (80003cc <MX_ADC3_Init+0xec>)
 8000306:	2201      	movs	r2, #1
 8000308:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800030a:	4b30      	ldr	r3, [pc, #192]	; (80003cc <MX_ADC3_Init+0xec>)
 800030c:	2208      	movs	r2, #8
 800030e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000310:	4b2e      	ldr	r3, [pc, #184]	; (80003cc <MX_ADC3_Init+0xec>)
 8000312:	2200      	movs	r2, #0
 8000314:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000316:	4b2d      	ldr	r3, [pc, #180]	; (80003cc <MX_ADC3_Init+0xec>)
 8000318:	2201      	movs	r2, #1
 800031a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 800031c:	4b2b      	ldr	r3, [pc, #172]	; (80003cc <MX_ADC3_Init+0xec>)
 800031e:	2203      	movs	r2, #3
 8000320:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000322:	4b2a      	ldr	r3, [pc, #168]	; (80003cc <MX_ADC3_Init+0xec>)
 8000324:	2200      	movs	r2, #0
 8000326:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8000328:	4b28      	ldr	r3, [pc, #160]	; (80003cc <MX_ADC3_Init+0xec>)
 800032a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800032e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000330:	4b26      	ldr	r3, [pc, #152]	; (80003cc <MX_ADC3_Init+0xec>)
 8000332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000336:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000338:	4b24      	ldr	r3, [pc, #144]	; (80003cc <MX_ADC3_Init+0xec>)
 800033a:	2203      	movs	r2, #3
 800033c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800033e:	4b23      	ldr	r3, [pc, #140]	; (80003cc <MX_ADC3_Init+0xec>)
 8000340:	2200      	movs	r2, #0
 8000342:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000344:	4b21      	ldr	r3, [pc, #132]	; (80003cc <MX_ADC3_Init+0xec>)
 8000346:	2200      	movs	r2, #0
 8000348:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800034a:	4b20      	ldr	r3, [pc, #128]	; (80003cc <MX_ADC3_Init+0xec>)
 800034c:	2200      	movs	r2, #0
 800034e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <MX_ADC3_Init+0xec>)
 8000354:	f001 f8c8 	bl	80014e8 <HAL_ADC_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 800035e:	f000 fb59 	bl	8000a14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000362:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <MX_ADC3_Init+0xf4>)
 8000364:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000366:	2306      	movs	r3, #6
 8000368:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800036e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000372:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000374:	2304      	movs	r3, #4
 8000376:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800037c:	2300      	movs	r3, #0
 800037e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	4619      	mov	r1, r3
 8000384:	4811      	ldr	r0, [pc, #68]	; (80003cc <MX_ADC3_Init+0xec>)
 8000386:	f001 fd77 	bl	8001e78 <HAL_ADC_ConfigChannel>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000390:	f000 fb40 	bl	8000a14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000394:	230c      	movs	r3, #12
 8000396:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	4619      	mov	r1, r3
 800039c:	480b      	ldr	r0, [pc, #44]	; (80003cc <MX_ADC3_Init+0xec>)
 800039e:	f001 fd6b 	bl	8001e78 <HAL_ADC_ConfigChannel>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 80003a8:	f000 fb34 	bl	8000a14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003ac:	2312      	movs	r3, #18
 80003ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	4619      	mov	r1, r3
 80003b4:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_ADC3_Init+0xec>)
 80003b6:	f001 fd5f 	bl	8001e78 <HAL_ADC_ConfigChannel>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 80003c0:	f000 fb28 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80003c4:	bf00      	nop
 80003c6:	3720      	adds	r7, #32
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	24000080 	.word	0x24000080
 80003d0:	58026000 	.word	0x58026000
 80003d4:	04300002 	.word	0x04300002

080003d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b0bc      	sub	sp, #240	; 0xf0
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003f0:	f107 0318 	add.w	r3, r7, #24
 80003f4:	22c0      	movs	r2, #192	; 0xc0
 80003f6:	2100      	movs	r1, #0
 80003f8:	4618      	mov	r0, r3
 80003fa:	f00c fccf 	bl	800cd9c <memset>
  if(adcHandle->Instance==ADC3)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a53      	ldr	r2, [pc, #332]	; (8000550 <HAL_ADC_MspInit+0x178>)
 8000404:	4293      	cmp	r3, r2
 8000406:	f040 809e 	bne.w	8000546 <HAL_ADC_MspInit+0x16e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800040a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800040e:	f04f 0300 	mov.w	r3, #0
 8000412:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000416:	2301      	movs	r3, #1
 8000418:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 800041a:	2313      	movs	r3, #19
 800041c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800041e:	2302      	movs	r3, #2
 8000420:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000422:	2302      	movs	r3, #2
 8000424:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000426:	2302      	movs	r3, #2
 8000428:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800042a:	23c0      	movs	r3, #192	; 0xc0
 800042c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800042e:	2320      	movs	r3, #32
 8000430:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000436:	2300      	movs	r3, #0
 8000438:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800043c:	f107 0318 	add.w	r3, r7, #24
 8000440:	4618      	mov	r0, r3
 8000442:	f005 ff89 	bl	8006358 <HAL_RCCEx_PeriphCLKConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 800044c:	f000 fae2 	bl	8000a14 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000450:	4b40      	ldr	r3, [pc, #256]	; (8000554 <HAL_ADC_MspInit+0x17c>)
 8000452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000456:	4a3f      	ldr	r2, [pc, #252]	; (8000554 <HAL_ADC_MspInit+0x17c>)
 8000458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800045c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000460:	4b3c      	ldr	r3, [pc, #240]	; (8000554 <HAL_ADC_MspInit+0x17c>)
 8000462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800046e:	4b39      	ldr	r3, [pc, #228]	; (8000554 <HAL_ADC_MspInit+0x17c>)
 8000470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000474:	4a37      	ldr	r2, [pc, #220]	; (8000554 <HAL_ADC_MspInit+0x17c>)
 8000476:	f043 0320 	orr.w	r3, r3, #32
 800047a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800047e:	4b35      	ldr	r3, [pc, #212]	; (8000554 <HAL_ADC_MspInit+0x17c>)
 8000480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000484:	f003 0320 	and.w	r3, r3, #32
 8000488:	613b      	str	r3, [r7, #16]
 800048a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800048c:	4b31      	ldr	r3, [pc, #196]	; (8000554 <HAL_ADC_MspInit+0x17c>)
 800048e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000492:	4a30      	ldr	r2, [pc, #192]	; (8000554 <HAL_ADC_MspInit+0x17c>)
 8000494:	f043 0304 	orr.w	r3, r3, #4
 8000498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800049c:	4b2d      	ldr	r3, [pc, #180]	; (8000554 <HAL_ADC_MspInit+0x17c>)
 800049e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a2:	f003 0304 	and.w	r3, r3, #4
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
    PF7     ------> ADC3_INP3
    PF8     ------> ADC3_INN3
    PF9     ------> ADC3_INP2
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80004aa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80004ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004b2:	2303      	movs	r3, #3
 80004b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80004c2:	4619      	mov	r1, r3
 80004c4:	4824      	ldr	r0, [pc, #144]	; (8000558 <HAL_ADC_MspInit+0x180>)
 80004c6:	f004 fd31 	bl	8004f2c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80004ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80004ce:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80004d2:	f000 fdc5 	bl	8001060 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 80004d6:	4b21      	ldr	r3, [pc, #132]	; (800055c <HAL_ADC_MspInit+0x184>)
 80004d8:	4a21      	ldr	r2, [pc, #132]	; (8000560 <HAL_ADC_MspInit+0x188>)
 80004da:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80004dc:	4b1f      	ldr	r3, [pc, #124]	; (800055c <HAL_ADC_MspInit+0x184>)
 80004de:	2273      	movs	r2, #115	; 0x73
 80004e0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004e2:	4b1e      	ldr	r3, [pc, #120]	; (800055c <HAL_ADC_MspInit+0x184>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80004e8:	4b1c      	ldr	r3, [pc, #112]	; (800055c <HAL_ADC_MspInit+0x184>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80004ee:	4b1b      	ldr	r3, [pc, #108]	; (800055c <HAL_ADC_MspInit+0x184>)
 80004f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004f4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004f6:	4b19      	ldr	r3, [pc, #100]	; (800055c <HAL_ADC_MspInit+0x184>)
 80004f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004fc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <HAL_ADC_MspInit+0x184>)
 8000500:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000504:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <HAL_ADC_MspInit+0x184>)
 8000508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800050c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <HAL_ADC_MspInit+0x184>)
 8000510:	2200      	movs	r2, #0
 8000512:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_ADC_MspInit+0x184>)
 8000516:	2200      	movs	r2, #0
 8000518:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800051a:	4810      	ldr	r0, [pc, #64]	; (800055c <HAL_ADC_MspInit+0x184>)
 800051c:	f002 fc2e 	bl	8002d7c <HAL_DMA_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <HAL_ADC_MspInit+0x152>
    {
      Error_Handler();
 8000526:	f000 fa75 	bl	8000a14 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a0b      	ldr	r2, [pc, #44]	; (800055c <HAL_ADC_MspInit+0x184>)
 800052e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000530:	4a0a      	ldr	r2, [pc, #40]	; (800055c <HAL_ADC_MspInit+0x184>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2105      	movs	r1, #5
 800053a:	207f      	movs	r0, #127	; 0x7f
 800053c:	f002 fbf6 	bl	8002d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000540:	207f      	movs	r0, #127	; 0x7f
 8000542:	f002 fc0d 	bl	8002d60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000546:	bf00      	nop
 8000548:	37f0      	adds	r7, #240	; 0xf0
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	58026000 	.word	0x58026000
 8000554:	58024400 	.word	0x58024400
 8000558:	58021400 	.word	0x58021400
 800055c:	240000e4 	.word	0x240000e4
 8000560:	40020010 	.word	0x40020010

08000564 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <MX_DMA_Init+0x3c>)
 800056c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000570:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <MX_DMA_Init+0x3c>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_DMA_Init+0x3c>)
 800057c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	2105      	movs	r1, #5
 800058c:	200b      	movs	r0, #11
 800058e:	f002 fbcd 	bl	8002d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000592:	200b      	movs	r0, #11
 8000594:	f002 fbe4 	bl	8002d60 <HAL_NVIC_EnableIRQ>

}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	58024400 	.word	0x58024400

080005a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qMeasurements */
  qMeasurementsHandle = osMessageQueueNew (16, sizeof(float), &qMeasurements_attributes);
 80005a8:	4a08      	ldr	r2, [pc, #32]	; (80005cc <MX_FREERTOS_Init+0x28>)
 80005aa:	2104      	movs	r1, #4
 80005ac:	2010      	movs	r0, #16
 80005ae:	f009 fec8 	bl	800a342 <osMessageQueueNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <MX_FREERTOS_Init+0x2c>)
 80005b6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Measurements */
  MeasurementsHandle = osThreadNew(startMeasurements, NULL, &Measurements_attributes);
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <MX_FREERTOS_Init+0x30>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MX_FREERTOS_Init+0x34>)
 80005be:	f009 fe13 	bl	800a1e8 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a05      	ldr	r2, [pc, #20]	; (80005dc <MX_FREERTOS_Init+0x38>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	0800cfe4 	.word	0x0800cfe4
 80005d0:	24000160 	.word	0x24000160
 80005d4:	0800cfc0 	.word	0x0800cfc0
 80005d8:	080005e1 	.word	0x080005e1
 80005dc:	2400015c 	.word	0x2400015c

080005e0 <startMeasurements>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startMeasurements */
void startMeasurements(void *argument)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMeasurements */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f009 fe8f 	bl	800a30c <osDelay>
 80005ee:	e7fb      	b.n	80005e8 <startMeasurements+0x8>

080005f0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08e      	sub	sp, #56	; 0x38
 80005f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	4b8a      	ldr	r3, [pc, #552]	; (8000830 <MX_GPIO_Init+0x240>)
 8000608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060c:	4a88      	ldr	r2, [pc, #544]	; (8000830 <MX_GPIO_Init+0x240>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000616:	4b86      	ldr	r3, [pc, #536]	; (8000830 <MX_GPIO_Init+0x240>)
 8000618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	623b      	str	r3, [r7, #32]
 8000622:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000624:	4b82      	ldr	r3, [pc, #520]	; (8000830 <MX_GPIO_Init+0x240>)
 8000626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062a:	4a81      	ldr	r2, [pc, #516]	; (8000830 <MX_GPIO_Init+0x240>)
 800062c:	f043 0320 	orr.w	r3, r3, #32
 8000630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000634:	4b7e      	ldr	r3, [pc, #504]	; (8000830 <MX_GPIO_Init+0x240>)
 8000636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063a:	f003 0320 	and.w	r3, r3, #32
 800063e:	61fb      	str	r3, [r7, #28]
 8000640:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	4b7b      	ldr	r3, [pc, #492]	; (8000830 <MX_GPIO_Init+0x240>)
 8000644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000648:	4a79      	ldr	r2, [pc, #484]	; (8000830 <MX_GPIO_Init+0x240>)
 800064a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800064e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000652:	4b77      	ldr	r3, [pc, #476]	; (8000830 <MX_GPIO_Init+0x240>)
 8000654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065c:	61bb      	str	r3, [r7, #24]
 800065e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b73      	ldr	r3, [pc, #460]	; (8000830 <MX_GPIO_Init+0x240>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000666:	4a72      	ldr	r2, [pc, #456]	; (8000830 <MX_GPIO_Init+0x240>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000670:	4b6f      	ldr	r3, [pc, #444]	; (8000830 <MX_GPIO_Init+0x240>)
 8000672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b6c      	ldr	r3, [pc, #432]	; (8000830 <MX_GPIO_Init+0x240>)
 8000680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000684:	4a6a      	ldr	r2, [pc, #424]	; (8000830 <MX_GPIO_Init+0x240>)
 8000686:	f043 0302 	orr.w	r3, r3, #2
 800068a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800068e:	4b68      	ldr	r3, [pc, #416]	; (8000830 <MX_GPIO_Init+0x240>)
 8000690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000694:	f003 0302 	and.w	r3, r3, #2
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069c:	4b64      	ldr	r3, [pc, #400]	; (8000830 <MX_GPIO_Init+0x240>)
 800069e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a2:	4a63      	ldr	r2, [pc, #396]	; (8000830 <MX_GPIO_Init+0x240>)
 80006a4:	f043 0310 	orr.w	r3, r3, #16
 80006a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ac:	4b60      	ldr	r3, [pc, #384]	; (8000830 <MX_GPIO_Init+0x240>)
 80006ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b2:	f003 0310 	and.w	r3, r3, #16
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	4b5d      	ldr	r3, [pc, #372]	; (8000830 <MX_GPIO_Init+0x240>)
 80006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c0:	4a5b      	ldr	r2, [pc, #364]	; (8000830 <MX_GPIO_Init+0x240>)
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ca:	4b59      	ldr	r3, [pc, #356]	; (8000830 <MX_GPIO_Init+0x240>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d0:	f003 0308 	and.w	r3, r3, #8
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d8:	4b55      	ldr	r3, [pc, #340]	; (8000830 <MX_GPIO_Init+0x240>)
 80006da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006de:	4a54      	ldr	r2, [pc, #336]	; (8000830 <MX_GPIO_Init+0x240>)
 80006e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e8:	4b51      	ldr	r3, [pc, #324]	; (8000830 <MX_GPIO_Init+0x240>)
 80006ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f244 0101 	movw	r1, #16385	; 0x4001
 80006fc:	484d      	ldr	r0, [pc, #308]	; (8000834 <MX_GPIO_Init+0x244>)
 80006fe:	f004 fdc5 	bl	800528c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2102      	movs	r1, #2
 8000706:	484c      	ldr	r0, [pc, #304]	; (8000838 <MX_GPIO_Init+0x248>)
 8000708:	f004 fdc0 	bl	800528c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000712:	2300      	movs	r3, #0
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071e:	4619      	mov	r1, r3
 8000720:	4846      	ldr	r0, [pc, #280]	; (800083c <MX_GPIO_Init+0x24c>)
 8000722:	f004 fc03 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000726:	2386      	movs	r3, #134	; 0x86
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000736:	230b      	movs	r3, #11
 8000738:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073e:	4619      	mov	r1, r3
 8000740:	483f      	ldr	r0, [pc, #252]	; (8000840 <MX_GPIO_Init+0x250>)
 8000742:	f004 fbf3 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000746:	2330      	movs	r3, #48	; 0x30
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000756:	230b      	movs	r3, #11
 8000758:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	4619      	mov	r1, r3
 8000760:	4836      	ldr	r0, [pc, #216]	; (800083c <MX_GPIO_Init+0x24c>)
 8000762:	f004 fbe3 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000766:	f244 0301 	movw	r3, #16385	; 0x4001
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077c:	4619      	mov	r1, r3
 800077e:	482d      	ldr	r0, [pc, #180]	; (8000834 <MX_GPIO_Init+0x244>)
 8000780:	f004 fbd4 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000796:	230b      	movs	r3, #11
 8000798:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	4619      	mov	r1, r3
 80007a0:	4824      	ldr	r0, [pc, #144]	; (8000834 <MX_GPIO_Init+0x244>)
 80007a2:	f004 fbc3 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80007a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007b8:	2307      	movs	r3, #7
 80007ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c0:	4619      	mov	r1, r3
 80007c2:	4820      	ldr	r0, [pc, #128]	; (8000844 <MX_GPIO_Init+0x254>)
 80007c4:	f004 fbb2 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80007c8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80007da:	230a      	movs	r3, #10
 80007dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	4619      	mov	r1, r3
 80007e4:	4816      	ldr	r0, [pc, #88]	; (8000840 <MX_GPIO_Init+0x250>)
 80007e6:	f004 fba1 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007fc:	230b      	movs	r3, #11
 80007fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000804:	4619      	mov	r1, r3
 8000806:	4810      	ldr	r0, [pc, #64]	; (8000848 <MX_GPIO_Init+0x258>)
 8000808:	f004 fb90 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800080c:	2302      	movs	r3, #2
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000820:	4619      	mov	r1, r3
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_GPIO_Init+0x248>)
 8000824:	f004 fb82 	bl	8004f2c <HAL_GPIO_Init>

}
 8000828:	bf00      	nop
 800082a:	3738      	adds	r7, #56	; 0x38
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	58024400 	.word	0x58024400
 8000834:	58020400 	.word	0x58020400
 8000838:	58021000 	.word	0x58021000
 800083c:	58020800 	.word	0x58020800
 8000840:	58020000 	.word	0x58020000
 8000844:	58020c00 	.word	0x58020c00
 8000848:	58021800 	.word	0x58021800

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f000 fb9e 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f81e 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f7ff feca 	bl	80005f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800085c:	f7ff fe82 	bl	8000564 <MX_DMA_Init>
  MX_ADC3_Init();
 8000860:	f7ff fd3e 	bl	80002e0 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000864:	f000 fa46 	bl	8000cf4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000868:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086c:	2100      	movs	r1, #0
 800086e:	4807      	ldr	r0, [pc, #28]	; (800088c <main+0x40>)
 8000870:	f002 f90e 	bl	8002a90 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc3, (uint32_t *)&Results_ADC3_buffer,3);
 8000874:	2203      	movs	r2, #3
 8000876:	4906      	ldr	r1, [pc, #24]	; (8000890 <main+0x44>)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <main+0x40>)
 800087a:	f000 ffd7 	bl	800182c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800087e:	f009 fc69 	bl	800a154 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000882:	f7ff fe8f 	bl	80005a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000886:	f009 fc89 	bl	800a19c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800088a:	e7fe      	b.n	800088a <main+0x3e>
 800088c:	24000080 	.word	0x24000080
 8000890:	24000164 	.word	0x24000164

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b09e      	sub	sp, #120	; 0x78
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089e:	224c      	movs	r2, #76	; 0x4c
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f00c fa7a 	bl	800cd9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2220      	movs	r2, #32
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f00c fa73 	bl	800cd9c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008b6:	2002      	movs	r0, #2
 80008b8:	f004 fd02 	bl	80052c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	4b48      	ldr	r3, [pc, #288]	; (80009e4 <SystemClock_Config+0x150>)
 80008c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c4:	4a47      	ldr	r2, [pc, #284]	; (80009e4 <SystemClock_Config+0x150>)
 80008c6:	f023 0301 	bic.w	r3, r3, #1
 80008ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008cc:	4b45      	ldr	r3, [pc, #276]	; (80009e4 <SystemClock_Config+0x150>)
 80008ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b44      	ldr	r3, [pc, #272]	; (80009e8 <SystemClock_Config+0x154>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	4a43      	ldr	r2, [pc, #268]	; (80009e8 <SystemClock_Config+0x154>)
 80008dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008e0:	6193      	str	r3, [r2, #24]
 80008e2:	4b41      	ldr	r3, [pc, #260]	; (80009e8 <SystemClock_Config+0x154>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008ee:	bf00      	nop
 80008f0:	4b3d      	ldr	r3, [pc, #244]	; (80009e8 <SystemClock_Config+0x154>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008fc:	d1f8      	bne.n	80008f0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	4b3b      	ldr	r3, [pc, #236]	; (80009ec <SystemClock_Config+0x158>)
 8000900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000904:	4a39      	ldr	r2, [pc, #228]	; (80009ec <SystemClock_Config+0x158>)
 8000906:	f043 0302 	orr.w	r3, r3, #2
 800090a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800090e:	4b37      	ldr	r3, [pc, #220]	; (80009ec <SystemClock_Config+0x158>)
 8000910:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000914:	f003 0302 	and.w	r3, r3, #2
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800091c:	2300      	movs	r3, #0
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	4b31      	ldr	r3, [pc, #196]	; (80009e8 <SystemClock_Config+0x154>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a30      	ldr	r2, [pc, #192]	; (80009e8 <SystemClock_Config+0x154>)
 8000926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <SystemClock_Config+0x154>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <SystemClock_Config+0x150>)
 8000938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093a:	4a2a      	ldr	r2, [pc, #168]	; (80009e4 <SystemClock_Config+0x150>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <SystemClock_Config+0x150>)
 8000944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800094e:	bf00      	nop
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <SystemClock_Config+0x154>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800095c:	d1f8      	bne.n	8000950 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800095e:	2301      	movs	r3, #1
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000962:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000968:	2302      	movs	r3, #2
 800096a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096c:	2302      	movs	r3, #2
 800096e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000970:	2301      	movs	r3, #1
 8000972:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000974:	2378      	movs	r3, #120	; 0x78
 8000976:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800097c:	2304      	movs	r3, #4
 800097e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000980:	2302      	movs	r3, #2
 8000982:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000984:	230c      	movs	r3, #12
 8000986:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000988:	2300      	movs	r3, #0
 800098a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000994:	4618      	mov	r0, r3
 8000996:	f004 fccd 	bl	8005334 <HAL_RCC_OscConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80009a0:	f000 f838 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a4:	233f      	movs	r3, #63	; 0x3f
 80009a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a8:	2303      	movs	r3, #3
 80009aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009b0:	2308      	movs	r3, #8
 80009b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009b4:	2340      	movs	r3, #64	; 0x40
 80009b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009b8:	2340      	movs	r3, #64	; 0x40
 80009ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009c2:	2340      	movs	r3, #64	; 0x40
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2104      	movs	r1, #4
 80009cc:	4618      	mov	r0, r3
 80009ce:	f005 f90b 	bl	8005be8 <HAL_RCC_ClockConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0x148>
  {
    Error_Handler();
 80009d8:	f000 f81c 	bl	8000a14 <Error_Handler>
  }
}
 80009dc:	bf00      	nop
 80009de:	3778      	adds	r7, #120	; 0x78
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	58000400 	.word	0x58000400
 80009e8:	58024800 	.word	0x58024800
 80009ec:	58024400 	.word	0x58024400

080009f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d101      	bne.n	8000a06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a02:	f000 fb01 	bl	8001008 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40001000 	.word	0x40001000

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <Error_Handler+0x8>
	...

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_MspInit+0x48>)
 8000a28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_MspInit+0x48>)
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_MspInit+0x48>)
 8000a38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	210f      	movs	r1, #15
 8000a48:	f06f 0001 	mvn.w	r0, #1
 8000a4c:	f002 f96e 	bl	8002d2c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2105      	movs	r1, #5
 8000a54:	2051      	movs	r0, #81	; 0x51
 8000a56:	f002 f969 	bl	8002d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8000a5a:	2051      	movs	r0, #81	; 0x51
 8000a5c:	f002 f980 	bl	8002d60 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	58024400 	.word	0x58024400

08000a6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b090      	sub	sp, #64	; 0x40
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b0f      	cmp	r3, #15
 8000a78:	d827      	bhi.n	8000aca <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	2036      	movs	r0, #54	; 0x36
 8000a80:	f002 f954 	bl	8002d2c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a84:	2036      	movs	r0, #54	; 0x36
 8000a86:	f002 f96b 	bl	8002d60 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000a8a:	4a29      	ldr	r2, [pc, #164]	; (8000b30 <HAL_InitTick+0xc4>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a90:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <HAL_InitTick+0xc8>)
 8000a92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a96:	4a27      	ldr	r2, [pc, #156]	; (8000b34 <HAL_InitTick+0xc8>)
 8000a98:	f043 0310 	orr.w	r3, r3, #16
 8000a9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <HAL_InitTick+0xc8>)
 8000aa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aae:	f107 0210 	add.w	r2, r7, #16
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f005 fc0b 	bl	80062d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d106      	bne.n	8000ad6 <HAL_InitTick+0x6a>
 8000ac8:	e001      	b.n	8000ace <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e02b      	b.n	8000b26 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ace:	f005 fbeb 	bl	80062a8 <HAL_RCC_GetPCLK1Freq>
 8000ad2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000ad4:	e004      	b.n	8000ae0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ad6:	f005 fbe7 	bl	80062a8 <HAL_RCC_GetPCLK1Freq>
 8000ada:	4603      	mov	r3, r0
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ae2:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <HAL_InitTick+0xcc>)
 8000ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae8:	0c9b      	lsrs	r3, r3, #18
 8000aea:	3b01      	subs	r3, #1
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <HAL_InitTick+0xd0>)
 8000af0:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <HAL_InitTick+0xd4>)
 8000af2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_InitTick+0xd0>)
 8000af6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000afa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000afc:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_InitTick+0xd0>)
 8000afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b00:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_InitTick+0xd0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_InitTick+0xd0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b0e:	480b      	ldr	r0, [pc, #44]	; (8000b3c <HAL_InitTick+0xd0>)
 8000b10:	f008 f920 	bl	8008d54 <HAL_TIM_Base_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d104      	bne.n	8000b24 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b1a:	4808      	ldr	r0, [pc, #32]	; (8000b3c <HAL_InitTick+0xd0>)
 8000b1c:	f008 f972 	bl	8008e04 <HAL_TIM_Base_Start_IT>
 8000b20:	4603      	mov	r3, r0
 8000b22:	e000      	b.n	8000b26 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3740      	adds	r7, #64	; 0x40
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	24000008 	.word	0x24000008
 8000b34:	58024400 	.word	0x58024400
 8000b38:	431bde83 	.word	0x431bde83
 8000b3c:	24000170 	.word	0x24000170
 8000b40:	40001000 	.word	0x40001000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <DMA1_Stream0_IRQHandler+0x10>)
 8000b76:	f002 fec7 	bl	8003908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	240000e4 	.word	0x240000e4

08000b84 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <TIM1_TRG_COM_IRQHandler+0x10>)
 8000b8a:	f008 fa14 	bl	8008fb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	240001bc 	.word	0x240001bc

08000b98 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <TIM1_CC_IRQHandler+0x10>)
 8000b9e:	f008 fa0a 	bl	8008fb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	240001bc 	.word	0x240001bc

08000bac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <TIM6_DAC_IRQHandler+0x10>)
 8000bb2:	f008 fa00 	bl	8008fb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	24000170 	.word	0x24000170

08000bc0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <ADC3_IRQHandler+0x10>)
 8000bd6:	f000 feed 	bl	80019b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	24000080 	.word	0x24000080

08000be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000be8:	4b37      	ldr	r3, [pc, #220]	; (8000cc8 <SystemInit+0xe4>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a36      	ldr	r2, [pc, #216]	; (8000cc8 <SystemInit+0xe4>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf8:	4b34      	ldr	r3, [pc, #208]	; (8000ccc <SystemInit+0xe8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 030f 	and.w	r3, r3, #15
 8000c00:	2b06      	cmp	r3, #6
 8000c02:	d807      	bhi.n	8000c14 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c04:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <SystemInit+0xe8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f023 030f 	bic.w	r3, r3, #15
 8000c0c:	4a2f      	ldr	r2, [pc, #188]	; (8000ccc <SystemInit+0xe8>)
 8000c0e:	f043 0307 	orr.w	r3, r3, #7
 8000c12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c14:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <SystemInit+0xec>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a2d      	ldr	r2, [pc, #180]	; (8000cd0 <SystemInit+0xec>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c20:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <SystemInit+0xec>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c26:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <SystemInit+0xec>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	4929      	ldr	r1, [pc, #164]	; (8000cd0 <SystemInit+0xec>)
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <SystemInit+0xf0>)
 8000c2e:	4013      	ands	r3, r2
 8000c30:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <SystemInit+0xe8>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d007      	beq.n	8000c4e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c3e:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <SystemInit+0xe8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f023 030f 	bic.w	r3, r3, #15
 8000c46:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <SystemInit+0xe8>)
 8000c48:	f043 0307 	orr.w	r3, r3, #7
 8000c4c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <SystemInit+0xec>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <SystemInit+0xec>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <SystemInit+0xec>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <SystemInit+0xec>)
 8000c62:	4a1d      	ldr	r2, [pc, #116]	; (8000cd8 <SystemInit+0xf4>)
 8000c64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <SystemInit+0xec>)
 8000c68:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <SystemInit+0xf8>)
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <SystemInit+0xec>)
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ce0 <SystemInit+0xfc>)
 8000c70:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <SystemInit+0xec>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <SystemInit+0xec>)
 8000c7a:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <SystemInit+0xfc>)
 8000c7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <SystemInit+0xec>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <SystemInit+0xec>)
 8000c86:	4a16      	ldr	r2, [pc, #88]	; (8000ce0 <SystemInit+0xfc>)
 8000c88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <SystemInit+0xec>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <SystemInit+0xec>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <SystemInit+0xec>)
 8000c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <SystemInit+0xec>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <SystemInit+0x100>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <SystemInit+0x104>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cae:	d202      	bcs.n	8000cb6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <SystemInit+0x108>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <SystemInit+0x10c>)
 8000cb8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cbc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00
 8000ccc:	52002000 	.word	0x52002000
 8000cd0:	58024400 	.word	0x58024400
 8000cd4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cd8:	02020200 	.word	0x02020200
 8000cdc:	01ff0000 	.word	0x01ff0000
 8000ce0:	01010280 	.word	0x01010280
 8000ce4:	5c001000 	.word	0x5c001000
 8000ce8:	ffff0000 	.word	0xffff0000
 8000cec:	51008108 	.word	0x51008108
 8000cf0:	52004000 	.word	0x52004000

08000cf4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b09a      	sub	sp, #104	; 0x68
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
 8000d24:	615a      	str	r2, [r3, #20]
 8000d26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	222c      	movs	r2, #44	; 0x2c
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f00c f834 	bl	800cd9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d34:	4b49      	ldr	r3, [pc, #292]	; (8000e5c <MX_TIM1_Init+0x168>)
 8000d36:	4a4a      	ldr	r2, [pc, #296]	; (8000e60 <MX_TIM1_Init+0x16c>)
 8000d38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d3a:	4b48      	ldr	r3, [pc, #288]	; (8000e5c <MX_TIM1_Init+0x168>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d40:	4b46      	ldr	r3, [pc, #280]	; (8000e5c <MX_TIM1_Init+0x168>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d46:	4b45      	ldr	r3, [pc, #276]	; (8000e5c <MX_TIM1_Init+0x168>)
 8000d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4e:	4b43      	ldr	r3, [pc, #268]	; (8000e5c <MX_TIM1_Init+0x168>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d54:	4b41      	ldr	r3, [pc, #260]	; (8000e5c <MX_TIM1_Init+0x168>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5a:	4b40      	ldr	r3, [pc, #256]	; (8000e5c <MX_TIM1_Init+0x168>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d60:	483e      	ldr	r0, [pc, #248]	; (8000e5c <MX_TIM1_Init+0x168>)
 8000d62:	f007 fff7 	bl	8008d54 <HAL_TIM_Base_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d6c:	f7ff fe52 	bl	8000a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d74:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4837      	ldr	r0, [pc, #220]	; (8000e5c <MX_TIM1_Init+0x168>)
 8000d7e:	f008 fb4d 	bl	800941c <HAL_TIM_ConfigClockSource>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d88:	f7ff fe44 	bl	8000a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d8c:	4833      	ldr	r0, [pc, #204]	; (8000e5c <MX_TIM1_Init+0x168>)
 8000d8e:	f008 f8b1 	bl	8008ef4 <HAL_TIM_PWM_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d98:	f7ff fe3c 	bl	8000a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000da8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dac:	4619      	mov	r1, r3
 8000dae:	482b      	ldr	r0, [pc, #172]	; (8000e5c <MX_TIM1_Init+0x168>)
 8000db0:	f009 f862 	bl	8009e78 <HAL_TIMEx_MasterConfigSynchronization>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000dba:	f7ff fe2b 	bl	8000a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbe:	2360      	movs	r3, #96	; 0x60
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dde:	2200      	movs	r2, #0
 8000de0:	4619      	mov	r1, r3
 8000de2:	481e      	ldr	r0, [pc, #120]	; (8000e5c <MX_TIM1_Init+0x168>)
 8000de4:	f008 fa06 	bl	80091f4 <HAL_TIM_PWM_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000dee:	f7ff fe11 	bl	8000a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000df2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000df6:	2204      	movs	r2, #4
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4818      	ldr	r0, [pc, #96]	; (8000e5c <MX_TIM1_Init+0x168>)
 8000dfc:	f008 f9fa 	bl	80091f4 <HAL_TIM_PWM_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000e06:	f7ff fe05 	bl	8000a14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4807      	ldr	r0, [pc, #28]	; (8000e5c <MX_TIM1_Init+0x168>)
 8000e40:	f009 f8a8 	bl	8009f94 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000e4a:	f7ff fde3 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e4e:	4803      	ldr	r0, [pc, #12]	; (8000e5c <MX_TIM1_Init+0x168>)
 8000e50:	f000 f838 	bl	8000ec4 <HAL_TIM_MspPostInit>

}
 8000e54:	bf00      	nop
 8000e56:	3768      	adds	r7, #104	; 0x68
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	240001bc 	.word	0x240001bc
 8000e60:	40010000 	.word	0x40010000

08000e64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <HAL_TIM_Base_MspInit+0x58>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d11e      	bne.n	8000eb4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_TIM_Base_MspInit+0x5c>)
 8000e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e7c:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <HAL_TIM_Base_MspInit+0x5c>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_TIM_Base_MspInit+0x5c>)
 8000e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2105      	movs	r1, #5
 8000e98:	201a      	movs	r0, #26
 8000e9a:	f001 ff47 	bl	8002d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000e9e:	201a      	movs	r0, #26
 8000ea0:	f001 ff5e 	bl	8002d60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2105      	movs	r1, #5
 8000ea8:	201b      	movs	r0, #27
 8000eaa:	f001 ff3f 	bl	8002d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000eae:	201b      	movs	r0, #27
 8000eb0:	f001 ff56 	bl	8002d60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40010000 	.word	0x40010000
 8000ec0:	58024400 	.word	0x58024400

08000ec4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <HAL_TIM_MspPostInit+0x6c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d11f      	bne.n	8000f26 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <HAL_TIM_MspPostInit+0x70>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <HAL_TIM_MspPostInit+0x70>)
 8000eee:	f043 0310 	orr.w	r3, r3, #16
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_TIM_MspPostInit+0x70>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000f04:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <HAL_TIM_MspPostInit+0x74>)
 8000f22:	f004 f803 	bl	8004f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	3720      	adds	r7, #32
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40010000 	.word	0x40010000
 8000f34:	58024400 	.word	0x58024400
 8000f38:	58021000 	.word	0x58021000

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f40:	f7ff fe50 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f46:	490d      	ldr	r1, [pc, #52]	; (8000f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	; (8000f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f00b ff75 	bl	800ce58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fc6d 	bl	800084c <main>
  bx  lr
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f7c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8000f80:	0800d01c 	.word	0x0800d01c
  ldr r2, =_sbss
 8000f84:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8000f88:	24004d34 	.word	0x24004d34

08000f8c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f96:	2003      	movs	r0, #3
 8000f98:	f001 febd 	bl	8002d16 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f9c:	f004 ffda 	bl	8005f54 <HAL_RCC_GetSysClockFreq>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_Init+0x68>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	f003 030f 	and.w	r3, r3, #15
 8000fac:	4913      	ldr	r1, [pc, #76]	; (8000ffc <HAL_Init+0x6c>)
 8000fae:	5ccb      	ldrb	r3, [r1, r3]
 8000fb0:	f003 031f 	and.w	r3, r3, #31
 8000fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_Init+0x68>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_Init+0x6c>)
 8000fc4:	5cd3      	ldrb	r3, [r2, r3]
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <HAL_Init+0x70>)
 8000fd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <HAL_Init+0x74>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f7ff fd46 	bl	8000a6c <HAL_InitTick>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e002      	b.n	8000ff0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fea:	f7ff fd19 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	0800cffc 	.word	0x0800cffc
 8001000:	24000004 	.word	0x24000004
 8001004:	24000000 	.word	0x24000000

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	2400000c 	.word	0x2400000c
 800102c:	24000208 	.word	0x24000208

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	24000208 	.word	0x24000208

08001048 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetREVID+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	0c1b      	lsrs	r3, r3, #16
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	5c001000 	.word	0x5c001000

08001060 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	43db      	mvns	r3, r3
 8001072:	401a      	ands	r2, r3
 8001074:	4904      	ldr	r1, [pc, #16]	; (8001088 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	4313      	orrs	r3, r2
 800107a:	604b      	str	r3, [r1, #4]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	58000400 	.word	0x58000400

0800108c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	609a      	str	r2, [r3, #8]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	609a      	str	r2, [r3, #8]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b087      	sub	sp, #28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3360      	adds	r3, #96	; 0x60
 8001106:	461a      	mov	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	430b      	orrs	r3, r1
 8001122:	431a      	orrs	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001128:	bf00      	nop
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	f003 031f 	and.w	r3, r3, #31
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	431a      	orrs	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	611a      	str	r2, [r3, #16]
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001166:	b480      	push	{r7}
 8001168:	b087      	sub	sp, #28
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3360      	adds	r3, #96	; 0x60
 8001176:	461a      	mov	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	431a      	orrs	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	601a      	str	r2, [r3, #0]
  }
}
 8001190:	bf00      	nop
 8001192:	371c      	adds	r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b087      	sub	sp, #28
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3330      	adds	r3, #48	; 0x30
 80011d2:	461a      	mov	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	0a1b      	lsrs	r3, r3, #8
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	4413      	add	r3, r2
 80011e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	f003 031f 	and.w	r3, r3, #31
 80011ec:	211f      	movs	r1, #31
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	401a      	ands	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	0e9b      	lsrs	r3, r3, #26
 80011fa:	f003 011f 	and.w	r1, r3, #31
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	431a      	orrs	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800120e:	bf00      	nop
 8001210:	371c      	adds	r7, #28
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f023 0203 	bic.w	r2, r3, #3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	60da      	str	r2, [r3, #12]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001266:	b480      	push	{r7}
 8001268:	b087      	sub	sp, #28
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3314      	adds	r3, #20
 8001276:	461a      	mov	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	0e5b      	lsrs	r3, r3, #25
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	4413      	add	r3, r2
 8001284:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	0d1b      	lsrs	r3, r3, #20
 800128e:	f003 031f 	and.w	r3, r3, #31
 8001292:	2107      	movs	r1, #7
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	401a      	ands	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	0d1b      	lsrs	r3, r3, #20
 80012a0:	f003 031f 	and.w	r3, r3, #31
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	431a      	orrs	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012b0:	bf00      	nop
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80012d4:	43db      	mvns	r3, r3
 80012d6:	401a      	ands	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0318 	and.w	r3, r3, #24
 80012de:	4908      	ldr	r1, [pc, #32]	; (8001300 <LL_ADC_SetChannelSingleDiff+0x44>)
 80012e0:	40d9      	lsrs	r1, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	400b      	ands	r3, r1
 80012e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80012ea:	431a      	orrs	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	000fffff 	.word	0x000fffff

08001304 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 031f 	and.w	r3, r3, #31
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <LL_ADC_DisableDeepPowerDown+0x20>)
 800134a:	4013      	ands	r3, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6093      	str	r3, [r2, #8]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	5fffffc0 	.word	0x5fffffc0

08001360 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001374:	d101      	bne.n	800137a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <LL_ADC_EnableInternalRegulator+0x24>)
 8001396:	4013      	ands	r3, r2
 8001398:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	6fffffc0 	.word	0x6fffffc0

080013b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013c4:	d101      	bne.n	80013ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <LL_ADC_Enable+0x24>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	f043 0201 	orr.w	r2, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	7fffffc0 	.word	0x7fffffc0

08001400 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <LL_ADC_Disable+0x24>)
 800140e:	4013      	ands	r3, r2
 8001410:	f043 0202 	orr.w	r2, r3, #2
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	7fffffc0 	.word	0x7fffffc0

08001428 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <LL_ADC_IsEnabled+0x18>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <LL_ADC_IsEnabled+0x1a>
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b02      	cmp	r3, #2
 8001460:	d101      	bne.n	8001466 <LL_ADC_IsDisableOngoing+0x18>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <LL_ADC_IsDisableOngoing+0x1a>
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <LL_ADC_REG_StartConversion+0x24>)
 8001482:	4013      	ands	r3, r2
 8001484:	f043 0204 	orr.w	r2, r3, #4
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	7fffffc0 	.word	0x7fffffc0

0800149c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	d101      	bne.n	80014b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d101      	bne.n	80014da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e18f      	b.n	8001822 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150c:	2b00      	cmp	r3, #0
 800150e:	d109      	bne.n	8001524 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7fe ff61 	bl	80003d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff19 	bl	8001360 <LL_ADC_IsDeepPowerDownEnabled>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff feff 	bl	800133c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff34 	bl	80013b0 <LL_ADC_IsInternalRegulatorEnabled>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d114      	bne.n	8001578 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff18 	bl	8001388 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001558:	4b87      	ldr	r3, [pc, #540]	; (8001778 <HAL_ADC_Init+0x290>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	099b      	lsrs	r3, r3, #6
 800155e:	4a87      	ldr	r2, [pc, #540]	; (800177c <HAL_ADC_Init+0x294>)
 8001560:	fba2 2303 	umull	r2, r3, r2, r3
 8001564:	099b      	lsrs	r3, r3, #6
 8001566:	3301      	adds	r3, #1
 8001568:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800156a:	e002      	b.n	8001572 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	3b01      	subs	r3, #1
 8001570:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f9      	bne.n	800156c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff17 	bl	80013b0 <LL_ADC_IsInternalRegulatorEnabled>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10d      	bne.n	80015a4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158c:	f043 0210 	orr.w	r2, r3, #16
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	f043 0201 	orr.w	r2, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff77 	bl	800149c <LL_ADC_REG_IsConversionOngoing>
 80015ae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f040 8129 	bne.w	8001810 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f040 8125 	bne.w	8001810 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015ce:	f043 0202 	orr.w	r2, r3, #2
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff24 	bl	8001428 <LL_ADC_IsEnabled>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d136      	bne.n	8001654 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a65      	ldr	r2, [pc, #404]	; (8001780 <HAL_ADC_Init+0x298>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d004      	beq.n	80015fa <HAL_ADC_Init+0x112>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a63      	ldr	r2, [pc, #396]	; (8001784 <HAL_ADC_Init+0x29c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d10e      	bne.n	8001618 <HAL_ADC_Init+0x130>
 80015fa:	4861      	ldr	r0, [pc, #388]	; (8001780 <HAL_ADC_Init+0x298>)
 80015fc:	f7ff ff14 	bl	8001428 <LL_ADC_IsEnabled>
 8001600:	4604      	mov	r4, r0
 8001602:	4860      	ldr	r0, [pc, #384]	; (8001784 <HAL_ADC_Init+0x29c>)
 8001604:	f7ff ff10 	bl	8001428 <LL_ADC_IsEnabled>
 8001608:	4603      	mov	r3, r0
 800160a:	4323      	orrs	r3, r4
 800160c:	2b00      	cmp	r3, #0
 800160e:	bf0c      	ite	eq
 8001610:	2301      	moveq	r3, #1
 8001612:	2300      	movne	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	e008      	b.n	800162a <HAL_ADC_Init+0x142>
 8001618:	485b      	ldr	r0, [pc, #364]	; (8001788 <HAL_ADC_Init+0x2a0>)
 800161a:	f7ff ff05 	bl	8001428 <LL_ADC_IsEnabled>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	bf0c      	ite	eq
 8001624:	2301      	moveq	r3, #1
 8001626:	2300      	movne	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d012      	beq.n	8001654 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a53      	ldr	r2, [pc, #332]	; (8001780 <HAL_ADC_Init+0x298>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d004      	beq.n	8001642 <HAL_ADC_Init+0x15a>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a51      	ldr	r2, [pc, #324]	; (8001784 <HAL_ADC_Init+0x29c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d101      	bne.n	8001646 <HAL_ADC_Init+0x15e>
 8001642:	4a52      	ldr	r2, [pc, #328]	; (800178c <HAL_ADC_Init+0x2a4>)
 8001644:	e000      	b.n	8001648 <HAL_ADC_Init+0x160>
 8001646:	4a52      	ldr	r2, [pc, #328]	; (8001790 <HAL_ADC_Init+0x2a8>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	4619      	mov	r1, r3
 800164e:	4610      	mov	r0, r2
 8001650:	f7ff fd1c 	bl	800108c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001654:	f7ff fcf8 	bl	8001048 <HAL_GetREVID>
 8001658:	4603      	mov	r3, r0
 800165a:	f241 0203 	movw	r2, #4099	; 0x1003
 800165e:	4293      	cmp	r3, r2
 8001660:	d914      	bls.n	800168c <HAL_ADC_Init+0x1a4>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b10      	cmp	r3, #16
 8001668:	d110      	bne.n	800168c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7d5b      	ldrb	r3, [r3, #21]
 800166e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001674:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800167a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7f1b      	ldrb	r3, [r3, #28]
 8001680:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001682:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001684:	f043 030c 	orr.w	r3, r3, #12
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	e00d      	b.n	80016a8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7d5b      	ldrb	r3, [r3, #21]
 8001690:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001696:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800169c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7f1b      	ldrb	r3, [r3, #28]
 80016a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7f1b      	ldrb	r3, [r3, #28]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d106      	bne.n	80016be <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	045b      	lsls	r3, r3, #17
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <HAL_ADC_Init+0x2ac>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	69b9      	ldr	r1, [r7, #24]
 80016ea:	430b      	orrs	r3, r1
 80016ec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fed2 	bl	800149c <LL_ADC_REG_IsConversionOngoing>
 80016f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fedf 	bl	80014c2 <LL_ADC_INJ_IsConversionOngoing>
 8001704:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d15f      	bne.n	80017cc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d15c      	bne.n	80017cc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7d1b      	ldrb	r3, [r3, #20]
 8001716:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <HAL_ADC_Init+0x2b0>)
 8001728:	4013      	ands	r3, r2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	69b9      	ldr	r1, [r7, #24]
 8001730:	430b      	orrs	r3, r1
 8001732:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800173a:	2b01      	cmp	r3, #1
 800173c:	d130      	bne.n	80017a0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	691a      	ldr	r2, [r3, #16]
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_ADC_Init+0x2b4>)
 800174c:	4013      	ands	r3, r2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001752:	3a01      	subs	r2, #1
 8001754:	0411      	lsls	r1, r2, #16
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800175a:	4311      	orrs	r1, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001760:	4311      	orrs	r1, r2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001766:	430a      	orrs	r2, r1
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0201 	orr.w	r2, r2, #1
 8001772:	611a      	str	r2, [r3, #16]
 8001774:	e01c      	b.n	80017b0 <HAL_ADC_Init+0x2c8>
 8001776:	bf00      	nop
 8001778:	24000000 	.word	0x24000000
 800177c:	053e2d63 	.word	0x053e2d63
 8001780:	40022000 	.word	0x40022000
 8001784:	40022100 	.word	0x40022100
 8001788:	58026000 	.word	0x58026000
 800178c:	40022300 	.word	0x40022300
 8001790:	58026300 	.word	0x58026300
 8001794:	fff0c003 	.word	0xfff0c003
 8001798:	ffffbffc 	.word	0xffffbffc
 800179c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	691a      	ldr	r2, [r3, #16]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f001 f824 	bl	8002814 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d10c      	bne.n	80017ee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f023 010f 	bic.w	r1, r3, #15
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	1e5a      	subs	r2, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
 80017ec:	e007      	b.n	80017fe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 020f 	bic.w	r2, r2, #15
 80017fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001802:	f023 0303 	bic.w	r3, r3, #3
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	655a      	str	r2, [r3, #84]	; 0x54
 800180e:	e007      	b.n	8001820 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001814:	f043 0210 	orr.w	r2, r3, #16
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001820:	7ffb      	ldrb	r3, [r7, #31]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd90      	pop	{r4, r7, pc}
 800182a:	bf00      	nop

0800182c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a55      	ldr	r2, [pc, #340]	; (8001994 <HAL_ADC_Start_DMA+0x168>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d004      	beq.n	800184c <HAL_ADC_Start_DMA+0x20>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a54      	ldr	r2, [pc, #336]	; (8001998 <HAL_ADC_Start_DMA+0x16c>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d101      	bne.n	8001850 <HAL_ADC_Start_DMA+0x24>
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_ADC_Start_DMA+0x170>)
 800184e:	e000      	b.n	8001852 <HAL_ADC_Start_DMA+0x26>
 8001850:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_ADC_Start_DMA+0x174>)
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fd56 	bl	8001304 <LL_ADC_GetMultimode>
 8001858:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fe1c 	bl	800149c <LL_ADC_REG_IsConversionOngoing>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	f040 808c 	bne.w	8001984 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001872:	2b01      	cmp	r3, #1
 8001874:	d101      	bne.n	800187a <HAL_ADC_Start_DMA+0x4e>
 8001876:	2302      	movs	r3, #2
 8001878:	e087      	b.n	800198a <HAL_ADC_Start_DMA+0x15e>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	2b05      	cmp	r3, #5
 800188c:	d002      	beq.n	8001894 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	2b09      	cmp	r3, #9
 8001892:	d170      	bne.n	8001976 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 fe3f 	bl	8002518 <ADC_Enable>
 800189a:	4603      	mov	r3, r0
 800189c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d163      	bne.n	800196c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018a8:	4b3e      	ldr	r3, [pc, #248]	; (80019a4 <HAL_ADC_Start_DMA+0x178>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a37      	ldr	r2, [pc, #220]	; (8001998 <HAL_ADC_Start_DMA+0x16c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d002      	beq.n	80018c4 <HAL_ADC_Start_DMA+0x98>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	e000      	b.n	80018c6 <HAL_ADC_Start_DMA+0x9a>
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <HAL_ADC_Start_DMA+0x168>)
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d002      	beq.n	80018d4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d105      	bne.n	80018e0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f0:	f023 0206 	bic.w	r2, r3, #6
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	659a      	str	r2, [r3, #88]	; 0x58
 80018f8:	e002      	b.n	8001900 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	4a28      	ldr	r2, [pc, #160]	; (80019a8 <HAL_ADC_Start_DMA+0x17c>)
 8001906:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190c:	4a27      	ldr	r2, [pc, #156]	; (80019ac <HAL_ADC_Start_DMA+0x180>)
 800190e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001914:	4a26      	ldr	r2, [pc, #152]	; (80019b0 <HAL_ADC_Start_DMA+0x184>)
 8001916:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	221c      	movs	r2, #28
 800191e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0210 	orr.w	r2, r2, #16
 8001936:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	4619      	mov	r1, r3
 8001942:	4610      	mov	r0, r2
 8001944:	f7ff fc69 	bl	800121a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3340      	adds	r3, #64	; 0x40
 8001952:	4619      	mov	r1, r3
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f001 fd6c 	bl	8003434 <HAL_DMA_Start_IT>
 800195c:	4603      	mov	r3, r0
 800195e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fd85 	bl	8001474 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800196a:	e00d      	b.n	8001988 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001974:	e008      	b.n	8001988 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001982:	e001      	b.n	8001988 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001984:	2302      	movs	r3, #2
 8001986:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001988:	7dfb      	ldrb	r3, [r7, #23]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40022000 	.word	0x40022000
 8001998:	40022100 	.word	0x40022100
 800199c:	40022300 	.word	0x40022300
 80019a0:	58026300 	.word	0x58026300
 80019a4:	fffff0fe 	.word	0xfffff0fe
 80019a8:	080026eb 	.word	0x080026eb
 80019ac:	080027c3 	.word	0x080027c3
 80019b0:	080027df 	.word	0x080027df

080019b4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a87      	ldr	r2, [pc, #540]	; (8001bf4 <HAL_ADC_IRQHandler+0x240>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d004      	beq.n	80019e4 <HAL_ADC_IRQHandler+0x30>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a86      	ldr	r2, [pc, #536]	; (8001bf8 <HAL_ADC_IRQHandler+0x244>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_IRQHandler+0x34>
 80019e4:	4b85      	ldr	r3, [pc, #532]	; (8001bfc <HAL_ADC_IRQHandler+0x248>)
 80019e6:	e000      	b.n	80019ea <HAL_ADC_IRQHandler+0x36>
 80019e8:	4b85      	ldr	r3, [pc, #532]	; (8001c00 <HAL_ADC_IRQHandler+0x24c>)
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fc8a 	bl	8001304 <LL_ADC_GetMultimode>
 80019f0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d017      	beq.n	8001a2c <HAL_ADC_IRQHandler+0x78>
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d012      	beq.n	8001a2c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d105      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a16:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f001 f8c2 	bl	8002ba8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d004      	beq.n	8001a40 <HAL_ADC_IRQHandler+0x8c>
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10a      	bne.n	8001a56 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8083 	beq.w	8001b52 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d07d      	beq.n	8001b52 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d105      	bne.n	8001a6e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fb92 	bl	800119c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d062      	beq.n	8001b44 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a5d      	ldr	r2, [pc, #372]	; (8001bf8 <HAL_ADC_IRQHandler+0x244>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d002      	beq.n	8001a8e <HAL_ADC_IRQHandler+0xda>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	e000      	b.n	8001a90 <HAL_ADC_IRQHandler+0xdc>
 8001a8e:	4b59      	ldr	r3, [pc, #356]	; (8001bf4 <HAL_ADC_IRQHandler+0x240>)
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d008      	beq.n	8001aaa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d005      	beq.n	8001aaa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d002      	beq.n	8001aaa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	2b09      	cmp	r3, #9
 8001aa8:	d104      	bne.n	8001ab4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	623b      	str	r3, [r7, #32]
 8001ab2:	e00c      	b.n	8001ace <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a4f      	ldr	r2, [pc, #316]	; (8001bf8 <HAL_ADC_IRQHandler+0x244>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d002      	beq.n	8001ac4 <HAL_ADC_IRQHandler+0x110>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	e000      	b.n	8001ac6 <HAL_ADC_IRQHandler+0x112>
 8001ac4:	4b4b      	ldr	r3, [pc, #300]	; (8001bf4 <HAL_ADC_IRQHandler+0x240>)
 8001ac6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d135      	bne.n	8001b44 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d12e      	bne.n	8001b44 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fcd6 	bl	800149c <LL_ADC_REG_IsConversionOngoing>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d11a      	bne.n	8001b2c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 020c 	bic.w	r2, r2, #12
 8001b04:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d112      	bne.n	8001b44 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	655a      	str	r2, [r3, #84]	; 0x54
 8001b2a:	e00b      	b.n	8001b44 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b30:	f043 0210 	orr.w	r2, r3, #16
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3c:	f043 0201 	orr.w	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f96f 	bl	8001e28 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	220c      	movs	r2, #12
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d004      	beq.n	8001b66 <HAL_ADC_IRQHandler+0x1b2>
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	f003 0320 	and.w	r3, r3, #32
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10b      	bne.n	8001b7e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80a0 	beq.w	8001cb2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 809a 	beq.w	8001cb2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fb50 	bl	8001240 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001ba0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff faf8 	bl	800119c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bac:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a11      	ldr	r2, [pc, #68]	; (8001bf8 <HAL_ADC_IRQHandler+0x244>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d002      	beq.n	8001bbe <HAL_ADC_IRQHandler+0x20a>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	e000      	b.n	8001bc0 <HAL_ADC_IRQHandler+0x20c>
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <HAL_ADC_IRQHandler+0x240>)
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d008      	beq.n	8001bda <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2b06      	cmp	r3, #6
 8001bd2:	d002      	beq.n	8001bda <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2b07      	cmp	r3, #7
 8001bd8:	d104      	bne.n	8001be4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	623b      	str	r3, [r7, #32]
 8001be2:	e014      	b.n	8001c0e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a03      	ldr	r2, [pc, #12]	; (8001bf8 <HAL_ADC_IRQHandler+0x244>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00a      	beq.n	8001c04 <HAL_ADC_IRQHandler+0x250>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	e008      	b.n	8001c06 <HAL_ADC_IRQHandler+0x252>
 8001bf4:	40022000 	.word	0x40022000
 8001bf8:	40022100 	.word	0x40022100
 8001bfc:	40022300 	.word	0x40022300
 8001c00:	58026300 	.word	0x58026300
 8001c04:	4b84      	ldr	r3, [pc, #528]	; (8001e18 <HAL_ADC_IRQHandler+0x464>)
 8001c06:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d047      	beq.n	8001ca4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <HAL_ADC_IRQHandler+0x27a>
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d03f      	beq.n	8001ca4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d13a      	bne.n	8001ca4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c38:	2b40      	cmp	r3, #64	; 0x40
 8001c3a:	d133      	bne.n	8001ca4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d12e      	bne.n	8001ca4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fc39 	bl	80014c2 <LL_ADC_INJ_IsConversionOngoing>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d11a      	bne.n	8001c8c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c64:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d112      	bne.n	8001ca4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c82:	f043 0201 	orr.w	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54
 8001c8a:	e00b      	b.n	8001ca4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c90:	f043 0210 	orr.w	r2, r3, #16
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	f043 0201 	orr.w	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 ff57 	bl	8002b58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2260      	movs	r2, #96	; 0x60
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d011      	beq.n	8001ce0 <HAL_ADC_IRQHandler+0x32c>
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8bc 	bl	8001e50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2280      	movs	r2, #128	; 0x80
 8001cde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d012      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x35c>
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00d      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 ff3d 	bl	8002b80 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d012      	beq.n	8001d40 <HAL_ADC_IRQHandler+0x38c>
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00d      	beq.n	8001d40 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 ff2f 	bl	8002b94 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d043      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x41e>
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d03e      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d60:	e021      	b.n	8001da6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d015      	beq.n	8001d94 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a2a      	ldr	r2, [pc, #168]	; (8001e18 <HAL_ADC_IRQHandler+0x464>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d004      	beq.n	8001d7c <HAL_ADC_IRQHandler+0x3c8>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a29      	ldr	r2, [pc, #164]	; (8001e1c <HAL_ADC_IRQHandler+0x468>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d101      	bne.n	8001d80 <HAL_ADC_IRQHandler+0x3cc>
 8001d7c:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <HAL_ADC_IRQHandler+0x46c>)
 8001d7e:	e000      	b.n	8001d82 <HAL_ADC_IRQHandler+0x3ce>
 8001d80:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <HAL_ADC_IRQHandler+0x470>)
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff facc 	bl	8001320 <LL_ADC_GetMultiDMATransfer>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
 8001d92:	e008      	b.n	8001da6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001da2:	2301      	movs	r3, #1
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d10e      	bne.n	8001dca <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	f043 0202 	orr.w	r2, r3, #2
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f84d 	bl	8001e64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2210      	movs	r2, #16
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d018      	beq.n	8001e0e <HAL_ADC_IRQHandler+0x45a>
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d013      	beq.n	8001e0e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dea:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	f043 0208 	orr.w	r2, r3, #8
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e06:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 feaf 	bl	8002b6c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	3728      	adds	r7, #40	; 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40022000 	.word	0x40022000
 8001e1c:	40022100 	.word	0x40022100
 8001e20:	40022300 	.word	0x40022300
 8001e24:	58026300 	.word	0x58026300

08001e28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b0a1      	sub	sp, #132	; 0x84
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4a9d      	ldr	r2, [pc, #628]	; (8002108 <HAL_ADC_ConfigChannel+0x290>)
 8001e92:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x2a>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e321      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x66e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff faf4 	bl	800149c <LL_ADC_REG_IsConversionOngoing>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 8306 	bne.w	80024c8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d108      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x62>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	0e9b      	lsrs	r3, r3, #26
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	e016      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x90>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eea:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001eec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	e003      	b.n	8001efe <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001ef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ef8:	fab3 f383 	clz	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	2201      	movs	r2, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	69d1      	ldr	r1, [r2, #28]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	430b      	orrs	r3, r1
 8001f14:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6859      	ldr	r1, [r3, #4]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	f7ff f94d 	bl	80011c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fab5 	bl	800149c <LL_ADC_REG_IsConversionOngoing>
 8001f32:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fac2 	bl	80014c2 <LL_ADC_INJ_IsConversionOngoing>
 8001f3e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 80b3 	bne.w	80020ae <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 80af 	bne.w	80020ae <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6819      	ldr	r1, [r3, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f7ff f982 	bl	8001266 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f62:	4b6a      	ldr	r3, [pc, #424]	; (800210c <HAL_ADC_ConfigChannel+0x294>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f6e:	d10b      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x110>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	e01d      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x14c>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10b      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x136>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	e00a      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x14c>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d027      	beq.n	800201e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6919      	ldr	r1, [r3, #16]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fdc:	f7ff f88a 	bl	80010f4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6919      	ldr	r1, [r3, #16]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	7e5b      	ldrb	r3, [r3, #25]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d102      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x17e>
 8001ff0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ff4:	e000      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x180>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f7ff f8b4 	bl	8001166 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	6919      	ldr	r1, [r3, #16]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	7e1b      	ldrb	r3, [r3, #24]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d102      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x19c>
 800200e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002012:	e000      	b.n	8002016 <HAL_ADC_ConfigChannel+0x19e>
 8002014:	2300      	movs	r3, #0
 8002016:	461a      	mov	r2, r3
 8002018:	f7ff f88c 	bl	8001134 <LL_ADC_SetDataRightShift>
 800201c:	e047      	b.n	80020ae <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002024:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	069b      	lsls	r3, r3, #26
 800202e:	429a      	cmp	r2, r3
 8002030:	d107      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002040:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002048:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	069b      	lsls	r3, r3, #26
 8002052:	429a      	cmp	r2, r3
 8002054:	d107      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002064:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800206c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	069b      	lsls	r3, r3, #26
 8002076:	429a      	cmp	r2, r3
 8002078:	d107      	bne.n	800208a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002088:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002090:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	069b      	lsls	r3, r3, #26
 800209a:	429a      	cmp	r2, r3
 800209c:	d107      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020ac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f9b8 	bl	8001428 <LL_ADC_IsEnabled>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 820d 	bne.w	80024da <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6819      	ldr	r1, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	461a      	mov	r2, r3
 80020ce:	f7ff f8f5 	bl	80012bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <HAL_ADC_ConfigChannel+0x290>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	f040 8133 	bne.w	8002344 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d110      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x298>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	0e9b      	lsrs	r3, r3, #26
 80020f4:	3301      	adds	r3, #1
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	2b09      	cmp	r3, #9
 80020fc:	bf94      	ite	ls
 80020fe:	2301      	movls	r3, #1
 8002100:	2300      	movhi	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	e01e      	b.n	8002144 <HAL_ADC_ConfigChannel+0x2cc>
 8002106:	bf00      	nop
 8002108:	47ff0000 	.word	0x47ff0000
 800210c:	5c001000 	.word	0x5c001000
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800211e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002120:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002128:	2320      	movs	r3, #32
 800212a:	e003      	b.n	8002134 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800212c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	3301      	adds	r3, #1
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	2b09      	cmp	r3, #9
 800213c:	bf94      	ite	ls
 800213e:	2301      	movls	r3, #1
 8002140:	2300      	movhi	r3, #0
 8002142:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002144:	2b00      	cmp	r3, #0
 8002146:	d079      	beq.n	800223c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002150:	2b00      	cmp	r3, #0
 8002152:	d107      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x2ec>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0e9b      	lsrs	r3, r3, #26
 800215a:	3301      	adds	r3, #1
 800215c:	069b      	lsls	r3, r3, #26
 800215e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002162:	e015      	b.n	8002190 <HAL_ADC_ConfigChannel+0x318>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002174:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800217c:	2320      	movs	r3, #32
 800217e:	e003      	b.n	8002188 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	3301      	adds	r3, #1
 800218a:	069b      	lsls	r3, r3, #26
 800218c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x338>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0e9b      	lsrs	r3, r3, #26
 80021a2:	3301      	adds	r3, #1
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	2101      	movs	r1, #1
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	e017      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x368>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80021be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80021c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80021c8:	2320      	movs	r3, #32
 80021ca:	e003      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80021cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	3301      	adds	r3, #1
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	ea42 0103 	orr.w	r1, r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10a      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x38e>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	3301      	adds	r3, #1
 80021f8:	f003 021f 	and.w	r2, r3, #31
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	051b      	lsls	r3, r3, #20
 8002204:	e018      	b.n	8002238 <HAL_ADC_ConfigChannel+0x3c0>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800221e:	2320      	movs	r3, #32
 8002220:	e003      	b.n	800222a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002224:	fab3 f383 	clz	r3, r3
 8002228:	b2db      	uxtb	r3, r3
 800222a:	3301      	adds	r3, #1
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	4613      	mov	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002238:	430b      	orrs	r3, r1
 800223a:	e07e      	b.n	800233a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002244:	2b00      	cmp	r3, #0
 8002246:	d107      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x3e0>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	0e9b      	lsrs	r3, r3, #26
 800224e:	3301      	adds	r3, #1
 8002250:	069b      	lsls	r3, r3, #26
 8002252:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002256:	e015      	b.n	8002284 <HAL_ADC_ConfigChannel+0x40c>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e003      	b.n	800227c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3301      	adds	r3, #1
 800227e:	069b      	lsls	r3, r3, #26
 8002280:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800228c:	2b00      	cmp	r3, #0
 800228e:	d109      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x42c>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	3301      	adds	r3, #1
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	2101      	movs	r1, #1
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	e017      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x45c>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	61bb      	str	r3, [r7, #24]
  return result;
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80022bc:	2320      	movs	r3, #32
 80022be:	e003      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	ea42 0103 	orr.w	r1, r2, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10d      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x488>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	3301      	adds	r3, #1
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	3b1e      	subs	r3, #30
 80022f8:	051b      	lsls	r3, r3, #20
 80022fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022fe:	e01b      	b.n	8002338 <HAL_ADC_ConfigChannel+0x4c0>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	60fb      	str	r3, [r7, #12]
  return result;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002318:	2320      	movs	r3, #32
 800231a:	e003      	b.n	8002324 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	3301      	adds	r3, #1
 8002326:	f003 021f 	and.w	r2, r3, #31
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	3b1e      	subs	r3, #30
 8002332:	051b      	lsls	r3, r3, #20
 8002334:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002338:	430b      	orrs	r3, r1
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	6892      	ldr	r2, [r2, #8]
 800233e:	4619      	mov	r1, r3
 8002340:	f7fe ff91 	bl	8001266 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f280 80c6 	bge.w	80024da <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a67      	ldr	r2, [pc, #412]	; (80024f0 <HAL_ADC_ConfigChannel+0x678>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d004      	beq.n	8002362 <HAL_ADC_ConfigChannel+0x4ea>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a65      	ldr	r2, [pc, #404]	; (80024f4 <HAL_ADC_ConfigChannel+0x67c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d101      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x4ee>
 8002362:	4b65      	ldr	r3, [pc, #404]	; (80024f8 <HAL_ADC_ConfigChannel+0x680>)
 8002364:	e000      	b.n	8002368 <HAL_ADC_ConfigChannel+0x4f0>
 8002366:	4b65      	ldr	r3, [pc, #404]	; (80024fc <HAL_ADC_ConfigChannel+0x684>)
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe feb5 	bl	80010d8 <LL_ADC_GetCommonPathInternalCh>
 800236e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a5e      	ldr	r2, [pc, #376]	; (80024f0 <HAL_ADC_ConfigChannel+0x678>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d004      	beq.n	8002384 <HAL_ADC_ConfigChannel+0x50c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a5d      	ldr	r2, [pc, #372]	; (80024f4 <HAL_ADC_ConfigChannel+0x67c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d10e      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x52a>
 8002384:	485a      	ldr	r0, [pc, #360]	; (80024f0 <HAL_ADC_ConfigChannel+0x678>)
 8002386:	f7ff f84f 	bl	8001428 <LL_ADC_IsEnabled>
 800238a:	4604      	mov	r4, r0
 800238c:	4859      	ldr	r0, [pc, #356]	; (80024f4 <HAL_ADC_ConfigChannel+0x67c>)
 800238e:	f7ff f84b 	bl	8001428 <LL_ADC_IsEnabled>
 8002392:	4603      	mov	r3, r0
 8002394:	4323      	orrs	r3, r4
 8002396:	2b00      	cmp	r3, #0
 8002398:	bf0c      	ite	eq
 800239a:	2301      	moveq	r3, #1
 800239c:	2300      	movne	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	e008      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x53c>
 80023a2:	4857      	ldr	r0, [pc, #348]	; (8002500 <HAL_ADC_ConfigChannel+0x688>)
 80023a4:	f7ff f840 	bl	8001428 <LL_ADC_IsEnabled>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bf0c      	ite	eq
 80023ae:	2301      	moveq	r3, #1
 80023b0:	2300      	movne	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d07d      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a51      	ldr	r2, [pc, #324]	; (8002504 <HAL_ADC_ConfigChannel+0x68c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d130      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x5ac>
 80023c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d12b      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a4b      	ldr	r2, [pc, #300]	; (8002500 <HAL_ADC_ConfigChannel+0x688>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	f040 8081 	bne.w	80024da <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a44      	ldr	r2, [pc, #272]	; (80024f0 <HAL_ADC_ConfigChannel+0x678>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d004      	beq.n	80023ec <HAL_ADC_ConfigChannel+0x574>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a43      	ldr	r2, [pc, #268]	; (80024f4 <HAL_ADC_ConfigChannel+0x67c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x578>
 80023ec:	4a42      	ldr	r2, [pc, #264]	; (80024f8 <HAL_ADC_ConfigChannel+0x680>)
 80023ee:	e000      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x57a>
 80023f0:	4a42      	ldr	r2, [pc, #264]	; (80024fc <HAL_ADC_ConfigChannel+0x684>)
 80023f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023f8:	4619      	mov	r1, r3
 80023fa:	4610      	mov	r0, r2
 80023fc:	f7fe fe59 	bl	80010b2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002400:	4b41      	ldr	r3, [pc, #260]	; (8002508 <HAL_ADC_ConfigChannel+0x690>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	099b      	lsrs	r3, r3, #6
 8002406:	4a41      	ldr	r2, [pc, #260]	; (800250c <HAL_ADC_ConfigChannel+0x694>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	3301      	adds	r3, #1
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002414:	e002      	b.n	800241c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	3b01      	subs	r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f9      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002422:	e05a      	b.n	80024da <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a39      	ldr	r2, [pc, #228]	; (8002510 <HAL_ADC_ConfigChannel+0x698>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d11e      	bne.n	800246c <HAL_ADC_ConfigChannel+0x5f4>
 800242e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d119      	bne.n	800246c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a30      	ldr	r2, [pc, #192]	; (8002500 <HAL_ADC_ConfigChannel+0x688>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d14b      	bne.n	80024da <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a2a      	ldr	r2, [pc, #168]	; (80024f0 <HAL_ADC_ConfigChannel+0x678>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d004      	beq.n	8002456 <HAL_ADC_ConfigChannel+0x5de>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a28      	ldr	r2, [pc, #160]	; (80024f4 <HAL_ADC_ConfigChannel+0x67c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d101      	bne.n	800245a <HAL_ADC_ConfigChannel+0x5e2>
 8002456:	4a28      	ldr	r2, [pc, #160]	; (80024f8 <HAL_ADC_ConfigChannel+0x680>)
 8002458:	e000      	b.n	800245c <HAL_ADC_ConfigChannel+0x5e4>
 800245a:	4a28      	ldr	r2, [pc, #160]	; (80024fc <HAL_ADC_ConfigChannel+0x684>)
 800245c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002462:	4619      	mov	r1, r3
 8002464:	4610      	mov	r0, r2
 8002466:	f7fe fe24 	bl	80010b2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800246a:	e036      	b.n	80024da <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a28      	ldr	r2, [pc, #160]	; (8002514 <HAL_ADC_ConfigChannel+0x69c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d131      	bne.n	80024da <HAL_ADC_ConfigChannel+0x662>
 8002476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d12c      	bne.n	80024da <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <HAL_ADC_ConfigChannel+0x688>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d127      	bne.n	80024da <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a18      	ldr	r2, [pc, #96]	; (80024f0 <HAL_ADC_ConfigChannel+0x678>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d004      	beq.n	800249e <HAL_ADC_ConfigChannel+0x626>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a16      	ldr	r2, [pc, #88]	; (80024f4 <HAL_ADC_ConfigChannel+0x67c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d101      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x62a>
 800249e:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <HAL_ADC_ConfigChannel+0x680>)
 80024a0:	e000      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x62c>
 80024a2:	4a16      	ldr	r2, [pc, #88]	; (80024fc <HAL_ADC_ConfigChannel+0x684>)
 80024a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024aa:	4619      	mov	r1, r3
 80024ac:	4610      	mov	r0, r2
 80024ae:	f7fe fe00 	bl	80010b2 <LL_ADC_SetCommonPathInternalCh>
 80024b2:	e012      	b.n	80024da <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b8:	f043 0220 	orr.w	r2, r3, #32
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80024c6:	e008      	b.n	80024da <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024cc:	f043 0220 	orr.w	r2, r3, #32
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3784      	adds	r7, #132	; 0x84
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd90      	pop	{r4, r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40022000 	.word	0x40022000
 80024f4:	40022100 	.word	0x40022100
 80024f8:	40022300 	.word	0x40022300
 80024fc:	58026300 	.word	0x58026300
 8002500:	58026000 	.word	0x58026000
 8002504:	cb840000 	.word	0xcb840000
 8002508:	24000000 	.word	0x24000000
 800250c:	053e2d63 	.word	0x053e2d63
 8002510:	c7520000 	.word	0xc7520000
 8002514:	cfb80000 	.word	0xcfb80000

08002518 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe ff7f 	bl	8001428 <LL_ADC_IsEnabled>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d16e      	bne.n	800260e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	4b38      	ldr	r3, [pc, #224]	; (8002618 <ADC_Enable+0x100>)
 8002538:	4013      	ands	r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00d      	beq.n	800255a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 0210 	orr.w	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254e:	f043 0201 	orr.w	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e05a      	b.n	8002610 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe ff3a 	bl	80013d8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002564:	f7fe fd64 	bl	8001030 <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a2b      	ldr	r2, [pc, #172]	; (800261c <ADC_Enable+0x104>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d004      	beq.n	800257e <ADC_Enable+0x66>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a29      	ldr	r2, [pc, #164]	; (8002620 <ADC_Enable+0x108>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d101      	bne.n	8002582 <ADC_Enable+0x6a>
 800257e:	4b29      	ldr	r3, [pc, #164]	; (8002624 <ADC_Enable+0x10c>)
 8002580:	e000      	b.n	8002584 <ADC_Enable+0x6c>
 8002582:	4b29      	ldr	r3, [pc, #164]	; (8002628 <ADC_Enable+0x110>)
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe febd 	bl	8001304 <LL_ADC_GetMultimode>
 800258a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a23      	ldr	r2, [pc, #140]	; (8002620 <ADC_Enable+0x108>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d002      	beq.n	800259c <ADC_Enable+0x84>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	e000      	b.n	800259e <ADC_Enable+0x86>
 800259c:	4b1f      	ldr	r3, [pc, #124]	; (800261c <ADC_Enable+0x104>)
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d02c      	beq.n	8002600 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d130      	bne.n	800260e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025ac:	e028      	b.n	8002600 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe ff38 	bl	8001428 <LL_ADC_IsEnabled>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d104      	bne.n	80025c8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe ff08 	bl	80013d8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025c8:	f7fe fd32 	bl	8001030 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d914      	bls.n	8002600 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d00d      	beq.n	8002600 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	f043 0210 	orr.w	r2, r3, #16
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e007      	b.n	8002610 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d1cf      	bne.n	80025ae <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	8000003f 	.word	0x8000003f
 800261c:	40022000 	.word	0x40022000
 8002620:	40022100 	.word	0x40022100
 8002624:	40022300 	.word	0x40022300
 8002628:	58026300 	.word	0x58026300

0800262c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe ff08 	bl	800144e <LL_ADC_IsDisableOngoing>
 800263e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe feef 	bl	8001428 <LL_ADC_IsEnabled>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d047      	beq.n	80026e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d144      	bne.n	80026e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 030d 	and.w	r3, r3, #13
 8002660:	2b01      	cmp	r3, #1
 8002662:	d10c      	bne.n	800267e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fec9 	bl	8001400 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2203      	movs	r2, #3
 8002674:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002676:	f7fe fcdb 	bl	8001030 <HAL_GetTick>
 800267a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800267c:	e029      	b.n	80026d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	f043 0210 	orr.w	r2, r3, #16
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e023      	b.n	80026e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800269a:	f7fe fcc9 	bl	8001030 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d914      	bls.n	80026d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00d      	beq.n	80026d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	f043 0210 	orr.w	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e007      	b.n	80026e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1dc      	bne.n	800269a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002700:	2b00      	cmp	r3, #0
 8002702:	d14b      	bne.n	800279c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002708:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d021      	beq.n	8002762 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fd3a 	bl	800119c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d032      	beq.n	8002794 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d12b      	bne.n	8002794 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002740:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d11f      	bne.n	8002794 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	655a      	str	r2, [r3, #84]	; 0x54
 8002760:	e018      	b.n	8002794 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d111      	bne.n	8002794 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002774:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f043 0201 	orr.w	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f7ff fb47 	bl	8001e28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800279a:	e00e      	b.n	80027ba <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7ff fb5b 	bl	8001e64 <HAL_ADC_ErrorCallback>
}
 80027ae:	e004      	b.n	80027ba <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f7ff fb33 	bl	8001e3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	f043 0204 	orr.w	r2, r3, #4
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f7ff fb2d 	bl	8001e64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a7a      	ldr	r2, [pc, #488]	; (8002a0c <ADC_ConfigureBoostMode+0x1f8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d004      	beq.n	8002830 <ADC_ConfigureBoostMode+0x1c>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a79      	ldr	r2, [pc, #484]	; (8002a10 <ADC_ConfigureBoostMode+0x1fc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d109      	bne.n	8002844 <ADC_ConfigureBoostMode+0x30>
 8002830:	4b78      	ldr	r3, [pc, #480]	; (8002a14 <ADC_ConfigureBoostMode+0x200>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002838:	2b00      	cmp	r3, #0
 800283a:	bf14      	ite	ne
 800283c:	2301      	movne	r3, #1
 800283e:	2300      	moveq	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	e008      	b.n	8002856 <ADC_ConfigureBoostMode+0x42>
 8002844:	4b74      	ldr	r3, [pc, #464]	; (8002a18 <ADC_ConfigureBoostMode+0x204>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf14      	ite	ne
 8002850:	2301      	movne	r3, #1
 8002852:	2300      	moveq	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d01c      	beq.n	8002894 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800285a:	f003 fcf5 	bl	8006248 <HAL_RCC_GetHCLKFreq>
 800285e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002868:	d010      	beq.n	800288c <ADC_ConfigureBoostMode+0x78>
 800286a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800286e:	d873      	bhi.n	8002958 <ADC_ConfigureBoostMode+0x144>
 8002870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002874:	d002      	beq.n	800287c <ADC_ConfigureBoostMode+0x68>
 8002876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800287a:	d16d      	bne.n	8002958 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	0c1b      	lsrs	r3, r3, #16
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	fbb2 f3f3 	udiv	r3, r2, r3
 8002888:	60fb      	str	r3, [r7, #12]
        break;
 800288a:	e068      	b.n	800295e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	089b      	lsrs	r3, r3, #2
 8002890:	60fb      	str	r3, [r7, #12]
        break;
 8002892:	e064      	b.n	800295e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002894:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002898:	f04f 0100 	mov.w	r1, #0
 800289c:	f004 ff66 	bl	800776c <HAL_RCCEx_GetPeriphCLKFreq>
 80028a0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80028aa:	d051      	beq.n	8002950 <ADC_ConfigureBoostMode+0x13c>
 80028ac:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80028b0:	d854      	bhi.n	800295c <ADC_ConfigureBoostMode+0x148>
 80028b2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80028b6:	d047      	beq.n	8002948 <ADC_ConfigureBoostMode+0x134>
 80028b8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80028bc:	d84e      	bhi.n	800295c <ADC_ConfigureBoostMode+0x148>
 80028be:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80028c2:	d03d      	beq.n	8002940 <ADC_ConfigureBoostMode+0x12c>
 80028c4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80028c8:	d848      	bhi.n	800295c <ADC_ConfigureBoostMode+0x148>
 80028ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028ce:	d033      	beq.n	8002938 <ADC_ConfigureBoostMode+0x124>
 80028d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028d4:	d842      	bhi.n	800295c <ADC_ConfigureBoostMode+0x148>
 80028d6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80028da:	d029      	beq.n	8002930 <ADC_ConfigureBoostMode+0x11c>
 80028dc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80028e0:	d83c      	bhi.n	800295c <ADC_ConfigureBoostMode+0x148>
 80028e2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80028e6:	d01a      	beq.n	800291e <ADC_ConfigureBoostMode+0x10a>
 80028e8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80028ec:	d836      	bhi.n	800295c <ADC_ConfigureBoostMode+0x148>
 80028ee:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80028f2:	d014      	beq.n	800291e <ADC_ConfigureBoostMode+0x10a>
 80028f4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80028f8:	d830      	bhi.n	800295c <ADC_ConfigureBoostMode+0x148>
 80028fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028fe:	d00e      	beq.n	800291e <ADC_ConfigureBoostMode+0x10a>
 8002900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002904:	d82a      	bhi.n	800295c <ADC_ConfigureBoostMode+0x148>
 8002906:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800290a:	d008      	beq.n	800291e <ADC_ConfigureBoostMode+0x10a>
 800290c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002910:	d824      	bhi.n	800295c <ADC_ConfigureBoostMode+0x148>
 8002912:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002916:	d002      	beq.n	800291e <ADC_ConfigureBoostMode+0x10a>
 8002918:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800291c:	d11e      	bne.n	800295c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	0c9b      	lsrs	r3, r3, #18
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	60fb      	str	r3, [r7, #12]
        break;
 800292e:	e016      	b.n	800295e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	60fb      	str	r3, [r7, #12]
        break;
 8002936:	e012      	b.n	800295e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	60fb      	str	r3, [r7, #12]
        break;
 800293e:	e00e      	b.n	800295e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	099b      	lsrs	r3, r3, #6
 8002944:	60fb      	str	r3, [r7, #12]
        break;
 8002946:	e00a      	b.n	800295e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	09db      	lsrs	r3, r3, #7
 800294c:	60fb      	str	r3, [r7, #12]
        break;
 800294e:	e006      	b.n	800295e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	0a1b      	lsrs	r3, r3, #8
 8002954:	60fb      	str	r3, [r7, #12]
        break;
 8002956:	e002      	b.n	800295e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002958:	bf00      	nop
 800295a:	e000      	b.n	800295e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800295c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800295e:	f7fe fb73 	bl	8001048 <HAL_GetREVID>
 8002962:	4603      	mov	r3, r0
 8002964:	f241 0203 	movw	r2, #4099	; 0x1003
 8002968:	4293      	cmp	r3, r2
 800296a:	d815      	bhi.n	8002998 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4a2b      	ldr	r2, [pc, #172]	; (8002a1c <ADC_ConfigureBoostMode+0x208>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d908      	bls.n	8002986 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002982:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002984:	e03e      	b.n	8002a04 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002994:	609a      	str	r2, [r3, #8]
}
 8002996:	e035      	b.n	8002a04 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4a1f      	ldr	r2, [pc, #124]	; (8002a20 <ADC_ConfigureBoostMode+0x20c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d808      	bhi.n	80029b8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80029b4:	609a      	str	r2, [r3, #8]
}
 80029b6:	e025      	b.n	8002a04 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4a1a      	ldr	r2, [pc, #104]	; (8002a24 <ADC_ConfigureBoostMode+0x210>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d80a      	bhi.n	80029d6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d2:	609a      	str	r2, [r3, #8]
}
 80029d4:	e016      	b.n	8002a04 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <ADC_ConfigureBoostMode+0x214>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d80a      	bhi.n	80029f4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f0:	609a      	str	r2, [r3, #8]
}
 80029f2:	e007      	b.n	8002a04 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002a02:	609a      	str	r2, [r3, #8]
}
 8002a04:	bf00      	nop
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40022000 	.word	0x40022000
 8002a10:	40022100 	.word	0x40022100
 8002a14:	40022300 	.word	0x40022300
 8002a18:	58026300 	.word	0x58026300
 8002a1c:	01312d00 	.word	0x01312d00
 8002a20:	005f5e10 	.word	0x005f5e10
 8002a24:	00bebc20 	.word	0x00bebc20
 8002a28:	017d7840 	.word	0x017d7840

08002a2c <LL_ADC_StartCalibration>:
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <LL_ADC_StartCalibration+0x38>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	609a      	str	r2, [r3, #8]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	3ffeffc0 	.word	0x3ffeffc0

08002a68 <LL_ADC_IsCalibrationOnGoing>:
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a7c:	d101      	bne.n	8002a82 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_ADCEx_Calibration_Start+0x1e>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e04c      	b.n	8002b48 <HAL_ADCEx_Calibration_Start+0xb8>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7ff fdb8 	bl	800262c <ADC_Disable>
 8002abc:	4603      	mov	r3, r0
 8002abe:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d135      	bne.n	8002b32 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aca:	4b21      	ldr	r3, [pc, #132]	; (8002b50 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	f043 0202 	orr.w	r2, r3, #2
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ffa4 	bl	8002a2c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ae4:	e014      	b.n	8002b10 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4a19      	ldr	r2, [pc, #100]	; (8002b54 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d30d      	bcc.n	8002b10 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	f023 0312 	bic.w	r3, r3, #18
 8002afc:	f043 0210 	orr.w	r2, r3, #16
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e01b      	b.n	8002b48 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ffa7 	bl	8002a68 <LL_ADC_IsCalibrationOnGoing>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1e2      	bne.n	8002ae6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	f023 0303 	bic.w	r3, r3, #3
 8002b28:	f043 0201 	orr.w	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54
 8002b30:	e005      	b.n	8002b3e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b36:	f043 0210 	orr.w	r2, r3, #16
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	ffffeefd 	.word	0xffffeefd
 8002b54:	25c3f800 	.word	0x25c3f800

08002b58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <__NVIC_SetPriorityGrouping+0x40>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <__NVIC_SetPriorityGrouping+0x44>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bea:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <__NVIC_SetPriorityGrouping+0x40>)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	60d3      	str	r3, [r2, #12]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000ed00 	.word	0xe000ed00
 8002c00:	05fa0000 	.word	0x05fa0000

08002c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c08:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <__NVIC_GetPriorityGrouping+0x18>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	f003 0307 	and.w	r3, r3, #7
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	db0b      	blt.n	8002c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	f003 021f 	and.w	r2, r3, #31
 8002c38:	4907      	ldr	r1, [pc, #28]	; (8002c58 <__NVIC_EnableIRQ+0x38>)
 8002c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2001      	movs	r0, #1
 8002c42:	fa00 f202 	lsl.w	r2, r0, r2
 8002c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000e100 	.word	0xe000e100

08002c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	6039      	str	r1, [r7, #0]
 8002c66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	db0a      	blt.n	8002c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	490c      	ldr	r1, [pc, #48]	; (8002ca8 <__NVIC_SetPriority+0x4c>)
 8002c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c7a:	0112      	lsls	r2, r2, #4
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c84:	e00a      	b.n	8002c9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4908      	ldr	r1, [pc, #32]	; (8002cac <__NVIC_SetPriority+0x50>)
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	3b04      	subs	r3, #4
 8002c94:	0112      	lsls	r2, r2, #4
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	440b      	add	r3, r1
 8002c9a:	761a      	strb	r2, [r3, #24]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000e100 	.word	0xe000e100
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b089      	sub	sp, #36	; 0x24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f1c3 0307 	rsb	r3, r3, #7
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	bf28      	it	cs
 8002cce:	2304      	movcs	r3, #4
 8002cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	2b06      	cmp	r3, #6
 8002cd8:	d902      	bls.n	8002ce0 <NVIC_EncodePriority+0x30>
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3b03      	subs	r3, #3
 8002cde:	e000      	b.n	8002ce2 <NVIC_EncodePriority+0x32>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	43d9      	mvns	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	4313      	orrs	r3, r2
         );
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3724      	adds	r7, #36	; 0x24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ff4c 	bl	8002bbc <__NVIC_SetPriorityGrouping>
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d3a:	f7ff ff63 	bl	8002c04 <__NVIC_GetPriorityGrouping>
 8002d3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	6978      	ldr	r0, [r7, #20]
 8002d46:	f7ff ffb3 	bl	8002cb0 <NVIC_EncodePriority>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff ff82 	bl	8002c5c <__NVIC_SetPriority>
}
 8002d58:	bf00      	nop
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff56 	bl	8002c20 <__NVIC_EnableIRQ>
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d84:	f7fe f954 	bl	8001030 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e316      	b.n	80033c2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a66      	ldr	r2, [pc, #408]	; (8002f34 <HAL_DMA_Init+0x1b8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d04a      	beq.n	8002e34 <HAL_DMA_Init+0xb8>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a65      	ldr	r2, [pc, #404]	; (8002f38 <HAL_DMA_Init+0x1bc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d045      	beq.n	8002e34 <HAL_DMA_Init+0xb8>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a63      	ldr	r2, [pc, #396]	; (8002f3c <HAL_DMA_Init+0x1c0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d040      	beq.n	8002e34 <HAL_DMA_Init+0xb8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a62      	ldr	r2, [pc, #392]	; (8002f40 <HAL_DMA_Init+0x1c4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d03b      	beq.n	8002e34 <HAL_DMA_Init+0xb8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a60      	ldr	r2, [pc, #384]	; (8002f44 <HAL_DMA_Init+0x1c8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d036      	beq.n	8002e34 <HAL_DMA_Init+0xb8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a5f      	ldr	r2, [pc, #380]	; (8002f48 <HAL_DMA_Init+0x1cc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d031      	beq.n	8002e34 <HAL_DMA_Init+0xb8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a5d      	ldr	r2, [pc, #372]	; (8002f4c <HAL_DMA_Init+0x1d0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d02c      	beq.n	8002e34 <HAL_DMA_Init+0xb8>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a5c      	ldr	r2, [pc, #368]	; (8002f50 <HAL_DMA_Init+0x1d4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d027      	beq.n	8002e34 <HAL_DMA_Init+0xb8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a5a      	ldr	r2, [pc, #360]	; (8002f54 <HAL_DMA_Init+0x1d8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d022      	beq.n	8002e34 <HAL_DMA_Init+0xb8>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a59      	ldr	r2, [pc, #356]	; (8002f58 <HAL_DMA_Init+0x1dc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d01d      	beq.n	8002e34 <HAL_DMA_Init+0xb8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a57      	ldr	r2, [pc, #348]	; (8002f5c <HAL_DMA_Init+0x1e0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d018      	beq.n	8002e34 <HAL_DMA_Init+0xb8>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a56      	ldr	r2, [pc, #344]	; (8002f60 <HAL_DMA_Init+0x1e4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d013      	beq.n	8002e34 <HAL_DMA_Init+0xb8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a54      	ldr	r2, [pc, #336]	; (8002f64 <HAL_DMA_Init+0x1e8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00e      	beq.n	8002e34 <HAL_DMA_Init+0xb8>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a53      	ldr	r2, [pc, #332]	; (8002f68 <HAL_DMA_Init+0x1ec>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d009      	beq.n	8002e34 <HAL_DMA_Init+0xb8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a51      	ldr	r2, [pc, #324]	; (8002f6c <HAL_DMA_Init+0x1f0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d004      	beq.n	8002e34 <HAL_DMA_Init+0xb8>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a50      	ldr	r2, [pc, #320]	; (8002f70 <HAL_DMA_Init+0x1f4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d101      	bne.n	8002e38 <HAL_DMA_Init+0xbc>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <HAL_DMA_Init+0xbe>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 813b 	beq.w	80030b6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a37      	ldr	r2, [pc, #220]	; (8002f34 <HAL_DMA_Init+0x1b8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d04a      	beq.n	8002ef0 <HAL_DMA_Init+0x174>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a36      	ldr	r2, [pc, #216]	; (8002f38 <HAL_DMA_Init+0x1bc>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d045      	beq.n	8002ef0 <HAL_DMA_Init+0x174>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a34      	ldr	r2, [pc, #208]	; (8002f3c <HAL_DMA_Init+0x1c0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d040      	beq.n	8002ef0 <HAL_DMA_Init+0x174>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a33      	ldr	r2, [pc, #204]	; (8002f40 <HAL_DMA_Init+0x1c4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d03b      	beq.n	8002ef0 <HAL_DMA_Init+0x174>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a31      	ldr	r2, [pc, #196]	; (8002f44 <HAL_DMA_Init+0x1c8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d036      	beq.n	8002ef0 <HAL_DMA_Init+0x174>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a30      	ldr	r2, [pc, #192]	; (8002f48 <HAL_DMA_Init+0x1cc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d031      	beq.n	8002ef0 <HAL_DMA_Init+0x174>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a2e      	ldr	r2, [pc, #184]	; (8002f4c <HAL_DMA_Init+0x1d0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d02c      	beq.n	8002ef0 <HAL_DMA_Init+0x174>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2d      	ldr	r2, [pc, #180]	; (8002f50 <HAL_DMA_Init+0x1d4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d027      	beq.n	8002ef0 <HAL_DMA_Init+0x174>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a2b      	ldr	r2, [pc, #172]	; (8002f54 <HAL_DMA_Init+0x1d8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d022      	beq.n	8002ef0 <HAL_DMA_Init+0x174>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a2a      	ldr	r2, [pc, #168]	; (8002f58 <HAL_DMA_Init+0x1dc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d01d      	beq.n	8002ef0 <HAL_DMA_Init+0x174>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a28      	ldr	r2, [pc, #160]	; (8002f5c <HAL_DMA_Init+0x1e0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d018      	beq.n	8002ef0 <HAL_DMA_Init+0x174>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <HAL_DMA_Init+0x1e4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d013      	beq.n	8002ef0 <HAL_DMA_Init+0x174>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a25      	ldr	r2, [pc, #148]	; (8002f64 <HAL_DMA_Init+0x1e8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_DMA_Init+0x174>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a24      	ldr	r2, [pc, #144]	; (8002f68 <HAL_DMA_Init+0x1ec>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_DMA_Init+0x174>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a22      	ldr	r2, [pc, #136]	; (8002f6c <HAL_DMA_Init+0x1f0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_DMA_Init+0x174>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a21      	ldr	r2, [pc, #132]	; (8002f70 <HAL_DMA_Init+0x1f4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d108      	bne.n	8002f02 <HAL_DMA_Init+0x186>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e007      	b.n	8002f12 <HAL_DMA_Init+0x196>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0201 	bic.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f12:	e02f      	b.n	8002f74 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f14:	f7fe f88c 	bl	8001030 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b05      	cmp	r3, #5
 8002f20:	d928      	bls.n	8002f74 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e246      	b.n	80033c2 <HAL_DMA_Init+0x646>
 8002f34:	40020010 	.word	0x40020010
 8002f38:	40020028 	.word	0x40020028
 8002f3c:	40020040 	.word	0x40020040
 8002f40:	40020058 	.word	0x40020058
 8002f44:	40020070 	.word	0x40020070
 8002f48:	40020088 	.word	0x40020088
 8002f4c:	400200a0 	.word	0x400200a0
 8002f50:	400200b8 	.word	0x400200b8
 8002f54:	40020410 	.word	0x40020410
 8002f58:	40020428 	.word	0x40020428
 8002f5c:	40020440 	.word	0x40020440
 8002f60:	40020458 	.word	0x40020458
 8002f64:	40020470 	.word	0x40020470
 8002f68:	40020488 	.word	0x40020488
 8002f6c:	400204a0 	.word	0x400204a0
 8002f70:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1c8      	bne.n	8002f14 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4b83      	ldr	r3, [pc, #524]	; (800319c <HAL_DMA_Init+0x420>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002f9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d107      	bne.n	8002fd8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002fd8:	4b71      	ldr	r3, [pc, #452]	; (80031a0 <HAL_DMA_Init+0x424>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4b71      	ldr	r3, [pc, #452]	; (80031a4 <HAL_DMA_Init+0x428>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fe4:	d328      	bcc.n	8003038 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b28      	cmp	r3, #40	; 0x28
 8002fec:	d903      	bls.n	8002ff6 <HAL_DMA_Init+0x27a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b2e      	cmp	r3, #46	; 0x2e
 8002ff4:	d917      	bls.n	8003026 <HAL_DMA_Init+0x2aa>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b3e      	cmp	r3, #62	; 0x3e
 8002ffc:	d903      	bls.n	8003006 <HAL_DMA_Init+0x28a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b42      	cmp	r3, #66	; 0x42
 8003004:	d90f      	bls.n	8003026 <HAL_DMA_Init+0x2aa>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b46      	cmp	r3, #70	; 0x46
 800300c:	d903      	bls.n	8003016 <HAL_DMA_Init+0x29a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b48      	cmp	r3, #72	; 0x48
 8003014:	d907      	bls.n	8003026 <HAL_DMA_Init+0x2aa>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b4e      	cmp	r3, #78	; 0x4e
 800301c:	d905      	bls.n	800302a <HAL_DMA_Init+0x2ae>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b52      	cmp	r3, #82	; 0x52
 8003024:	d801      	bhi.n	800302a <HAL_DMA_Init+0x2ae>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_DMA_Init+0x2b0>
 800302a:	2300      	movs	r3, #0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003036:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f023 0307 	bic.w	r3, r3, #7
 800304e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	2b04      	cmp	r3, #4
 8003060:	d117      	bne.n	8003092 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00e      	beq.n	8003092 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f001 fdcf 	bl	8004c18 <DMA_CheckFifoParam>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2240      	movs	r2, #64	; 0x40
 8003084:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e197      	b.n	80033c2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f001 fd0a 	bl	8004ab4 <DMA_CalcBaseAndBitshift>
 80030a0:	4603      	mov	r3, r0
 80030a2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	223f      	movs	r2, #63	; 0x3f
 80030ae:	409a      	lsls	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	e0cd      	b.n	8003252 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a3b      	ldr	r2, [pc, #236]	; (80031a8 <HAL_DMA_Init+0x42c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d022      	beq.n	8003106 <HAL_DMA_Init+0x38a>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a39      	ldr	r2, [pc, #228]	; (80031ac <HAL_DMA_Init+0x430>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d01d      	beq.n	8003106 <HAL_DMA_Init+0x38a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a38      	ldr	r2, [pc, #224]	; (80031b0 <HAL_DMA_Init+0x434>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d018      	beq.n	8003106 <HAL_DMA_Init+0x38a>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a36      	ldr	r2, [pc, #216]	; (80031b4 <HAL_DMA_Init+0x438>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_DMA_Init+0x38a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a35      	ldr	r2, [pc, #212]	; (80031b8 <HAL_DMA_Init+0x43c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00e      	beq.n	8003106 <HAL_DMA_Init+0x38a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a33      	ldr	r2, [pc, #204]	; (80031bc <HAL_DMA_Init+0x440>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d009      	beq.n	8003106 <HAL_DMA_Init+0x38a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a32      	ldr	r2, [pc, #200]	; (80031c0 <HAL_DMA_Init+0x444>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d004      	beq.n	8003106 <HAL_DMA_Init+0x38a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a30      	ldr	r2, [pc, #192]	; (80031c4 <HAL_DMA_Init+0x448>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_DMA_Init+0x38e>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_DMA_Init+0x390>
 800310a:	2300      	movs	r3, #0
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8097 	beq.w	8003240 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a24      	ldr	r2, [pc, #144]	; (80031a8 <HAL_DMA_Init+0x42c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d021      	beq.n	8003160 <HAL_DMA_Init+0x3e4>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a22      	ldr	r2, [pc, #136]	; (80031ac <HAL_DMA_Init+0x430>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d01c      	beq.n	8003160 <HAL_DMA_Init+0x3e4>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a21      	ldr	r2, [pc, #132]	; (80031b0 <HAL_DMA_Init+0x434>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d017      	beq.n	8003160 <HAL_DMA_Init+0x3e4>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1f      	ldr	r2, [pc, #124]	; (80031b4 <HAL_DMA_Init+0x438>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d012      	beq.n	8003160 <HAL_DMA_Init+0x3e4>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <HAL_DMA_Init+0x43c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00d      	beq.n	8003160 <HAL_DMA_Init+0x3e4>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1c      	ldr	r2, [pc, #112]	; (80031bc <HAL_DMA_Init+0x440>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d008      	beq.n	8003160 <HAL_DMA_Init+0x3e4>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1b      	ldr	r2, [pc, #108]	; (80031c0 <HAL_DMA_Init+0x444>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d003      	beq.n	8003160 <HAL_DMA_Init+0x3e4>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a19      	ldr	r2, [pc, #100]	; (80031c4 <HAL_DMA_Init+0x448>)
 800315e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <HAL_DMA_Init+0x44c>)
 800317c:	4013      	ands	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d021      	beq.n	80031cc <HAL_DMA_Init+0x450>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b80      	cmp	r3, #128	; 0x80
 800318e:	d102      	bne.n	8003196 <HAL_DMA_Init+0x41a>
 8003190:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003194:	e01b      	b.n	80031ce <HAL_DMA_Init+0x452>
 8003196:	2300      	movs	r3, #0
 8003198:	e019      	b.n	80031ce <HAL_DMA_Init+0x452>
 800319a:	bf00      	nop
 800319c:	fe10803f 	.word	0xfe10803f
 80031a0:	5c001000 	.word	0x5c001000
 80031a4:	ffff0000 	.word	0xffff0000
 80031a8:	58025408 	.word	0x58025408
 80031ac:	5802541c 	.word	0x5802541c
 80031b0:	58025430 	.word	0x58025430
 80031b4:	58025444 	.word	0x58025444
 80031b8:	58025458 	.word	0x58025458
 80031bc:	5802546c 	.word	0x5802546c
 80031c0:	58025480 	.word	0x58025480
 80031c4:	58025494 	.word	0x58025494
 80031c8:	fffe000f 	.word	0xfffe000f
 80031cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68d2      	ldr	r2, [r2, #12]
 80031d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	4b6e      	ldr	r3, [pc, #440]	; (80033cc <HAL_DMA_Init+0x650>)
 8003214:	4413      	add	r3, r2
 8003216:	4a6e      	ldr	r2, [pc, #440]	; (80033d0 <HAL_DMA_Init+0x654>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	009a      	lsls	r2, r3, #2
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f001 fc45 	bl	8004ab4 <DMA_CalcBaseAndBitshift>
 800322a:	4603      	mov	r3, r0
 800322c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	2201      	movs	r2, #1
 8003238:	409a      	lsls	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	e008      	b.n	8003252 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2240      	movs	r2, #64	; 0x40
 8003244:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2203      	movs	r2, #3
 800324a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e0b7      	b.n	80033c2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a5f      	ldr	r2, [pc, #380]	; (80033d4 <HAL_DMA_Init+0x658>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d072      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a5d      	ldr	r2, [pc, #372]	; (80033d8 <HAL_DMA_Init+0x65c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d06d      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a5c      	ldr	r2, [pc, #368]	; (80033dc <HAL_DMA_Init+0x660>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d068      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a5a      	ldr	r2, [pc, #360]	; (80033e0 <HAL_DMA_Init+0x664>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d063      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a59      	ldr	r2, [pc, #356]	; (80033e4 <HAL_DMA_Init+0x668>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d05e      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a57      	ldr	r2, [pc, #348]	; (80033e8 <HAL_DMA_Init+0x66c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d059      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a56      	ldr	r2, [pc, #344]	; (80033ec <HAL_DMA_Init+0x670>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d054      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a54      	ldr	r2, [pc, #336]	; (80033f0 <HAL_DMA_Init+0x674>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d04f      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a53      	ldr	r2, [pc, #332]	; (80033f4 <HAL_DMA_Init+0x678>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d04a      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a51      	ldr	r2, [pc, #324]	; (80033f8 <HAL_DMA_Init+0x67c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d045      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a50      	ldr	r2, [pc, #320]	; (80033fc <HAL_DMA_Init+0x680>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d040      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a4e      	ldr	r2, [pc, #312]	; (8003400 <HAL_DMA_Init+0x684>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d03b      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a4d      	ldr	r2, [pc, #308]	; (8003404 <HAL_DMA_Init+0x688>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d036      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a4b      	ldr	r2, [pc, #300]	; (8003408 <HAL_DMA_Init+0x68c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d031      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a4a      	ldr	r2, [pc, #296]	; (800340c <HAL_DMA_Init+0x690>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d02c      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a48      	ldr	r2, [pc, #288]	; (8003410 <HAL_DMA_Init+0x694>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d027      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a47      	ldr	r2, [pc, #284]	; (8003414 <HAL_DMA_Init+0x698>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d022      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a45      	ldr	r2, [pc, #276]	; (8003418 <HAL_DMA_Init+0x69c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d01d      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a44      	ldr	r2, [pc, #272]	; (800341c <HAL_DMA_Init+0x6a0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d018      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a42      	ldr	r2, [pc, #264]	; (8003420 <HAL_DMA_Init+0x6a4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a41      	ldr	r2, [pc, #260]	; (8003424 <HAL_DMA_Init+0x6a8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d00e      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a3f      	ldr	r2, [pc, #252]	; (8003428 <HAL_DMA_Init+0x6ac>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d009      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a3e      	ldr	r2, [pc, #248]	; (800342c <HAL_DMA_Init+0x6b0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d004      	beq.n	8003342 <HAL_DMA_Init+0x5c6>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a3c      	ldr	r2, [pc, #240]	; (8003430 <HAL_DMA_Init+0x6b4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d101      	bne.n	8003346 <HAL_DMA_Init+0x5ca>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_DMA_Init+0x5cc>
 8003346:	2300      	movs	r3, #0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d032      	beq.n	80033b2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f001 fcdf 	bl	8004d10 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b80      	cmp	r3, #128	; 0x80
 8003358:	d102      	bne.n	8003360 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003374:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d010      	beq.n	80033a0 <HAL_DMA_Init+0x624>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b08      	cmp	r3, #8
 8003384:	d80c      	bhi.n	80033a0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f001 fd5c 	bl	8004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	e008      	b.n	80033b2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	a7fdabf8 	.word	0xa7fdabf8
 80033d0:	cccccccd 	.word	0xcccccccd
 80033d4:	40020010 	.word	0x40020010
 80033d8:	40020028 	.word	0x40020028
 80033dc:	40020040 	.word	0x40020040
 80033e0:	40020058 	.word	0x40020058
 80033e4:	40020070 	.word	0x40020070
 80033e8:	40020088 	.word	0x40020088
 80033ec:	400200a0 	.word	0x400200a0
 80033f0:	400200b8 	.word	0x400200b8
 80033f4:	40020410 	.word	0x40020410
 80033f8:	40020428 	.word	0x40020428
 80033fc:	40020440 	.word	0x40020440
 8003400:	40020458 	.word	0x40020458
 8003404:	40020470 	.word	0x40020470
 8003408:	40020488 	.word	0x40020488
 800340c:	400204a0 	.word	0x400204a0
 8003410:	400204b8 	.word	0x400204b8
 8003414:	58025408 	.word	0x58025408
 8003418:	5802541c 	.word	0x5802541c
 800341c:	58025430 	.word	0x58025430
 8003420:	58025444 	.word	0x58025444
 8003424:	58025458 	.word	0x58025458
 8003428:	5802546c 	.word	0x5802546c
 800342c:	58025480 	.word	0x58025480
 8003430:	58025494 	.word	0x58025494

08003434 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e226      	b.n	800389e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_DMA_Start_IT+0x2a>
 800345a:	2302      	movs	r3, #2
 800345c:	e21f      	b.n	800389e <HAL_DMA_Start_IT+0x46a>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b01      	cmp	r3, #1
 8003470:	f040 820a 	bne.w	8003888 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a68      	ldr	r2, [pc, #416]	; (8003628 <HAL_DMA_Start_IT+0x1f4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d04a      	beq.n	8003522 <HAL_DMA_Start_IT+0xee>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a66      	ldr	r2, [pc, #408]	; (800362c <HAL_DMA_Start_IT+0x1f8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d045      	beq.n	8003522 <HAL_DMA_Start_IT+0xee>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a65      	ldr	r2, [pc, #404]	; (8003630 <HAL_DMA_Start_IT+0x1fc>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d040      	beq.n	8003522 <HAL_DMA_Start_IT+0xee>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a63      	ldr	r2, [pc, #396]	; (8003634 <HAL_DMA_Start_IT+0x200>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d03b      	beq.n	8003522 <HAL_DMA_Start_IT+0xee>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a62      	ldr	r2, [pc, #392]	; (8003638 <HAL_DMA_Start_IT+0x204>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d036      	beq.n	8003522 <HAL_DMA_Start_IT+0xee>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a60      	ldr	r2, [pc, #384]	; (800363c <HAL_DMA_Start_IT+0x208>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d031      	beq.n	8003522 <HAL_DMA_Start_IT+0xee>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a5f      	ldr	r2, [pc, #380]	; (8003640 <HAL_DMA_Start_IT+0x20c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d02c      	beq.n	8003522 <HAL_DMA_Start_IT+0xee>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a5d      	ldr	r2, [pc, #372]	; (8003644 <HAL_DMA_Start_IT+0x210>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d027      	beq.n	8003522 <HAL_DMA_Start_IT+0xee>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a5c      	ldr	r2, [pc, #368]	; (8003648 <HAL_DMA_Start_IT+0x214>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d022      	beq.n	8003522 <HAL_DMA_Start_IT+0xee>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a5a      	ldr	r2, [pc, #360]	; (800364c <HAL_DMA_Start_IT+0x218>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d01d      	beq.n	8003522 <HAL_DMA_Start_IT+0xee>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a59      	ldr	r2, [pc, #356]	; (8003650 <HAL_DMA_Start_IT+0x21c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d018      	beq.n	8003522 <HAL_DMA_Start_IT+0xee>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a57      	ldr	r2, [pc, #348]	; (8003654 <HAL_DMA_Start_IT+0x220>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <HAL_DMA_Start_IT+0xee>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a56      	ldr	r2, [pc, #344]	; (8003658 <HAL_DMA_Start_IT+0x224>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00e      	beq.n	8003522 <HAL_DMA_Start_IT+0xee>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a54      	ldr	r2, [pc, #336]	; (800365c <HAL_DMA_Start_IT+0x228>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d009      	beq.n	8003522 <HAL_DMA_Start_IT+0xee>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a53      	ldr	r2, [pc, #332]	; (8003660 <HAL_DMA_Start_IT+0x22c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d004      	beq.n	8003522 <HAL_DMA_Start_IT+0xee>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a51      	ldr	r2, [pc, #324]	; (8003664 <HAL_DMA_Start_IT+0x230>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d108      	bne.n	8003534 <HAL_DMA_Start_IT+0x100>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0201 	bic.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	e007      	b.n	8003544 <HAL_DMA_Start_IT+0x110>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0201 	bic.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f001 f906 	bl	800475c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a34      	ldr	r2, [pc, #208]	; (8003628 <HAL_DMA_Start_IT+0x1f4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d04a      	beq.n	80035f0 <HAL_DMA_Start_IT+0x1bc>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a33      	ldr	r2, [pc, #204]	; (800362c <HAL_DMA_Start_IT+0x1f8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d045      	beq.n	80035f0 <HAL_DMA_Start_IT+0x1bc>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a31      	ldr	r2, [pc, #196]	; (8003630 <HAL_DMA_Start_IT+0x1fc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d040      	beq.n	80035f0 <HAL_DMA_Start_IT+0x1bc>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a30      	ldr	r2, [pc, #192]	; (8003634 <HAL_DMA_Start_IT+0x200>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d03b      	beq.n	80035f0 <HAL_DMA_Start_IT+0x1bc>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a2e      	ldr	r2, [pc, #184]	; (8003638 <HAL_DMA_Start_IT+0x204>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d036      	beq.n	80035f0 <HAL_DMA_Start_IT+0x1bc>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a2d      	ldr	r2, [pc, #180]	; (800363c <HAL_DMA_Start_IT+0x208>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d031      	beq.n	80035f0 <HAL_DMA_Start_IT+0x1bc>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a2b      	ldr	r2, [pc, #172]	; (8003640 <HAL_DMA_Start_IT+0x20c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d02c      	beq.n	80035f0 <HAL_DMA_Start_IT+0x1bc>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a2a      	ldr	r2, [pc, #168]	; (8003644 <HAL_DMA_Start_IT+0x210>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d027      	beq.n	80035f0 <HAL_DMA_Start_IT+0x1bc>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a28      	ldr	r2, [pc, #160]	; (8003648 <HAL_DMA_Start_IT+0x214>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d022      	beq.n	80035f0 <HAL_DMA_Start_IT+0x1bc>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a27      	ldr	r2, [pc, #156]	; (800364c <HAL_DMA_Start_IT+0x218>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d01d      	beq.n	80035f0 <HAL_DMA_Start_IT+0x1bc>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a25      	ldr	r2, [pc, #148]	; (8003650 <HAL_DMA_Start_IT+0x21c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d018      	beq.n	80035f0 <HAL_DMA_Start_IT+0x1bc>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a24      	ldr	r2, [pc, #144]	; (8003654 <HAL_DMA_Start_IT+0x220>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d013      	beq.n	80035f0 <HAL_DMA_Start_IT+0x1bc>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a22      	ldr	r2, [pc, #136]	; (8003658 <HAL_DMA_Start_IT+0x224>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00e      	beq.n	80035f0 <HAL_DMA_Start_IT+0x1bc>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a21      	ldr	r2, [pc, #132]	; (800365c <HAL_DMA_Start_IT+0x228>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d009      	beq.n	80035f0 <HAL_DMA_Start_IT+0x1bc>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1f      	ldr	r2, [pc, #124]	; (8003660 <HAL_DMA_Start_IT+0x22c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d004      	beq.n	80035f0 <HAL_DMA_Start_IT+0x1bc>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <HAL_DMA_Start_IT+0x230>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d101      	bne.n	80035f4 <HAL_DMA_Start_IT+0x1c0>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_DMA_Start_IT+0x1c2>
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d036      	beq.n	8003668 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f023 021e 	bic.w	r2, r3, #30
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0216 	orr.w	r2, r2, #22
 800360c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d03e      	beq.n	8003694 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0208 	orr.w	r2, r2, #8
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	e035      	b.n	8003694 <HAL_DMA_Start_IT+0x260>
 8003628:	40020010 	.word	0x40020010
 800362c:	40020028 	.word	0x40020028
 8003630:	40020040 	.word	0x40020040
 8003634:	40020058 	.word	0x40020058
 8003638:	40020070 	.word	0x40020070
 800363c:	40020088 	.word	0x40020088
 8003640:	400200a0 	.word	0x400200a0
 8003644:	400200b8 	.word	0x400200b8
 8003648:	40020410 	.word	0x40020410
 800364c:	40020428 	.word	0x40020428
 8003650:	40020440 	.word	0x40020440
 8003654:	40020458 	.word	0x40020458
 8003658:	40020470 	.word	0x40020470
 800365c:	40020488 	.word	0x40020488
 8003660:	400204a0 	.word	0x400204a0
 8003664:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 020e 	bic.w	r2, r3, #14
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 020a 	orr.w	r2, r2, #10
 800367a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0204 	orr.w	r2, r2, #4
 8003692:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a83      	ldr	r2, [pc, #524]	; (80038a8 <HAL_DMA_Start_IT+0x474>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d072      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a82      	ldr	r2, [pc, #520]	; (80038ac <HAL_DMA_Start_IT+0x478>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d06d      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a80      	ldr	r2, [pc, #512]	; (80038b0 <HAL_DMA_Start_IT+0x47c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d068      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a7f      	ldr	r2, [pc, #508]	; (80038b4 <HAL_DMA_Start_IT+0x480>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d063      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a7d      	ldr	r2, [pc, #500]	; (80038b8 <HAL_DMA_Start_IT+0x484>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d05e      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a7c      	ldr	r2, [pc, #496]	; (80038bc <HAL_DMA_Start_IT+0x488>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d059      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a7a      	ldr	r2, [pc, #488]	; (80038c0 <HAL_DMA_Start_IT+0x48c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d054      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a79      	ldr	r2, [pc, #484]	; (80038c4 <HAL_DMA_Start_IT+0x490>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d04f      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a77      	ldr	r2, [pc, #476]	; (80038c8 <HAL_DMA_Start_IT+0x494>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d04a      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a76      	ldr	r2, [pc, #472]	; (80038cc <HAL_DMA_Start_IT+0x498>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d045      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a74      	ldr	r2, [pc, #464]	; (80038d0 <HAL_DMA_Start_IT+0x49c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d040      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a73      	ldr	r2, [pc, #460]	; (80038d4 <HAL_DMA_Start_IT+0x4a0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d03b      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a71      	ldr	r2, [pc, #452]	; (80038d8 <HAL_DMA_Start_IT+0x4a4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d036      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a70      	ldr	r2, [pc, #448]	; (80038dc <HAL_DMA_Start_IT+0x4a8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d031      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a6e      	ldr	r2, [pc, #440]	; (80038e0 <HAL_DMA_Start_IT+0x4ac>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d02c      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a6d      	ldr	r2, [pc, #436]	; (80038e4 <HAL_DMA_Start_IT+0x4b0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d027      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a6b      	ldr	r2, [pc, #428]	; (80038e8 <HAL_DMA_Start_IT+0x4b4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d022      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a6a      	ldr	r2, [pc, #424]	; (80038ec <HAL_DMA_Start_IT+0x4b8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d01d      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a68      	ldr	r2, [pc, #416]	; (80038f0 <HAL_DMA_Start_IT+0x4bc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d018      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a67      	ldr	r2, [pc, #412]	; (80038f4 <HAL_DMA_Start_IT+0x4c0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d013      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a65      	ldr	r2, [pc, #404]	; (80038f8 <HAL_DMA_Start_IT+0x4c4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00e      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a64      	ldr	r2, [pc, #400]	; (80038fc <HAL_DMA_Start_IT+0x4c8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d009      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a62      	ldr	r2, [pc, #392]	; (8003900 <HAL_DMA_Start_IT+0x4cc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <HAL_DMA_Start_IT+0x350>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a61      	ldr	r2, [pc, #388]	; (8003904 <HAL_DMA_Start_IT+0x4d0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d101      	bne.n	8003788 <HAL_DMA_Start_IT+0x354>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <HAL_DMA_Start_IT+0x356>
 8003788:	2300      	movs	r3, #0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01a      	beq.n	80037c4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037aa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a37      	ldr	r2, [pc, #220]	; (80038a8 <HAL_DMA_Start_IT+0x474>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d04a      	beq.n	8003864 <HAL_DMA_Start_IT+0x430>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a36      	ldr	r2, [pc, #216]	; (80038ac <HAL_DMA_Start_IT+0x478>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d045      	beq.n	8003864 <HAL_DMA_Start_IT+0x430>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a34      	ldr	r2, [pc, #208]	; (80038b0 <HAL_DMA_Start_IT+0x47c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d040      	beq.n	8003864 <HAL_DMA_Start_IT+0x430>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a33      	ldr	r2, [pc, #204]	; (80038b4 <HAL_DMA_Start_IT+0x480>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d03b      	beq.n	8003864 <HAL_DMA_Start_IT+0x430>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a31      	ldr	r2, [pc, #196]	; (80038b8 <HAL_DMA_Start_IT+0x484>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d036      	beq.n	8003864 <HAL_DMA_Start_IT+0x430>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a30      	ldr	r2, [pc, #192]	; (80038bc <HAL_DMA_Start_IT+0x488>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d031      	beq.n	8003864 <HAL_DMA_Start_IT+0x430>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a2e      	ldr	r2, [pc, #184]	; (80038c0 <HAL_DMA_Start_IT+0x48c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d02c      	beq.n	8003864 <HAL_DMA_Start_IT+0x430>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a2d      	ldr	r2, [pc, #180]	; (80038c4 <HAL_DMA_Start_IT+0x490>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d027      	beq.n	8003864 <HAL_DMA_Start_IT+0x430>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a2b      	ldr	r2, [pc, #172]	; (80038c8 <HAL_DMA_Start_IT+0x494>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d022      	beq.n	8003864 <HAL_DMA_Start_IT+0x430>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a2a      	ldr	r2, [pc, #168]	; (80038cc <HAL_DMA_Start_IT+0x498>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d01d      	beq.n	8003864 <HAL_DMA_Start_IT+0x430>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a28      	ldr	r2, [pc, #160]	; (80038d0 <HAL_DMA_Start_IT+0x49c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d018      	beq.n	8003864 <HAL_DMA_Start_IT+0x430>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a27      	ldr	r2, [pc, #156]	; (80038d4 <HAL_DMA_Start_IT+0x4a0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d013      	beq.n	8003864 <HAL_DMA_Start_IT+0x430>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a25      	ldr	r2, [pc, #148]	; (80038d8 <HAL_DMA_Start_IT+0x4a4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00e      	beq.n	8003864 <HAL_DMA_Start_IT+0x430>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a24      	ldr	r2, [pc, #144]	; (80038dc <HAL_DMA_Start_IT+0x4a8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d009      	beq.n	8003864 <HAL_DMA_Start_IT+0x430>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a22      	ldr	r2, [pc, #136]	; (80038e0 <HAL_DMA_Start_IT+0x4ac>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d004      	beq.n	8003864 <HAL_DMA_Start_IT+0x430>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a21      	ldr	r2, [pc, #132]	; (80038e4 <HAL_DMA_Start_IT+0x4b0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d108      	bne.n	8003876 <HAL_DMA_Start_IT+0x442>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e012      	b.n	800389c <HAL_DMA_Start_IT+0x468>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0201 	orr.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e009      	b.n	800389c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800388e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800389c:	7dfb      	ldrb	r3, [r7, #23]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40020010 	.word	0x40020010
 80038ac:	40020028 	.word	0x40020028
 80038b0:	40020040 	.word	0x40020040
 80038b4:	40020058 	.word	0x40020058
 80038b8:	40020070 	.word	0x40020070
 80038bc:	40020088 	.word	0x40020088
 80038c0:	400200a0 	.word	0x400200a0
 80038c4:	400200b8 	.word	0x400200b8
 80038c8:	40020410 	.word	0x40020410
 80038cc:	40020428 	.word	0x40020428
 80038d0:	40020440 	.word	0x40020440
 80038d4:	40020458 	.word	0x40020458
 80038d8:	40020470 	.word	0x40020470
 80038dc:	40020488 	.word	0x40020488
 80038e0:	400204a0 	.word	0x400204a0
 80038e4:	400204b8 	.word	0x400204b8
 80038e8:	58025408 	.word	0x58025408
 80038ec:	5802541c 	.word	0x5802541c
 80038f0:	58025430 	.word	0x58025430
 80038f4:	58025444 	.word	0x58025444
 80038f8:	58025458 	.word	0x58025458
 80038fc:	5802546c 	.word	0x5802546c
 8003900:	58025480 	.word	0x58025480
 8003904:	58025494 	.word	0x58025494

08003908 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	; 0x28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003914:	4b67      	ldr	r3, [pc, #412]	; (8003ab4 <HAL_DMA_IRQHandler+0x1ac>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a67      	ldr	r2, [pc, #412]	; (8003ab8 <HAL_DMA_IRQHandler+0x1b0>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	0a9b      	lsrs	r3, r3, #10
 8003920:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003926:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a5f      	ldr	r2, [pc, #380]	; (8003abc <HAL_DMA_IRQHandler+0x1b4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d04a      	beq.n	80039da <HAL_DMA_IRQHandler+0xd2>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a5d      	ldr	r2, [pc, #372]	; (8003ac0 <HAL_DMA_IRQHandler+0x1b8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d045      	beq.n	80039da <HAL_DMA_IRQHandler+0xd2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a5c      	ldr	r2, [pc, #368]	; (8003ac4 <HAL_DMA_IRQHandler+0x1bc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d040      	beq.n	80039da <HAL_DMA_IRQHandler+0xd2>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a5a      	ldr	r2, [pc, #360]	; (8003ac8 <HAL_DMA_IRQHandler+0x1c0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d03b      	beq.n	80039da <HAL_DMA_IRQHandler+0xd2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a59      	ldr	r2, [pc, #356]	; (8003acc <HAL_DMA_IRQHandler+0x1c4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d036      	beq.n	80039da <HAL_DMA_IRQHandler+0xd2>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a57      	ldr	r2, [pc, #348]	; (8003ad0 <HAL_DMA_IRQHandler+0x1c8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d031      	beq.n	80039da <HAL_DMA_IRQHandler+0xd2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a56      	ldr	r2, [pc, #344]	; (8003ad4 <HAL_DMA_IRQHandler+0x1cc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d02c      	beq.n	80039da <HAL_DMA_IRQHandler+0xd2>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a54      	ldr	r2, [pc, #336]	; (8003ad8 <HAL_DMA_IRQHandler+0x1d0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d027      	beq.n	80039da <HAL_DMA_IRQHandler+0xd2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a53      	ldr	r2, [pc, #332]	; (8003adc <HAL_DMA_IRQHandler+0x1d4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d022      	beq.n	80039da <HAL_DMA_IRQHandler+0xd2>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a51      	ldr	r2, [pc, #324]	; (8003ae0 <HAL_DMA_IRQHandler+0x1d8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d01d      	beq.n	80039da <HAL_DMA_IRQHandler+0xd2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a50      	ldr	r2, [pc, #320]	; (8003ae4 <HAL_DMA_IRQHandler+0x1dc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d018      	beq.n	80039da <HAL_DMA_IRQHandler+0xd2>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a4e      	ldr	r2, [pc, #312]	; (8003ae8 <HAL_DMA_IRQHandler+0x1e0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <HAL_DMA_IRQHandler+0xd2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a4d      	ldr	r2, [pc, #308]	; (8003aec <HAL_DMA_IRQHandler+0x1e4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00e      	beq.n	80039da <HAL_DMA_IRQHandler+0xd2>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a4b      	ldr	r2, [pc, #300]	; (8003af0 <HAL_DMA_IRQHandler+0x1e8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d009      	beq.n	80039da <HAL_DMA_IRQHandler+0xd2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a4a      	ldr	r2, [pc, #296]	; (8003af4 <HAL_DMA_IRQHandler+0x1ec>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d004      	beq.n	80039da <HAL_DMA_IRQHandler+0xd2>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a48      	ldr	r2, [pc, #288]	; (8003af8 <HAL_DMA_IRQHandler+0x1f0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d101      	bne.n	80039de <HAL_DMA_IRQHandler+0xd6>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_DMA_IRQHandler+0xd8>
 80039de:	2300      	movs	r3, #0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 842b 	beq.w	800423c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2208      	movs	r2, #8
 80039f0:	409a      	lsls	r2, r3
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80a2 	beq.w	8003b40 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a2e      	ldr	r2, [pc, #184]	; (8003abc <HAL_DMA_IRQHandler+0x1b4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d04a      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x194>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a2d      	ldr	r2, [pc, #180]	; (8003ac0 <HAL_DMA_IRQHandler+0x1b8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d045      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x194>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a2b      	ldr	r2, [pc, #172]	; (8003ac4 <HAL_DMA_IRQHandler+0x1bc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d040      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x194>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2a      	ldr	r2, [pc, #168]	; (8003ac8 <HAL_DMA_IRQHandler+0x1c0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d03b      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x194>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a28      	ldr	r2, [pc, #160]	; (8003acc <HAL_DMA_IRQHandler+0x1c4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d036      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x194>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a27      	ldr	r2, [pc, #156]	; (8003ad0 <HAL_DMA_IRQHandler+0x1c8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d031      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x194>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a25      	ldr	r2, [pc, #148]	; (8003ad4 <HAL_DMA_IRQHandler+0x1cc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d02c      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x194>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a24      	ldr	r2, [pc, #144]	; (8003ad8 <HAL_DMA_IRQHandler+0x1d0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d027      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x194>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a22      	ldr	r2, [pc, #136]	; (8003adc <HAL_DMA_IRQHandler+0x1d4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d022      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x194>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a21      	ldr	r2, [pc, #132]	; (8003ae0 <HAL_DMA_IRQHandler+0x1d8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d01d      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x194>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1f      	ldr	r2, [pc, #124]	; (8003ae4 <HAL_DMA_IRQHandler+0x1dc>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d018      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x194>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ae8 <HAL_DMA_IRQHandler+0x1e0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d013      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x194>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1c      	ldr	r2, [pc, #112]	; (8003aec <HAL_DMA_IRQHandler+0x1e4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00e      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x194>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1b      	ldr	r2, [pc, #108]	; (8003af0 <HAL_DMA_IRQHandler+0x1e8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d009      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x194>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <HAL_DMA_IRQHandler+0x1ec>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d004      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x194>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <HAL_DMA_IRQHandler+0x1f0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d12f      	bne.n	8003afc <HAL_DMA_IRQHandler+0x1f4>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	bf14      	ite	ne
 8003aaa:	2301      	movne	r3, #1
 8003aac:	2300      	moveq	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	e02e      	b.n	8003b10 <HAL_DMA_IRQHandler+0x208>
 8003ab2:	bf00      	nop
 8003ab4:	24000000 	.word	0x24000000
 8003ab8:	1b4e81b5 	.word	0x1b4e81b5
 8003abc:	40020010 	.word	0x40020010
 8003ac0:	40020028 	.word	0x40020028
 8003ac4:	40020040 	.word	0x40020040
 8003ac8:	40020058 	.word	0x40020058
 8003acc:	40020070 	.word	0x40020070
 8003ad0:	40020088 	.word	0x40020088
 8003ad4:	400200a0 	.word	0x400200a0
 8003ad8:	400200b8 	.word	0x400200b8
 8003adc:	40020410 	.word	0x40020410
 8003ae0:	40020428 	.word	0x40020428
 8003ae4:	40020440 	.word	0x40020440
 8003ae8:	40020458 	.word	0x40020458
 8003aec:	40020470 	.word	0x40020470
 8003af0:	40020488 	.word	0x40020488
 8003af4:	400204a0 	.word	0x400204a0
 8003af8:	400204b8 	.word	0x400204b8
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bf14      	ite	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	2300      	moveq	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d015      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0204 	bic.w	r2, r2, #4
 8003b22:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b38:	f043 0201 	orr.w	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d06e      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a69      	ldr	r2, [pc, #420]	; (8003d00 <HAL_DMA_IRQHandler+0x3f8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d04a      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x2ee>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a67      	ldr	r2, [pc, #412]	; (8003d04 <HAL_DMA_IRQHandler+0x3fc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d045      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x2ee>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a66      	ldr	r2, [pc, #408]	; (8003d08 <HAL_DMA_IRQHandler+0x400>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d040      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x2ee>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a64      	ldr	r2, [pc, #400]	; (8003d0c <HAL_DMA_IRQHandler+0x404>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d03b      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x2ee>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a63      	ldr	r2, [pc, #396]	; (8003d10 <HAL_DMA_IRQHandler+0x408>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d036      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x2ee>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a61      	ldr	r2, [pc, #388]	; (8003d14 <HAL_DMA_IRQHandler+0x40c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d031      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x2ee>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a60      	ldr	r2, [pc, #384]	; (8003d18 <HAL_DMA_IRQHandler+0x410>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d02c      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x2ee>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a5e      	ldr	r2, [pc, #376]	; (8003d1c <HAL_DMA_IRQHandler+0x414>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d027      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x2ee>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a5d      	ldr	r2, [pc, #372]	; (8003d20 <HAL_DMA_IRQHandler+0x418>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d022      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x2ee>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a5b      	ldr	r2, [pc, #364]	; (8003d24 <HAL_DMA_IRQHandler+0x41c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01d      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x2ee>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a5a      	ldr	r2, [pc, #360]	; (8003d28 <HAL_DMA_IRQHandler+0x420>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d018      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x2ee>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a58      	ldr	r2, [pc, #352]	; (8003d2c <HAL_DMA_IRQHandler+0x424>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x2ee>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a57      	ldr	r2, [pc, #348]	; (8003d30 <HAL_DMA_IRQHandler+0x428>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x2ee>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a55      	ldr	r2, [pc, #340]	; (8003d34 <HAL_DMA_IRQHandler+0x42c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d009      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x2ee>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a54      	ldr	r2, [pc, #336]	; (8003d38 <HAL_DMA_IRQHandler+0x430>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x2ee>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a52      	ldr	r2, [pc, #328]	; (8003d3c <HAL_DMA_IRQHandler+0x434>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d10a      	bne.n	8003c0c <HAL_DMA_IRQHandler+0x304>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bf14      	ite	ne
 8003c04:	2301      	movne	r3, #1
 8003c06:	2300      	moveq	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	e003      	b.n	8003c14 <HAL_DMA_IRQHandler+0x30c>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2300      	movs	r3, #0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00d      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	2201      	movs	r2, #1
 8003c22:	409a      	lsls	r2, r3
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	f043 0202 	orr.w	r2, r3, #2
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 808f 	beq.w	8003d68 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a2c      	ldr	r2, [pc, #176]	; (8003d00 <HAL_DMA_IRQHandler+0x3f8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d04a      	beq.n	8003cea <HAL_DMA_IRQHandler+0x3e2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a2a      	ldr	r2, [pc, #168]	; (8003d04 <HAL_DMA_IRQHandler+0x3fc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d045      	beq.n	8003cea <HAL_DMA_IRQHandler+0x3e2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a29      	ldr	r2, [pc, #164]	; (8003d08 <HAL_DMA_IRQHandler+0x400>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d040      	beq.n	8003cea <HAL_DMA_IRQHandler+0x3e2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a27      	ldr	r2, [pc, #156]	; (8003d0c <HAL_DMA_IRQHandler+0x404>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d03b      	beq.n	8003cea <HAL_DMA_IRQHandler+0x3e2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <HAL_DMA_IRQHandler+0x408>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d036      	beq.n	8003cea <HAL_DMA_IRQHandler+0x3e2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a24      	ldr	r2, [pc, #144]	; (8003d14 <HAL_DMA_IRQHandler+0x40c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d031      	beq.n	8003cea <HAL_DMA_IRQHandler+0x3e2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a23      	ldr	r2, [pc, #140]	; (8003d18 <HAL_DMA_IRQHandler+0x410>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d02c      	beq.n	8003cea <HAL_DMA_IRQHandler+0x3e2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a21      	ldr	r2, [pc, #132]	; (8003d1c <HAL_DMA_IRQHandler+0x414>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d027      	beq.n	8003cea <HAL_DMA_IRQHandler+0x3e2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a20      	ldr	r2, [pc, #128]	; (8003d20 <HAL_DMA_IRQHandler+0x418>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d022      	beq.n	8003cea <HAL_DMA_IRQHandler+0x3e2>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1e      	ldr	r2, [pc, #120]	; (8003d24 <HAL_DMA_IRQHandler+0x41c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d01d      	beq.n	8003cea <HAL_DMA_IRQHandler+0x3e2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1d      	ldr	r2, [pc, #116]	; (8003d28 <HAL_DMA_IRQHandler+0x420>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d018      	beq.n	8003cea <HAL_DMA_IRQHandler+0x3e2>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1b      	ldr	r2, [pc, #108]	; (8003d2c <HAL_DMA_IRQHandler+0x424>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <HAL_DMA_IRQHandler+0x3e2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1a      	ldr	r2, [pc, #104]	; (8003d30 <HAL_DMA_IRQHandler+0x428>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00e      	beq.n	8003cea <HAL_DMA_IRQHandler+0x3e2>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a18      	ldr	r2, [pc, #96]	; (8003d34 <HAL_DMA_IRQHandler+0x42c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d009      	beq.n	8003cea <HAL_DMA_IRQHandler+0x3e2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a17      	ldr	r2, [pc, #92]	; (8003d38 <HAL_DMA_IRQHandler+0x430>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d004      	beq.n	8003cea <HAL_DMA_IRQHandler+0x3e2>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <HAL_DMA_IRQHandler+0x434>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d12a      	bne.n	8003d40 <HAL_DMA_IRQHandler+0x438>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e023      	b.n	8003d48 <HAL_DMA_IRQHandler+0x440>
 8003d00:	40020010 	.word	0x40020010
 8003d04:	40020028 	.word	0x40020028
 8003d08:	40020040 	.word	0x40020040
 8003d0c:	40020058 	.word	0x40020058
 8003d10:	40020070 	.word	0x40020070
 8003d14:	40020088 	.word	0x40020088
 8003d18:	400200a0 	.word	0x400200a0
 8003d1c:	400200b8 	.word	0x400200b8
 8003d20:	40020410 	.word	0x40020410
 8003d24:	40020428 	.word	0x40020428
 8003d28:	40020440 	.word	0x40020440
 8003d2c:	40020458 	.word	0x40020458
 8003d30:	40020470 	.word	0x40020470
 8003d34:	40020488 	.word	0x40020488
 8003d38:	400204a0 	.word	0x400204a0
 8003d3c:	400204b8 	.word	0x400204b8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2300      	movs	r3, #0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00d      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	2204      	movs	r2, #4
 8003d56:	409a      	lsls	r2, r3
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d60:	f043 0204 	orr.w	r2, r3, #4
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	2210      	movs	r2, #16
 8003d72:	409a      	lsls	r2, r3
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80a6 	beq.w	8003eca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a85      	ldr	r2, [pc, #532]	; (8003f98 <HAL_DMA_IRQHandler+0x690>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d04a      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x516>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a83      	ldr	r2, [pc, #524]	; (8003f9c <HAL_DMA_IRQHandler+0x694>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d045      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x516>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a82      	ldr	r2, [pc, #520]	; (8003fa0 <HAL_DMA_IRQHandler+0x698>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d040      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x516>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a80      	ldr	r2, [pc, #512]	; (8003fa4 <HAL_DMA_IRQHandler+0x69c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d03b      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x516>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a7f      	ldr	r2, [pc, #508]	; (8003fa8 <HAL_DMA_IRQHandler+0x6a0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d036      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x516>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a7d      	ldr	r2, [pc, #500]	; (8003fac <HAL_DMA_IRQHandler+0x6a4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d031      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x516>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a7c      	ldr	r2, [pc, #496]	; (8003fb0 <HAL_DMA_IRQHandler+0x6a8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d02c      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x516>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a7a      	ldr	r2, [pc, #488]	; (8003fb4 <HAL_DMA_IRQHandler+0x6ac>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d027      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x516>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a79      	ldr	r2, [pc, #484]	; (8003fb8 <HAL_DMA_IRQHandler+0x6b0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d022      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x516>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a77      	ldr	r2, [pc, #476]	; (8003fbc <HAL_DMA_IRQHandler+0x6b4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01d      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x516>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a76      	ldr	r2, [pc, #472]	; (8003fc0 <HAL_DMA_IRQHandler+0x6b8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d018      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x516>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a74      	ldr	r2, [pc, #464]	; (8003fc4 <HAL_DMA_IRQHandler+0x6bc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x516>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a73      	ldr	r2, [pc, #460]	; (8003fc8 <HAL_DMA_IRQHandler+0x6c0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00e      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x516>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a71      	ldr	r2, [pc, #452]	; (8003fcc <HAL_DMA_IRQHandler+0x6c4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d009      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x516>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a70      	ldr	r2, [pc, #448]	; (8003fd0 <HAL_DMA_IRQHandler+0x6c8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x516>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a6e      	ldr	r2, [pc, #440]	; (8003fd4 <HAL_DMA_IRQHandler+0x6cc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d10a      	bne.n	8003e34 <HAL_DMA_IRQHandler+0x52c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bf14      	ite	ne
 8003e2c:	2301      	movne	r3, #1
 8003e2e:	2300      	moveq	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	e009      	b.n	8003e48 <HAL_DMA_IRQHandler+0x540>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bf14      	ite	ne
 8003e42:	2301      	movne	r3, #1
 8003e44:	2300      	moveq	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d03e      	beq.n	8003eca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	2210      	movs	r2, #16
 8003e56:	409a      	lsls	r2, r3
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d018      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d108      	bne.n	8003e8a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d024      	beq.n	8003eca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	4798      	blx	r3
 8003e88:	e01f      	b.n	8003eca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01b      	beq.n	8003eca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	4798      	blx	r3
 8003e9a:	e016      	b.n	8003eca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d107      	bne.n	8003eba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0208 	bic.w	r2, r2, #8
 8003eb8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8110 	beq.w	8004100 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2c      	ldr	r2, [pc, #176]	; (8003f98 <HAL_DMA_IRQHandler+0x690>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d04a      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x678>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2b      	ldr	r2, [pc, #172]	; (8003f9c <HAL_DMA_IRQHandler+0x694>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d045      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x678>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a29      	ldr	r2, [pc, #164]	; (8003fa0 <HAL_DMA_IRQHandler+0x698>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d040      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x678>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a28      	ldr	r2, [pc, #160]	; (8003fa4 <HAL_DMA_IRQHandler+0x69c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d03b      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x678>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <HAL_DMA_IRQHandler+0x6a0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d036      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x678>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a25      	ldr	r2, [pc, #148]	; (8003fac <HAL_DMA_IRQHandler+0x6a4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d031      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x678>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a23      	ldr	r2, [pc, #140]	; (8003fb0 <HAL_DMA_IRQHandler+0x6a8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d02c      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x678>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a22      	ldr	r2, [pc, #136]	; (8003fb4 <HAL_DMA_IRQHandler+0x6ac>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d027      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x678>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a20      	ldr	r2, [pc, #128]	; (8003fb8 <HAL_DMA_IRQHandler+0x6b0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d022      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x678>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1f      	ldr	r2, [pc, #124]	; (8003fbc <HAL_DMA_IRQHandler+0x6b4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d01d      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x678>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <HAL_DMA_IRQHandler+0x6b8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d018      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x678>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <HAL_DMA_IRQHandler+0x6bc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d013      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x678>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1a      	ldr	r2, [pc, #104]	; (8003fc8 <HAL_DMA_IRQHandler+0x6c0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00e      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x678>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a19      	ldr	r2, [pc, #100]	; (8003fcc <HAL_DMA_IRQHandler+0x6c4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d009      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x678>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <HAL_DMA_IRQHandler+0x6c8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d004      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x678>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <HAL_DMA_IRQHandler+0x6cc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d12b      	bne.n	8003fd8 <HAL_DMA_IRQHandler+0x6d0>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bf14      	ite	ne
 8003f8e:	2301      	movne	r3, #1
 8003f90:	2300      	moveq	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	e02a      	b.n	8003fec <HAL_DMA_IRQHandler+0x6e4>
 8003f96:	bf00      	nop
 8003f98:	40020010 	.word	0x40020010
 8003f9c:	40020028 	.word	0x40020028
 8003fa0:	40020040 	.word	0x40020040
 8003fa4:	40020058 	.word	0x40020058
 8003fa8:	40020070 	.word	0x40020070
 8003fac:	40020088 	.word	0x40020088
 8003fb0:	400200a0 	.word	0x400200a0
 8003fb4:	400200b8 	.word	0x400200b8
 8003fb8:	40020410 	.word	0x40020410
 8003fbc:	40020428 	.word	0x40020428
 8003fc0:	40020440 	.word	0x40020440
 8003fc4:	40020458 	.word	0x40020458
 8003fc8:	40020470 	.word	0x40020470
 8003fcc:	40020488 	.word	0x40020488
 8003fd0:	400204a0 	.word	0x400204a0
 8003fd4:	400204b8 	.word	0x400204b8
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bf14      	ite	ne
 8003fe6:	2301      	movne	r3, #1
 8003fe8:	2300      	moveq	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 8087 	beq.w	8004100 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b04      	cmp	r3, #4
 800400c:	d139      	bne.n	8004082 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0216 	bic.w	r2, r2, #22
 800401c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800402c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d103      	bne.n	800403e <HAL_DMA_IRQHandler+0x736>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0208 	bic.w	r2, r2, #8
 800404c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	223f      	movs	r2, #63	; 0x3f
 8004058:	409a      	lsls	r2, r3
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 834a 	beq.w	800470c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	4798      	blx	r3
          }
          return;
 8004080:	e344      	b.n	800470c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d018      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d108      	bne.n	80040b0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d02c      	beq.n	8004100 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	4798      	blx	r3
 80040ae:	e027      	b.n	8004100 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d023      	beq.n	8004100 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	4798      	blx	r3
 80040c0:	e01e      	b.n	8004100 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10f      	bne.n	80040f0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0210 	bic.w	r2, r2, #16
 80040de:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8306 	beq.w	8004716 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 8088 	beq.w	8004228 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2204      	movs	r2, #4
 800411c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a7a      	ldr	r2, [pc, #488]	; (8004310 <HAL_DMA_IRQHandler+0xa08>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d04a      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x8b8>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a79      	ldr	r2, [pc, #484]	; (8004314 <HAL_DMA_IRQHandler+0xa0c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d045      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x8b8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a77      	ldr	r2, [pc, #476]	; (8004318 <HAL_DMA_IRQHandler+0xa10>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d040      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x8b8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a76      	ldr	r2, [pc, #472]	; (800431c <HAL_DMA_IRQHandler+0xa14>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d03b      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x8b8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a74      	ldr	r2, [pc, #464]	; (8004320 <HAL_DMA_IRQHandler+0xa18>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d036      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x8b8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a73      	ldr	r2, [pc, #460]	; (8004324 <HAL_DMA_IRQHandler+0xa1c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d031      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x8b8>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a71      	ldr	r2, [pc, #452]	; (8004328 <HAL_DMA_IRQHandler+0xa20>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d02c      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x8b8>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a70      	ldr	r2, [pc, #448]	; (800432c <HAL_DMA_IRQHandler+0xa24>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d027      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x8b8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a6e      	ldr	r2, [pc, #440]	; (8004330 <HAL_DMA_IRQHandler+0xa28>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d022      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x8b8>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a6d      	ldr	r2, [pc, #436]	; (8004334 <HAL_DMA_IRQHandler+0xa2c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d01d      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x8b8>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a6b      	ldr	r2, [pc, #428]	; (8004338 <HAL_DMA_IRQHandler+0xa30>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d018      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x8b8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a6a      	ldr	r2, [pc, #424]	; (800433c <HAL_DMA_IRQHandler+0xa34>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d013      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x8b8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a68      	ldr	r2, [pc, #416]	; (8004340 <HAL_DMA_IRQHandler+0xa38>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00e      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x8b8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a67      	ldr	r2, [pc, #412]	; (8004344 <HAL_DMA_IRQHandler+0xa3c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d009      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x8b8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a65      	ldr	r2, [pc, #404]	; (8004348 <HAL_DMA_IRQHandler+0xa40>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d004      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x8b8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a64      	ldr	r2, [pc, #400]	; (800434c <HAL_DMA_IRQHandler+0xa44>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d108      	bne.n	80041d2 <HAL_DMA_IRQHandler+0x8ca>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	e007      	b.n	80041e2 <HAL_DMA_IRQHandler+0x8da>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0201 	bic.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3301      	adds	r3, #1
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d307      	bcc.n	80041fe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f2      	bne.n	80041e2 <HAL_DMA_IRQHandler+0x8da>
 80041fc:	e000      	b.n	8004200 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80041fe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d004      	beq.n	8004218 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2203      	movs	r2, #3
 8004212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004216:	e003      	b.n	8004220 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8272 	beq.w	8004716 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	4798      	blx	r3
 800423a:	e26c      	b.n	8004716 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a43      	ldr	r2, [pc, #268]	; (8004350 <HAL_DMA_IRQHandler+0xa48>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d022      	beq.n	800428c <HAL_DMA_IRQHandler+0x984>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a42      	ldr	r2, [pc, #264]	; (8004354 <HAL_DMA_IRQHandler+0xa4c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d01d      	beq.n	800428c <HAL_DMA_IRQHandler+0x984>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a40      	ldr	r2, [pc, #256]	; (8004358 <HAL_DMA_IRQHandler+0xa50>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d018      	beq.n	800428c <HAL_DMA_IRQHandler+0x984>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a3f      	ldr	r2, [pc, #252]	; (800435c <HAL_DMA_IRQHandler+0xa54>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d013      	beq.n	800428c <HAL_DMA_IRQHandler+0x984>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a3d      	ldr	r2, [pc, #244]	; (8004360 <HAL_DMA_IRQHandler+0xa58>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00e      	beq.n	800428c <HAL_DMA_IRQHandler+0x984>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a3c      	ldr	r2, [pc, #240]	; (8004364 <HAL_DMA_IRQHandler+0xa5c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d009      	beq.n	800428c <HAL_DMA_IRQHandler+0x984>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a3a      	ldr	r2, [pc, #232]	; (8004368 <HAL_DMA_IRQHandler+0xa60>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d004      	beq.n	800428c <HAL_DMA_IRQHandler+0x984>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a39      	ldr	r2, [pc, #228]	; (800436c <HAL_DMA_IRQHandler+0xa64>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d101      	bne.n	8004290 <HAL_DMA_IRQHandler+0x988>
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <HAL_DMA_IRQHandler+0x98a>
 8004290:	2300      	movs	r3, #0
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 823f 	beq.w	8004716 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	2204      	movs	r2, #4
 80042aa:	409a      	lsls	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 80cd 	beq.w	8004450 <HAL_DMA_IRQHandler+0xb48>
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80c7 	beq.w	8004450 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	2204      	movs	r2, #4
 80042cc:	409a      	lsls	r2, r3
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d049      	beq.n	8004370 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d109      	bne.n	80042fa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8210 	beq.w	8004710 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042f8:	e20a      	b.n	8004710 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 8206 	beq.w	8004710 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800430c:	e200      	b.n	8004710 <HAL_DMA_IRQHandler+0xe08>
 800430e:	bf00      	nop
 8004310:	40020010 	.word	0x40020010
 8004314:	40020028 	.word	0x40020028
 8004318:	40020040 	.word	0x40020040
 800431c:	40020058 	.word	0x40020058
 8004320:	40020070 	.word	0x40020070
 8004324:	40020088 	.word	0x40020088
 8004328:	400200a0 	.word	0x400200a0
 800432c:	400200b8 	.word	0x400200b8
 8004330:	40020410 	.word	0x40020410
 8004334:	40020428 	.word	0x40020428
 8004338:	40020440 	.word	0x40020440
 800433c:	40020458 	.word	0x40020458
 8004340:	40020470 	.word	0x40020470
 8004344:	40020488 	.word	0x40020488
 8004348:	400204a0 	.word	0x400204a0
 800434c:	400204b8 	.word	0x400204b8
 8004350:	58025408 	.word	0x58025408
 8004354:	5802541c 	.word	0x5802541c
 8004358:	58025430 	.word	0x58025430
 800435c:	58025444 	.word	0x58025444
 8004360:	58025458 	.word	0x58025458
 8004364:	5802546c 	.word	0x5802546c
 8004368:	58025480 	.word	0x58025480
 800436c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d160      	bne.n	800443c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a7f      	ldr	r2, [pc, #508]	; (800457c <HAL_DMA_IRQHandler+0xc74>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d04a      	beq.n	800441a <HAL_DMA_IRQHandler+0xb12>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a7d      	ldr	r2, [pc, #500]	; (8004580 <HAL_DMA_IRQHandler+0xc78>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d045      	beq.n	800441a <HAL_DMA_IRQHandler+0xb12>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a7c      	ldr	r2, [pc, #496]	; (8004584 <HAL_DMA_IRQHandler+0xc7c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d040      	beq.n	800441a <HAL_DMA_IRQHandler+0xb12>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a7a      	ldr	r2, [pc, #488]	; (8004588 <HAL_DMA_IRQHandler+0xc80>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d03b      	beq.n	800441a <HAL_DMA_IRQHandler+0xb12>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a79      	ldr	r2, [pc, #484]	; (800458c <HAL_DMA_IRQHandler+0xc84>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d036      	beq.n	800441a <HAL_DMA_IRQHandler+0xb12>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a77      	ldr	r2, [pc, #476]	; (8004590 <HAL_DMA_IRQHandler+0xc88>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d031      	beq.n	800441a <HAL_DMA_IRQHandler+0xb12>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a76      	ldr	r2, [pc, #472]	; (8004594 <HAL_DMA_IRQHandler+0xc8c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d02c      	beq.n	800441a <HAL_DMA_IRQHandler+0xb12>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a74      	ldr	r2, [pc, #464]	; (8004598 <HAL_DMA_IRQHandler+0xc90>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d027      	beq.n	800441a <HAL_DMA_IRQHandler+0xb12>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a73      	ldr	r2, [pc, #460]	; (800459c <HAL_DMA_IRQHandler+0xc94>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d022      	beq.n	800441a <HAL_DMA_IRQHandler+0xb12>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a71      	ldr	r2, [pc, #452]	; (80045a0 <HAL_DMA_IRQHandler+0xc98>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d01d      	beq.n	800441a <HAL_DMA_IRQHandler+0xb12>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a70      	ldr	r2, [pc, #448]	; (80045a4 <HAL_DMA_IRQHandler+0xc9c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d018      	beq.n	800441a <HAL_DMA_IRQHandler+0xb12>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a6e      	ldr	r2, [pc, #440]	; (80045a8 <HAL_DMA_IRQHandler+0xca0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <HAL_DMA_IRQHandler+0xb12>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a6d      	ldr	r2, [pc, #436]	; (80045ac <HAL_DMA_IRQHandler+0xca4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00e      	beq.n	800441a <HAL_DMA_IRQHandler+0xb12>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a6b      	ldr	r2, [pc, #428]	; (80045b0 <HAL_DMA_IRQHandler+0xca8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_DMA_IRQHandler+0xb12>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a6a      	ldr	r2, [pc, #424]	; (80045b4 <HAL_DMA_IRQHandler+0xcac>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d004      	beq.n	800441a <HAL_DMA_IRQHandler+0xb12>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a68      	ldr	r2, [pc, #416]	; (80045b8 <HAL_DMA_IRQHandler+0xcb0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d108      	bne.n	800442c <HAL_DMA_IRQHandler+0xb24>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0208 	bic.w	r2, r2, #8
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e007      	b.n	800443c <HAL_DMA_IRQHandler+0xb34>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0204 	bic.w	r2, r2, #4
 800443a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8165 	beq.w	8004710 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800444e:	e15f      	b.n	8004710 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	2202      	movs	r2, #2
 800445a:	409a      	lsls	r2, r3
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80c5 	beq.w	80045f0 <HAL_DMA_IRQHandler+0xce8>
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80bf 	beq.w	80045f0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	2202      	movs	r2, #2
 800447c:	409a      	lsls	r2, r3
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d018      	beq.n	80044be <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 813a 	beq.w	8004714 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044a8:	e134      	b.n	8004714 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 8130 	beq.w	8004714 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044bc:	e12a      	b.n	8004714 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f040 8089 	bne.w	80045dc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2b      	ldr	r2, [pc, #172]	; (800457c <HAL_DMA_IRQHandler+0xc74>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d04a      	beq.n	800456a <HAL_DMA_IRQHandler+0xc62>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a29      	ldr	r2, [pc, #164]	; (8004580 <HAL_DMA_IRQHandler+0xc78>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d045      	beq.n	800456a <HAL_DMA_IRQHandler+0xc62>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a28      	ldr	r2, [pc, #160]	; (8004584 <HAL_DMA_IRQHandler+0xc7c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d040      	beq.n	800456a <HAL_DMA_IRQHandler+0xc62>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a26      	ldr	r2, [pc, #152]	; (8004588 <HAL_DMA_IRQHandler+0xc80>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d03b      	beq.n	800456a <HAL_DMA_IRQHandler+0xc62>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a25      	ldr	r2, [pc, #148]	; (800458c <HAL_DMA_IRQHandler+0xc84>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d036      	beq.n	800456a <HAL_DMA_IRQHandler+0xc62>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a23      	ldr	r2, [pc, #140]	; (8004590 <HAL_DMA_IRQHandler+0xc88>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d031      	beq.n	800456a <HAL_DMA_IRQHandler+0xc62>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a22      	ldr	r2, [pc, #136]	; (8004594 <HAL_DMA_IRQHandler+0xc8c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d02c      	beq.n	800456a <HAL_DMA_IRQHandler+0xc62>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a20      	ldr	r2, [pc, #128]	; (8004598 <HAL_DMA_IRQHandler+0xc90>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d027      	beq.n	800456a <HAL_DMA_IRQHandler+0xc62>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1f      	ldr	r2, [pc, #124]	; (800459c <HAL_DMA_IRQHandler+0xc94>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d022      	beq.n	800456a <HAL_DMA_IRQHandler+0xc62>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1d      	ldr	r2, [pc, #116]	; (80045a0 <HAL_DMA_IRQHandler+0xc98>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d01d      	beq.n	800456a <HAL_DMA_IRQHandler+0xc62>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1c      	ldr	r2, [pc, #112]	; (80045a4 <HAL_DMA_IRQHandler+0xc9c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d018      	beq.n	800456a <HAL_DMA_IRQHandler+0xc62>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1a      	ldr	r2, [pc, #104]	; (80045a8 <HAL_DMA_IRQHandler+0xca0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <HAL_DMA_IRQHandler+0xc62>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a19      	ldr	r2, [pc, #100]	; (80045ac <HAL_DMA_IRQHandler+0xca4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00e      	beq.n	800456a <HAL_DMA_IRQHandler+0xc62>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <HAL_DMA_IRQHandler+0xca8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d009      	beq.n	800456a <HAL_DMA_IRQHandler+0xc62>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a16      	ldr	r2, [pc, #88]	; (80045b4 <HAL_DMA_IRQHandler+0xcac>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d004      	beq.n	800456a <HAL_DMA_IRQHandler+0xc62>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a14      	ldr	r2, [pc, #80]	; (80045b8 <HAL_DMA_IRQHandler+0xcb0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d128      	bne.n	80045bc <HAL_DMA_IRQHandler+0xcb4>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0214 	bic.w	r2, r2, #20
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	e027      	b.n	80045cc <HAL_DMA_IRQHandler+0xcc4>
 800457c:	40020010 	.word	0x40020010
 8004580:	40020028 	.word	0x40020028
 8004584:	40020040 	.word	0x40020040
 8004588:	40020058 	.word	0x40020058
 800458c:	40020070 	.word	0x40020070
 8004590:	40020088 	.word	0x40020088
 8004594:	400200a0 	.word	0x400200a0
 8004598:	400200b8 	.word	0x400200b8
 800459c:	40020410 	.word	0x40020410
 80045a0:	40020428 	.word	0x40020428
 80045a4:	40020440 	.word	0x40020440
 80045a8:	40020458 	.word	0x40020458
 80045ac:	40020470 	.word	0x40020470
 80045b0:	40020488 	.word	0x40020488
 80045b4:	400204a0 	.word	0x400204a0
 80045b8:	400204b8 	.word	0x400204b8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 020a 	bic.w	r2, r2, #10
 80045ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 8097 	beq.w	8004714 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045ee:	e091      	b.n	8004714 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	2208      	movs	r2, #8
 80045fa:	409a      	lsls	r2, r3
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8088 	beq.w	8004716 <HAL_DMA_IRQHandler+0xe0e>
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 8082 	beq.w	8004716 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a41      	ldr	r2, [pc, #260]	; (800471c <HAL_DMA_IRQHandler+0xe14>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d04a      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xdaa>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a3f      	ldr	r2, [pc, #252]	; (8004720 <HAL_DMA_IRQHandler+0xe18>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d045      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xdaa>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a3e      	ldr	r2, [pc, #248]	; (8004724 <HAL_DMA_IRQHandler+0xe1c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d040      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xdaa>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a3c      	ldr	r2, [pc, #240]	; (8004728 <HAL_DMA_IRQHandler+0xe20>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d03b      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xdaa>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a3b      	ldr	r2, [pc, #236]	; (800472c <HAL_DMA_IRQHandler+0xe24>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d036      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xdaa>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a39      	ldr	r2, [pc, #228]	; (8004730 <HAL_DMA_IRQHandler+0xe28>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d031      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xdaa>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a38      	ldr	r2, [pc, #224]	; (8004734 <HAL_DMA_IRQHandler+0xe2c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d02c      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xdaa>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a36      	ldr	r2, [pc, #216]	; (8004738 <HAL_DMA_IRQHandler+0xe30>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d027      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xdaa>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a35      	ldr	r2, [pc, #212]	; (800473c <HAL_DMA_IRQHandler+0xe34>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d022      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xdaa>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a33      	ldr	r2, [pc, #204]	; (8004740 <HAL_DMA_IRQHandler+0xe38>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01d      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xdaa>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a32      	ldr	r2, [pc, #200]	; (8004744 <HAL_DMA_IRQHandler+0xe3c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d018      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xdaa>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a30      	ldr	r2, [pc, #192]	; (8004748 <HAL_DMA_IRQHandler+0xe40>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d013      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xdaa>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a2f      	ldr	r2, [pc, #188]	; (800474c <HAL_DMA_IRQHandler+0xe44>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00e      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xdaa>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a2d      	ldr	r2, [pc, #180]	; (8004750 <HAL_DMA_IRQHandler+0xe48>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d009      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xdaa>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2c      	ldr	r2, [pc, #176]	; (8004754 <HAL_DMA_IRQHandler+0xe4c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xdaa>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2a      	ldr	r2, [pc, #168]	; (8004758 <HAL_DMA_IRQHandler+0xe50>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d108      	bne.n	80046c4 <HAL_DMA_IRQHandler+0xdbc>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 021c 	bic.w	r2, r2, #28
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	e007      	b.n	80046d4 <HAL_DMA_IRQHandler+0xdcc>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 020e 	bic.w	r2, r2, #14
 80046d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	2201      	movs	r2, #1
 80046de:	409a      	lsls	r2, r3
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	4798      	blx	r3
 800470a:	e004      	b.n	8004716 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800470c:	bf00      	nop
 800470e:	e002      	b.n	8004716 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004710:	bf00      	nop
 8004712:	e000      	b.n	8004716 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004714:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004716:	3728      	adds	r7, #40	; 0x28
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40020010 	.word	0x40020010
 8004720:	40020028 	.word	0x40020028
 8004724:	40020040 	.word	0x40020040
 8004728:	40020058 	.word	0x40020058
 800472c:	40020070 	.word	0x40020070
 8004730:	40020088 	.word	0x40020088
 8004734:	400200a0 	.word	0x400200a0
 8004738:	400200b8 	.word	0x400200b8
 800473c:	40020410 	.word	0x40020410
 8004740:	40020428 	.word	0x40020428
 8004744:	40020440 	.word	0x40020440
 8004748:	40020458 	.word	0x40020458
 800474c:	40020470 	.word	0x40020470
 8004750:	40020488 	.word	0x40020488
 8004754:	400204a0 	.word	0x400204a0
 8004758:	400204b8 	.word	0x400204b8

0800475c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004774:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a7f      	ldr	r2, [pc, #508]	; (8004978 <DMA_SetConfig+0x21c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d072      	beq.n	8004866 <DMA_SetConfig+0x10a>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a7d      	ldr	r2, [pc, #500]	; (800497c <DMA_SetConfig+0x220>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d06d      	beq.n	8004866 <DMA_SetConfig+0x10a>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a7c      	ldr	r2, [pc, #496]	; (8004980 <DMA_SetConfig+0x224>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d068      	beq.n	8004866 <DMA_SetConfig+0x10a>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a7a      	ldr	r2, [pc, #488]	; (8004984 <DMA_SetConfig+0x228>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d063      	beq.n	8004866 <DMA_SetConfig+0x10a>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a79      	ldr	r2, [pc, #484]	; (8004988 <DMA_SetConfig+0x22c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d05e      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a77      	ldr	r2, [pc, #476]	; (800498c <DMA_SetConfig+0x230>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d059      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a76      	ldr	r2, [pc, #472]	; (8004990 <DMA_SetConfig+0x234>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d054      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a74      	ldr	r2, [pc, #464]	; (8004994 <DMA_SetConfig+0x238>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d04f      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a73      	ldr	r2, [pc, #460]	; (8004998 <DMA_SetConfig+0x23c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d04a      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a71      	ldr	r2, [pc, #452]	; (800499c <DMA_SetConfig+0x240>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d045      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a70      	ldr	r2, [pc, #448]	; (80049a0 <DMA_SetConfig+0x244>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d040      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a6e      	ldr	r2, [pc, #440]	; (80049a4 <DMA_SetConfig+0x248>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d03b      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a6d      	ldr	r2, [pc, #436]	; (80049a8 <DMA_SetConfig+0x24c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d036      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a6b      	ldr	r2, [pc, #428]	; (80049ac <DMA_SetConfig+0x250>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d031      	beq.n	8004866 <DMA_SetConfig+0x10a>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a6a      	ldr	r2, [pc, #424]	; (80049b0 <DMA_SetConfig+0x254>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d02c      	beq.n	8004866 <DMA_SetConfig+0x10a>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a68      	ldr	r2, [pc, #416]	; (80049b4 <DMA_SetConfig+0x258>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d027      	beq.n	8004866 <DMA_SetConfig+0x10a>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a67      	ldr	r2, [pc, #412]	; (80049b8 <DMA_SetConfig+0x25c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d022      	beq.n	8004866 <DMA_SetConfig+0x10a>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a65      	ldr	r2, [pc, #404]	; (80049bc <DMA_SetConfig+0x260>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01d      	beq.n	8004866 <DMA_SetConfig+0x10a>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a64      	ldr	r2, [pc, #400]	; (80049c0 <DMA_SetConfig+0x264>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d018      	beq.n	8004866 <DMA_SetConfig+0x10a>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a62      	ldr	r2, [pc, #392]	; (80049c4 <DMA_SetConfig+0x268>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <DMA_SetConfig+0x10a>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a61      	ldr	r2, [pc, #388]	; (80049c8 <DMA_SetConfig+0x26c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <DMA_SetConfig+0x10a>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a5f      	ldr	r2, [pc, #380]	; (80049cc <DMA_SetConfig+0x270>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <DMA_SetConfig+0x10a>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a5e      	ldr	r2, [pc, #376]	; (80049d0 <DMA_SetConfig+0x274>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <DMA_SetConfig+0x10a>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a5c      	ldr	r2, [pc, #368]	; (80049d4 <DMA_SetConfig+0x278>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d101      	bne.n	800486a <DMA_SetConfig+0x10e>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <DMA_SetConfig+0x110>
 800486a:	2300      	movs	r3, #0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00d      	beq.n	800488c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004878:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d004      	beq.n	800488c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800488a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a39      	ldr	r2, [pc, #228]	; (8004978 <DMA_SetConfig+0x21c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d04a      	beq.n	800492c <DMA_SetConfig+0x1d0>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a38      	ldr	r2, [pc, #224]	; (800497c <DMA_SetConfig+0x220>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d045      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a36      	ldr	r2, [pc, #216]	; (8004980 <DMA_SetConfig+0x224>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d040      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a35      	ldr	r2, [pc, #212]	; (8004984 <DMA_SetConfig+0x228>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d03b      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a33      	ldr	r2, [pc, #204]	; (8004988 <DMA_SetConfig+0x22c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d036      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a32      	ldr	r2, [pc, #200]	; (800498c <DMA_SetConfig+0x230>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d031      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a30      	ldr	r2, [pc, #192]	; (8004990 <DMA_SetConfig+0x234>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d02c      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2f      	ldr	r2, [pc, #188]	; (8004994 <DMA_SetConfig+0x238>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d027      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2d      	ldr	r2, [pc, #180]	; (8004998 <DMA_SetConfig+0x23c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d022      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2c      	ldr	r2, [pc, #176]	; (800499c <DMA_SetConfig+0x240>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d01d      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <DMA_SetConfig+0x244>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d018      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a29      	ldr	r2, [pc, #164]	; (80049a4 <DMA_SetConfig+0x248>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <DMA_SetConfig+0x1d0>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <DMA_SetConfig+0x24c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00e      	beq.n	800492c <DMA_SetConfig+0x1d0>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a26      	ldr	r2, [pc, #152]	; (80049ac <DMA_SetConfig+0x250>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d009      	beq.n	800492c <DMA_SetConfig+0x1d0>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a24      	ldr	r2, [pc, #144]	; (80049b0 <DMA_SetConfig+0x254>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <DMA_SetConfig+0x1d0>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a23      	ldr	r2, [pc, #140]	; (80049b4 <DMA_SetConfig+0x258>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d101      	bne.n	8004930 <DMA_SetConfig+0x1d4>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <DMA_SetConfig+0x1d6>
 8004930:	2300      	movs	r3, #0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d059      	beq.n	80049ea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	223f      	movs	r2, #63	; 0x3f
 8004940:	409a      	lsls	r2, r3
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004954:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b40      	cmp	r3, #64	; 0x40
 8004964:	d138      	bne.n	80049d8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004976:	e086      	b.n	8004a86 <DMA_SetConfig+0x32a>
 8004978:	40020010 	.word	0x40020010
 800497c:	40020028 	.word	0x40020028
 8004980:	40020040 	.word	0x40020040
 8004984:	40020058 	.word	0x40020058
 8004988:	40020070 	.word	0x40020070
 800498c:	40020088 	.word	0x40020088
 8004990:	400200a0 	.word	0x400200a0
 8004994:	400200b8 	.word	0x400200b8
 8004998:	40020410 	.word	0x40020410
 800499c:	40020428 	.word	0x40020428
 80049a0:	40020440 	.word	0x40020440
 80049a4:	40020458 	.word	0x40020458
 80049a8:	40020470 	.word	0x40020470
 80049ac:	40020488 	.word	0x40020488
 80049b0:	400204a0 	.word	0x400204a0
 80049b4:	400204b8 	.word	0x400204b8
 80049b8:	58025408 	.word	0x58025408
 80049bc:	5802541c 	.word	0x5802541c
 80049c0:	58025430 	.word	0x58025430
 80049c4:	58025444 	.word	0x58025444
 80049c8:	58025458 	.word	0x58025458
 80049cc:	5802546c 	.word	0x5802546c
 80049d0:	58025480 	.word	0x58025480
 80049d4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	60da      	str	r2, [r3, #12]
}
 80049e8:	e04d      	b.n	8004a86 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a29      	ldr	r2, [pc, #164]	; (8004a94 <DMA_SetConfig+0x338>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d022      	beq.n	8004a3a <DMA_SetConfig+0x2de>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a27      	ldr	r2, [pc, #156]	; (8004a98 <DMA_SetConfig+0x33c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d01d      	beq.n	8004a3a <DMA_SetConfig+0x2de>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a26      	ldr	r2, [pc, #152]	; (8004a9c <DMA_SetConfig+0x340>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d018      	beq.n	8004a3a <DMA_SetConfig+0x2de>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a24      	ldr	r2, [pc, #144]	; (8004aa0 <DMA_SetConfig+0x344>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <DMA_SetConfig+0x2de>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a23      	ldr	r2, [pc, #140]	; (8004aa4 <DMA_SetConfig+0x348>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00e      	beq.n	8004a3a <DMA_SetConfig+0x2de>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a21      	ldr	r2, [pc, #132]	; (8004aa8 <DMA_SetConfig+0x34c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d009      	beq.n	8004a3a <DMA_SetConfig+0x2de>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a20      	ldr	r2, [pc, #128]	; (8004aac <DMA_SetConfig+0x350>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d004      	beq.n	8004a3a <DMA_SetConfig+0x2de>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1e      	ldr	r2, [pc, #120]	; (8004ab0 <DMA_SetConfig+0x354>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d101      	bne.n	8004a3e <DMA_SetConfig+0x2e2>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <DMA_SetConfig+0x2e4>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d020      	beq.n	8004a86 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a48:	f003 031f 	and.w	r3, r3, #31
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d108      	bne.n	8004a76 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	60da      	str	r2, [r3, #12]
}
 8004a74:	e007      	b.n	8004a86 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	60da      	str	r2, [r3, #12]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	58025408 	.word	0x58025408
 8004a98:	5802541c 	.word	0x5802541c
 8004a9c:	58025430 	.word	0x58025430
 8004aa0:	58025444 	.word	0x58025444
 8004aa4:	58025458 	.word	0x58025458
 8004aa8:	5802546c 	.word	0x5802546c
 8004aac:	58025480 	.word	0x58025480
 8004ab0:	58025494 	.word	0x58025494

08004ab4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a42      	ldr	r2, [pc, #264]	; (8004bcc <DMA_CalcBaseAndBitshift+0x118>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d04a      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a41      	ldr	r2, [pc, #260]	; (8004bd0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d045      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a3f      	ldr	r2, [pc, #252]	; (8004bd4 <DMA_CalcBaseAndBitshift+0x120>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d040      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a3e      	ldr	r2, [pc, #248]	; (8004bd8 <DMA_CalcBaseAndBitshift+0x124>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d03b      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a3c      	ldr	r2, [pc, #240]	; (8004bdc <DMA_CalcBaseAndBitshift+0x128>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d036      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a3b      	ldr	r2, [pc, #236]	; (8004be0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d031      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a39      	ldr	r2, [pc, #228]	; (8004be4 <DMA_CalcBaseAndBitshift+0x130>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d02c      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a38      	ldr	r2, [pc, #224]	; (8004be8 <DMA_CalcBaseAndBitshift+0x134>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d027      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a36      	ldr	r2, [pc, #216]	; (8004bec <DMA_CalcBaseAndBitshift+0x138>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d022      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a35      	ldr	r2, [pc, #212]	; (8004bf0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d01d      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a33      	ldr	r2, [pc, #204]	; (8004bf4 <DMA_CalcBaseAndBitshift+0x140>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d018      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a32      	ldr	r2, [pc, #200]	; (8004bf8 <DMA_CalcBaseAndBitshift+0x144>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d013      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a30      	ldr	r2, [pc, #192]	; (8004bfc <DMA_CalcBaseAndBitshift+0x148>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00e      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a2f      	ldr	r2, [pc, #188]	; (8004c00 <DMA_CalcBaseAndBitshift+0x14c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d009      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a2d      	ldr	r2, [pc, #180]	; (8004c04 <DMA_CalcBaseAndBitshift+0x150>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a2c      	ldr	r2, [pc, #176]	; (8004c08 <DMA_CalcBaseAndBitshift+0x154>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d101      	bne.n	8004b60 <DMA_CalcBaseAndBitshift+0xac>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <DMA_CalcBaseAndBitshift+0xae>
 8004b60:	2300      	movs	r3, #0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d024      	beq.n	8004bb0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	3b10      	subs	r3, #16
 8004b6e:	4a27      	ldr	r2, [pc, #156]	; (8004c0c <DMA_CalcBaseAndBitshift+0x158>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	091b      	lsrs	r3, r3, #4
 8004b76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	4a24      	ldr	r2, [pc, #144]	; (8004c10 <DMA_CalcBaseAndBitshift+0x15c>)
 8004b80:	5cd3      	ldrb	r3, [r2, r3]
 8004b82:	461a      	mov	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d908      	bls.n	8004ba0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	4b1f      	ldr	r3, [pc, #124]	; (8004c14 <DMA_CalcBaseAndBitshift+0x160>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	1d1a      	adds	r2, r3, #4
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	659a      	str	r2, [r3, #88]	; 0x58
 8004b9e:	e00d      	b.n	8004bbc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <DMA_CalcBaseAndBitshift+0x160>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6593      	str	r3, [r2, #88]	; 0x58
 8004bae:	e005      	b.n	8004bbc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	40020010 	.word	0x40020010
 8004bd0:	40020028 	.word	0x40020028
 8004bd4:	40020040 	.word	0x40020040
 8004bd8:	40020058 	.word	0x40020058
 8004bdc:	40020070 	.word	0x40020070
 8004be0:	40020088 	.word	0x40020088
 8004be4:	400200a0 	.word	0x400200a0
 8004be8:	400200b8 	.word	0x400200b8
 8004bec:	40020410 	.word	0x40020410
 8004bf0:	40020428 	.word	0x40020428
 8004bf4:	40020440 	.word	0x40020440
 8004bf8:	40020458 	.word	0x40020458
 8004bfc:	40020470 	.word	0x40020470
 8004c00:	40020488 	.word	0x40020488
 8004c04:	400204a0 	.word	0x400204a0
 8004c08:	400204b8 	.word	0x400204b8
 8004c0c:	aaaaaaab 	.word	0xaaaaaaab
 8004c10:	0800d00c 	.word	0x0800d00c
 8004c14:	fffffc00 	.word	0xfffffc00

08004c18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d120      	bne.n	8004c6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d858      	bhi.n	8004ce6 <DMA_CheckFifoParam+0xce>
 8004c34:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <DMA_CheckFifoParam+0x24>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004c4d 	.word	0x08004c4d
 8004c40:	08004c5f 	.word	0x08004c5f
 8004c44:	08004c4d 	.word	0x08004c4d
 8004c48:	08004ce7 	.word	0x08004ce7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d048      	beq.n	8004cea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c5c:	e045      	b.n	8004cea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c66:	d142      	bne.n	8004cee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c6c:	e03f      	b.n	8004cee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c76:	d123      	bne.n	8004cc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d838      	bhi.n	8004cf2 <DMA_CheckFifoParam+0xda>
 8004c80:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <DMA_CheckFifoParam+0x70>)
 8004c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c86:	bf00      	nop
 8004c88:	08004c99 	.word	0x08004c99
 8004c8c:	08004c9f 	.word	0x08004c9f
 8004c90:	08004c99 	.word	0x08004c99
 8004c94:	08004cb1 	.word	0x08004cb1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
        break;
 8004c9c:	e030      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d025      	beq.n	8004cf6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cae:	e022      	b.n	8004cf6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cb8:	d11f      	bne.n	8004cfa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cbe:	e01c      	b.n	8004cfa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d902      	bls.n	8004cce <DMA_CheckFifoParam+0xb6>
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d003      	beq.n	8004cd4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ccc:	e018      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
        break;
 8004cd2:	e015      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00e      	beq.n	8004cfe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8004ce4:	e00b      	b.n	8004cfe <DMA_CheckFifoParam+0xe6>
        break;
 8004ce6:	bf00      	nop
 8004ce8:	e00a      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        break;
 8004cea:	bf00      	nop
 8004cec:	e008      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        break;
 8004cee:	bf00      	nop
 8004cf0:	e006      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        break;
 8004cf2:	bf00      	nop
 8004cf4:	e004      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        break;
 8004cf6:	bf00      	nop
 8004cf8:	e002      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        break;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
    break;
 8004cfe:	bf00      	nop
    }
  }

  return status;
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop

08004d10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a38      	ldr	r2, [pc, #224]	; (8004e04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d022      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a36      	ldr	r2, [pc, #216]	; (8004e08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d01d      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a35      	ldr	r2, [pc, #212]	; (8004e0c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d018      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a33      	ldr	r2, [pc, #204]	; (8004e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d013      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a32      	ldr	r2, [pc, #200]	; (8004e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00e      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a30      	ldr	r2, [pc, #192]	; (8004e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d009      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2f      	ldr	r2, [pc, #188]	; (8004e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d004      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a2d      	ldr	r2, [pc, #180]	; (8004e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d101      	bne.n	8004d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d72:	2300      	movs	r3, #0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01a      	beq.n	8004dae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	3b08      	subs	r3, #8
 8004d80:	4a28      	ldr	r2, [pc, #160]	; (8004e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	091b      	lsrs	r3, r3, #4
 8004d88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4b26      	ldr	r3, [pc, #152]	; (8004e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d8e:	4413      	add	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	461a      	mov	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a24      	ldr	r2, [pc, #144]	; (8004e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f003 031f 	and.w	r3, r3, #31
 8004da4:	2201      	movs	r2, #1
 8004da6:	409a      	lsls	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004dac:	e024      	b.n	8004df8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	3b10      	subs	r3, #16
 8004db6:	4a1e      	ldr	r2, [pc, #120]	; (8004e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004db8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d806      	bhi.n	8004dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4a1b      	ldr	r2, [pc, #108]	; (8004e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d902      	bls.n	8004dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3308      	adds	r3, #8
 8004dd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	461a      	mov	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a16      	ldr	r2, [pc, #88]	; (8004e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004de8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	2201      	movs	r2, #1
 8004df2:	409a      	lsls	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	58025408 	.word	0x58025408
 8004e08:	5802541c 	.word	0x5802541c
 8004e0c:	58025430 	.word	0x58025430
 8004e10:	58025444 	.word	0x58025444
 8004e14:	58025458 	.word	0x58025458
 8004e18:	5802546c 	.word	0x5802546c
 8004e1c:	58025480 	.word	0x58025480
 8004e20:	58025494 	.word	0x58025494
 8004e24:	cccccccd 	.word	0xcccccccd
 8004e28:	16009600 	.word	0x16009600
 8004e2c:	58025880 	.word	0x58025880
 8004e30:	aaaaaaab 	.word	0xaaaaaaab
 8004e34:	400204b8 	.word	0x400204b8
 8004e38:	4002040f 	.word	0x4002040f
 8004e3c:	10008200 	.word	0x10008200
 8004e40:	40020880 	.word	0x40020880

08004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d04a      	beq.n	8004ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d847      	bhi.n	8004ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a25      	ldr	r2, [pc, #148]	; (8004efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d022      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a24      	ldr	r2, [pc, #144]	; (8004f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d01d      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a22      	ldr	r2, [pc, #136]	; (8004f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d018      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d013      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00e      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1e      	ldr	r2, [pc, #120]	; (8004f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d009      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d004      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1b      	ldr	r2, [pc, #108]	; (8004f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d101      	bne.n	8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a15      	ldr	r2, [pc, #84]	; (8004f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ecc:	671a      	str	r2, [r3, #112]	; 0x70
 8004ece:	e009      	b.n	8004ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	461a      	mov	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a11      	ldr	r2, [pc, #68]	; (8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004ee2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	2201      	movs	r2, #1
 8004eea:	409a      	lsls	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	58025408 	.word	0x58025408
 8004f00:	5802541c 	.word	0x5802541c
 8004f04:	58025430 	.word	0x58025430
 8004f08:	58025444 	.word	0x58025444
 8004f0c:	58025458 	.word	0x58025458
 8004f10:	5802546c 	.word	0x5802546c
 8004f14:	58025480 	.word	0x58025480
 8004f18:	58025494 	.word	0x58025494
 8004f1c:	1600963f 	.word	0x1600963f
 8004f20:	58025940 	.word	0x58025940
 8004f24:	1000823f 	.word	0x1000823f
 8004f28:	40020940 	.word	0x40020940

08004f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b089      	sub	sp, #36	; 0x24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f3a:	4b89      	ldr	r3, [pc, #548]	; (8005160 <HAL_GPIO_Init+0x234>)
 8004f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f3e:	e194      	b.n	800526a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	2101      	movs	r1, #1
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 8186 	beq.w	8005264 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d005      	beq.n	8004f70 <HAL_GPIO_Init+0x44>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d130      	bne.n	8004fd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	2203      	movs	r2, #3
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	43db      	mvns	r3, r3
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	4013      	ands	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	091b      	lsrs	r3, r3, #4
 8004fbc:	f003 0201 	and.w	r2, r3, #1
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d017      	beq.n	800500e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	2203      	movs	r2, #3
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4313      	orrs	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d123      	bne.n	8005062 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	08da      	lsrs	r2, r3, #3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3208      	adds	r2, #8
 8005022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	220f      	movs	r2, #15
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4013      	ands	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4313      	orrs	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	08da      	lsrs	r2, r3, #3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3208      	adds	r2, #8
 800505c:	69b9      	ldr	r1, [r7, #24]
 800505e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	2203      	movs	r2, #3
 800506e:	fa02 f303 	lsl.w	r3, r2, r3
 8005072:	43db      	mvns	r3, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4013      	ands	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f003 0203 	and.w	r2, r3, #3
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4313      	orrs	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 80e0 	beq.w	8005264 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050a4:	4b2f      	ldr	r3, [pc, #188]	; (8005164 <HAL_GPIO_Init+0x238>)
 80050a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050aa:	4a2e      	ldr	r2, [pc, #184]	; (8005164 <HAL_GPIO_Init+0x238>)
 80050ac:	f043 0302 	orr.w	r3, r3, #2
 80050b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050b4:	4b2b      	ldr	r3, [pc, #172]	; (8005164 <HAL_GPIO_Init+0x238>)
 80050b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050c2:	4a29      	ldr	r2, [pc, #164]	; (8005168 <HAL_GPIO_Init+0x23c>)
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	089b      	lsrs	r3, r3, #2
 80050c8:	3302      	adds	r3, #2
 80050ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	220f      	movs	r2, #15
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	43db      	mvns	r3, r3
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	4013      	ands	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a20      	ldr	r2, [pc, #128]	; (800516c <HAL_GPIO_Init+0x240>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d052      	beq.n	8005194 <HAL_GPIO_Init+0x268>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a1f      	ldr	r2, [pc, #124]	; (8005170 <HAL_GPIO_Init+0x244>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d031      	beq.n	800515a <HAL_GPIO_Init+0x22e>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <HAL_GPIO_Init+0x248>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d02b      	beq.n	8005156 <HAL_GPIO_Init+0x22a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a1d      	ldr	r2, [pc, #116]	; (8005178 <HAL_GPIO_Init+0x24c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d025      	beq.n	8005152 <HAL_GPIO_Init+0x226>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a1c      	ldr	r2, [pc, #112]	; (800517c <HAL_GPIO_Init+0x250>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01f      	beq.n	800514e <HAL_GPIO_Init+0x222>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1b      	ldr	r2, [pc, #108]	; (8005180 <HAL_GPIO_Init+0x254>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d019      	beq.n	800514a <HAL_GPIO_Init+0x21e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a1a      	ldr	r2, [pc, #104]	; (8005184 <HAL_GPIO_Init+0x258>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d013      	beq.n	8005146 <HAL_GPIO_Init+0x21a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a19      	ldr	r2, [pc, #100]	; (8005188 <HAL_GPIO_Init+0x25c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00d      	beq.n	8005142 <HAL_GPIO_Init+0x216>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a18      	ldr	r2, [pc, #96]	; (800518c <HAL_GPIO_Init+0x260>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d007      	beq.n	800513e <HAL_GPIO_Init+0x212>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a17      	ldr	r2, [pc, #92]	; (8005190 <HAL_GPIO_Init+0x264>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d101      	bne.n	800513a <HAL_GPIO_Init+0x20e>
 8005136:	2309      	movs	r3, #9
 8005138:	e02d      	b.n	8005196 <HAL_GPIO_Init+0x26a>
 800513a:	230a      	movs	r3, #10
 800513c:	e02b      	b.n	8005196 <HAL_GPIO_Init+0x26a>
 800513e:	2308      	movs	r3, #8
 8005140:	e029      	b.n	8005196 <HAL_GPIO_Init+0x26a>
 8005142:	2307      	movs	r3, #7
 8005144:	e027      	b.n	8005196 <HAL_GPIO_Init+0x26a>
 8005146:	2306      	movs	r3, #6
 8005148:	e025      	b.n	8005196 <HAL_GPIO_Init+0x26a>
 800514a:	2305      	movs	r3, #5
 800514c:	e023      	b.n	8005196 <HAL_GPIO_Init+0x26a>
 800514e:	2304      	movs	r3, #4
 8005150:	e021      	b.n	8005196 <HAL_GPIO_Init+0x26a>
 8005152:	2303      	movs	r3, #3
 8005154:	e01f      	b.n	8005196 <HAL_GPIO_Init+0x26a>
 8005156:	2302      	movs	r3, #2
 8005158:	e01d      	b.n	8005196 <HAL_GPIO_Init+0x26a>
 800515a:	2301      	movs	r3, #1
 800515c:	e01b      	b.n	8005196 <HAL_GPIO_Init+0x26a>
 800515e:	bf00      	nop
 8005160:	58000080 	.word	0x58000080
 8005164:	58024400 	.word	0x58024400
 8005168:	58000400 	.word	0x58000400
 800516c:	58020000 	.word	0x58020000
 8005170:	58020400 	.word	0x58020400
 8005174:	58020800 	.word	0x58020800
 8005178:	58020c00 	.word	0x58020c00
 800517c:	58021000 	.word	0x58021000
 8005180:	58021400 	.word	0x58021400
 8005184:	58021800 	.word	0x58021800
 8005188:	58021c00 	.word	0x58021c00
 800518c:	58022000 	.word	0x58022000
 8005190:	58022400 	.word	0x58022400
 8005194:	2300      	movs	r3, #0
 8005196:	69fa      	ldr	r2, [r7, #28]
 8005198:	f002 0203 	and.w	r2, r2, #3
 800519c:	0092      	lsls	r2, r2, #2
 800519e:	4093      	lsls	r3, r2
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051a6:	4938      	ldr	r1, [pc, #224]	; (8005288 <HAL_GPIO_Init+0x35c>)
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	089b      	lsrs	r3, r3, #2
 80051ac:	3302      	adds	r3, #2
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	43db      	mvns	r3, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4013      	ands	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80051da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	43db      	mvns	r3, r3
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	4013      	ands	r3, r2
 80051f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	43db      	mvns	r3, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4013      	ands	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	3301      	adds	r3, #1
 8005268:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	fa22 f303 	lsr.w	r3, r2, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	f47f ae63 	bne.w	8004f40 <HAL_GPIO_Init+0x14>
  }
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	3724      	adds	r7, #36	; 0x24
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	58000400 	.word	0x58000400

0800528c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	460b      	mov	r3, r1
 8005296:	807b      	strh	r3, [r7, #2]
 8005298:	4613      	mov	r3, r2
 800529a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800529c:	787b      	ldrb	r3, [r7, #1]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052a2:	887a      	ldrh	r2, [r7, #2]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80052a8:	e003      	b.n	80052b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052aa:	887b      	ldrh	r3, [r7, #2]
 80052ac:	041a      	lsls	r2, r3, #16
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	619a      	str	r2, [r3, #24]
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80052c8:	4b19      	ldr	r3, [pc, #100]	; (8005330 <HAL_PWREx_ConfigSupply+0x70>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d00a      	beq.n	80052ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80052d4:	4b16      	ldr	r3, [pc, #88]	; (8005330 <HAL_PWREx_ConfigSupply+0x70>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d001      	beq.n	80052e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e01f      	b.n	8005326 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e01d      	b.n	8005326 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052ea:	4b11      	ldr	r3, [pc, #68]	; (8005330 <HAL_PWREx_ConfigSupply+0x70>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f023 0207 	bic.w	r2, r3, #7
 80052f2:	490f      	ldr	r1, [pc, #60]	; (8005330 <HAL_PWREx_ConfigSupply+0x70>)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052fa:	f7fb fe99 	bl	8001030 <HAL_GetTick>
 80052fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005300:	e009      	b.n	8005316 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005302:	f7fb fe95 	bl	8001030 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005310:	d901      	bls.n	8005316 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e007      	b.n	8005326 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005316:	4b06      	ldr	r3, [pc, #24]	; (8005330 <HAL_PWREx_ConfigSupply+0x70>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800531e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005322:	d1ee      	bne.n	8005302 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	58024800 	.word	0x58024800

08005334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08c      	sub	sp, #48	; 0x30
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d102      	bne.n	8005348 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f000 bc48 	b.w	8005bd8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 8088 	beq.w	8005466 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005356:	4b99      	ldr	r3, [pc, #612]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005360:	4b96      	ldr	r3, [pc, #600]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005368:	2b10      	cmp	r3, #16
 800536a:	d007      	beq.n	800537c <HAL_RCC_OscConfig+0x48>
 800536c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536e:	2b18      	cmp	r3, #24
 8005370:	d111      	bne.n	8005396 <HAL_RCC_OscConfig+0x62>
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d10c      	bne.n	8005396 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800537c:	4b8f      	ldr	r3, [pc, #572]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d06d      	beq.n	8005464 <HAL_RCC_OscConfig+0x130>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d169      	bne.n	8005464 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	f000 bc21 	b.w	8005bd8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539e:	d106      	bne.n	80053ae <HAL_RCC_OscConfig+0x7a>
 80053a0:	4b86      	ldr	r3, [pc, #536]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a85      	ldr	r2, [pc, #532]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80053a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	e02e      	b.n	800540c <HAL_RCC_OscConfig+0xd8>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10c      	bne.n	80053d0 <HAL_RCC_OscConfig+0x9c>
 80053b6:	4b81      	ldr	r3, [pc, #516]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a80      	ldr	r2, [pc, #512]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80053bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	4b7e      	ldr	r3, [pc, #504]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a7d      	ldr	r2, [pc, #500]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80053c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	e01d      	b.n	800540c <HAL_RCC_OscConfig+0xd8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053d8:	d10c      	bne.n	80053f4 <HAL_RCC_OscConfig+0xc0>
 80053da:	4b78      	ldr	r3, [pc, #480]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a77      	ldr	r2, [pc, #476]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80053e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	4b75      	ldr	r3, [pc, #468]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a74      	ldr	r2, [pc, #464]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80053ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	e00b      	b.n	800540c <HAL_RCC_OscConfig+0xd8>
 80053f4:	4b71      	ldr	r3, [pc, #452]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a70      	ldr	r2, [pc, #448]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80053fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	4b6e      	ldr	r3, [pc, #440]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a6d      	ldr	r2, [pc, #436]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 8005406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800540a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d013      	beq.n	800543c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005414:	f7fb fe0c 	bl	8001030 <HAL_GetTick>
 8005418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800541c:	f7fb fe08 	bl	8001030 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b64      	cmp	r3, #100	; 0x64
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e3d4      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800542e:	4b63      	ldr	r3, [pc, #396]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0f0      	beq.n	800541c <HAL_RCC_OscConfig+0xe8>
 800543a:	e014      	b.n	8005466 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543c:	f7fb fdf8 	bl	8001030 <HAL_GetTick>
 8005440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005444:	f7fb fdf4 	bl	8001030 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b64      	cmp	r3, #100	; 0x64
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e3c0      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005456:	4b59      	ldr	r3, [pc, #356]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f0      	bne.n	8005444 <HAL_RCC_OscConfig+0x110>
 8005462:	e000      	b.n	8005466 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 80ca 	beq.w	8005608 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005474:	4b51      	ldr	r3, [pc, #324]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800547c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800547e:	4b4f      	ldr	r3, [pc, #316]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <HAL_RCC_OscConfig+0x166>
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	2b18      	cmp	r3, #24
 800548e:	d156      	bne.n	800553e <HAL_RCC_OscConfig+0x20a>
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d151      	bne.n	800553e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800549a:	4b48      	ldr	r3, [pc, #288]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d005      	beq.n	80054b2 <HAL_RCC_OscConfig+0x17e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e392      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054b2:	4b42      	ldr	r3, [pc, #264]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f023 0219 	bic.w	r2, r3, #25
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	493f      	ldr	r1, [pc, #252]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c4:	f7fb fdb4 	bl	8001030 <HAL_GetTick>
 80054c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054cc:	f7fb fdb0 	bl	8001030 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e37c      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054de:	4b37      	ldr	r3, [pc, #220]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ea:	f7fb fdad 	bl	8001048 <HAL_GetREVID>
 80054ee:	4603      	mov	r3, r0
 80054f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d817      	bhi.n	8005528 <HAL_RCC_OscConfig+0x1f4>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d108      	bne.n	8005512 <HAL_RCC_OscConfig+0x1de>
 8005500:	4b2e      	ldr	r3, [pc, #184]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005508:	4a2c      	ldr	r2, [pc, #176]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 800550a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800550e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005510:	e07a      	b.n	8005608 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005512:	4b2a      	ldr	r3, [pc, #168]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	031b      	lsls	r3, r3, #12
 8005520:	4926      	ldr	r1, [pc, #152]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 8005522:	4313      	orrs	r3, r2
 8005524:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005526:	e06f      	b.n	8005608 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005528:	4b24      	ldr	r3, [pc, #144]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	061b      	lsls	r3, r3, #24
 8005536:	4921      	ldr	r1, [pc, #132]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 8005538:	4313      	orrs	r3, r2
 800553a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800553c:	e064      	b.n	8005608 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d047      	beq.n	80055d6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005546:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f023 0219 	bic.w	r2, r3, #25
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	491a      	ldr	r1, [pc, #104]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 8005554:	4313      	orrs	r3, r2
 8005556:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005558:	f7fb fd6a 	bl	8001030 <HAL_GetTick>
 800555c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005560:	f7fb fd66 	bl	8001030 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e332      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005572:	4b12      	ldr	r3, [pc, #72]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f0      	beq.n	8005560 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800557e:	f7fb fd63 	bl	8001048 <HAL_GetREVID>
 8005582:	4603      	mov	r3, r0
 8005584:	f241 0203 	movw	r2, #4099	; 0x1003
 8005588:	4293      	cmp	r3, r2
 800558a:	d819      	bhi.n	80055c0 <HAL_RCC_OscConfig+0x28c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	d108      	bne.n	80055a6 <HAL_RCC_OscConfig+0x272>
 8005594:	4b09      	ldr	r3, [pc, #36]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800559c:	4a07      	ldr	r2, [pc, #28]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 800559e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055a2:	6053      	str	r3, [r2, #4]
 80055a4:	e030      	b.n	8005608 <HAL_RCC_OscConfig+0x2d4>
 80055a6:	4b05      	ldr	r3, [pc, #20]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	031b      	lsls	r3, r3, #12
 80055b4:	4901      	ldr	r1, [pc, #4]	; (80055bc <HAL_RCC_OscConfig+0x288>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	604b      	str	r3, [r1, #4]
 80055ba:	e025      	b.n	8005608 <HAL_RCC_OscConfig+0x2d4>
 80055bc:	58024400 	.word	0x58024400
 80055c0:	4b9a      	ldr	r3, [pc, #616]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	061b      	lsls	r3, r3, #24
 80055ce:	4997      	ldr	r1, [pc, #604]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	604b      	str	r3, [r1, #4]
 80055d4:	e018      	b.n	8005608 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055d6:	4b95      	ldr	r3, [pc, #596]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a94      	ldr	r2, [pc, #592]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 80055dc:	f023 0301 	bic.w	r3, r3, #1
 80055e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e2:	f7fb fd25 	bl	8001030 <HAL_GetTick>
 80055e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ea:	f7fb fd21 	bl	8001030 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e2ed      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055fc:	4b8b      	ldr	r3, [pc, #556]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1f0      	bne.n	80055ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 80a9 	beq.w	8005768 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005616:	4b85      	ldr	r3, [pc, #532]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800561e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005620:	4b82      	ldr	r3, [pc, #520]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	2b08      	cmp	r3, #8
 800562a:	d007      	beq.n	800563c <HAL_RCC_OscConfig+0x308>
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	2b18      	cmp	r3, #24
 8005630:	d13a      	bne.n	80056a8 <HAL_RCC_OscConfig+0x374>
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	2b01      	cmp	r3, #1
 800563a:	d135      	bne.n	80056a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800563c:	4b7b      	ldr	r3, [pc, #492]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <HAL_RCC_OscConfig+0x320>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	2b80      	cmp	r3, #128	; 0x80
 800564e:	d001      	beq.n	8005654 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e2c1      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005654:	f7fb fcf8 	bl	8001048 <HAL_GetREVID>
 8005658:	4603      	mov	r3, r0
 800565a:	f241 0203 	movw	r2, #4099	; 0x1003
 800565e:	4293      	cmp	r3, r2
 8005660:	d817      	bhi.n	8005692 <HAL_RCC_OscConfig+0x35e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	2b20      	cmp	r3, #32
 8005668:	d108      	bne.n	800567c <HAL_RCC_OscConfig+0x348>
 800566a:	4b70      	ldr	r3, [pc, #448]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005672:	4a6e      	ldr	r2, [pc, #440]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 8005674:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005678:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800567a:	e075      	b.n	8005768 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800567c:	4b6b      	ldr	r3, [pc, #428]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	069b      	lsls	r3, r3, #26
 800568a:	4968      	ldr	r1, [pc, #416]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 800568c:	4313      	orrs	r3, r2
 800568e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005690:	e06a      	b.n	8005768 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005692:	4b66      	ldr	r3, [pc, #408]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	061b      	lsls	r3, r3, #24
 80056a0:	4962      	ldr	r1, [pc, #392]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056a6:	e05f      	b.n	8005768 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d042      	beq.n	8005736 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80056b0:	4b5e      	ldr	r3, [pc, #376]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a5d      	ldr	r2, [pc, #372]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 80056b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056bc:	f7fb fcb8 	bl	8001030 <HAL_GetTick>
 80056c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80056c4:	f7fb fcb4 	bl	8001030 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e280      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056d6:	4b55      	ldr	r3, [pc, #340]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f0      	beq.n	80056c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056e2:	f7fb fcb1 	bl	8001048 <HAL_GetREVID>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d817      	bhi.n	8005720 <HAL_RCC_OscConfig+0x3ec>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d108      	bne.n	800570a <HAL_RCC_OscConfig+0x3d6>
 80056f8:	4b4c      	ldr	r3, [pc, #304]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005700:	4a4a      	ldr	r2, [pc, #296]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 8005702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005706:	6053      	str	r3, [r2, #4]
 8005708:	e02e      	b.n	8005768 <HAL_RCC_OscConfig+0x434>
 800570a:	4b48      	ldr	r3, [pc, #288]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	069b      	lsls	r3, r3, #26
 8005718:	4944      	ldr	r1, [pc, #272]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 800571a:	4313      	orrs	r3, r2
 800571c:	604b      	str	r3, [r1, #4]
 800571e:	e023      	b.n	8005768 <HAL_RCC_OscConfig+0x434>
 8005720:	4b42      	ldr	r3, [pc, #264]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	061b      	lsls	r3, r3, #24
 800572e:	493f      	ldr	r1, [pc, #252]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 8005730:	4313      	orrs	r3, r2
 8005732:	60cb      	str	r3, [r1, #12]
 8005734:	e018      	b.n	8005768 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005736:	4b3d      	ldr	r3, [pc, #244]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a3c      	ldr	r2, [pc, #240]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 800573c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005742:	f7fb fc75 	bl	8001030 <HAL_GetTick>
 8005746:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005748:	e008      	b.n	800575c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800574a:	f7fb fc71 	bl	8001030 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e23d      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800575c:	4b33      	ldr	r3, [pc, #204]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1f0      	bne.n	800574a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d036      	beq.n	80057e2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d019      	beq.n	80057b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800577c:	4b2b      	ldr	r3, [pc, #172]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 800577e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005780:	4a2a      	ldr	r2, [pc, #168]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 8005782:	f043 0301 	orr.w	r3, r3, #1
 8005786:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005788:	f7fb fc52 	bl	8001030 <HAL_GetTick>
 800578c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005790:	f7fb fc4e 	bl	8001030 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e21a      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057a2:	4b22      	ldr	r3, [pc, #136]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 80057a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0f0      	beq.n	8005790 <HAL_RCC_OscConfig+0x45c>
 80057ae:	e018      	b.n	80057e2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057b0:	4b1e      	ldr	r3, [pc, #120]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 80057b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057b4:	4a1d      	ldr	r2, [pc, #116]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 80057b6:	f023 0301 	bic.w	r3, r3, #1
 80057ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057bc:	f7fb fc38 	bl	8001030 <HAL_GetTick>
 80057c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057c4:	f7fb fc34 	bl	8001030 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e200      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057d6:	4b15      	ldr	r3, [pc, #84]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 80057d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d039      	beq.n	8005862 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d01c      	beq.n	8005830 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057f6:	4b0d      	ldr	r3, [pc, #52]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a0c      	ldr	r2, [pc, #48]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 80057fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005800:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005802:	f7fb fc15 	bl	8001030 <HAL_GetTick>
 8005806:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800580a:	f7fb fc11 	bl	8001030 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e1dd      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800581c:	4b03      	ldr	r3, [pc, #12]	; (800582c <HAL_RCC_OscConfig+0x4f8>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0f0      	beq.n	800580a <HAL_RCC_OscConfig+0x4d6>
 8005828:	e01b      	b.n	8005862 <HAL_RCC_OscConfig+0x52e>
 800582a:	bf00      	nop
 800582c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005830:	4b9b      	ldr	r3, [pc, #620]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a9a      	ldr	r2, [pc, #616]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800583a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800583c:	f7fb fbf8 	bl	8001030 <HAL_GetTick>
 8005840:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005844:	f7fb fbf4 	bl	8001030 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e1c0      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005856:	4b92      	ldr	r3, [pc, #584]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f0      	bne.n	8005844 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0304 	and.w	r3, r3, #4
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 8081 	beq.w	8005972 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005870:	4b8c      	ldr	r3, [pc, #560]	; (8005aa4 <HAL_RCC_OscConfig+0x770>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a8b      	ldr	r2, [pc, #556]	; (8005aa4 <HAL_RCC_OscConfig+0x770>)
 8005876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800587a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800587c:	f7fb fbd8 	bl	8001030 <HAL_GetTick>
 8005880:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005884:	f7fb fbd4 	bl	8001030 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b64      	cmp	r3, #100	; 0x64
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e1a0      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005896:	4b83      	ldr	r3, [pc, #524]	; (8005aa4 <HAL_RCC_OscConfig+0x770>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d106      	bne.n	80058b8 <HAL_RCC_OscConfig+0x584>
 80058aa:	4b7d      	ldr	r3, [pc, #500]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 80058ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ae:	4a7c      	ldr	r2, [pc, #496]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 80058b0:	f043 0301 	orr.w	r3, r3, #1
 80058b4:	6713      	str	r3, [r2, #112]	; 0x70
 80058b6:	e02d      	b.n	8005914 <HAL_RCC_OscConfig+0x5e0>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10c      	bne.n	80058da <HAL_RCC_OscConfig+0x5a6>
 80058c0:	4b77      	ldr	r3, [pc, #476]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 80058c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c4:	4a76      	ldr	r2, [pc, #472]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 80058c6:	f023 0301 	bic.w	r3, r3, #1
 80058ca:	6713      	str	r3, [r2, #112]	; 0x70
 80058cc:	4b74      	ldr	r3, [pc, #464]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 80058ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d0:	4a73      	ldr	r2, [pc, #460]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 80058d2:	f023 0304 	bic.w	r3, r3, #4
 80058d6:	6713      	str	r3, [r2, #112]	; 0x70
 80058d8:	e01c      	b.n	8005914 <HAL_RCC_OscConfig+0x5e0>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b05      	cmp	r3, #5
 80058e0:	d10c      	bne.n	80058fc <HAL_RCC_OscConfig+0x5c8>
 80058e2:	4b6f      	ldr	r3, [pc, #444]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 80058e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e6:	4a6e      	ldr	r2, [pc, #440]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 80058e8:	f043 0304 	orr.w	r3, r3, #4
 80058ec:	6713      	str	r3, [r2, #112]	; 0x70
 80058ee:	4b6c      	ldr	r3, [pc, #432]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 80058f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f2:	4a6b      	ldr	r2, [pc, #428]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	6713      	str	r3, [r2, #112]	; 0x70
 80058fa:	e00b      	b.n	8005914 <HAL_RCC_OscConfig+0x5e0>
 80058fc:	4b68      	ldr	r3, [pc, #416]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005900:	4a67      	ldr	r2, [pc, #412]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005902:	f023 0301 	bic.w	r3, r3, #1
 8005906:	6713      	str	r3, [r2, #112]	; 0x70
 8005908:	4b65      	ldr	r3, [pc, #404]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	4a64      	ldr	r2, [pc, #400]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 800590e:	f023 0304 	bic.w	r3, r3, #4
 8005912:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d015      	beq.n	8005948 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591c:	f7fb fb88 	bl	8001030 <HAL_GetTick>
 8005920:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005922:	e00a      	b.n	800593a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005924:	f7fb fb84 	bl	8001030 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005932:	4293      	cmp	r3, r2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e14e      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800593a:	4b59      	ldr	r3, [pc, #356]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 800593c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0ee      	beq.n	8005924 <HAL_RCC_OscConfig+0x5f0>
 8005946:	e014      	b.n	8005972 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005948:	f7fb fb72 	bl	8001030 <HAL_GetTick>
 800594c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800594e:	e00a      	b.n	8005966 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005950:	f7fb fb6e 	bl	8001030 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	f241 3288 	movw	r2, #5000	; 0x1388
 800595e:	4293      	cmp	r3, r2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e138      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005966:	4b4e      	ldr	r3, [pc, #312]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1ee      	bne.n	8005950 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 812d 	beq.w	8005bd6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800597c:	4b48      	ldr	r3, [pc, #288]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005984:	2b18      	cmp	r3, #24
 8005986:	f000 80bd 	beq.w	8005b04 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	2b02      	cmp	r3, #2
 8005990:	f040 809e 	bne.w	8005ad0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005994:	4b42      	ldr	r3, [pc, #264]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a41      	ldr	r2, [pc, #260]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 800599a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800599e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a0:	f7fb fb46 	bl	8001030 <HAL_GetTick>
 80059a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a8:	f7fb fb42 	bl	8001030 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e10e      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059ba:	4b39      	ldr	r3, [pc, #228]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f0      	bne.n	80059a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059c6:	4b36      	ldr	r3, [pc, #216]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 80059c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ca:	4b37      	ldr	r3, [pc, #220]	; (8005aa8 <HAL_RCC_OscConfig+0x774>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059d6:	0112      	lsls	r2, r2, #4
 80059d8:	430a      	orrs	r2, r1
 80059da:	4931      	ldr	r1, [pc, #196]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	628b      	str	r3, [r1, #40]	; 0x28
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e4:	3b01      	subs	r3, #1
 80059e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ee:	3b01      	subs	r3, #1
 80059f0:	025b      	lsls	r3, r3, #9
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	431a      	orrs	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	3b01      	subs	r3, #1
 80059fc:	041b      	lsls	r3, r3, #16
 80059fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	061b      	lsls	r3, r3, #24
 8005a0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a10:	4923      	ldr	r1, [pc, #140]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005a16:	4b22      	ldr	r3, [pc, #136]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	4a21      	ldr	r2, [pc, #132]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a1c:	f023 0301 	bic.w	r3, r3, #1
 8005a20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a22:	4b1f      	ldr	r3, [pc, #124]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a26:	4b21      	ldr	r3, [pc, #132]	; (8005aac <HAL_RCC_OscConfig+0x778>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a2e:	00d2      	lsls	r2, r2, #3
 8005a30:	491b      	ldr	r1, [pc, #108]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a36:	4b1a      	ldr	r3, [pc, #104]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	f023 020c 	bic.w	r2, r3, #12
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	4917      	ldr	r1, [pc, #92]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a48:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	f023 0202 	bic.w	r2, r3, #2
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a54:	4912      	ldr	r1, [pc, #72]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a5a:	4b11      	ldr	r3, [pc, #68]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	4a10      	ldr	r2, [pc, #64]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a66:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	4a0d      	ldr	r2, [pc, #52]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a72:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	4a0a      	ldr	r2, [pc, #40]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005a7e:	4b08      	ldr	r3, [pc, #32]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a82:	4a07      	ldr	r2, [pc, #28]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a84:	f043 0301 	orr.w	r3, r3, #1
 8005a88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a8a:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a04      	ldr	r2, [pc, #16]	; (8005aa0 <HAL_RCC_OscConfig+0x76c>)
 8005a90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a96:	f7fb facb 	bl	8001030 <HAL_GetTick>
 8005a9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a9c:	e011      	b.n	8005ac2 <HAL_RCC_OscConfig+0x78e>
 8005a9e:	bf00      	nop
 8005aa0:	58024400 	.word	0x58024400
 8005aa4:	58024800 	.word	0x58024800
 8005aa8:	fffffc0c 	.word	0xfffffc0c
 8005aac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab0:	f7fb fabe 	bl	8001030 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e08a      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ac2:	4b47      	ldr	r3, [pc, #284]	; (8005be0 <HAL_RCC_OscConfig+0x8ac>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0f0      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x77c>
 8005ace:	e082      	b.n	8005bd6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad0:	4b43      	ldr	r3, [pc, #268]	; (8005be0 <HAL_RCC_OscConfig+0x8ac>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a42      	ldr	r2, [pc, #264]	; (8005be0 <HAL_RCC_OscConfig+0x8ac>)
 8005ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005adc:	f7fb faa8 	bl	8001030 <HAL_GetTick>
 8005ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae4:	f7fb faa4 	bl	8001030 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e070      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005af6:	4b3a      	ldr	r3, [pc, #232]	; (8005be0 <HAL_RCC_OscConfig+0x8ac>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f0      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x7b0>
 8005b02:	e068      	b.n	8005bd6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005b04:	4b36      	ldr	r3, [pc, #216]	; (8005be0 <HAL_RCC_OscConfig+0x8ac>)
 8005b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b0a:	4b35      	ldr	r3, [pc, #212]	; (8005be0 <HAL_RCC_OscConfig+0x8ac>)
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d031      	beq.n	8005b7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f003 0203 	and.w	r2, r3, #3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d12a      	bne.n	8005b7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	091b      	lsrs	r3, r3, #4
 8005b2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d122      	bne.n	8005b7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b40:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d11a      	bne.n	8005b7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	0a5b      	lsrs	r3, r3, #9
 8005b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d111      	bne.n	8005b7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	0c1b      	lsrs	r3, r3, #16
 8005b5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d108      	bne.n	8005b7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	0e1b      	lsrs	r3, r3, #24
 8005b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b76:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d001      	beq.n	8005b80 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e02b      	b.n	8005bd8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005b80:	4b17      	ldr	r3, [pc, #92]	; (8005be0 <HAL_RCC_OscConfig+0x8ac>)
 8005b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b84:	08db      	lsrs	r3, r3, #3
 8005b86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b8a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d01f      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005b96:	4b12      	ldr	r3, [pc, #72]	; (8005be0 <HAL_RCC_OscConfig+0x8ac>)
 8005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9a:	4a11      	ldr	r2, [pc, #68]	; (8005be0 <HAL_RCC_OscConfig+0x8ac>)
 8005b9c:	f023 0301 	bic.w	r3, r3, #1
 8005ba0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ba2:	f7fb fa45 	bl	8001030 <HAL_GetTick>
 8005ba6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005ba8:	bf00      	nop
 8005baa:	f7fb fa41 	bl	8001030 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d0f9      	beq.n	8005baa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005bb6:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <HAL_RCC_OscConfig+0x8ac>)
 8005bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bba:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <HAL_RCC_OscConfig+0x8b0>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005bc2:	00d2      	lsls	r2, r2, #3
 8005bc4:	4906      	ldr	r1, [pc, #24]	; (8005be0 <HAL_RCC_OscConfig+0x8ac>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005bca:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <HAL_RCC_OscConfig+0x8ac>)
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	4a04      	ldr	r2, [pc, #16]	; (8005be0 <HAL_RCC_OscConfig+0x8ac>)
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3730      	adds	r7, #48	; 0x30
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	58024400 	.word	0x58024400
 8005be4:	ffff0007 	.word	0xffff0007

08005be8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e19c      	b.n	8005f36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bfc:	4b8a      	ldr	r3, [pc, #552]	; (8005e28 <HAL_RCC_ClockConfig+0x240>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d910      	bls.n	8005c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0a:	4b87      	ldr	r3, [pc, #540]	; (8005e28 <HAL_RCC_ClockConfig+0x240>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f023 020f 	bic.w	r2, r3, #15
 8005c12:	4985      	ldr	r1, [pc, #532]	; (8005e28 <HAL_RCC_ClockConfig+0x240>)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1a:	4b83      	ldr	r3, [pc, #524]	; (8005e28 <HAL_RCC_ClockConfig+0x240>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d001      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e184      	b.n	8005f36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d010      	beq.n	8005c5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	4b7b      	ldr	r3, [pc, #492]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d908      	bls.n	8005c5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c48:	4b78      	ldr	r3, [pc, #480]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	4975      	ldr	r1, [pc, #468]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d010      	beq.n	8005c88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	695a      	ldr	r2, [r3, #20]
 8005c6a:	4b70      	ldr	r3, [pc, #448]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d908      	bls.n	8005c88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c76:	4b6d      	ldr	r3, [pc, #436]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	496a      	ldr	r1, [pc, #424]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d010      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	699a      	ldr	r2, [r3, #24]
 8005c98:	4b64      	ldr	r3, [pc, #400]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d908      	bls.n	8005cb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ca4:	4b61      	ldr	r3, [pc, #388]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	495e      	ldr	r1, [pc, #376]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d010      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69da      	ldr	r2, [r3, #28]
 8005cc6:	4b59      	ldr	r3, [pc, #356]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d908      	bls.n	8005ce4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005cd2:	4b56      	ldr	r3, [pc, #344]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	4953      	ldr	r1, [pc, #332]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d010      	beq.n	8005d12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	4b4d      	ldr	r3, [pc, #308]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	f003 030f 	and.w	r3, r3, #15
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d908      	bls.n	8005d12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d00:	4b4a      	ldr	r3, [pc, #296]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f023 020f 	bic.w	r2, r3, #15
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4947      	ldr	r1, [pc, #284]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d055      	beq.n	8005dca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005d1e:	4b43      	ldr	r3, [pc, #268]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	4940      	ldr	r1, [pc, #256]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d107      	bne.n	8005d48 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d38:	4b3c      	ldr	r3, [pc, #240]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d121      	bne.n	8005d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e0f6      	b.n	8005f36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d107      	bne.n	8005d60 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d50:	4b36      	ldr	r3, [pc, #216]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d115      	bne.n	8005d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e0ea      	b.n	8005f36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d107      	bne.n	8005d78 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d68:	4b30      	ldr	r3, [pc, #192]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d109      	bne.n	8005d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e0de      	b.n	8005f36 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d78:	4b2c      	ldr	r3, [pc, #176]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e0d6      	b.n	8005f36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d88:	4b28      	ldr	r3, [pc, #160]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f023 0207 	bic.w	r2, r3, #7
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	4925      	ldr	r1, [pc, #148]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d9a:	f7fb f949 	bl	8001030 <HAL_GetTick>
 8005d9e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005da0:	e00a      	b.n	8005db8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005da2:	f7fb f945 	bl	8001030 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e0be      	b.n	8005f36 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db8:	4b1c      	ldr	r3, [pc, #112]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d1eb      	bne.n	8005da2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d010      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	4b14      	ldr	r3, [pc, #80]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d208      	bcs.n	8005df8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005de6:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	f023 020f 	bic.w	r2, r3, #15
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	490e      	ldr	r1, [pc, #56]	; (8005e2c <HAL_RCC_ClockConfig+0x244>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005df8:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <HAL_RCC_ClockConfig+0x240>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d214      	bcs.n	8005e30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e06:	4b08      	ldr	r3, [pc, #32]	; (8005e28 <HAL_RCC_ClockConfig+0x240>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f023 020f 	bic.w	r2, r3, #15
 8005e0e:	4906      	ldr	r1, [pc, #24]	; (8005e28 <HAL_RCC_ClockConfig+0x240>)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e16:	4b04      	ldr	r3, [pc, #16]	; (8005e28 <HAL_RCC_ClockConfig+0x240>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d005      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e086      	b.n	8005f36 <HAL_RCC_ClockConfig+0x34e>
 8005e28:	52002000 	.word	0x52002000
 8005e2c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d010      	beq.n	8005e5e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	4b3f      	ldr	r3, [pc, #252]	; (8005f40 <HAL_RCC_ClockConfig+0x358>)
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d208      	bcs.n	8005e5e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e4c:	4b3c      	ldr	r3, [pc, #240]	; (8005f40 <HAL_RCC_ClockConfig+0x358>)
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	4939      	ldr	r1, [pc, #228]	; (8005f40 <HAL_RCC_ClockConfig+0x358>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d010      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695a      	ldr	r2, [r3, #20]
 8005e6e:	4b34      	ldr	r3, [pc, #208]	; (8005f40 <HAL_RCC_ClockConfig+0x358>)
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d208      	bcs.n	8005e8c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e7a:	4b31      	ldr	r3, [pc, #196]	; (8005f40 <HAL_RCC_ClockConfig+0x358>)
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	492e      	ldr	r1, [pc, #184]	; (8005f40 <HAL_RCC_ClockConfig+0x358>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0310 	and.w	r3, r3, #16
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d010      	beq.n	8005eba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	699a      	ldr	r2, [r3, #24]
 8005e9c:	4b28      	ldr	r3, [pc, #160]	; (8005f40 <HAL_RCC_ClockConfig+0x358>)
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d208      	bcs.n	8005eba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ea8:	4b25      	ldr	r3, [pc, #148]	; (8005f40 <HAL_RCC_ClockConfig+0x358>)
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	4922      	ldr	r1, [pc, #136]	; (8005f40 <HAL_RCC_ClockConfig+0x358>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d010      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69da      	ldr	r2, [r3, #28]
 8005eca:	4b1d      	ldr	r3, [pc, #116]	; (8005f40 <HAL_RCC_ClockConfig+0x358>)
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d208      	bcs.n	8005ee8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005ed6:	4b1a      	ldr	r3, [pc, #104]	; (8005f40 <HAL_RCC_ClockConfig+0x358>)
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	4917      	ldr	r1, [pc, #92]	; (8005f40 <HAL_RCC_ClockConfig+0x358>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ee8:	f000 f834 	bl	8005f54 <HAL_RCC_GetSysClockFreq>
 8005eec:	4602      	mov	r2, r0
 8005eee:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <HAL_RCC_ClockConfig+0x358>)
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	0a1b      	lsrs	r3, r3, #8
 8005ef4:	f003 030f 	and.w	r3, r3, #15
 8005ef8:	4912      	ldr	r1, [pc, #72]	; (8005f44 <HAL_RCC_ClockConfig+0x35c>)
 8005efa:	5ccb      	ldrb	r3, [r1, r3]
 8005efc:	f003 031f 	and.w	r3, r3, #31
 8005f00:	fa22 f303 	lsr.w	r3, r2, r3
 8005f04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f06:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <HAL_RCC_ClockConfig+0x358>)
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	4a0d      	ldr	r2, [pc, #52]	; (8005f44 <HAL_RCC_ClockConfig+0x35c>)
 8005f10:	5cd3      	ldrb	r3, [r2, r3]
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1c:	4a0a      	ldr	r2, [pc, #40]	; (8005f48 <HAL_RCC_ClockConfig+0x360>)
 8005f1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f20:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <HAL_RCC_ClockConfig+0x364>)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005f26:	4b0a      	ldr	r3, [pc, #40]	; (8005f50 <HAL_RCC_ClockConfig+0x368>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7fa fd9e 	bl	8000a6c <HAL_InitTick>
 8005f30:	4603      	mov	r3, r0
 8005f32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	58024400 	.word	0x58024400
 8005f44:	0800cffc 	.word	0x0800cffc
 8005f48:	24000004 	.word	0x24000004
 8005f4c:	24000000 	.word	0x24000000
 8005f50:	24000008 	.word	0x24000008

08005f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b089      	sub	sp, #36	; 0x24
 8005f58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f5a:	4bb3      	ldr	r3, [pc, #716]	; (8006228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f62:	2b18      	cmp	r3, #24
 8005f64:	f200 8155 	bhi.w	8006212 <HAL_RCC_GetSysClockFreq+0x2be>
 8005f68:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6e:	bf00      	nop
 8005f70:	08005fd5 	.word	0x08005fd5
 8005f74:	08006213 	.word	0x08006213
 8005f78:	08006213 	.word	0x08006213
 8005f7c:	08006213 	.word	0x08006213
 8005f80:	08006213 	.word	0x08006213
 8005f84:	08006213 	.word	0x08006213
 8005f88:	08006213 	.word	0x08006213
 8005f8c:	08006213 	.word	0x08006213
 8005f90:	08005ffb 	.word	0x08005ffb
 8005f94:	08006213 	.word	0x08006213
 8005f98:	08006213 	.word	0x08006213
 8005f9c:	08006213 	.word	0x08006213
 8005fa0:	08006213 	.word	0x08006213
 8005fa4:	08006213 	.word	0x08006213
 8005fa8:	08006213 	.word	0x08006213
 8005fac:	08006213 	.word	0x08006213
 8005fb0:	08006001 	.word	0x08006001
 8005fb4:	08006213 	.word	0x08006213
 8005fb8:	08006213 	.word	0x08006213
 8005fbc:	08006213 	.word	0x08006213
 8005fc0:	08006213 	.word	0x08006213
 8005fc4:	08006213 	.word	0x08006213
 8005fc8:	08006213 	.word	0x08006213
 8005fcc:	08006213 	.word	0x08006213
 8005fd0:	08006007 	.word	0x08006007
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fd4:	4b94      	ldr	r3, [pc, #592]	; (8006228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d009      	beq.n	8005ff4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fe0:	4b91      	ldr	r3, [pc, #580]	; (8006228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	08db      	lsrs	r3, r3, #3
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	4a90      	ldr	r2, [pc, #576]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005fec:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005ff2:	e111      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ff4:	4b8d      	ldr	r3, [pc, #564]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ff6:	61bb      	str	r3, [r7, #24]
      break;
 8005ff8:	e10e      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005ffa:	4b8d      	ldr	r3, [pc, #564]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ffc:	61bb      	str	r3, [r7, #24]
      break;
 8005ffe:	e10b      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006000:	4b8c      	ldr	r3, [pc, #560]	; (8006234 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006002:	61bb      	str	r3, [r7, #24]
      break;
 8006004:	e108      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006006:	4b88      	ldr	r3, [pc, #544]	; (8006228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006010:	4b85      	ldr	r3, [pc, #532]	; (8006228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	091b      	lsrs	r3, r3, #4
 8006016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800601a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800601c:	4b82      	ldr	r3, [pc, #520]	; (8006228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006026:	4b80      	ldr	r3, [pc, #512]	; (8006228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602a:	08db      	lsrs	r3, r3, #3
 800602c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	fb02 f303 	mul.w	r3, r2, r3
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80e1 	beq.w	800620c <HAL_RCC_GetSysClockFreq+0x2b8>
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2b02      	cmp	r3, #2
 800604e:	f000 8083 	beq.w	8006158 <HAL_RCC_GetSysClockFreq+0x204>
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b02      	cmp	r3, #2
 8006056:	f200 80a1 	bhi.w	800619c <HAL_RCC_GetSysClockFreq+0x248>
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <HAL_RCC_GetSysClockFreq+0x114>
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d056      	beq.n	8006114 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006066:	e099      	b.n	800619c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006068:	4b6f      	ldr	r3, [pc, #444]	; (8006228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b00      	cmp	r3, #0
 8006072:	d02d      	beq.n	80060d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006074:	4b6c      	ldr	r3, [pc, #432]	; (8006228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	08db      	lsrs	r3, r3, #3
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	4a6b      	ldr	r2, [pc, #428]	; (800622c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006080:	fa22 f303 	lsr.w	r3, r2, r3
 8006084:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609e:	4b62      	ldr	r3, [pc, #392]	; (8006228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80060b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80060ce:	e087      	b.n	80061e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800623c <HAL_RCC_GetSysClockFreq+0x2e8>
 80060de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e2:	4b51      	ldr	r3, [pc, #324]	; (8006228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80060f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800610a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006112:	e065      	b.n	80061e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	ee07 3a90 	vmov	s15, r3
 800611a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800611e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006240 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006126:	4b40      	ldr	r3, [pc, #256]	; (8006228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006136:	ed97 6a02 	vldr	s12, [r7, #8]
 800613a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006238 <HAL_RCC_GetSysClockFreq+0x2e4>
 800613e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800614a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800614e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006156:	e043      	b.n	80061e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	ee07 3a90 	vmov	s15, r3
 800615e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006162:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006244 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800616a:	4b2f      	ldr	r3, [pc, #188]	; (8006228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800616c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006172:	ee07 3a90 	vmov	s15, r3
 8006176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617a:	ed97 6a02 	vldr	s12, [r7, #8]
 800617e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006238 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800618a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800618e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006196:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800619a:	e021      	b.n	80061e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006240 <HAL_RCC_GetSysClockFreq+0x2ec>
 80061aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ae:	4b1e      	ldr	r3, [pc, #120]	; (8006228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061be:	ed97 6a02 	vldr	s12, [r7, #8]
 80061c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80061de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80061e0:	4b11      	ldr	r3, [pc, #68]	; (8006228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e4:	0a5b      	lsrs	r3, r3, #9
 80061e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ea:	3301      	adds	r3, #1
 80061ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	ee07 3a90 	vmov	s15, r3
 80061f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80061fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006204:	ee17 3a90 	vmov	r3, s15
 8006208:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800620a:	e005      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	61bb      	str	r3, [r7, #24]
      break;
 8006210:	e002      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006212:	4b07      	ldr	r3, [pc, #28]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006214:	61bb      	str	r3, [r7, #24]
      break;
 8006216:	bf00      	nop
  }

  return sysclockfreq;
 8006218:	69bb      	ldr	r3, [r7, #24]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3724      	adds	r7, #36	; 0x24
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	58024400 	.word	0x58024400
 800622c:	03d09000 	.word	0x03d09000
 8006230:	003d0900 	.word	0x003d0900
 8006234:	007a1200 	.word	0x007a1200
 8006238:	46000000 	.word	0x46000000
 800623c:	4c742400 	.word	0x4c742400
 8006240:	4a742400 	.word	0x4a742400
 8006244:	4af42400 	.word	0x4af42400

08006248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800624e:	f7ff fe81 	bl	8005f54 <HAL_RCC_GetSysClockFreq>
 8006252:	4602      	mov	r2, r0
 8006254:	4b10      	ldr	r3, [pc, #64]	; (8006298 <HAL_RCC_GetHCLKFreq+0x50>)
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	0a1b      	lsrs	r3, r3, #8
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	490f      	ldr	r1, [pc, #60]	; (800629c <HAL_RCC_GetHCLKFreq+0x54>)
 8006260:	5ccb      	ldrb	r3, [r1, r3]
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	fa22 f303 	lsr.w	r3, r2, r3
 800626a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800626c:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <HAL_RCC_GetHCLKFreq+0x50>)
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	4a09      	ldr	r2, [pc, #36]	; (800629c <HAL_RCC_GetHCLKFreq+0x54>)
 8006276:	5cd3      	ldrb	r3, [r2, r3]
 8006278:	f003 031f 	and.w	r3, r3, #31
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	fa22 f303 	lsr.w	r3, r2, r3
 8006282:	4a07      	ldr	r2, [pc, #28]	; (80062a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006284:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006286:	4a07      	ldr	r2, [pc, #28]	; (80062a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800628c:	4b04      	ldr	r3, [pc, #16]	; (80062a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800628e:	681b      	ldr	r3, [r3, #0]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	58024400 	.word	0x58024400
 800629c:	0800cffc 	.word	0x0800cffc
 80062a0:	24000004 	.word	0x24000004
 80062a4:	24000000 	.word	0x24000000

080062a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80062ac:	f7ff ffcc 	bl	8006248 <HAL_RCC_GetHCLKFreq>
 80062b0:	4602      	mov	r2, r0
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	091b      	lsrs	r3, r3, #4
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	4904      	ldr	r1, [pc, #16]	; (80062d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062be:	5ccb      	ldrb	r3, [r1, r3]
 80062c0:	f003 031f 	and.w	r3, r3, #31
 80062c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	58024400 	.word	0x58024400
 80062d0:	0800cffc 	.word	0x0800cffc

080062d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	223f      	movs	r2, #63	; 0x3f
 80062e2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062e4:	4b1a      	ldr	r3, [pc, #104]	; (8006350 <HAL_RCC_GetClockConfig+0x7c>)
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	f003 0207 	and.w	r2, r3, #7
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80062f0:	4b17      	ldr	r3, [pc, #92]	; (8006350 <HAL_RCC_GetClockConfig+0x7c>)
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80062fc:	4b14      	ldr	r3, [pc, #80]	; (8006350 <HAL_RCC_GetClockConfig+0x7c>)
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	f003 020f 	and.w	r2, r3, #15
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006308:	4b11      	ldr	r3, [pc, #68]	; (8006350 <HAL_RCC_GetClockConfig+0x7c>)
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006314:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <HAL_RCC_GetClockConfig+0x7c>)
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006320:	4b0b      	ldr	r3, [pc, #44]	; (8006350 <HAL_RCC_GetClockConfig+0x7c>)
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800632c:	4b08      	ldr	r3, [pc, #32]	; (8006350 <HAL_RCC_GetClockConfig+0x7c>)
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006338:	4b06      	ldr	r3, [pc, #24]	; (8006354 <HAL_RCC_GetClockConfig+0x80>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 020f 	and.w	r2, r3, #15
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	601a      	str	r2, [r3, #0]
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	58024400 	.word	0x58024400
 8006354:	52002000 	.word	0x52002000

08006358 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800635c:	b0ca      	sub	sp, #296	; 0x128
 800635e:	af00      	add	r7, sp, #0
 8006360:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006364:	2300      	movs	r3, #0
 8006366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800636a:	2300      	movs	r3, #0
 800636c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800637c:	2500      	movs	r5, #0
 800637e:	ea54 0305 	orrs.w	r3, r4, r5
 8006382:	d049      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800638a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800638e:	d02f      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006390:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006394:	d828      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006396:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800639a:	d01a      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800639c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063a0:	d822      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80063a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063aa:	d007      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063ac:	e01c      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ae:	4bb8      	ldr	r3, [pc, #736]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	4ab7      	ldr	r2, [pc, #732]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80063ba:	e01a      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c0:	3308      	adds	r3, #8
 80063c2:	2102      	movs	r1, #2
 80063c4:	4618      	mov	r0, r3
 80063c6:	f002 fb61 	bl	8008a8c <RCCEx_PLL2_Config>
 80063ca:	4603      	mov	r3, r0
 80063cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80063d0:	e00f      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d6:	3328      	adds	r3, #40	; 0x28
 80063d8:	2102      	movs	r1, #2
 80063da:	4618      	mov	r0, r3
 80063dc:	f002 fc08 	bl	8008bf0 <RCCEx_PLL3_Config>
 80063e0:	4603      	mov	r3, r0
 80063e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80063e6:	e004      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063ee:	e000      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80063f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10a      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80063fa:	4ba5      	ldr	r3, [pc, #660]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006408:	4aa1      	ldr	r2, [pc, #644]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800640a:	430b      	orrs	r3, r1
 800640c:	6513      	str	r3, [r2, #80]	; 0x50
 800640e:	e003      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006414:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006424:	f04f 0900 	mov.w	r9, #0
 8006428:	ea58 0309 	orrs.w	r3, r8, r9
 800642c:	d047      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006434:	2b04      	cmp	r3, #4
 8006436:	d82a      	bhi.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006438:	a201      	add	r2, pc, #4	; (adr r2, 8006440 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643e:	bf00      	nop
 8006440:	08006455 	.word	0x08006455
 8006444:	08006463 	.word	0x08006463
 8006448:	08006479 	.word	0x08006479
 800644c:	08006497 	.word	0x08006497
 8006450:	08006497 	.word	0x08006497
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006454:	4b8e      	ldr	r3, [pc, #568]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	4a8d      	ldr	r2, [pc, #564]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800645a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800645e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006460:	e01a      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006466:	3308      	adds	r3, #8
 8006468:	2100      	movs	r1, #0
 800646a:	4618      	mov	r0, r3
 800646c:	f002 fb0e 	bl	8008a8c <RCCEx_PLL2_Config>
 8006470:	4603      	mov	r3, r0
 8006472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006476:	e00f      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800647c:	3328      	adds	r3, #40	; 0x28
 800647e:	2100      	movs	r1, #0
 8006480:	4618      	mov	r0, r3
 8006482:	f002 fbb5 	bl	8008bf0 <RCCEx_PLL3_Config>
 8006486:	4603      	mov	r3, r0
 8006488:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800648c:	e004      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006494:	e000      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006496:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10a      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064a0:	4b7b      	ldr	r3, [pc, #492]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a4:	f023 0107 	bic.w	r1, r3, #7
 80064a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ae:	4a78      	ldr	r2, [pc, #480]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064b0:	430b      	orrs	r3, r1
 80064b2:	6513      	str	r3, [r2, #80]	; 0x50
 80064b4:	e003      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80064be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80064ca:	f04f 0b00 	mov.w	fp, #0
 80064ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80064d2:	d04c      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80064d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064de:	d030      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80064e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e4:	d829      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80064e6:	2bc0      	cmp	r3, #192	; 0xc0
 80064e8:	d02d      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80064ea:	2bc0      	cmp	r3, #192	; 0xc0
 80064ec:	d825      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80064ee:	2b80      	cmp	r3, #128	; 0x80
 80064f0:	d018      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80064f2:	2b80      	cmp	r3, #128	; 0x80
 80064f4:	d821      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80064fa:	2b40      	cmp	r3, #64	; 0x40
 80064fc:	d007      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80064fe:	e01c      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006500:	4b63      	ldr	r3, [pc, #396]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	4a62      	ldr	r2, [pc, #392]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800650a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800650c:	e01c      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800650e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006512:	3308      	adds	r3, #8
 8006514:	2100      	movs	r1, #0
 8006516:	4618      	mov	r0, r3
 8006518:	f002 fab8 	bl	8008a8c <RCCEx_PLL2_Config>
 800651c:	4603      	mov	r3, r0
 800651e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006522:	e011      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006528:	3328      	adds	r3, #40	; 0x28
 800652a:	2100      	movs	r1, #0
 800652c:	4618      	mov	r0, r3
 800652e:	f002 fb5f 	bl	8008bf0 <RCCEx_PLL3_Config>
 8006532:	4603      	mov	r3, r0
 8006534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006538:	e006      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006540:	e002      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006542:	bf00      	nop
 8006544:	e000      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006548:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10a      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006550:	4b4f      	ldr	r3, [pc, #316]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006554:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800655c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800655e:	4a4c      	ldr	r2, [pc, #304]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006560:	430b      	orrs	r3, r1
 8006562:	6513      	str	r3, [r2, #80]	; 0x50
 8006564:	e003      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006566:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800656a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800656e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006576:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800657a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800657e:	2300      	movs	r3, #0
 8006580:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006584:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006588:	460b      	mov	r3, r1
 800658a:	4313      	orrs	r3, r2
 800658c:	d053      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006592:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006596:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800659a:	d035      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800659c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065a0:	d82e      	bhi.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80065a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80065a6:	d031      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80065a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80065ac:	d828      	bhi.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80065ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065b2:	d01a      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x292>
 80065b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065b8:	d822      	bhi.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80065be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065c2:	d007      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80065c4:	e01c      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065c6:	4b32      	ldr	r3, [pc, #200]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ca:	4a31      	ldr	r2, [pc, #196]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065d2:	e01c      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d8:	3308      	adds	r3, #8
 80065da:	2100      	movs	r1, #0
 80065dc:	4618      	mov	r0, r3
 80065de:	f002 fa55 	bl	8008a8c <RCCEx_PLL2_Config>
 80065e2:	4603      	mov	r3, r0
 80065e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80065e8:	e011      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ee:	3328      	adds	r3, #40	; 0x28
 80065f0:	2100      	movs	r1, #0
 80065f2:	4618      	mov	r0, r3
 80065f4:	f002 fafc 	bl	8008bf0 <RCCEx_PLL3_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065fe:	e006      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006606:	e002      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006608:	bf00      	nop
 800660a:	e000      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800660c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800660e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10b      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006616:	4b1e      	ldr	r3, [pc, #120]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800661e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006622:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006626:	4a1a      	ldr	r2, [pc, #104]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006628:	430b      	orrs	r3, r1
 800662a:	6593      	str	r3, [r2, #88]	; 0x58
 800662c:	e003      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006632:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006642:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006646:	2300      	movs	r3, #0
 8006648:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800664c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006650:	460b      	mov	r3, r1
 8006652:	4313      	orrs	r3, r2
 8006654:	d056      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800665a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800665e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006662:	d038      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006664:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006668:	d831      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800666a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800666e:	d034      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006670:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006674:	d82b      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800667a:	d01d      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800667c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006680:	d825      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006682:	2b00      	cmp	r3, #0
 8006684:	d006      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006686:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800668a:	d00a      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800668c:	e01f      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800668e:	bf00      	nop
 8006690:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006694:	4ba2      	ldr	r3, [pc, #648]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	4aa1      	ldr	r2, [pc, #644]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800669a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800669e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066a0:	e01c      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a6:	3308      	adds	r3, #8
 80066a8:	2100      	movs	r1, #0
 80066aa:	4618      	mov	r0, r3
 80066ac:	f002 f9ee 	bl	8008a8c <RCCEx_PLL2_Config>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80066b6:	e011      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066bc:	3328      	adds	r3, #40	; 0x28
 80066be:	2100      	movs	r1, #0
 80066c0:	4618      	mov	r0, r3
 80066c2:	f002 fa95 	bl	8008bf0 <RCCEx_PLL3_Config>
 80066c6:	4603      	mov	r3, r0
 80066c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066cc:	e006      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066d4:	e002      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80066d6:	bf00      	nop
 80066d8:	e000      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80066da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10b      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80066e4:	4b8e      	ldr	r3, [pc, #568]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80066ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066f4:	4a8a      	ldr	r2, [pc, #552]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066f6:	430b      	orrs	r3, r1
 80066f8:	6593      	str	r3, [r2, #88]	; 0x58
 80066fa:	e003      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006700:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006710:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006714:	2300      	movs	r3, #0
 8006716:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800671a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800671e:	460b      	mov	r3, r1
 8006720:	4313      	orrs	r3, r2
 8006722:	d03a      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800672a:	2b30      	cmp	r3, #48	; 0x30
 800672c:	d01f      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800672e:	2b30      	cmp	r3, #48	; 0x30
 8006730:	d819      	bhi.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006732:	2b20      	cmp	r3, #32
 8006734:	d00c      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006736:	2b20      	cmp	r3, #32
 8006738:	d815      	bhi.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d019      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800673e:	2b10      	cmp	r3, #16
 8006740:	d111      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006742:	4b77      	ldr	r3, [pc, #476]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	4a76      	ldr	r2, [pc, #472]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800674c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800674e:	e011      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006754:	3308      	adds	r3, #8
 8006756:	2102      	movs	r1, #2
 8006758:	4618      	mov	r0, r3
 800675a:	f002 f997 	bl	8008a8c <RCCEx_PLL2_Config>
 800675e:	4603      	mov	r3, r0
 8006760:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006764:	e006      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800676c:	e002      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800676e:	bf00      	nop
 8006770:	e000      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006774:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10a      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800677c:	4b68      	ldr	r3, [pc, #416]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800677e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006780:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678a:	4a65      	ldr	r2, [pc, #404]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800678c:	430b      	orrs	r3, r1
 800678e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006790:	e003      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006796:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800679a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80067a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067aa:	2300      	movs	r3, #0
 80067ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80067b0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80067b4:	460b      	mov	r3, r1
 80067b6:	4313      	orrs	r3, r2
 80067b8:	d051      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80067ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067c4:	d035      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80067c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067ca:	d82e      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80067cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067d0:	d031      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80067d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067d6:	d828      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80067d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067dc:	d01a      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80067de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067e2:	d822      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80067e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ec:	d007      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80067ee:	e01c      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f0:	4b4b      	ldr	r3, [pc, #300]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	4a4a      	ldr	r2, [pc, #296]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80067fc:	e01c      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006802:	3308      	adds	r3, #8
 8006804:	2100      	movs	r1, #0
 8006806:	4618      	mov	r0, r3
 8006808:	f002 f940 	bl	8008a8c <RCCEx_PLL2_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006812:	e011      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006818:	3328      	adds	r3, #40	; 0x28
 800681a:	2100      	movs	r1, #0
 800681c:	4618      	mov	r0, r3
 800681e:	f002 f9e7 	bl	8008bf0 <RCCEx_PLL3_Config>
 8006822:	4603      	mov	r3, r0
 8006824:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006828:	e006      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006830:	e002      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006832:	bf00      	nop
 8006834:	e000      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006838:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006840:	4b37      	ldr	r3, [pc, #220]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006844:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800684c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684e:	4a34      	ldr	r2, [pc, #208]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006850:	430b      	orrs	r3, r1
 8006852:	6513      	str	r3, [r2, #80]	; 0x50
 8006854:	e003      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800685a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800685e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800686a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800686e:	2300      	movs	r3, #0
 8006870:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006874:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006878:	460b      	mov	r3, r1
 800687a:	4313      	orrs	r3, r2
 800687c:	d056      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006888:	d033      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800688a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800688e:	d82c      	bhi.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006890:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006894:	d02f      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006896:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800689a:	d826      	bhi.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800689c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068a0:	d02b      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80068a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068a6:	d820      	bhi.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80068a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068ac:	d012      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80068ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068b2:	d81a      	bhi.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d022      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80068b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068bc:	d115      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c2:	3308      	adds	r3, #8
 80068c4:	2101      	movs	r1, #1
 80068c6:	4618      	mov	r0, r3
 80068c8:	f002 f8e0 	bl	8008a8c <RCCEx_PLL2_Config>
 80068cc:	4603      	mov	r3, r0
 80068ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80068d2:	e015      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068d8:	3328      	adds	r3, #40	; 0x28
 80068da:	2101      	movs	r1, #1
 80068dc:	4618      	mov	r0, r3
 80068de:	f002 f987 	bl	8008bf0 <RCCEx_PLL3_Config>
 80068e2:	4603      	mov	r3, r0
 80068e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80068e8:	e00a      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068f0:	e006      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80068f2:	bf00      	nop
 80068f4:	e004      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80068f6:	bf00      	nop
 80068f8:	e002      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80068fa:	bf00      	nop
 80068fc:	e000      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80068fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10d      	bne.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006908:	4b05      	ldr	r3, [pc, #20]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800690a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800690c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006916:	4a02      	ldr	r2, [pc, #8]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006918:	430b      	orrs	r3, r1
 800691a:	6513      	str	r3, [r2, #80]	; 0x50
 800691c:	e006      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800691e:	bf00      	nop
 8006920:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006928:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800692c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800693c:	2300      	movs	r3, #0
 800693e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006942:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006946:	460b      	mov	r3, r1
 8006948:	4313      	orrs	r3, r2
 800694a:	d055      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800694c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006950:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006958:	d033      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800695a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800695e:	d82c      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006964:	d02f      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800696a:	d826      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800696c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006970:	d02b      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006972:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006976:	d820      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800697c:	d012      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800697e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006982:	d81a      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d022      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006988:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800698c:	d115      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006992:	3308      	adds	r3, #8
 8006994:	2101      	movs	r1, #1
 8006996:	4618      	mov	r0, r3
 8006998:	f002 f878 	bl	8008a8c <RCCEx_PLL2_Config>
 800699c:	4603      	mov	r3, r0
 800699e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80069a2:	e015      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a8:	3328      	adds	r3, #40	; 0x28
 80069aa:	2101      	movs	r1, #1
 80069ac:	4618      	mov	r0, r3
 80069ae:	f002 f91f 	bl	8008bf0 <RCCEx_PLL3_Config>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80069b8:	e00a      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069c0:	e006      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80069c2:	bf00      	nop
 80069c4:	e004      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80069c6:	bf00      	nop
 80069c8:	e002      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80069ca:	bf00      	nop
 80069cc:	e000      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80069ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10b      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80069d8:	4ba3      	ldr	r3, [pc, #652]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069dc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80069e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069e8:	4a9f      	ldr	r2, [pc, #636]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069ea:	430b      	orrs	r3, r1
 80069ec:	6593      	str	r3, [r2, #88]	; 0x58
 80069ee:	e003      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80069f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006a04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a12:	460b      	mov	r3, r1
 8006a14:	4313      	orrs	r3, r2
 8006a16:	d037      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a22:	d00e      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a28:	d816      	bhi.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d018      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a32:	d111      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a34:	4b8c      	ldr	r3, [pc, #560]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	4a8b      	ldr	r2, [pc, #556]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006a40:	e00f      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a46:	3308      	adds	r3, #8
 8006a48:	2101      	movs	r1, #1
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f002 f81e 	bl	8008a8c <RCCEx_PLL2_Config>
 8006a50:	4603      	mov	r3, r0
 8006a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006a56:	e004      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a5e:	e000      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a6a:	4b7f      	ldr	r3, [pc, #508]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a78:	4a7b      	ldr	r2, [pc, #492]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a7a:	430b      	orrs	r3, r1
 8006a7c:	6513      	str	r3, [r2, #80]	; 0x50
 8006a7e:	e003      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006a9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	d039      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d81c      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006ab2:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006af5 	.word	0x08006af5
 8006abc:	08006ac9 	.word	0x08006ac9
 8006ac0:	08006ad7 	.word	0x08006ad7
 8006ac4:	08006af5 	.word	0x08006af5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ac8:	4b67      	ldr	r3, [pc, #412]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	4a66      	ldr	r2, [pc, #408]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ad4:	e00f      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ada:	3308      	adds	r3, #8
 8006adc:	2102      	movs	r1, #2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 ffd4 	bl	8008a8c <RCCEx_PLL2_Config>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006aea:	e004      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006af2:	e000      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10a      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006afe:	4b5a      	ldr	r3, [pc, #360]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b02:	f023 0103 	bic.w	r1, r3, #3
 8006b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b0c:	4a56      	ldr	r2, [pc, #344]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b0e:	430b      	orrs	r3, r1
 8006b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b12:	e003      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006b28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006b36:	460b      	mov	r3, r1
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	f000 809f 	beq.w	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b3e:	4b4b      	ldr	r3, [pc, #300]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a4a      	ldr	r2, [pc, #296]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b4a:	f7fa fa71 	bl	8001030 <HAL_GetTick>
 8006b4e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b52:	e00b      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b54:	f7fa fa6c 	bl	8001030 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	2b64      	cmp	r3, #100	; 0x64
 8006b62:	d903      	bls.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b6a:	e005      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b6c:	4b3f      	ldr	r3, [pc, #252]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d0ed      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006b78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d179      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006b80:	4b39      	ldr	r3, [pc, #228]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006b8c:	4053      	eors	r3, r2
 8006b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d015      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b96:	4b34      	ldr	r3, [pc, #208]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ba2:	4b31      	ldr	r3, [pc, #196]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba6:	4a30      	ldr	r2, [pc, #192]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bae:	4b2e      	ldr	r3, [pc, #184]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb2:	4a2d      	ldr	r2, [pc, #180]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bb8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006bba:	4a2b      	ldr	r2, [pc, #172]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bc0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bce:	d118      	bne.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd0:	f7fa fa2e 	bl	8001030 <HAL_GetTick>
 8006bd4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bd8:	e00d      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bda:	f7fa fa29 	bl	8001030 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006be4:	1ad2      	subs	r2, r2, r3
 8006be6:	f241 3388 	movw	r3, #5000	; 0x1388
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d903      	bls.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006bf4:	e005      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bf6:	4b1c      	ldr	r3, [pc, #112]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0eb      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d129      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c1a:	d10e      	bne.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006c1c:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c2c:	091a      	lsrs	r2, r3, #4
 8006c2e:	4b10      	ldr	r3, [pc, #64]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	4a0d      	ldr	r2, [pc, #52]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c34:	430b      	orrs	r3, r1
 8006c36:	6113      	str	r3, [r2, #16]
 8006c38:	e005      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006c3a:	4b0b      	ldr	r3, [pc, #44]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	4a0a      	ldr	r2, [pc, #40]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c44:	6113      	str	r3, [r2, #16]
 8006c46:	4b08      	ldr	r3, [pc, #32]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c48:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c56:	4a04      	ldr	r2, [pc, #16]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c5c:	e00e      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006c66:	e009      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	58024800 	.word	0x58024800
 8006c70:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f002 0301 	and.w	r3, r2, #1
 8006c88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c92:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f000 8089 	beq.w	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ca4:	2b28      	cmp	r3, #40	; 0x28
 8006ca6:	d86b      	bhi.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006ca8:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cae:	bf00      	nop
 8006cb0:	08006d89 	.word	0x08006d89
 8006cb4:	08006d81 	.word	0x08006d81
 8006cb8:	08006d81 	.word	0x08006d81
 8006cbc:	08006d81 	.word	0x08006d81
 8006cc0:	08006d81 	.word	0x08006d81
 8006cc4:	08006d81 	.word	0x08006d81
 8006cc8:	08006d81 	.word	0x08006d81
 8006ccc:	08006d81 	.word	0x08006d81
 8006cd0:	08006d55 	.word	0x08006d55
 8006cd4:	08006d81 	.word	0x08006d81
 8006cd8:	08006d81 	.word	0x08006d81
 8006cdc:	08006d81 	.word	0x08006d81
 8006ce0:	08006d81 	.word	0x08006d81
 8006ce4:	08006d81 	.word	0x08006d81
 8006ce8:	08006d81 	.word	0x08006d81
 8006cec:	08006d81 	.word	0x08006d81
 8006cf0:	08006d6b 	.word	0x08006d6b
 8006cf4:	08006d81 	.word	0x08006d81
 8006cf8:	08006d81 	.word	0x08006d81
 8006cfc:	08006d81 	.word	0x08006d81
 8006d00:	08006d81 	.word	0x08006d81
 8006d04:	08006d81 	.word	0x08006d81
 8006d08:	08006d81 	.word	0x08006d81
 8006d0c:	08006d81 	.word	0x08006d81
 8006d10:	08006d89 	.word	0x08006d89
 8006d14:	08006d81 	.word	0x08006d81
 8006d18:	08006d81 	.word	0x08006d81
 8006d1c:	08006d81 	.word	0x08006d81
 8006d20:	08006d81 	.word	0x08006d81
 8006d24:	08006d81 	.word	0x08006d81
 8006d28:	08006d81 	.word	0x08006d81
 8006d2c:	08006d81 	.word	0x08006d81
 8006d30:	08006d89 	.word	0x08006d89
 8006d34:	08006d81 	.word	0x08006d81
 8006d38:	08006d81 	.word	0x08006d81
 8006d3c:	08006d81 	.word	0x08006d81
 8006d40:	08006d81 	.word	0x08006d81
 8006d44:	08006d81 	.word	0x08006d81
 8006d48:	08006d81 	.word	0x08006d81
 8006d4c:	08006d81 	.word	0x08006d81
 8006d50:	08006d89 	.word	0x08006d89
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d58:	3308      	adds	r3, #8
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f001 fe95 	bl	8008a8c <RCCEx_PLL2_Config>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006d68:	e00f      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d6e:	3328      	adds	r3, #40	; 0x28
 8006d70:	2101      	movs	r1, #1
 8006d72:	4618      	mov	r0, r3
 8006d74:	f001 ff3c 	bl	8008bf0 <RCCEx_PLL3_Config>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006d7e:	e004      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d86:	e000      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10a      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006d92:	4bbf      	ldr	r3, [pc, #764]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d96:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006da0:	4abb      	ldr	r2, [pc, #748]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006da2:	430b      	orrs	r3, r1
 8006da4:	6553      	str	r3, [r2, #84]	; 0x54
 8006da6:	e003      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db8:	f002 0302 	and.w	r3, r2, #2
 8006dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006dc6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	d041      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dd6:	2b05      	cmp	r3, #5
 8006dd8:	d824      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006dda:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006e2d 	.word	0x08006e2d
 8006de4:	08006df9 	.word	0x08006df9
 8006de8:	08006e0f 	.word	0x08006e0f
 8006dec:	08006e2d 	.word	0x08006e2d
 8006df0:	08006e2d 	.word	0x08006e2d
 8006df4:	08006e2d 	.word	0x08006e2d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	2101      	movs	r1, #1
 8006e00:	4618      	mov	r0, r3
 8006e02:	f001 fe43 	bl	8008a8c <RCCEx_PLL2_Config>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006e0c:	e00f      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e12:	3328      	adds	r3, #40	; 0x28
 8006e14:	2101      	movs	r1, #1
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 feea 	bl	8008bf0 <RCCEx_PLL3_Config>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006e22:	e004      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e2a:	e000      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e36:	4b96      	ldr	r3, [pc, #600]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3a:	f023 0107 	bic.w	r1, r3, #7
 8006e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e44:	4a92      	ldr	r2, [pc, #584]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e46:	430b      	orrs	r3, r1
 8006e48:	6553      	str	r3, [r2, #84]	; 0x54
 8006e4a:	e003      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	f002 0304 	and.w	r3, r2, #4
 8006e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e64:	2300      	movs	r3, #0
 8006e66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e6a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4313      	orrs	r3, r2
 8006e72:	d044      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e7c:	2b05      	cmp	r3, #5
 8006e7e:	d825      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006e80:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e86:	bf00      	nop
 8006e88:	08006ed5 	.word	0x08006ed5
 8006e8c:	08006ea1 	.word	0x08006ea1
 8006e90:	08006eb7 	.word	0x08006eb7
 8006e94:	08006ed5 	.word	0x08006ed5
 8006e98:	08006ed5 	.word	0x08006ed5
 8006e9c:	08006ed5 	.word	0x08006ed5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f001 fdef 	bl	8008a8c <RCCEx_PLL2_Config>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006eb4:	e00f      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eba:	3328      	adds	r3, #40	; 0x28
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f001 fe96 	bl	8008bf0 <RCCEx_PLL3_Config>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006eca:	e004      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ed2:	e000      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10b      	bne.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ede:	4b6c      	ldr	r3, [pc, #432]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee2:	f023 0107 	bic.w	r1, r3, #7
 8006ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eee:	4a68      	ldr	r2, [pc, #416]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8006ef4:	e003      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006efa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f06:	f002 0320 	and.w	r3, r2, #32
 8006f0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	d055      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f2a:	d033      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f30:	d82c      	bhi.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f36:	d02f      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3c:	d826      	bhi.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006f3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f42:	d02b      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006f44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f48:	d820      	bhi.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f4e:	d012      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f54:	d81a      	bhi.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d022      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f5e:	d115      	bne.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f64:	3308      	adds	r3, #8
 8006f66:	2100      	movs	r1, #0
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f001 fd8f 	bl	8008a8c <RCCEx_PLL2_Config>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006f74:	e015      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f7a:	3328      	adds	r3, #40	; 0x28
 8006f7c:	2102      	movs	r1, #2
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 fe36 	bl	8008bf0 <RCCEx_PLL3_Config>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006f8a:	e00a      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f92:	e006      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006f94:	bf00      	nop
 8006f96:	e004      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006f98:	bf00      	nop
 8006f9a:	e002      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006f9c:	bf00      	nop
 8006f9e:	e000      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10b      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006faa:	4b39      	ldr	r3, [pc, #228]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fba:	4a35      	ldr	r2, [pc, #212]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	6553      	str	r3, [r2, #84]	; 0x54
 8006fc0:	e003      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006fe0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	d058      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ff2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ff6:	d033      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006ff8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ffc:	d82c      	bhi.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007002:	d02f      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007008:	d826      	bhi.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800700a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800700e:	d02b      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007010:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007014:	d820      	bhi.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800701a:	d012      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800701c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007020:	d81a      	bhi.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d022      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800702a:	d115      	bne.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800702c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007030:	3308      	adds	r3, #8
 8007032:	2100      	movs	r1, #0
 8007034:	4618      	mov	r0, r3
 8007036:	f001 fd29 	bl	8008a8c <RCCEx_PLL2_Config>
 800703a:	4603      	mov	r3, r0
 800703c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007040:	e015      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007046:	3328      	adds	r3, #40	; 0x28
 8007048:	2102      	movs	r1, #2
 800704a:	4618      	mov	r0, r3
 800704c:	f001 fdd0 	bl	8008bf0 <RCCEx_PLL3_Config>
 8007050:	4603      	mov	r3, r0
 8007052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007056:	e00a      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800705e:	e006      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007060:	bf00      	nop
 8007062:	e004      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007064:	bf00      	nop
 8007066:	e002      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007068:	bf00      	nop
 800706a:	e000      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800706c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800706e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10e      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007076:	4b06      	ldr	r3, [pc, #24]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800707e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007082:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007086:	4a02      	ldr	r2, [pc, #8]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007088:	430b      	orrs	r3, r1
 800708a:	6593      	str	r3, [r2, #88]	; 0x58
 800708c:	e006      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800708e:	bf00      	nop
 8007090:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007094:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007098:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800709c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80070a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80070b6:	460b      	mov	r3, r1
 80070b8:	4313      	orrs	r3, r2
 80070ba:	d055      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80070bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80070c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80070c8:	d033      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80070ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80070ce:	d82c      	bhi.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80070d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070d4:	d02f      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80070d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070da:	d826      	bhi.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80070dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80070e0:	d02b      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80070e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80070e6:	d820      	bhi.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80070e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070ec:	d012      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80070ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070f2:	d81a      	bhi.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d022      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80070f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070fc:	d115      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007102:	3308      	adds	r3, #8
 8007104:	2100      	movs	r1, #0
 8007106:	4618      	mov	r0, r3
 8007108:	f001 fcc0 	bl	8008a8c <RCCEx_PLL2_Config>
 800710c:	4603      	mov	r3, r0
 800710e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007112:	e015      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007118:	3328      	adds	r3, #40	; 0x28
 800711a:	2102      	movs	r1, #2
 800711c:	4618      	mov	r0, r3
 800711e:	f001 fd67 	bl	8008bf0 <RCCEx_PLL3_Config>
 8007122:	4603      	mov	r3, r0
 8007124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007128:	e00a      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007130:	e006      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007132:	bf00      	nop
 8007134:	e004      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007136:	bf00      	nop
 8007138:	e002      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800713a:	bf00      	nop
 800713c:	e000      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800713e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007140:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10b      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007148:	4ba1      	ldr	r3, [pc, #644]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800714a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007154:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007158:	4a9d      	ldr	r2, [pc, #628]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800715a:	430b      	orrs	r3, r1
 800715c:	6593      	str	r3, [r2, #88]	; 0x58
 800715e:	e003      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007160:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007164:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	f002 0308 	and.w	r3, r2, #8
 8007174:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007178:	2300      	movs	r3, #0
 800717a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800717e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007182:	460b      	mov	r3, r1
 8007184:	4313      	orrs	r3, r2
 8007186:	d01e      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800718c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007194:	d10c      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800719a:	3328      	adds	r3, #40	; 0x28
 800719c:	2102      	movs	r1, #2
 800719e:	4618      	mov	r0, r3
 80071a0:	f001 fd26 	bl	8008bf0 <RCCEx_PLL3_Config>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80071b0:	4b87      	ldr	r3, [pc, #540]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071c0:	4a83      	ldr	r2, [pc, #524]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071c2:	430b      	orrs	r3, r1
 80071c4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80071c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f002 0310 	and.w	r3, r2, #16
 80071d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071d6:	2300      	movs	r3, #0
 80071d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80071dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80071e0:	460b      	mov	r3, r1
 80071e2:	4313      	orrs	r3, r2
 80071e4:	d01e      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80071e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f2:	d10c      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f8:	3328      	adds	r3, #40	; 0x28
 80071fa:	2102      	movs	r1, #2
 80071fc:	4618      	mov	r0, r3
 80071fe:	f001 fcf7 	bl	8008bf0 <RCCEx_PLL3_Config>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800720e:	4b70      	ldr	r3, [pc, #448]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007212:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800721a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800721e:	4a6c      	ldr	r2, [pc, #432]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007220:	430b      	orrs	r3, r1
 8007222:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007230:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007234:	2300      	movs	r3, #0
 8007236:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800723a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800723e:	460b      	mov	r3, r1
 8007240:	4313      	orrs	r3, r2
 8007242:	d03e      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007248:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800724c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007250:	d022      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007256:	d81b      	bhi.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800725c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007260:	d00b      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007262:	e015      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007268:	3308      	adds	r3, #8
 800726a:	2100      	movs	r1, #0
 800726c:	4618      	mov	r0, r3
 800726e:	f001 fc0d 	bl	8008a8c <RCCEx_PLL2_Config>
 8007272:	4603      	mov	r3, r0
 8007274:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007278:	e00f      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800727a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800727e:	3328      	adds	r3, #40	; 0x28
 8007280:	2102      	movs	r1, #2
 8007282:	4618      	mov	r0, r3
 8007284:	f001 fcb4 	bl	8008bf0 <RCCEx_PLL3_Config>
 8007288:	4603      	mov	r3, r0
 800728a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800728e:	e004      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007296:	e000      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800729a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10b      	bne.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072a2:	4b4b      	ldr	r3, [pc, #300]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80072aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072b2:	4a47      	ldr	r2, [pc, #284]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072b4:	430b      	orrs	r3, r1
 80072b6:	6593      	str	r3, [r2, #88]	; 0x58
 80072b8:	e003      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80072ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80072d0:	2300      	movs	r3, #0
 80072d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80072d8:	460b      	mov	r3, r1
 80072da:	4313      	orrs	r3, r2
 80072dc:	d03b      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80072de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072ea:	d01f      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80072ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072f0:	d818      	bhi.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80072f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072f6:	d003      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80072f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072fc:	d007      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80072fe:	e011      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007300:	4b33      	ldr	r3, [pc, #204]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007304:	4a32      	ldr	r2, [pc, #200]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800730a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800730c:	e00f      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800730e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007312:	3328      	adds	r3, #40	; 0x28
 8007314:	2101      	movs	r1, #1
 8007316:	4618      	mov	r0, r3
 8007318:	f001 fc6a 	bl	8008bf0 <RCCEx_PLL3_Config>
 800731c:	4603      	mov	r3, r0
 800731e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007322:	e004      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800732a:	e000      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800732c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800732e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10b      	bne.n	800734e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007336:	4b26      	ldr	r3, [pc, #152]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800733e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007346:	4a22      	ldr	r2, [pc, #136]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007348:	430b      	orrs	r3, r1
 800734a:	6553      	str	r3, [r2, #84]	; 0x54
 800734c:	e003      	b.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800734e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007352:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800735a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007362:	673b      	str	r3, [r7, #112]	; 0x70
 8007364:	2300      	movs	r3, #0
 8007366:	677b      	str	r3, [r7, #116]	; 0x74
 8007368:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800736c:	460b      	mov	r3, r1
 800736e:	4313      	orrs	r3, r2
 8007370:	d034      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800737c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007380:	d007      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007382:	e011      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007384:	4b12      	ldr	r3, [pc, #72]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	4a11      	ldr	r2, [pc, #68]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800738a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800738e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007390:	e00e      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007396:	3308      	adds	r3, #8
 8007398:	2102      	movs	r1, #2
 800739a:	4618      	mov	r0, r3
 800739c:	f001 fb76 	bl	8008a8c <RCCEx_PLL2_Config>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80073a6:	e003      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10d      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80073b8:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c6:	4a02      	ldr	r2, [pc, #8]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073c8:	430b      	orrs	r3, r1
 80073ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80073cc:	e006      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80073ce:	bf00      	nop
 80073d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80073e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80073ea:	2300      	movs	r3, #0
 80073ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80073f2:	460b      	mov	r3, r1
 80073f4:	4313      	orrs	r3, r2
 80073f6:	d00c      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80073f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073fc:	3328      	adds	r3, #40	; 0x28
 80073fe:	2102      	movs	r1, #2
 8007400:	4618      	mov	r0, r3
 8007402:	f001 fbf5 	bl	8008bf0 <RCCEx_PLL3_Config>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800741e:	663b      	str	r3, [r7, #96]	; 0x60
 8007420:	2300      	movs	r3, #0
 8007422:	667b      	str	r3, [r7, #100]	; 0x64
 8007424:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007428:	460b      	mov	r3, r1
 800742a:	4313      	orrs	r3, r2
 800742c:	d038      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800743a:	d018      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800743c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007440:	d811      	bhi.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007446:	d014      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800744c:	d80b      	bhi.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d011      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007456:	d106      	bne.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007458:	4bc3      	ldr	r3, [pc, #780]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	4ac2      	ldr	r2, [pc, #776]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800745e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007462:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007464:	e008      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800746c:	e004      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800746e:	bf00      	nop
 8007470:	e002      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007472:	bf00      	nop
 8007474:	e000      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10b      	bne.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007480:	4bb9      	ldr	r3, [pc, #740]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007484:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800748c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007490:	4ab5      	ldr	r2, [pc, #724]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007492:	430b      	orrs	r3, r1
 8007494:	6553      	str	r3, [r2, #84]	; 0x54
 8007496:	e003      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800749c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80074a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80074ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80074ae:	2300      	movs	r3, #0
 80074b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80074b6:	460b      	mov	r3, r1
 80074b8:	4313      	orrs	r3, r2
 80074ba:	d009      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80074bc:	4baa      	ldr	r3, [pc, #680]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80074c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ca:	4aa7      	ldr	r2, [pc, #668]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074cc:	430b      	orrs	r3, r1
 80074ce:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80074d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80074dc:	653b      	str	r3, [r7, #80]	; 0x50
 80074de:	2300      	movs	r3, #0
 80074e0:	657b      	str	r3, [r7, #84]	; 0x54
 80074e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80074e6:	460b      	mov	r3, r1
 80074e8:	4313      	orrs	r3, r2
 80074ea:	d00a      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80074ec:	4b9e      	ldr	r3, [pc, #632]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80074f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80074fc:	4a9a      	ldr	r2, [pc, #616]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074fe:	430b      	orrs	r3, r1
 8007500:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800750e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007510:	2300      	movs	r3, #0
 8007512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007514:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007518:	460b      	mov	r3, r1
 800751a:	4313      	orrs	r3, r2
 800751c:	d009      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800751e:	4b92      	ldr	r3, [pc, #584]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007522:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800752a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800752c:	4a8e      	ldr	r2, [pc, #568]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800752e:	430b      	orrs	r3, r1
 8007530:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800753e:	643b      	str	r3, [r7, #64]	; 0x40
 8007540:	2300      	movs	r3, #0
 8007542:	647b      	str	r3, [r7, #68]	; 0x44
 8007544:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007548:	460b      	mov	r3, r1
 800754a:	4313      	orrs	r3, r2
 800754c:	d00e      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800754e:	4b86      	ldr	r3, [pc, #536]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	4a85      	ldr	r2, [pc, #532]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007554:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007558:	6113      	str	r3, [r2, #16]
 800755a:	4b83      	ldr	r3, [pc, #524]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800755c:	6919      	ldr	r1, [r3, #16]
 800755e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007562:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007566:	4a80      	ldr	r2, [pc, #512]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007568:	430b      	orrs	r3, r1
 800756a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800756c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007578:	63bb      	str	r3, [r7, #56]	; 0x38
 800757a:	2300      	movs	r3, #0
 800757c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800757e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007582:	460b      	mov	r3, r1
 8007584:	4313      	orrs	r3, r2
 8007586:	d009      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007588:	4b77      	ldr	r3, [pc, #476]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800758a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800758c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007596:	4a74      	ldr	r2, [pc, #464]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007598:	430b      	orrs	r3, r1
 800759a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800759c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80075a8:	633b      	str	r3, [r7, #48]	; 0x30
 80075aa:	2300      	movs	r3, #0
 80075ac:	637b      	str	r3, [r7, #52]	; 0x34
 80075ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80075b2:	460b      	mov	r3, r1
 80075b4:	4313      	orrs	r3, r2
 80075b6:	d00a      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80075b8:	4b6b      	ldr	r3, [pc, #428]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075bc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80075c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075c8:	4a67      	ldr	r2, [pc, #412]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075ca:	430b      	orrs	r3, r1
 80075cc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80075ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	2100      	movs	r1, #0
 80075d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80075e4:	460b      	mov	r3, r1
 80075e6:	4313      	orrs	r3, r2
 80075e8:	d011      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ee:	3308      	adds	r3, #8
 80075f0:	2100      	movs	r1, #0
 80075f2:	4618      	mov	r0, r3
 80075f4:	f001 fa4a 	bl	8008a8c <RCCEx_PLL2_Config>
 80075f8:	4603      	mov	r3, r0
 80075fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80075fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800760a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800760e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	2100      	movs	r1, #0
 8007618:	6239      	str	r1, [r7, #32]
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
 8007620:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007624:	460b      	mov	r3, r1
 8007626:	4313      	orrs	r3, r2
 8007628:	d011      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800762a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800762e:	3308      	adds	r3, #8
 8007630:	2101      	movs	r1, #1
 8007632:	4618      	mov	r0, r3
 8007634:	f001 fa2a 	bl	8008a8c <RCCEx_PLL2_Config>
 8007638:	4603      	mov	r3, r0
 800763a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800763e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007646:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800764a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800764e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	2100      	movs	r1, #0
 8007658:	61b9      	str	r1, [r7, #24]
 800765a:	f003 0304 	and.w	r3, r3, #4
 800765e:	61fb      	str	r3, [r7, #28]
 8007660:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007664:	460b      	mov	r3, r1
 8007666:	4313      	orrs	r3, r2
 8007668:	d011      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800766a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800766e:	3308      	adds	r3, #8
 8007670:	2102      	movs	r1, #2
 8007672:	4618      	mov	r0, r3
 8007674:	f001 fa0a 	bl	8008a8c <RCCEx_PLL2_Config>
 8007678:	4603      	mov	r3, r0
 800767a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800767e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800768a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800768e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007696:	2100      	movs	r1, #0
 8007698:	6139      	str	r1, [r7, #16]
 800769a:	f003 0308 	and.w	r3, r3, #8
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80076a4:	460b      	mov	r3, r1
 80076a6:	4313      	orrs	r3, r2
 80076a8:	d011      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ae:	3328      	adds	r3, #40	; 0x28
 80076b0:	2100      	movs	r1, #0
 80076b2:	4618      	mov	r0, r3
 80076b4:	f001 fa9c 	bl	8008bf0 <RCCEx_PLL3_Config>
 80076b8:	4603      	mov	r3, r0
 80076ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80076be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80076ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d6:	2100      	movs	r1, #0
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	f003 0310 	and.w	r3, r3, #16
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80076e4:	460b      	mov	r3, r1
 80076e6:	4313      	orrs	r3, r2
 80076e8:	d011      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ee:	3328      	adds	r3, #40	; 0x28
 80076f0:	2101      	movs	r1, #1
 80076f2:	4618      	mov	r0, r3
 80076f4:	f001 fa7c 	bl	8008bf0 <RCCEx_PLL3_Config>
 80076f8:	4603      	mov	r3, r0
 80076fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80076fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800770a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800770e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007716:	2100      	movs	r1, #0
 8007718:	6039      	str	r1, [r7, #0]
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	607b      	str	r3, [r7, #4]
 8007720:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007724:	460b      	mov	r3, r1
 8007726:	4313      	orrs	r3, r2
 8007728:	d011      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800772a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800772e:	3328      	adds	r3, #40	; 0x28
 8007730:	2102      	movs	r1, #2
 8007732:	4618      	mov	r0, r3
 8007734:	f001 fa5c 	bl	8008bf0 <RCCEx_PLL3_Config>
 8007738:	4603      	mov	r3, r0
 800773a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800773e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800774a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800774e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	e000      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
}
 800775c:	4618      	mov	r0, r3
 800775e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007762:	46bd      	mov	sp, r7
 8007764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007768:	58024400 	.word	0x58024400

0800776c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b090      	sub	sp, #64	; 0x40
 8007770:	af00      	add	r7, sp, #0
 8007772:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800777a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800777e:	430b      	orrs	r3, r1
 8007780:	f040 8094 	bne.w	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007784:	4b9e      	ldr	r3, [pc, #632]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007788:	f003 0307 	and.w	r3, r3, #7
 800778c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007790:	2b04      	cmp	r3, #4
 8007792:	f200 8087 	bhi.w	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007796:	a201      	add	r2, pc, #4	; (adr r2, 800779c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779c:	080077b1 	.word	0x080077b1
 80077a0:	080077d9 	.word	0x080077d9
 80077a4:	08007801 	.word	0x08007801
 80077a8:	0800789d 	.word	0x0800789d
 80077ac:	08007829 	.word	0x08007829
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077b0:	4b93      	ldr	r3, [pc, #588]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077bc:	d108      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077c2:	4618      	mov	r0, r3
 80077c4:	f001 f810 	bl	80087e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077cc:	f000 bd45 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077d4:	f000 bd41 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077d8:	4b89      	ldr	r3, [pc, #548]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077e4:	d108      	bne.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077e6:	f107 0318 	add.w	r3, r7, #24
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 fd54 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077f4:	f000 bd31 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077f8:	2300      	movs	r3, #0
 80077fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077fc:	f000 bd2d 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007800:	4b7f      	ldr	r3, [pc, #508]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800780c:	d108      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800780e:	f107 030c 	add.w	r3, r7, #12
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fe94 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800781c:	f000 bd1d 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007824:	f000 bd19 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007828:	4b75      	ldr	r3, [pc, #468]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800782a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007830:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007832:	4b73      	ldr	r3, [pc, #460]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0304 	and.w	r3, r3, #4
 800783a:	2b04      	cmp	r3, #4
 800783c:	d10c      	bne.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800783e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007840:	2b00      	cmp	r3, #0
 8007842:	d109      	bne.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007844:	4b6e      	ldr	r3, [pc, #440]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	08db      	lsrs	r3, r3, #3
 800784a:	f003 0303 	and.w	r3, r3, #3
 800784e:	4a6d      	ldr	r2, [pc, #436]	; (8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007850:	fa22 f303 	lsr.w	r3, r2, r3
 8007854:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007856:	e01f      	b.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007858:	4b69      	ldr	r3, [pc, #420]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007864:	d106      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800786c:	d102      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800786e:	4b66      	ldr	r3, [pc, #408]	; (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007872:	e011      	b.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007874:	4b62      	ldr	r3, [pc, #392]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800787c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007880:	d106      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007888:	d102      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800788a:	4b60      	ldr	r3, [pc, #384]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800788c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800788e:	e003      	b.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007890:	2300      	movs	r3, #0
 8007892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007894:	f000 bce1 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007898:	f000 bcdf 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800789c:	4b5c      	ldr	r3, [pc, #368]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078a0:	f000 bcdb 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078a8:	f000 bcd7 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80078ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078b0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80078b4:	430b      	orrs	r3, r1
 80078b6:	f040 80ad 	bne.w	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80078ba:	4b51      	ldr	r3, [pc, #324]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078be:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80078c2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80078c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ca:	d056      	beq.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078d2:	f200 8090 	bhi.w	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	2bc0      	cmp	r3, #192	; 0xc0
 80078da:	f000 8088 	beq.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80078de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e0:	2bc0      	cmp	r3, #192	; 0xc0
 80078e2:	f200 8088 	bhi.w	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80078e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e8:	2b80      	cmp	r3, #128	; 0x80
 80078ea:	d032      	beq.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	2b80      	cmp	r3, #128	; 0x80
 80078f0:	f200 8081 	bhi.w	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	2b40      	cmp	r3, #64	; 0x40
 80078fe:	d014      	beq.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007900:	e079      	b.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007902:	4b3f      	ldr	r3, [pc, #252]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800790a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800790e:	d108      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007914:	4618      	mov	r0, r3
 8007916:	f000 ff67 	bl	80087e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800791a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800791e:	f000 bc9c 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007926:	f000 bc98 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800792a:	4b35      	ldr	r3, [pc, #212]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007936:	d108      	bne.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007938:	f107 0318 	add.w	r3, r7, #24
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fcab 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007946:	f000 bc88 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800794a:	2300      	movs	r3, #0
 800794c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800794e:	f000 bc84 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007952:	4b2b      	ldr	r3, [pc, #172]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800795a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800795e:	d108      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007960:	f107 030c 	add.w	r3, r7, #12
 8007964:	4618      	mov	r0, r3
 8007966:	f000 fdeb 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800796e:	f000 bc74 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007972:	2300      	movs	r3, #0
 8007974:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007976:	f000 bc70 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800797a:	4b21      	ldr	r3, [pc, #132]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800797c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800797e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007982:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007984:	4b1e      	ldr	r3, [pc, #120]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0304 	and.w	r3, r3, #4
 800798c:	2b04      	cmp	r3, #4
 800798e:	d10c      	bne.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007992:	2b00      	cmp	r3, #0
 8007994:	d109      	bne.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007996:	4b1a      	ldr	r3, [pc, #104]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	08db      	lsrs	r3, r3, #3
 800799c:	f003 0303 	and.w	r3, r3, #3
 80079a0:	4a18      	ldr	r2, [pc, #96]	; (8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80079a2:	fa22 f303 	lsr.w	r3, r2, r3
 80079a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079a8:	e01f      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079aa:	4b15      	ldr	r3, [pc, #84]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079b6:	d106      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80079b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079be:	d102      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80079c0:	4b11      	ldr	r3, [pc, #68]	; (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80079c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079c4:	e011      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079c6:	4b0e      	ldr	r3, [pc, #56]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079d2:	d106      	bne.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80079d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079da:	d102      	bne.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80079dc:	4b0b      	ldr	r3, [pc, #44]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80079de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079e0:	e003      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80079e6:	f000 bc38 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80079ea:	f000 bc36 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80079ee:	4b08      	ldr	r3, [pc, #32]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80079f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079f2:	f000 bc32 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079fa:	f000 bc2e 	b.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80079fe:	bf00      	nop
 8007a00:	58024400 	.word	0x58024400
 8007a04:	03d09000 	.word	0x03d09000
 8007a08:	003d0900 	.word	0x003d0900
 8007a0c:	007a1200 	.word	0x007a1200
 8007a10:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a18:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007a1c:	430b      	orrs	r3, r1
 8007a1e:	f040 809c 	bne.w	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007a22:	4b9e      	ldr	r3, [pc, #632]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a26:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007a2a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a32:	d054      	beq.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a3a:	f200 808b 	bhi.w	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a44:	f000 8083 	beq.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a4e:	f200 8081 	bhi.w	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a58:	d02f      	beq.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a60:	d878      	bhi.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d004      	beq.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a6e:	d012      	beq.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007a70:	e070      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a72:	4b8a      	ldr	r3, [pc, #552]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a7e:	d107      	bne.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 feaf 	bl	80087e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a8e:	e3e4      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a94:	e3e1      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a96:	4b81      	ldr	r3, [pc, #516]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007aa2:	d107      	bne.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aa4:	f107 0318 	add.w	r3, r7, #24
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fbf5 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ab2:	e3d2      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ab8:	e3cf      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007aba:	4b78      	ldr	r3, [pc, #480]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ac6:	d107      	bne.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ac8:	f107 030c 	add.w	r3, r7, #12
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 fd37 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ad6:	e3c0      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007adc:	e3bd      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ade:	4b6f      	ldr	r3, [pc, #444]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ae6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ae8:	4b6c      	ldr	r3, [pc, #432]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0304 	and.w	r3, r3, #4
 8007af0:	2b04      	cmp	r3, #4
 8007af2:	d10c      	bne.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d109      	bne.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007afa:	4b68      	ldr	r3, [pc, #416]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	08db      	lsrs	r3, r3, #3
 8007b00:	f003 0303 	and.w	r3, r3, #3
 8007b04:	4a66      	ldr	r2, [pc, #408]	; (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007b06:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b0c:	e01e      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b0e:	4b63      	ldr	r3, [pc, #396]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b1a:	d106      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b22:	d102      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b24:	4b5f      	ldr	r3, [pc, #380]	; (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b28:	e010      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b2a:	4b5c      	ldr	r3, [pc, #368]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b36:	d106      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b3e:	d102      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b40:	4b59      	ldr	r3, [pc, #356]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b44:	e002      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007b4a:	e386      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b4c:	e385      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b4e:	4b57      	ldr	r3, [pc, #348]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007b50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b52:	e382      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007b54:	2300      	movs	r3, #0
 8007b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b58:	e37f      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007b5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b5e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007b62:	430b      	orrs	r3, r1
 8007b64:	f040 80a7 	bne.w	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007b68:	4b4c      	ldr	r3, [pc, #304]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b6c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007b70:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b78:	d055      	beq.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b80:	f200 8096 	bhi.w	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b8a:	f000 8084 	beq.w	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b94:	f200 808c 	bhi.w	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b9e:	d030      	beq.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ba6:	f200 8083 	bhi.w	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d004      	beq.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bb6:	d012      	beq.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007bb8:	e07a      	b.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bba:	4b38      	ldr	r3, [pc, #224]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bc6:	d107      	bne.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 fe0b 	bl	80087e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bd6:	e340      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bdc:	e33d      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bde:	4b2f      	ldr	r3, [pc, #188]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007be6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bea:	d107      	bne.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bec:	f107 0318 	add.w	r3, r7, #24
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 fb51 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bfa:	e32e      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c00:	e32b      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c02:	4b26      	ldr	r3, [pc, #152]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c0e:	d107      	bne.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c10:	f107 030c 	add.w	r3, r7, #12
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 fc93 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c1e:	e31c      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c24:	e319      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c26:	4b1d      	ldr	r3, [pc, #116]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c2e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c30:	4b1a      	ldr	r3, [pc, #104]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0304 	and.w	r3, r3, #4
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d10c      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d109      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c42:	4b16      	ldr	r3, [pc, #88]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	08db      	lsrs	r3, r3, #3
 8007c48:	f003 0303 	and.w	r3, r3, #3
 8007c4c:	4a14      	ldr	r2, [pc, #80]	; (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c54:	e01e      	b.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c56:	4b11      	ldr	r3, [pc, #68]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c62:	d106      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c6a:	d102      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c70:	e010      	b.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c72:	4b0a      	ldr	r3, [pc, #40]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c7e:	d106      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c86:	d102      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c88:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c8c:	e002      	b.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007c92:	e2e2      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c94:	e2e1      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c96:	4b05      	ldr	r3, [pc, #20]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007c98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c9a:	e2de      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c9c:	58024400 	.word	0x58024400
 8007ca0:	03d09000 	.word	0x03d09000
 8007ca4:	003d0900 	.word	0x003d0900
 8007ca8:	007a1200 	.word	0x007a1200
 8007cac:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cb4:	e2d1      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cba:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007cbe:	430b      	orrs	r3, r1
 8007cc0:	f040 809c 	bne.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007cc4:	4b93      	ldr	r3, [pc, #588]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007ccc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cd4:	d054      	beq.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cdc:	f200 808b 	bhi.w	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ce6:	f000 8083 	beq.w	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cf0:	f200 8081 	bhi.w	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cfa:	d02f      	beq.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d02:	d878      	bhi.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d004      	beq.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d10:	d012      	beq.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007d12:	e070      	b.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d14:	4b7f      	ldr	r3, [pc, #508]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d20:	d107      	bne.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 fd5e 	bl	80087e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d30:	e293      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d36:	e290      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d38:	4b76      	ldr	r3, [pc, #472]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d44:	d107      	bne.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d46:	f107 0318 	add.w	r3, r7, #24
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 faa4 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d54:	e281      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d5a:	e27e      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d5c:	4b6d      	ldr	r3, [pc, #436]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d68:	d107      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d6a:	f107 030c 	add.w	r3, r7, #12
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 fbe6 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d78:	e26f      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d7e:	e26c      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d80:	4b64      	ldr	r3, [pc, #400]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d88:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d8a:	4b62      	ldr	r3, [pc, #392]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0304 	and.w	r3, r3, #4
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d10c      	bne.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d109      	bne.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d9c:	4b5d      	ldr	r3, [pc, #372]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	08db      	lsrs	r3, r3, #3
 8007da2:	f003 0303 	and.w	r3, r3, #3
 8007da6:	4a5c      	ldr	r2, [pc, #368]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007da8:	fa22 f303 	lsr.w	r3, r2, r3
 8007dac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dae:	e01e      	b.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007db0:	4b58      	ldr	r3, [pc, #352]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbc:	d106      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dc4:	d102      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007dc6:	4b55      	ldr	r3, [pc, #340]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dca:	e010      	b.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dcc:	4b51      	ldr	r3, [pc, #324]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dd8:	d106      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007de0:	d102      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007de2:	4b4f      	ldr	r3, [pc, #316]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007de6:	e002      	b.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007dec:	e235      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007dee:	e234      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007df0:	4b4c      	ldr	r3, [pc, #304]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007df4:	e231      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dfa:	e22e      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007dfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e00:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007e04:	430b      	orrs	r3, r1
 8007e06:	f040 808f 	bne.w	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007e0a:	4b42      	ldr	r3, [pc, #264]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e0e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007e12:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e1a:	d06b      	beq.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e22:	d874      	bhi.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e2a:	d056      	beq.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e32:	d86c      	bhi.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e3a:	d03b      	beq.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e42:	d864      	bhi.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e4a:	d021      	beq.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e52:	d85c      	bhi.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d004      	beq.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e60:	d004      	beq.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007e62:	e054      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007e64:	f7fe fa20 	bl	80062a8 <HAL_RCC_GetPCLK1Freq>
 8007e68:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e6a:	e1f6      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e6c:	4b29      	ldr	r3, [pc, #164]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e78:	d107      	bne.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e7a:	f107 0318 	add.w	r3, r7, #24
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 fa0a 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e88:	e1e7      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e8e:	e1e4      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e90:	4b20      	ldr	r3, [pc, #128]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e9c:	d107      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e9e:	f107 030c 	add.w	r3, r7, #12
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 fb4c 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eac:	e1d5      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb2:	e1d2      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007eb4:	4b17      	ldr	r3, [pc, #92]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0304 	and.w	r3, r3, #4
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	d109      	bne.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ec0:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	08db      	lsrs	r3, r3, #3
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	4a13      	ldr	r2, [pc, #76]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ed2:	e1c2      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ed8:	e1bf      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007eda:	4b0e      	ldr	r3, [pc, #56]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ee6:	d102      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007ee8:	4b0c      	ldr	r3, [pc, #48]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eec:	e1b5      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ef2:	e1b2      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ef4:	4b07      	ldr	r3, [pc, #28]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007efc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f00:	d102      	bne.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007f02:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f06:	e1a8      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f0c:	e1a5      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f12:	e1a2      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f14:	58024400 	.word	0x58024400
 8007f18:	03d09000 	.word	0x03d09000
 8007f1c:	003d0900 	.word	0x003d0900
 8007f20:	007a1200 	.word	0x007a1200
 8007f24:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f2c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007f30:	430b      	orrs	r3, r1
 8007f32:	d173      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007f34:	4b9c      	ldr	r3, [pc, #624]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f3c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f44:	d02f      	beq.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f4c:	d863      	bhi.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d004      	beq.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f5a:	d012      	beq.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007f5c:	e05b      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f5e:	4b92      	ldr	r3, [pc, #584]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f6a:	d107      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f6c:	f107 0318 	add.w	r3, r7, #24
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 f991 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f7a:	e16e      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f80:	e16b      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f82:	4b89      	ldr	r3, [pc, #548]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f8e:	d107      	bne.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f90:	f107 030c 	add.w	r3, r7, #12
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 fad3 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f9e:	e15c      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fa4:	e159      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fa6:	4b80      	ldr	r3, [pc, #512]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007faa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fb0:	4b7d      	ldr	r3, [pc, #500]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d10c      	bne.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d109      	bne.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fc2:	4b79      	ldr	r3, [pc, #484]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	08db      	lsrs	r3, r3, #3
 8007fc8:	f003 0303 	and.w	r3, r3, #3
 8007fcc:	4a77      	ldr	r2, [pc, #476]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007fce:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fd4:	e01e      	b.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fd6:	4b74      	ldr	r3, [pc, #464]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fe2:	d106      	bne.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fea:	d102      	bne.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007fec:	4b70      	ldr	r3, [pc, #448]	; (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ff0:	e010      	b.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ff2:	4b6d      	ldr	r3, [pc, #436]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ffa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ffe:	d106      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008006:	d102      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008008:	4b6a      	ldr	r3, [pc, #424]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800800a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800800c:	e002      	b.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800800e:	2300      	movs	r3, #0
 8008010:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008012:	e122      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008014:	e121      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800801a:	e11e      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800801c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008020:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008024:	430b      	orrs	r3, r1
 8008026:	d133      	bne.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008028:	4b5f      	ldr	r3, [pc, #380]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800802a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008030:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008034:	2b00      	cmp	r3, #0
 8008036:	d004      	beq.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800803e:	d012      	beq.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008040:	e023      	b.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008042:	4b59      	ldr	r3, [pc, #356]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800804a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800804e:	d107      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008054:	4618      	mov	r0, r3
 8008056:	f000 fbc7 	bl	80087e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800805e:	e0fc      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008064:	e0f9      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008066:	4b50      	ldr	r3, [pc, #320]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800806e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008072:	d107      	bne.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008074:	f107 0318 	add.w	r3, r7, #24
 8008078:	4618      	mov	r0, r3
 800807a:	f000 f90d 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008082:	e0ea      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008088:	e0e7      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800808a:	2300      	movs	r3, #0
 800808c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800808e:	e0e4      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008094:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008098:	430b      	orrs	r3, r1
 800809a:	f040 808d 	bne.w	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800809e:	4b42      	ldr	r3, [pc, #264]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80080a6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080ae:	d06b      	beq.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080b6:	d874      	bhi.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080be:	d056      	beq.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80080c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c6:	d86c      	bhi.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80080c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080ce:	d03b      	beq.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080d6:	d864      	bhi.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80080d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080de:	d021      	beq.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80080e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080e6:	d85c      	bhi.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80080e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d004      	beq.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80080ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080f4:	d004      	beq.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80080f6:	e054      	b.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80080f8:	f000 f8b8 	bl	800826c <HAL_RCCEx_GetD3PCLK1Freq>
 80080fc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080fe:	e0ac      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008100:	4b29      	ldr	r3, [pc, #164]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800810c:	d107      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800810e:	f107 0318 	add.w	r3, r7, #24
 8008112:	4618      	mov	r0, r3
 8008114:	f000 f8c0 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800811c:	e09d      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008122:	e09a      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008124:	4b20      	ldr	r3, [pc, #128]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800812c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008130:	d107      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008132:	f107 030c 	add.w	r3, r7, #12
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fa02 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008140:	e08b      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008146:	e088      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008148:	4b17      	ldr	r3, [pc, #92]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b04      	cmp	r3, #4
 8008152:	d109      	bne.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008154:	4b14      	ldr	r3, [pc, #80]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	08db      	lsrs	r3, r3, #3
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	4a13      	ldr	r2, [pc, #76]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008160:	fa22 f303 	lsr.w	r3, r2, r3
 8008164:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008166:	e078      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800816c:	e075      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800816e:	4b0e      	ldr	r3, [pc, #56]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800817a:	d102      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800817c:	4b0c      	ldr	r3, [pc, #48]	; (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800817e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008180:	e06b      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008182:	2300      	movs	r3, #0
 8008184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008186:	e068      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008188:	4b07      	ldr	r3, [pc, #28]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008190:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008194:	d102      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008196:	4b07      	ldr	r3, [pc, #28]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008198:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800819a:	e05e      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081a0:	e05b      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80081a2:	2300      	movs	r3, #0
 80081a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081a6:	e058      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081a8:	58024400 	.word	0x58024400
 80081ac:	03d09000 	.word	0x03d09000
 80081b0:	003d0900 	.word	0x003d0900
 80081b4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80081b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081bc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80081c0:	430b      	orrs	r3, r1
 80081c2:	d148      	bne.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80081c4:	4b27      	ldr	r3, [pc, #156]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80081c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d4:	d02a      	beq.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80081d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081dc:	d838      	bhi.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80081de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d004      	beq.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80081e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081ea:	d00d      	beq.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80081ec:	e030      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80081ee:	4b1d      	ldr	r3, [pc, #116]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081fa:	d102      	bne.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80081fc:	4b1a      	ldr	r3, [pc, #104]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80081fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008200:	e02b      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008202:	2300      	movs	r3, #0
 8008204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008206:	e028      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008208:	4b16      	ldr	r3, [pc, #88]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008210:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008214:	d107      	bne.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800821a:	4618      	mov	r0, r3
 800821c:	f000 fae4 	bl	80087e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008224:	e019      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800822a:	e016      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800822c:	4b0d      	ldr	r3, [pc, #52]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008238:	d107      	bne.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800823a:	f107 0318 	add.w	r3, r7, #24
 800823e:	4618      	mov	r0, r3
 8008240:	f000 f82a 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008248:	e007      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800824e:	e004      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008250:	2300      	movs	r3, #0
 8008252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008254:	e001      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800825a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800825c:	4618      	mov	r0, r3
 800825e:	3740      	adds	r7, #64	; 0x40
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	58024400 	.word	0x58024400
 8008268:	007a1200 	.word	0x007a1200

0800826c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008270:	f7fd ffea 	bl	8006248 <HAL_RCC_GetHCLKFreq>
 8008274:	4602      	mov	r2, r0
 8008276:	4b06      	ldr	r3, [pc, #24]	; (8008290 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	091b      	lsrs	r3, r3, #4
 800827c:	f003 0307 	and.w	r3, r3, #7
 8008280:	4904      	ldr	r1, [pc, #16]	; (8008294 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008282:	5ccb      	ldrb	r3, [r1, r3]
 8008284:	f003 031f 	and.w	r3, r3, #31
 8008288:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800828c:	4618      	mov	r0, r3
 800828e:	bd80      	pop	{r7, pc}
 8008290:	58024400 	.word	0x58024400
 8008294:	0800cffc 	.word	0x0800cffc

08008298 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008298:	b480      	push	{r7}
 800829a:	b089      	sub	sp, #36	; 0x24
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082a0:	4ba1      	ldr	r3, [pc, #644]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a4:	f003 0303 	and.w	r3, r3, #3
 80082a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80082aa:	4b9f      	ldr	r3, [pc, #636]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ae:	0b1b      	lsrs	r3, r3, #12
 80082b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80082b6:	4b9c      	ldr	r3, [pc, #624]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ba:	091b      	lsrs	r3, r3, #4
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80082c2:	4b99      	ldr	r3, [pc, #612]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c6:	08db      	lsrs	r3, r3, #3
 80082c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	fb02 f303 	mul.w	r3, r2, r3
 80082d2:	ee07 3a90 	vmov	s15, r3
 80082d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 8111 	beq.w	8008508 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	f000 8083 	beq.w	80083f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	f200 80a1 	bhi.w	8008438 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d056      	beq.n	80083b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008302:	e099      	b.n	8008438 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008304:	4b88      	ldr	r3, [pc, #544]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b00      	cmp	r3, #0
 800830e:	d02d      	beq.n	800836c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008310:	4b85      	ldr	r3, [pc, #532]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	08db      	lsrs	r3, r3, #3
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	4a84      	ldr	r2, [pc, #528]	; (800852c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800831c:	fa22 f303 	lsr.w	r3, r2, r3
 8008320:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	ee07 3a90 	vmov	s15, r3
 8008328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800833a:	4b7b      	ldr	r3, [pc, #492]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800833c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008342:	ee07 3a90 	vmov	s15, r3
 8008346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800834a:	ed97 6a03 	vldr	s12, [r7, #12]
 800834e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800835a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800835e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008366:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800836a:	e087      	b.n	800847c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	ee07 3a90 	vmov	s15, r3
 8008372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008376:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800837a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800837e:	4b6a      	ldr	r3, [pc, #424]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008386:	ee07 3a90 	vmov	s15, r3
 800838a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800838e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008392:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800839a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800839e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083ae:	e065      	b.n	800847c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	ee07 3a90 	vmov	s15, r3
 80083b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008538 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083c2:	4b59      	ldr	r3, [pc, #356]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ca:	ee07 3a90 	vmov	s15, r3
 80083ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083f2:	e043      	b.n	800847c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800853c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008406:	4b48      	ldr	r3, [pc, #288]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008416:	ed97 6a03 	vldr	s12, [r7, #12]
 800841a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800841e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800842a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800842e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008436:	e021      	b.n	800847c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008442:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008538 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844a:	4b37      	ldr	r3, [pc, #220]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800844c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845a:	ed97 6a03 	vldr	s12, [r7, #12]
 800845e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800846e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800847a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800847c:	4b2a      	ldr	r3, [pc, #168]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	0a5b      	lsrs	r3, r3, #9
 8008482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008496:	edd7 6a07 	vldr	s13, [r7, #28]
 800849a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800849e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a2:	ee17 2a90 	vmov	r2, s15
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80084aa:	4b1f      	ldr	r3, [pc, #124]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ae:	0c1b      	lsrs	r3, r3, #16
 80084b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b4:	ee07 3a90 	vmov	s15, r3
 80084b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80084c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084d0:	ee17 2a90 	vmov	r2, s15
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80084d8:	4b13      	ldr	r3, [pc, #76]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	0e1b      	lsrs	r3, r3, #24
 80084de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e2:	ee07 3a90 	vmov	s15, r3
 80084e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80084f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084fe:	ee17 2a90 	vmov	r2, s15
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008506:	e008      	b.n	800851a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	609a      	str	r2, [r3, #8]
}
 800851a:	bf00      	nop
 800851c:	3724      	adds	r7, #36	; 0x24
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	58024400 	.word	0x58024400
 800852c:	03d09000 	.word	0x03d09000
 8008530:	46000000 	.word	0x46000000
 8008534:	4c742400 	.word	0x4c742400
 8008538:	4a742400 	.word	0x4a742400
 800853c:	4af42400 	.word	0x4af42400

08008540 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008540:	b480      	push	{r7}
 8008542:	b089      	sub	sp, #36	; 0x24
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008548:	4ba1      	ldr	r3, [pc, #644]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800854a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854c:	f003 0303 	and.w	r3, r3, #3
 8008550:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008552:	4b9f      	ldr	r3, [pc, #636]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008556:	0d1b      	lsrs	r3, r3, #20
 8008558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800855c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800855e:	4b9c      	ldr	r3, [pc, #624]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008562:	0a1b      	lsrs	r3, r3, #8
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800856a:	4b99      	ldr	r3, [pc, #612]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800856c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800856e:	08db      	lsrs	r3, r3, #3
 8008570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	fb02 f303 	mul.w	r3, r2, r3
 800857a:	ee07 3a90 	vmov	s15, r3
 800857e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008582:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8111 	beq.w	80087b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	2b02      	cmp	r3, #2
 8008592:	f000 8083 	beq.w	800869c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	2b02      	cmp	r3, #2
 800859a:	f200 80a1 	bhi.w	80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d056      	beq.n	8008658 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80085aa:	e099      	b.n	80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085ac:	4b88      	ldr	r3, [pc, #544]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0320 	and.w	r3, r3, #32
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d02d      	beq.n	8008614 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085b8:	4b85      	ldr	r3, [pc, #532]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	08db      	lsrs	r3, r3, #3
 80085be:	f003 0303 	and.w	r3, r3, #3
 80085c2:	4a84      	ldr	r2, [pc, #528]	; (80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80085c4:	fa22 f303 	lsr.w	r3, r2, r3
 80085c8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	ee07 3a90 	vmov	s15, r3
 80085d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	ee07 3a90 	vmov	s15, r3
 80085da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e2:	4b7b      	ldr	r3, [pc, #492]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ea:	ee07 3a90 	vmov	s15, r3
 80085ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80085f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80087d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800860a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800860e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008612:	e087      	b.n	8008724 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	ee07 3a90 	vmov	s15, r3
 800861a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800861e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008626:	4b6a      	ldr	r3, [pc, #424]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800862e:	ee07 3a90 	vmov	s15, r3
 8008632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008636:	ed97 6a03 	vldr	s12, [r7, #12]
 800863a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80087d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800863e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800864a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800864e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008656:	e065      	b.n	8008724 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	ee07 3a90 	vmov	s15, r3
 800865e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008662:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80087e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800866a:	4b59      	ldr	r3, [pc, #356]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008672:	ee07 3a90 	vmov	s15, r3
 8008676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800867a:	ed97 6a03 	vldr	s12, [r7, #12]
 800867e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80087d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800868a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800868e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800869a:	e043      	b.n	8008724 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	ee07 3a90 	vmov	s15, r3
 80086a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80087e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80086aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ae:	4b48      	ldr	r3, [pc, #288]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b6:	ee07 3a90 	vmov	s15, r3
 80086ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086be:	ed97 6a03 	vldr	s12, [r7, #12]
 80086c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80087d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086de:	e021      	b.n	8008724 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	ee07 3a90 	vmov	s15, r3
 80086e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80087e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086f2:	4b37      	ldr	r3, [pc, #220]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086fa:	ee07 3a90 	vmov	s15, r3
 80086fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008702:	ed97 6a03 	vldr	s12, [r7, #12]
 8008706:	eddf 5a34 	vldr	s11, [pc, #208]	; 80087d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800870a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800870e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800871a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800871e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008722:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008724:	4b2a      	ldr	r3, [pc, #168]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008728:	0a5b      	lsrs	r3, r3, #9
 800872a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008736:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800873a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800873e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800874a:	ee17 2a90 	vmov	r2, s15
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008752:	4b1f      	ldr	r3, [pc, #124]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008756:	0c1b      	lsrs	r3, r3, #16
 8008758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800875c:	ee07 3a90 	vmov	s15, r3
 8008760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008764:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800876c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008778:	ee17 2a90 	vmov	r2, s15
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008780:	4b13      	ldr	r3, [pc, #76]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008784:	0e1b      	lsrs	r3, r3, #24
 8008786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800879a:	edd7 6a07 	vldr	s13, [r7, #28]
 800879e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087a6:	ee17 2a90 	vmov	r2, s15
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80087ae:	e008      	b.n	80087c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	609a      	str	r2, [r3, #8]
}
 80087c2:	bf00      	nop
 80087c4:	3724      	adds	r7, #36	; 0x24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	58024400 	.word	0x58024400
 80087d4:	03d09000 	.word	0x03d09000
 80087d8:	46000000 	.word	0x46000000
 80087dc:	4c742400 	.word	0x4c742400
 80087e0:	4a742400 	.word	0x4a742400
 80087e4:	4af42400 	.word	0x4af42400

080087e8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b089      	sub	sp, #36	; 0x24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087f0:	4ba0      	ldr	r3, [pc, #640]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80087fa:	4b9e      	ldr	r3, [pc, #632]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fe:	091b      	lsrs	r3, r3, #4
 8008800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008804:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008806:	4b9b      	ldr	r3, [pc, #620]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008810:	4b98      	ldr	r3, [pc, #608]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008814:	08db      	lsrs	r3, r3, #3
 8008816:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	fb02 f303 	mul.w	r3, r2, r3
 8008820:	ee07 3a90 	vmov	s15, r3
 8008824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008828:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 8111 	beq.w	8008a56 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	2b02      	cmp	r3, #2
 8008838:	f000 8083 	beq.w	8008942 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	2b02      	cmp	r3, #2
 8008840:	f200 80a1 	bhi.w	8008986 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d056      	beq.n	80088fe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008850:	e099      	b.n	8008986 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008852:	4b88      	ldr	r3, [pc, #544]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0320 	and.w	r3, r3, #32
 800885a:	2b00      	cmp	r3, #0
 800885c:	d02d      	beq.n	80088ba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800885e:	4b85      	ldr	r3, [pc, #532]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	08db      	lsrs	r3, r3, #3
 8008864:	f003 0303 	and.w	r3, r3, #3
 8008868:	4a83      	ldr	r2, [pc, #524]	; (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800886a:	fa22 f303 	lsr.w	r3, r2, r3
 800886e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	ee07 3a90 	vmov	s15, r3
 8008880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008884:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008888:	4b7a      	ldr	r3, [pc, #488]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800888a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008890:	ee07 3a90 	vmov	s15, r3
 8008894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008898:	ed97 6a03 	vldr	s12, [r7, #12]
 800889c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008a7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80088b8:	e087      	b.n	80089ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	ee07 3a90 	vmov	s15, r3
 80088c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008a80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80088c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088cc:	4b69      	ldr	r3, [pc, #420]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d4:	ee07 3a90 	vmov	s15, r3
 80088d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80088e0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008a7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088fc:	e065      	b.n	80089ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	ee07 3a90 	vmov	s15, r3
 8008904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008908:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008a84 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800890c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008910:	4b58      	ldr	r3, [pc, #352]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008918:	ee07 3a90 	vmov	s15, r3
 800891c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008920:	ed97 6a03 	vldr	s12, [r7, #12]
 8008924:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008a7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800892c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800893c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008940:	e043      	b.n	80089ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	ee07 3a90 	vmov	s15, r3
 8008948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008a88 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008954:	4b47      	ldr	r3, [pc, #284]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895c:	ee07 3a90 	vmov	s15, r3
 8008960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008964:	ed97 6a03 	vldr	s12, [r7, #12]
 8008968:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008a7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800896c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800897c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008980:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008984:	e021      	b.n	80089ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	ee07 3a90 	vmov	s15, r3
 800898c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008990:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008a80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008998:	4b36      	ldr	r3, [pc, #216]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a0:	ee07 3a90 	vmov	s15, r3
 80089a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ac:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008a7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089c8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80089ca:	4b2a      	ldr	r3, [pc, #168]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ce:	0a5b      	lsrs	r3, r3, #9
 80089d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d4:	ee07 3a90 	vmov	s15, r3
 80089d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089f0:	ee17 2a90 	vmov	r2, s15
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80089f8:	4b1e      	ldr	r3, [pc, #120]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fc:	0c1b      	lsrs	r3, r3, #16
 80089fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a02:	ee07 3a90 	vmov	s15, r3
 8008a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a12:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a1e:	ee17 2a90 	vmov	r2, s15
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008a26:	4b13      	ldr	r3, [pc, #76]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2a:	0e1b      	lsrs	r3, r3, #24
 8008a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a30:	ee07 3a90 	vmov	s15, r3
 8008a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a40:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a4c:	ee17 2a90 	vmov	r2, s15
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008a54:	e008      	b.n	8008a68 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	609a      	str	r2, [r3, #8]
}
 8008a68:	bf00      	nop
 8008a6a:	3724      	adds	r7, #36	; 0x24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr
 8008a74:	58024400 	.word	0x58024400
 8008a78:	03d09000 	.word	0x03d09000
 8008a7c:	46000000 	.word	0x46000000
 8008a80:	4c742400 	.word	0x4c742400
 8008a84:	4a742400 	.word	0x4a742400
 8008a88:	4af42400 	.word	0x4af42400

08008a8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a9a:	4b53      	ldr	r3, [pc, #332]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9e:	f003 0303 	and.w	r3, r3, #3
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d101      	bne.n	8008aaa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e099      	b.n	8008bde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008aaa:	4b4f      	ldr	r3, [pc, #316]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a4e      	ldr	r2, [pc, #312]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008ab0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ab6:	f7f8 fabb 	bl	8001030 <HAL_GetTick>
 8008aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008abc:	e008      	b.n	8008ad0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008abe:	f7f8 fab7 	bl	8001030 <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d901      	bls.n	8008ad0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e086      	b.n	8008bde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ad0:	4b45      	ldr	r3, [pc, #276]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1f0      	bne.n	8008abe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008adc:	4b42      	ldr	r3, [pc, #264]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	031b      	lsls	r3, r3, #12
 8008aea:	493f      	ldr	r1, [pc, #252]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	628b      	str	r3, [r1, #40]	; 0x28
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	025b      	lsls	r3, r3, #9
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	431a      	orrs	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	041b      	lsls	r3, r3, #16
 8008b0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b12:	431a      	orrs	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	061b      	lsls	r3, r3, #24
 8008b1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b20:	4931      	ldr	r1, [pc, #196]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b26:	4b30      	ldr	r3, [pc, #192]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	492d      	ldr	r1, [pc, #180]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b38:	4b2b      	ldr	r3, [pc, #172]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3c:	f023 0220 	bic.w	r2, r3, #32
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	4928      	ldr	r1, [pc, #160]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b4a:	4b27      	ldr	r3, [pc, #156]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4e:	4a26      	ldr	r2, [pc, #152]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b50:	f023 0310 	bic.w	r3, r3, #16
 8008b54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b56:	4b24      	ldr	r3, [pc, #144]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b5a:	4b24      	ldr	r3, [pc, #144]	; (8008bec <RCCEx_PLL2_Config+0x160>)
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	69d2      	ldr	r2, [r2, #28]
 8008b62:	00d2      	lsls	r2, r2, #3
 8008b64:	4920      	ldr	r1, [pc, #128]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b6a:	4b1f      	ldr	r3, [pc, #124]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6e:	4a1e      	ldr	r2, [pc, #120]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b70:	f043 0310 	orr.w	r3, r3, #16
 8008b74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d106      	bne.n	8008b8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b7c:	4b1a      	ldr	r3, [pc, #104]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b80:	4a19      	ldr	r2, [pc, #100]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b88:	e00f      	b.n	8008baa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d106      	bne.n	8008b9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b90:	4b15      	ldr	r3, [pc, #84]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b94:	4a14      	ldr	r2, [pc, #80]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b9c:	e005      	b.n	8008baa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b9e:	4b12      	ldr	r3, [pc, #72]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba2:	4a11      	ldr	r2, [pc, #68]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008ba4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ba8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008baa:	4b0f      	ldr	r3, [pc, #60]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a0e      	ldr	r2, [pc, #56]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008bb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bb6:	f7f8 fa3b 	bl	8001030 <HAL_GetTick>
 8008bba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bbc:	e008      	b.n	8008bd0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008bbe:	f7f8 fa37 	bl	8001030 <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d901      	bls.n	8008bd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e006      	b.n	8008bde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bd0:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0f0      	beq.n	8008bbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	58024400 	.word	0x58024400
 8008bec:	ffff0007 	.word	0xffff0007

08008bf0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bfe:	4b53      	ldr	r3, [pc, #332]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c02:	f003 0303 	and.w	r3, r3, #3
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d101      	bne.n	8008c0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e099      	b.n	8008d42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c0e:	4b4f      	ldr	r3, [pc, #316]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a4e      	ldr	r2, [pc, #312]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c1a:	f7f8 fa09 	bl	8001030 <HAL_GetTick>
 8008c1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c20:	e008      	b.n	8008c34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c22:	f7f8 fa05 	bl	8001030 <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d901      	bls.n	8008c34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e086      	b.n	8008d42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c34:	4b45      	ldr	r3, [pc, #276]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1f0      	bne.n	8008c22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c40:	4b42      	ldr	r3, [pc, #264]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	051b      	lsls	r3, r3, #20
 8008c4e:	493f      	ldr	r1, [pc, #252]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c50:	4313      	orrs	r3, r2
 8008c52:	628b      	str	r3, [r1, #40]	; 0x28
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	3b01      	subs	r3, #1
 8008c64:	025b      	lsls	r3, r3, #9
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	041b      	lsls	r3, r3, #16
 8008c72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c76:	431a      	orrs	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	061b      	lsls	r3, r3, #24
 8008c80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c84:	4931      	ldr	r1, [pc, #196]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c86:	4313      	orrs	r3, r2
 8008c88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c8a:	4b30      	ldr	r3, [pc, #192]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	492d      	ldr	r1, [pc, #180]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c9c:	4b2b      	ldr	r3, [pc, #172]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	4928      	ldr	r1, [pc, #160]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008cae:	4b27      	ldr	r3, [pc, #156]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb2:	4a26      	ldr	r2, [pc, #152]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008cba:	4b24      	ldr	r3, [pc, #144]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cbe:	4b24      	ldr	r3, [pc, #144]	; (8008d50 <RCCEx_PLL3_Config+0x160>)
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	69d2      	ldr	r2, [r2, #28]
 8008cc6:	00d2      	lsls	r2, r2, #3
 8008cc8:	4920      	ldr	r1, [pc, #128]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008cce:	4b1f      	ldr	r3, [pc, #124]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd2:	4a1e      	ldr	r2, [pc, #120]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d106      	bne.n	8008cee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008ce0:	4b1a      	ldr	r3, [pc, #104]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce4:	4a19      	ldr	r2, [pc, #100]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008ce6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008cea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cec:	e00f      	b.n	8008d0e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d106      	bne.n	8008d02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008cf4:	4b15      	ldr	r3, [pc, #84]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	4a14      	ldr	r2, [pc, #80]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008cfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d00:	e005      	b.n	8008d0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d02:	4b12      	ldr	r3, [pc, #72]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d06:	4a11      	ldr	r2, [pc, #68]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008d08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a0e      	ldr	r2, [pc, #56]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d1a:	f7f8 f989 	bl	8001030 <HAL_GetTick>
 8008d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d20:	e008      	b.n	8008d34 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d22:	f7f8 f985 	bl	8001030 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d901      	bls.n	8008d34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e006      	b.n	8008d42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d34:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0f0      	beq.n	8008d22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	58024400 	.word	0x58024400
 8008d50:	ffff0007 	.word	0xffff0007

08008d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e049      	b.n	8008dfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d106      	bne.n	8008d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7f8 f872 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2202      	movs	r2, #2
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	3304      	adds	r3, #4
 8008d90:	4619      	mov	r1, r3
 8008d92:	4610      	mov	r0, r2
 8008d94:	f000 fc62 	bl	800965c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
	...

08008e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d001      	beq.n	8008e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e054      	b.n	8008ec6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68da      	ldr	r2, [r3, #12]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f042 0201 	orr.w	r2, r2, #1
 8008e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a26      	ldr	r2, [pc, #152]	; (8008ed4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d022      	beq.n	8008e84 <HAL_TIM_Base_Start_IT+0x80>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e46:	d01d      	beq.n	8008e84 <HAL_TIM_Base_Start_IT+0x80>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a22      	ldr	r2, [pc, #136]	; (8008ed8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d018      	beq.n	8008e84 <HAL_TIM_Base_Start_IT+0x80>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a21      	ldr	r2, [pc, #132]	; (8008edc <HAL_TIM_Base_Start_IT+0xd8>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d013      	beq.n	8008e84 <HAL_TIM_Base_Start_IT+0x80>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a1f      	ldr	r2, [pc, #124]	; (8008ee0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d00e      	beq.n	8008e84 <HAL_TIM_Base_Start_IT+0x80>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a1e      	ldr	r2, [pc, #120]	; (8008ee4 <HAL_TIM_Base_Start_IT+0xe0>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d009      	beq.n	8008e84 <HAL_TIM_Base_Start_IT+0x80>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a1c      	ldr	r2, [pc, #112]	; (8008ee8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d004      	beq.n	8008e84 <HAL_TIM_Base_Start_IT+0x80>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a1b      	ldr	r2, [pc, #108]	; (8008eec <HAL_TIM_Base_Start_IT+0xe8>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d115      	bne.n	8008eb0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689a      	ldr	r2, [r3, #8]
 8008e8a:	4b19      	ldr	r3, [pc, #100]	; (8008ef0 <HAL_TIM_Base_Start_IT+0xec>)
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2b06      	cmp	r3, #6
 8008e94:	d015      	beq.n	8008ec2 <HAL_TIM_Base_Start_IT+0xbe>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e9c:	d011      	beq.n	8008ec2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f042 0201 	orr.w	r2, r2, #1
 8008eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eae:	e008      	b.n	8008ec2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f042 0201 	orr.w	r2, r2, #1
 8008ebe:	601a      	str	r2, [r3, #0]
 8008ec0:	e000      	b.n	8008ec4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ec2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	40010000 	.word	0x40010000
 8008ed8:	40000400 	.word	0x40000400
 8008edc:	40000800 	.word	0x40000800
 8008ee0:	40000c00 	.word	0x40000c00
 8008ee4:	40010400 	.word	0x40010400
 8008ee8:	40001800 	.word	0x40001800
 8008eec:	40014000 	.word	0x40014000
 8008ef0:	00010007 	.word	0x00010007

08008ef4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e049      	b.n	8008f9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d106      	bne.n	8008f20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f841 	bl	8008fa2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	3304      	adds	r3, #4
 8008f30:	4619      	mov	r1, r3
 8008f32:	4610      	mov	r0, r2
 8008f34:	f000 fb92 	bl	800965c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b083      	sub	sp, #12
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008faa:	bf00      	nop
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b082      	sub	sp, #8
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	f003 0302 	and.w	r3, r3, #2
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d122      	bne.n	8009012 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	f003 0302 	and.w	r3, r3, #2
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d11b      	bne.n	8009012 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f06f 0202 	mvn.w	r2, #2
 8008fe2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	f003 0303 	and.w	r3, r3, #3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d003      	beq.n	8009000 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 fb11 	bl	8009620 <HAL_TIM_IC_CaptureCallback>
 8008ffe:	e005      	b.n	800900c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fb03 	bl	800960c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fb14 	bl	8009634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	f003 0304 	and.w	r3, r3, #4
 800901c:	2b04      	cmp	r3, #4
 800901e:	d122      	bne.n	8009066 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	f003 0304 	and.w	r3, r3, #4
 800902a:	2b04      	cmp	r3, #4
 800902c:	d11b      	bne.n	8009066 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f06f 0204 	mvn.w	r2, #4
 8009036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fae7 	bl	8009620 <HAL_TIM_IC_CaptureCallback>
 8009052:	e005      	b.n	8009060 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fad9 	bl	800960c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 faea 	bl	8009634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	f003 0308 	and.w	r3, r3, #8
 8009070:	2b08      	cmp	r3, #8
 8009072:	d122      	bne.n	80090ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	f003 0308 	and.w	r3, r3, #8
 800907e:	2b08      	cmp	r3, #8
 8009080:	d11b      	bne.n	80090ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f06f 0208 	mvn.w	r2, #8
 800908a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2204      	movs	r2, #4
 8009090:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	f003 0303 	and.w	r3, r3, #3
 800909c:	2b00      	cmp	r3, #0
 800909e:	d003      	beq.n	80090a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fabd 	bl	8009620 <HAL_TIM_IC_CaptureCallback>
 80090a6:	e005      	b.n	80090b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 faaf 	bl	800960c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fac0 	bl	8009634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	f003 0310 	and.w	r3, r3, #16
 80090c4:	2b10      	cmp	r3, #16
 80090c6:	d122      	bne.n	800910e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f003 0310 	and.w	r3, r3, #16
 80090d2:	2b10      	cmp	r3, #16
 80090d4:	d11b      	bne.n	800910e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f06f 0210 	mvn.w	r2, #16
 80090de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2208      	movs	r2, #8
 80090e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	69db      	ldr	r3, [r3, #28]
 80090ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d003      	beq.n	80090fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fa93 	bl	8009620 <HAL_TIM_IC_CaptureCallback>
 80090fa:	e005      	b.n	8009108 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fa85 	bl	800960c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fa96 	bl	8009634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	f003 0301 	and.w	r3, r3, #1
 8009118:	2b01      	cmp	r3, #1
 800911a:	d10e      	bne.n	800913a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	f003 0301 	and.w	r3, r3, #1
 8009126:	2b01      	cmp	r3, #1
 8009128:	d107      	bne.n	800913a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f06f 0201 	mvn.w	r2, #1
 8009132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7f7 fc5b 	bl	80009f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009144:	2b80      	cmp	r3, #128	; 0x80
 8009146:	d10e      	bne.n	8009166 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009152:	2b80      	cmp	r3, #128	; 0x80
 8009154:	d107      	bne.n	8009166 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800915e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 ff9f 	bl	800a0a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009174:	d10e      	bne.n	8009194 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009180:	2b80      	cmp	r3, #128	; 0x80
 8009182:	d107      	bne.n	8009194 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800918c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 ff92 	bl	800a0b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800919e:	2b40      	cmp	r3, #64	; 0x40
 80091a0:	d10e      	bne.n	80091c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ac:	2b40      	cmp	r3, #64	; 0x40
 80091ae:	d107      	bne.n	80091c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa44 	bl	8009648 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	f003 0320 	and.w	r3, r3, #32
 80091ca:	2b20      	cmp	r3, #32
 80091cc:	d10e      	bne.n	80091ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	f003 0320 	and.w	r3, r3, #32
 80091d8:	2b20      	cmp	r3, #32
 80091da:	d107      	bne.n	80091ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f06f 0220 	mvn.w	r2, #32
 80091e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 ff52 	bl	800a090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091ec:	bf00      	nop
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800920a:	2b01      	cmp	r3, #1
 800920c:	d101      	bne.n	8009212 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800920e:	2302      	movs	r3, #2
 8009210:	e0ff      	b.n	8009412 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b14      	cmp	r3, #20
 800921e:	f200 80f0 	bhi.w	8009402 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009222:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009228:	0800927d 	.word	0x0800927d
 800922c:	08009403 	.word	0x08009403
 8009230:	08009403 	.word	0x08009403
 8009234:	08009403 	.word	0x08009403
 8009238:	080092bd 	.word	0x080092bd
 800923c:	08009403 	.word	0x08009403
 8009240:	08009403 	.word	0x08009403
 8009244:	08009403 	.word	0x08009403
 8009248:	080092ff 	.word	0x080092ff
 800924c:	08009403 	.word	0x08009403
 8009250:	08009403 	.word	0x08009403
 8009254:	08009403 	.word	0x08009403
 8009258:	0800933f 	.word	0x0800933f
 800925c:	08009403 	.word	0x08009403
 8009260:	08009403 	.word	0x08009403
 8009264:	08009403 	.word	0x08009403
 8009268:	08009381 	.word	0x08009381
 800926c:	08009403 	.word	0x08009403
 8009270:	08009403 	.word	0x08009403
 8009274:	08009403 	.word	0x08009403
 8009278:	080093c1 	.word	0x080093c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68b9      	ldr	r1, [r7, #8]
 8009282:	4618      	mov	r0, r3
 8009284:	f000 fa84 	bl	8009790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	699a      	ldr	r2, [r3, #24]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f042 0208 	orr.w	r2, r2, #8
 8009296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	699a      	ldr	r2, [r3, #24]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f022 0204 	bic.w	r2, r2, #4
 80092a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6999      	ldr	r1, [r3, #24]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	691a      	ldr	r2, [r3, #16]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	619a      	str	r2, [r3, #24]
      break;
 80092ba:	e0a5      	b.n	8009408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68b9      	ldr	r1, [r7, #8]
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 faf4 	bl	80098b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	699a      	ldr	r2, [r3, #24]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699a      	ldr	r2, [r3, #24]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6999      	ldr	r1, [r3, #24]
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	021a      	lsls	r2, r3, #8
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	430a      	orrs	r2, r1
 80092fa:	619a      	str	r2, [r3, #24]
      break;
 80092fc:	e084      	b.n	8009408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68b9      	ldr	r1, [r7, #8]
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fb5d 	bl	80099c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	69da      	ldr	r2, [r3, #28]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f042 0208 	orr.w	r2, r2, #8
 8009318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	69da      	ldr	r2, [r3, #28]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f022 0204 	bic.w	r2, r2, #4
 8009328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	69d9      	ldr	r1, [r3, #28]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	691a      	ldr	r2, [r3, #16]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	61da      	str	r2, [r3, #28]
      break;
 800933c:	e064      	b.n	8009408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68b9      	ldr	r1, [r7, #8]
 8009344:	4618      	mov	r0, r3
 8009346:	f000 fbc5 	bl	8009ad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	69da      	ldr	r2, [r3, #28]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	69da      	ldr	r2, [r3, #28]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	69d9      	ldr	r1, [r3, #28]
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	021a      	lsls	r2, r3, #8
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	61da      	str	r2, [r3, #28]
      break;
 800937e:	e043      	b.n	8009408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68b9      	ldr	r1, [r7, #8]
 8009386:	4618      	mov	r0, r3
 8009388:	f000 fc0e 	bl	8009ba8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f042 0208 	orr.w	r2, r2, #8
 800939a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 0204 	bic.w	r2, r2, #4
 80093aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	691a      	ldr	r2, [r3, #16]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093be:	e023      	b.n	8009408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68b9      	ldr	r1, [r7, #8]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 fc52 	bl	8009c70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	021a      	lsls	r2, r3, #8
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	430a      	orrs	r2, r1
 80093fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009400:	e002      	b.n	8009408 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	75fb      	strb	r3, [r7, #23]
      break;
 8009406:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009410:	7dfb      	ldrb	r3, [r7, #23]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop

0800941c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009426:	2300      	movs	r3, #0
 8009428:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009430:	2b01      	cmp	r3, #1
 8009432:	d101      	bne.n	8009438 <HAL_TIM_ConfigClockSource+0x1c>
 8009434:	2302      	movs	r3, #2
 8009436:	e0dc      	b.n	80095f2 <HAL_TIM_ConfigClockSource+0x1d6>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2202      	movs	r2, #2
 8009444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	4b6a      	ldr	r3, [pc, #424]	; (80095fc <HAL_TIM_ConfigClockSource+0x1e0>)
 8009454:	4013      	ands	r3, r2
 8009456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800945e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a64      	ldr	r2, [pc, #400]	; (8009600 <HAL_TIM_ConfigClockSource+0x1e4>)
 800946e:	4293      	cmp	r3, r2
 8009470:	f000 80a9 	beq.w	80095c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009474:	4a62      	ldr	r2, [pc, #392]	; (8009600 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009476:	4293      	cmp	r3, r2
 8009478:	f200 80ae 	bhi.w	80095d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800947c:	4a61      	ldr	r2, [pc, #388]	; (8009604 <HAL_TIM_ConfigClockSource+0x1e8>)
 800947e:	4293      	cmp	r3, r2
 8009480:	f000 80a1 	beq.w	80095c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009484:	4a5f      	ldr	r2, [pc, #380]	; (8009604 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009486:	4293      	cmp	r3, r2
 8009488:	f200 80a6 	bhi.w	80095d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800948c:	4a5e      	ldr	r2, [pc, #376]	; (8009608 <HAL_TIM_ConfigClockSource+0x1ec>)
 800948e:	4293      	cmp	r3, r2
 8009490:	f000 8099 	beq.w	80095c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009494:	4a5c      	ldr	r2, [pc, #368]	; (8009608 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009496:	4293      	cmp	r3, r2
 8009498:	f200 809e 	bhi.w	80095d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800949c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80094a0:	f000 8091 	beq.w	80095c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80094a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80094a8:	f200 8096 	bhi.w	80095d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80094ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094b0:	f000 8089 	beq.w	80095c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80094b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094b8:	f200 808e 	bhi.w	80095d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80094bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094c0:	d03e      	beq.n	8009540 <HAL_TIM_ConfigClockSource+0x124>
 80094c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094c6:	f200 8087 	bhi.w	80095d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80094ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ce:	f000 8086 	beq.w	80095de <HAL_TIM_ConfigClockSource+0x1c2>
 80094d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094d6:	d87f      	bhi.n	80095d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80094d8:	2b70      	cmp	r3, #112	; 0x70
 80094da:	d01a      	beq.n	8009512 <HAL_TIM_ConfigClockSource+0xf6>
 80094dc:	2b70      	cmp	r3, #112	; 0x70
 80094de:	d87b      	bhi.n	80095d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80094e0:	2b60      	cmp	r3, #96	; 0x60
 80094e2:	d050      	beq.n	8009586 <HAL_TIM_ConfigClockSource+0x16a>
 80094e4:	2b60      	cmp	r3, #96	; 0x60
 80094e6:	d877      	bhi.n	80095d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80094e8:	2b50      	cmp	r3, #80	; 0x50
 80094ea:	d03c      	beq.n	8009566 <HAL_TIM_ConfigClockSource+0x14a>
 80094ec:	2b50      	cmp	r3, #80	; 0x50
 80094ee:	d873      	bhi.n	80095d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80094f0:	2b40      	cmp	r3, #64	; 0x40
 80094f2:	d058      	beq.n	80095a6 <HAL_TIM_ConfigClockSource+0x18a>
 80094f4:	2b40      	cmp	r3, #64	; 0x40
 80094f6:	d86f      	bhi.n	80095d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80094f8:	2b30      	cmp	r3, #48	; 0x30
 80094fa:	d064      	beq.n	80095c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80094fc:	2b30      	cmp	r3, #48	; 0x30
 80094fe:	d86b      	bhi.n	80095d8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009500:	2b20      	cmp	r3, #32
 8009502:	d060      	beq.n	80095c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009504:	2b20      	cmp	r3, #32
 8009506:	d867      	bhi.n	80095d8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009508:	2b00      	cmp	r3, #0
 800950a:	d05c      	beq.n	80095c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800950c:	2b10      	cmp	r3, #16
 800950e:	d05a      	beq.n	80095c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009510:	e062      	b.n	80095d8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009522:	f000 fc89 	bl	8009e38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009534:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	609a      	str	r2, [r3, #8]
      break;
 800953e:	e04f      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009550:	f000 fc72 	bl	8009e38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689a      	ldr	r2, [r3, #8]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009562:	609a      	str	r2, [r3, #8]
      break;
 8009564:	e03c      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009572:	461a      	mov	r2, r3
 8009574:	f000 fbe2 	bl	8009d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2150      	movs	r1, #80	; 0x50
 800957e:	4618      	mov	r0, r3
 8009580:	f000 fc3c 	bl	8009dfc <TIM_ITRx_SetConfig>
      break;
 8009584:	e02c      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009592:	461a      	mov	r2, r3
 8009594:	f000 fc01 	bl	8009d9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2160      	movs	r1, #96	; 0x60
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 fc2c 	bl	8009dfc <TIM_ITRx_SetConfig>
      break;
 80095a4:	e01c      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095b2:	461a      	mov	r2, r3
 80095b4:	f000 fbc2 	bl	8009d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2140      	movs	r1, #64	; 0x40
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 fc1c 	bl	8009dfc <TIM_ITRx_SetConfig>
      break;
 80095c4:	e00c      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4619      	mov	r1, r3
 80095d0:	4610      	mov	r0, r2
 80095d2:	f000 fc13 	bl	8009dfc <TIM_ITRx_SetConfig>
      break;
 80095d6:	e003      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	73fb      	strb	r3, [r7, #15]
      break;
 80095dc:	e000      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80095de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	ffceff88 	.word	0xffceff88
 8009600:	00100040 	.word	0x00100040
 8009604:	00100030 	.word	0x00100030
 8009608:	00100020 	.word	0x00100020

0800960c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800963c:	bf00      	nop
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a40      	ldr	r2, [pc, #256]	; (8009770 <TIM_Base_SetConfig+0x114>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d013      	beq.n	800969c <TIM_Base_SetConfig+0x40>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800967a:	d00f      	beq.n	800969c <TIM_Base_SetConfig+0x40>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a3d      	ldr	r2, [pc, #244]	; (8009774 <TIM_Base_SetConfig+0x118>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d00b      	beq.n	800969c <TIM_Base_SetConfig+0x40>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a3c      	ldr	r2, [pc, #240]	; (8009778 <TIM_Base_SetConfig+0x11c>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d007      	beq.n	800969c <TIM_Base_SetConfig+0x40>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a3b      	ldr	r2, [pc, #236]	; (800977c <TIM_Base_SetConfig+0x120>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d003      	beq.n	800969c <TIM_Base_SetConfig+0x40>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a3a      	ldr	r2, [pc, #232]	; (8009780 <TIM_Base_SetConfig+0x124>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d108      	bne.n	80096ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a2f      	ldr	r2, [pc, #188]	; (8009770 <TIM_Base_SetConfig+0x114>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d01f      	beq.n	80096f6 <TIM_Base_SetConfig+0x9a>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096bc:	d01b      	beq.n	80096f6 <TIM_Base_SetConfig+0x9a>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a2c      	ldr	r2, [pc, #176]	; (8009774 <TIM_Base_SetConfig+0x118>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d017      	beq.n	80096f6 <TIM_Base_SetConfig+0x9a>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a2b      	ldr	r2, [pc, #172]	; (8009778 <TIM_Base_SetConfig+0x11c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d013      	beq.n	80096f6 <TIM_Base_SetConfig+0x9a>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a2a      	ldr	r2, [pc, #168]	; (800977c <TIM_Base_SetConfig+0x120>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d00f      	beq.n	80096f6 <TIM_Base_SetConfig+0x9a>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a29      	ldr	r2, [pc, #164]	; (8009780 <TIM_Base_SetConfig+0x124>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d00b      	beq.n	80096f6 <TIM_Base_SetConfig+0x9a>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a28      	ldr	r2, [pc, #160]	; (8009784 <TIM_Base_SetConfig+0x128>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d007      	beq.n	80096f6 <TIM_Base_SetConfig+0x9a>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a27      	ldr	r2, [pc, #156]	; (8009788 <TIM_Base_SetConfig+0x12c>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d003      	beq.n	80096f6 <TIM_Base_SetConfig+0x9a>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a26      	ldr	r2, [pc, #152]	; (800978c <TIM_Base_SetConfig+0x130>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d108      	bne.n	8009708 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	4313      	orrs	r3, r2
 8009706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	4313      	orrs	r3, r2
 8009714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	689a      	ldr	r2, [r3, #8]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a10      	ldr	r2, [pc, #64]	; (8009770 <TIM_Base_SetConfig+0x114>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d00f      	beq.n	8009754 <TIM_Base_SetConfig+0xf8>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a12      	ldr	r2, [pc, #72]	; (8009780 <TIM_Base_SetConfig+0x124>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d00b      	beq.n	8009754 <TIM_Base_SetConfig+0xf8>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a11      	ldr	r2, [pc, #68]	; (8009784 <TIM_Base_SetConfig+0x128>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d007      	beq.n	8009754 <TIM_Base_SetConfig+0xf8>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a10      	ldr	r2, [pc, #64]	; (8009788 <TIM_Base_SetConfig+0x12c>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d003      	beq.n	8009754 <TIM_Base_SetConfig+0xf8>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a0f      	ldr	r2, [pc, #60]	; (800978c <TIM_Base_SetConfig+0x130>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d103      	bne.n	800975c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	691a      	ldr	r2, [r3, #16]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	615a      	str	r2, [r3, #20]
}
 8009762:	bf00      	nop
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	40010000 	.word	0x40010000
 8009774:	40000400 	.word	0x40000400
 8009778:	40000800 	.word	0x40000800
 800977c:	40000c00 	.word	0x40000c00
 8009780:	40010400 	.word	0x40010400
 8009784:	40014000 	.word	0x40014000
 8009788:	40014400 	.word	0x40014400
 800978c:	40014800 	.word	0x40014800

08009790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009790:	b480      	push	{r7}
 8009792:	b087      	sub	sp, #28
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	f023 0201 	bic.w	r2, r3, #1
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	4b37      	ldr	r3, [pc, #220]	; (8009898 <TIM_OC1_SetConfig+0x108>)
 80097bc:	4013      	ands	r3, r2
 80097be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f023 0303 	bic.w	r3, r3, #3
 80097c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	f023 0302 	bic.w	r3, r3, #2
 80097d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a2d      	ldr	r2, [pc, #180]	; (800989c <TIM_OC1_SetConfig+0x10c>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d00f      	beq.n	800980c <TIM_OC1_SetConfig+0x7c>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a2c      	ldr	r2, [pc, #176]	; (80098a0 <TIM_OC1_SetConfig+0x110>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d00b      	beq.n	800980c <TIM_OC1_SetConfig+0x7c>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a2b      	ldr	r2, [pc, #172]	; (80098a4 <TIM_OC1_SetConfig+0x114>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d007      	beq.n	800980c <TIM_OC1_SetConfig+0x7c>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a2a      	ldr	r2, [pc, #168]	; (80098a8 <TIM_OC1_SetConfig+0x118>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d003      	beq.n	800980c <TIM_OC1_SetConfig+0x7c>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a29      	ldr	r2, [pc, #164]	; (80098ac <TIM_OC1_SetConfig+0x11c>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d10c      	bne.n	8009826 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	f023 0308 	bic.w	r3, r3, #8
 8009812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	697a      	ldr	r2, [r7, #20]
 800981a:	4313      	orrs	r3, r2
 800981c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f023 0304 	bic.w	r3, r3, #4
 8009824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4a1c      	ldr	r2, [pc, #112]	; (800989c <TIM_OC1_SetConfig+0x10c>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d00f      	beq.n	800984e <TIM_OC1_SetConfig+0xbe>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a1b      	ldr	r2, [pc, #108]	; (80098a0 <TIM_OC1_SetConfig+0x110>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d00b      	beq.n	800984e <TIM_OC1_SetConfig+0xbe>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a1a      	ldr	r2, [pc, #104]	; (80098a4 <TIM_OC1_SetConfig+0x114>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d007      	beq.n	800984e <TIM_OC1_SetConfig+0xbe>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a19      	ldr	r2, [pc, #100]	; (80098a8 <TIM_OC1_SetConfig+0x118>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d003      	beq.n	800984e <TIM_OC1_SetConfig+0xbe>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a18      	ldr	r2, [pc, #96]	; (80098ac <TIM_OC1_SetConfig+0x11c>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d111      	bne.n	8009872 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800985c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	695b      	ldr	r3, [r3, #20]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	4313      	orrs	r3, r2
 8009866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	693a      	ldr	r2, [r7, #16]
 800986e:	4313      	orrs	r3, r2
 8009870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	693a      	ldr	r2, [r7, #16]
 8009876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	685a      	ldr	r2, [r3, #4]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	621a      	str	r2, [r3, #32]
}
 800988c:	bf00      	nop
 800988e:	371c      	adds	r7, #28
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr
 8009898:	fffeff8f 	.word	0xfffeff8f
 800989c:	40010000 	.word	0x40010000
 80098a0:	40010400 	.word	0x40010400
 80098a4:	40014000 	.word	0x40014000
 80098a8:	40014400 	.word	0x40014400
 80098ac:	40014800 	.word	0x40014800

080098b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	f023 0210 	bic.w	r2, r3, #16
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	4b34      	ldr	r3, [pc, #208]	; (80099ac <TIM_OC2_SetConfig+0xfc>)
 80098dc:	4013      	ands	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	021b      	lsls	r3, r3, #8
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f023 0320 	bic.w	r3, r3, #32
 80098fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	011b      	lsls	r3, r3, #4
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	4313      	orrs	r3, r2
 8009906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a29      	ldr	r2, [pc, #164]	; (80099b0 <TIM_OC2_SetConfig+0x100>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d003      	beq.n	8009918 <TIM_OC2_SetConfig+0x68>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a28      	ldr	r2, [pc, #160]	; (80099b4 <TIM_OC2_SetConfig+0x104>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d10d      	bne.n	8009934 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800991e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	011b      	lsls	r3, r3, #4
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	4313      	orrs	r3, r2
 800992a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009932:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a1e      	ldr	r2, [pc, #120]	; (80099b0 <TIM_OC2_SetConfig+0x100>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d00f      	beq.n	800995c <TIM_OC2_SetConfig+0xac>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a1d      	ldr	r2, [pc, #116]	; (80099b4 <TIM_OC2_SetConfig+0x104>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d00b      	beq.n	800995c <TIM_OC2_SetConfig+0xac>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a1c      	ldr	r2, [pc, #112]	; (80099b8 <TIM_OC2_SetConfig+0x108>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d007      	beq.n	800995c <TIM_OC2_SetConfig+0xac>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a1b      	ldr	r2, [pc, #108]	; (80099bc <TIM_OC2_SetConfig+0x10c>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d003      	beq.n	800995c <TIM_OC2_SetConfig+0xac>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a1a      	ldr	r2, [pc, #104]	; (80099c0 <TIM_OC2_SetConfig+0x110>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d113      	bne.n	8009984 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009962:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800996a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	695b      	ldr	r3, [r3, #20]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	4313      	orrs	r3, r2
 8009976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	4313      	orrs	r3, r2
 8009982:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	693a      	ldr	r2, [r7, #16]
 8009988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	685a      	ldr	r2, [r3, #4]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	621a      	str	r2, [r3, #32]
}
 800999e:	bf00      	nop
 80099a0:	371c      	adds	r7, #28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	feff8fff 	.word	0xfeff8fff
 80099b0:	40010000 	.word	0x40010000
 80099b4:	40010400 	.word	0x40010400
 80099b8:	40014000 	.word	0x40014000
 80099bc:	40014400 	.word	0x40014400
 80099c0:	40014800 	.word	0x40014800

080099c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	4b33      	ldr	r3, [pc, #204]	; (8009abc <TIM_OC3_SetConfig+0xf8>)
 80099f0:	4013      	ands	r3, r2
 80099f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f023 0303 	bic.w	r3, r3, #3
 80099fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	021b      	lsls	r3, r3, #8
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a28      	ldr	r2, [pc, #160]	; (8009ac0 <TIM_OC3_SetConfig+0xfc>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d003      	beq.n	8009a2a <TIM_OC3_SetConfig+0x66>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a27      	ldr	r2, [pc, #156]	; (8009ac4 <TIM_OC3_SetConfig+0x100>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d10d      	bne.n	8009a46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	021b      	lsls	r3, r3, #8
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a1d      	ldr	r2, [pc, #116]	; (8009ac0 <TIM_OC3_SetConfig+0xfc>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d00f      	beq.n	8009a6e <TIM_OC3_SetConfig+0xaa>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a1c      	ldr	r2, [pc, #112]	; (8009ac4 <TIM_OC3_SetConfig+0x100>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d00b      	beq.n	8009a6e <TIM_OC3_SetConfig+0xaa>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a1b      	ldr	r2, [pc, #108]	; (8009ac8 <TIM_OC3_SetConfig+0x104>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d007      	beq.n	8009a6e <TIM_OC3_SetConfig+0xaa>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4a1a      	ldr	r2, [pc, #104]	; (8009acc <TIM_OC3_SetConfig+0x108>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d003      	beq.n	8009a6e <TIM_OC3_SetConfig+0xaa>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4a19      	ldr	r2, [pc, #100]	; (8009ad0 <TIM_OC3_SetConfig+0x10c>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d113      	bne.n	8009a96 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	011b      	lsls	r3, r3, #4
 8009a84:	693a      	ldr	r2, [r7, #16]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	011b      	lsls	r3, r3, #4
 8009a90:	693a      	ldr	r2, [r7, #16]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	693a      	ldr	r2, [r7, #16]
 8009a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	685a      	ldr	r2, [r3, #4]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	621a      	str	r2, [r3, #32]
}
 8009ab0:	bf00      	nop
 8009ab2:	371c      	adds	r7, #28
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	fffeff8f 	.word	0xfffeff8f
 8009ac0:	40010000 	.word	0x40010000
 8009ac4:	40010400 	.word	0x40010400
 8009ac8:	40014000 	.word	0x40014000
 8009acc:	40014400 	.word	0x40014400
 8009ad0:	40014800 	.word	0x40014800

08009ad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	69db      	ldr	r3, [r3, #28]
 8009afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	4b24      	ldr	r3, [pc, #144]	; (8009b90 <TIM_OC4_SetConfig+0xbc>)
 8009b00:	4013      	ands	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	021b      	lsls	r3, r3, #8
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	031b      	lsls	r3, r3, #12
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a19      	ldr	r2, [pc, #100]	; (8009b94 <TIM_OC4_SetConfig+0xc0>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d00f      	beq.n	8009b54 <TIM_OC4_SetConfig+0x80>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a18      	ldr	r2, [pc, #96]	; (8009b98 <TIM_OC4_SetConfig+0xc4>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d00b      	beq.n	8009b54 <TIM_OC4_SetConfig+0x80>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a17      	ldr	r2, [pc, #92]	; (8009b9c <TIM_OC4_SetConfig+0xc8>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d007      	beq.n	8009b54 <TIM_OC4_SetConfig+0x80>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a16      	ldr	r2, [pc, #88]	; (8009ba0 <TIM_OC4_SetConfig+0xcc>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d003      	beq.n	8009b54 <TIM_OC4_SetConfig+0x80>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a15      	ldr	r2, [pc, #84]	; (8009ba4 <TIM_OC4_SetConfig+0xd0>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d109      	bne.n	8009b68 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	695b      	ldr	r3, [r3, #20]
 8009b60:	019b      	lsls	r3, r3, #6
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	685a      	ldr	r2, [r3, #4]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	621a      	str	r2, [r3, #32]
}
 8009b82:	bf00      	nop
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	feff8fff 	.word	0xfeff8fff
 8009b94:	40010000 	.word	0x40010000
 8009b98:	40010400 	.word	0x40010400
 8009b9c:	40014000 	.word	0x40014000
 8009ba0:	40014400 	.word	0x40014400
 8009ba4:	40014800 	.word	0x40014800

08009ba8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a1b      	ldr	r3, [r3, #32]
 8009bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	4b21      	ldr	r3, [pc, #132]	; (8009c58 <TIM_OC5_SetConfig+0xb0>)
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009be8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	041b      	lsls	r3, r3, #16
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a18      	ldr	r2, [pc, #96]	; (8009c5c <TIM_OC5_SetConfig+0xb4>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d00f      	beq.n	8009c1e <TIM_OC5_SetConfig+0x76>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a17      	ldr	r2, [pc, #92]	; (8009c60 <TIM_OC5_SetConfig+0xb8>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d00b      	beq.n	8009c1e <TIM_OC5_SetConfig+0x76>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a16      	ldr	r2, [pc, #88]	; (8009c64 <TIM_OC5_SetConfig+0xbc>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d007      	beq.n	8009c1e <TIM_OC5_SetConfig+0x76>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a15      	ldr	r2, [pc, #84]	; (8009c68 <TIM_OC5_SetConfig+0xc0>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d003      	beq.n	8009c1e <TIM_OC5_SetConfig+0x76>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4a14      	ldr	r2, [pc, #80]	; (8009c6c <TIM_OC5_SetConfig+0xc4>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d109      	bne.n	8009c32 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	021b      	lsls	r3, r3, #8
 8009c2c:	697a      	ldr	r2, [r7, #20]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	685a      	ldr	r2, [r3, #4]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	621a      	str	r2, [r3, #32]
}
 8009c4c:	bf00      	nop
 8009c4e:	371c      	adds	r7, #28
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr
 8009c58:	fffeff8f 	.word	0xfffeff8f
 8009c5c:	40010000 	.word	0x40010000
 8009c60:	40010400 	.word	0x40010400
 8009c64:	40014000 	.word	0x40014000
 8009c68:	40014400 	.word	0x40014400
 8009c6c:	40014800 	.word	0x40014800

08009c70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b087      	sub	sp, #28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	4b22      	ldr	r3, [pc, #136]	; (8009d24 <TIM_OC6_SetConfig+0xb4>)
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	021b      	lsls	r3, r3, #8
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	051b      	lsls	r3, r3, #20
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a19      	ldr	r2, [pc, #100]	; (8009d28 <TIM_OC6_SetConfig+0xb8>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d00f      	beq.n	8009ce8 <TIM_OC6_SetConfig+0x78>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a18      	ldr	r2, [pc, #96]	; (8009d2c <TIM_OC6_SetConfig+0xbc>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d00b      	beq.n	8009ce8 <TIM_OC6_SetConfig+0x78>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a17      	ldr	r2, [pc, #92]	; (8009d30 <TIM_OC6_SetConfig+0xc0>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d007      	beq.n	8009ce8 <TIM_OC6_SetConfig+0x78>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a16      	ldr	r2, [pc, #88]	; (8009d34 <TIM_OC6_SetConfig+0xc4>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d003      	beq.n	8009ce8 <TIM_OC6_SetConfig+0x78>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a15      	ldr	r2, [pc, #84]	; (8009d38 <TIM_OC6_SetConfig+0xc8>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d109      	bne.n	8009cfc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009cee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	695b      	ldr	r3, [r3, #20]
 8009cf4:	029b      	lsls	r3, r3, #10
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	693a      	ldr	r2, [r7, #16]
 8009d14:	621a      	str	r2, [r3, #32]
}
 8009d16:	bf00      	nop
 8009d18:	371c      	adds	r7, #28
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	feff8fff 	.word	0xfeff8fff
 8009d28:	40010000 	.word	0x40010000
 8009d2c:	40010400 	.word	0x40010400
 8009d30:	40014000 	.word	0x40014000
 8009d34:	40014400 	.word	0x40014400
 8009d38:	40014800 	.word	0x40014800

08009d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b087      	sub	sp, #28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6a1b      	ldr	r3, [r3, #32]
 8009d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	f023 0201 	bic.w	r2, r3, #1
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	699b      	ldr	r3, [r3, #24]
 8009d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	011b      	lsls	r3, r3, #4
 8009d6c:	693a      	ldr	r2, [r7, #16]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	f023 030a 	bic.w	r3, r3, #10
 8009d78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d7a:	697a      	ldr	r2, [r7, #20]
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	621a      	str	r2, [r3, #32]
}
 8009d8e:	bf00      	nop
 8009d90:	371c      	adds	r7, #28
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b087      	sub	sp, #28
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	60f8      	str	r0, [r7, #12]
 8009da2:	60b9      	str	r1, [r7, #8]
 8009da4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6a1b      	ldr	r3, [r3, #32]
 8009daa:	f023 0210 	bic.w	r2, r3, #16
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	699b      	ldr	r3, [r3, #24]
 8009db6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009dc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	031b      	lsls	r3, r3, #12
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009dd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	011b      	lsls	r3, r3, #4
 8009ddc:	693a      	ldr	r2, [r7, #16]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	693a      	ldr	r2, [r7, #16]
 8009dec:	621a      	str	r2, [r3, #32]
}
 8009dee:	bf00      	nop
 8009df0:	371c      	adds	r7, #28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
	...

08009dfc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <TIM_ITRx_SetConfig+0x38>)
 8009e10:	4013      	ands	r3, r2
 8009e12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	f043 0307 	orr.w	r3, r3, #7
 8009e1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	609a      	str	r2, [r3, #8]
}
 8009e26:	bf00      	nop
 8009e28:	3714      	adds	r7, #20
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	ffcfff8f 	.word	0xffcfff8f

08009e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b087      	sub	sp, #28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
 8009e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	021a      	lsls	r2, r3, #8
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	697a      	ldr	r2, [r7, #20]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	697a      	ldr	r2, [r7, #20]
 8009e6a:	609a      	str	r2, [r3, #8]
}
 8009e6c:	bf00      	nop
 8009e6e:	371c      	adds	r7, #28
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d101      	bne.n	8009e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	e06d      	b.n	8009f6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2202      	movs	r2, #2
 8009e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a30      	ldr	r2, [pc, #192]	; (8009f78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d004      	beq.n	8009ec4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a2f      	ldr	r2, [pc, #188]	; (8009f7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d108      	bne.n	8009ed6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009eca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009edc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a20      	ldr	r2, [pc, #128]	; (8009f78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d022      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f02:	d01d      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a1d      	ldr	r2, [pc, #116]	; (8009f80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d018      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a1c      	ldr	r2, [pc, #112]	; (8009f84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d013      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a1a      	ldr	r2, [pc, #104]	; (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d00e      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a15      	ldr	r2, [pc, #84]	; (8009f7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d009      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a16      	ldr	r2, [pc, #88]	; (8009f8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d004      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a15      	ldr	r2, [pc, #84]	; (8009f90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d10c      	bne.n	8009f5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3714      	adds	r7, #20
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	40010000 	.word	0x40010000
 8009f7c:	40010400 	.word	0x40010400
 8009f80:	40000400 	.word	0x40000400
 8009f84:	40000800 	.word	0x40000800
 8009f88:	40000c00 	.word	0x40000c00
 8009f8c:	40001800 	.word	0x40001800
 8009f90:	40014000 	.word	0x40014000

08009f94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d101      	bne.n	8009fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009fac:	2302      	movs	r3, #2
 8009fae:	e065      	b.n	800a07c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	695b      	ldr	r3, [r3, #20]
 800a008:	4313      	orrs	r3, r2
 800a00a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a016:	4313      	orrs	r3, r2
 800a018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	041b      	lsls	r3, r3, #16
 800a026:	4313      	orrs	r3, r2
 800a028:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a16      	ldr	r2, [pc, #88]	; (800a088 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d004      	beq.n	800a03e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a14      	ldr	r2, [pc, #80]	; (800a08c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d115      	bne.n	800a06a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a048:	051b      	lsls	r3, r3, #20
 800a04a:	4313      	orrs	r3, r2
 800a04c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	69db      	ldr	r3, [r3, #28]
 800a058:	4313      	orrs	r3, r2
 800a05a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	6a1b      	ldr	r3, [r3, #32]
 800a066:	4313      	orrs	r3, r2
 800a068:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr
 800a088:	40010000 	.word	0x40010000
 800a08c:	40010400 	.word	0x40010400

0800a090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a098:	bf00      	nop
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0ac:	bf00      	nop
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <__NVIC_SetPriority>:
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	6039      	str	r1, [r7, #0]
 800a0d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a0d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	db0a      	blt.n	800a0f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	490c      	ldr	r1, [pc, #48]	; (800a118 <__NVIC_SetPriority+0x4c>)
 800a0e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a0ea:	0112      	lsls	r2, r2, #4
 800a0ec:	b2d2      	uxtb	r2, r2
 800a0ee:	440b      	add	r3, r1
 800a0f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a0f4:	e00a      	b.n	800a10c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	4908      	ldr	r1, [pc, #32]	; (800a11c <__NVIC_SetPriority+0x50>)
 800a0fc:	88fb      	ldrh	r3, [r7, #6]
 800a0fe:	f003 030f 	and.w	r3, r3, #15
 800a102:	3b04      	subs	r3, #4
 800a104:	0112      	lsls	r2, r2, #4
 800a106:	b2d2      	uxtb	r2, r2
 800a108:	440b      	add	r3, r1
 800a10a:	761a      	strb	r2, [r3, #24]
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	e000e100 	.word	0xe000e100
 800a11c:	e000ed00 	.word	0xe000ed00

0800a120 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a120:	b580      	push	{r7, lr}
 800a122:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a124:	4b05      	ldr	r3, [pc, #20]	; (800a13c <SysTick_Handler+0x1c>)
 800a126:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a128:	f001 fdd4 	bl	800bcd4 <xTaskGetSchedulerState>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d001      	beq.n	800a136 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a132:	f002 fbb9 	bl	800c8a8 <xPortSysTickHandler>
  }
}
 800a136:	bf00      	nop
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	e000e010 	.word	0xe000e010

0800a140 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a140:	b580      	push	{r7, lr}
 800a142:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a144:	2100      	movs	r1, #0
 800a146:	f06f 0004 	mvn.w	r0, #4
 800a14a:	f7ff ffbf 	bl	800a0cc <__NVIC_SetPriority>
#endif
}
 800a14e:	bf00      	nop
 800a150:	bd80      	pop	{r7, pc}
	...

0800a154 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a15a:	f3ef 8305 	mrs	r3, IPSR
 800a15e:	603b      	str	r3, [r7, #0]
  return(result);
 800a160:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a162:	2b00      	cmp	r3, #0
 800a164:	d003      	beq.n	800a16e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a166:	f06f 0305 	mvn.w	r3, #5
 800a16a:	607b      	str	r3, [r7, #4]
 800a16c:	e00c      	b.n	800a188 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a16e:	4b0a      	ldr	r3, [pc, #40]	; (800a198 <osKernelInitialize+0x44>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d105      	bne.n	800a182 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a176:	4b08      	ldr	r3, [pc, #32]	; (800a198 <osKernelInitialize+0x44>)
 800a178:	2201      	movs	r2, #1
 800a17a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a17c:	2300      	movs	r3, #0
 800a17e:	607b      	str	r3, [r7, #4]
 800a180:	e002      	b.n	800a188 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a182:	f04f 33ff 	mov.w	r3, #4294967295
 800a186:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a188:	687b      	ldr	r3, [r7, #4]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	2400020c 	.word	0x2400020c

0800a19c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1a2:	f3ef 8305 	mrs	r3, IPSR
 800a1a6:	603b      	str	r3, [r7, #0]
  return(result);
 800a1a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d003      	beq.n	800a1b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a1ae:	f06f 0305 	mvn.w	r3, #5
 800a1b2:	607b      	str	r3, [r7, #4]
 800a1b4:	e010      	b.n	800a1d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a1b6:	4b0b      	ldr	r3, [pc, #44]	; (800a1e4 <osKernelStart+0x48>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d109      	bne.n	800a1d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a1be:	f7ff ffbf 	bl	800a140 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a1c2:	4b08      	ldr	r3, [pc, #32]	; (800a1e4 <osKernelStart+0x48>)
 800a1c4:	2202      	movs	r2, #2
 800a1c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a1c8:	f001 f928 	bl	800b41c <vTaskStartScheduler>
      stat = osOK;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	607b      	str	r3, [r7, #4]
 800a1d0:	e002      	b.n	800a1d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a1d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1d8:	687b      	ldr	r3, [r7, #4]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	2400020c 	.word	0x2400020c

0800a1e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08e      	sub	sp, #56	; 0x38
 800a1ec:	af04      	add	r7, sp, #16
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1f8:	f3ef 8305 	mrs	r3, IPSR
 800a1fc:	617b      	str	r3, [r7, #20]
  return(result);
 800a1fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a200:	2b00      	cmp	r3, #0
 800a202:	d17e      	bne.n	800a302 <osThreadNew+0x11a>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d07b      	beq.n	800a302 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a20a:	2380      	movs	r3, #128	; 0x80
 800a20c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a20e:	2318      	movs	r3, #24
 800a210:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a212:	2300      	movs	r3, #0
 800a214:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a216:	f04f 33ff 	mov.w	r3, #4294967295
 800a21a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d045      	beq.n	800a2ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <osThreadNew+0x48>
        name = attr->name;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d002      	beq.n	800a23e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d008      	beq.n	800a256 <osThreadNew+0x6e>
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	2b38      	cmp	r3, #56	; 0x38
 800a248:	d805      	bhi.n	800a256 <osThreadNew+0x6e>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f003 0301 	and.w	r3, r3, #1
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <osThreadNew+0x72>
        return (NULL);
 800a256:	2300      	movs	r3, #0
 800a258:	e054      	b.n	800a304 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	089b      	lsrs	r3, r3, #2
 800a268:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00e      	beq.n	800a290 <osThreadNew+0xa8>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	2ba7      	cmp	r3, #167	; 0xa7
 800a278:	d90a      	bls.n	800a290 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d006      	beq.n	800a290 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d002      	beq.n	800a290 <osThreadNew+0xa8>
        mem = 1;
 800a28a:	2301      	movs	r3, #1
 800a28c:	61bb      	str	r3, [r7, #24]
 800a28e:	e010      	b.n	800a2b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10c      	bne.n	800a2b2 <osThreadNew+0xca>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d108      	bne.n	800a2b2 <osThreadNew+0xca>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d104      	bne.n	800a2b2 <osThreadNew+0xca>
          mem = 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	61bb      	str	r3, [r7, #24]
 800a2ac:	e001      	b.n	800a2b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d110      	bne.n	800a2da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2c0:	9202      	str	r2, [sp, #8]
 800a2c2:	9301      	str	r3, [sp, #4]
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	6a3a      	ldr	r2, [r7, #32]
 800a2cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f000 feb8 	bl	800b044 <xTaskCreateStatic>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	613b      	str	r3, [r7, #16]
 800a2d8:	e013      	b.n	800a302 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d110      	bne.n	800a302 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a2e0:	6a3b      	ldr	r3, [r7, #32]
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	f107 0310 	add.w	r3, r7, #16
 800a2e8:	9301      	str	r3, [sp, #4]
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 ff03 	bl	800b0fe <xTaskCreate>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d001      	beq.n	800a302 <osThreadNew+0x11a>
            hTask = NULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a302:	693b      	ldr	r3, [r7, #16]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3728      	adds	r7, #40	; 0x28
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a314:	f3ef 8305 	mrs	r3, IPSR
 800a318:	60bb      	str	r3, [r7, #8]
  return(result);
 800a31a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d003      	beq.n	800a328 <osDelay+0x1c>
    stat = osErrorISR;
 800a320:	f06f 0305 	mvn.w	r3, #5
 800a324:	60fb      	str	r3, [r7, #12]
 800a326:	e007      	b.n	800a338 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a328:	2300      	movs	r3, #0
 800a32a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d002      	beq.n	800a338 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f001 f83e 	bl	800b3b4 <vTaskDelay>
    }
  }

  return (stat);
 800a338:	68fb      	ldr	r3, [r7, #12]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a342:	b580      	push	{r7, lr}
 800a344:	b08a      	sub	sp, #40	; 0x28
 800a346:	af02      	add	r7, sp, #8
 800a348:	60f8      	str	r0, [r7, #12]
 800a34a:	60b9      	str	r1, [r7, #8]
 800a34c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a34e:	2300      	movs	r3, #0
 800a350:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a352:	f3ef 8305 	mrs	r3, IPSR
 800a356:	613b      	str	r3, [r7, #16]
  return(result);
 800a358:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d15f      	bne.n	800a41e <osMessageQueueNew+0xdc>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d05c      	beq.n	800a41e <osMessageQueueNew+0xdc>
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d059      	beq.n	800a41e <osMessageQueueNew+0xdc>
    mem = -1;
 800a36a:	f04f 33ff 	mov.w	r3, #4294967295
 800a36e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d029      	beq.n	800a3ca <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d012      	beq.n	800a3a4 <osMessageQueueNew+0x62>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	2b4f      	cmp	r3, #79	; 0x4f
 800a384:	d90e      	bls.n	800a3a4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00a      	beq.n	800a3a4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	695a      	ldr	r2, [r3, #20]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	68b9      	ldr	r1, [r7, #8]
 800a396:	fb01 f303 	mul.w	r3, r1, r3
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d302      	bcc.n	800a3a4 <osMessageQueueNew+0x62>
        mem = 1;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	61bb      	str	r3, [r7, #24]
 800a3a2:	e014      	b.n	800a3ce <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d110      	bne.n	800a3ce <osMessageQueueNew+0x8c>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10c      	bne.n	800a3ce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d108      	bne.n	800a3ce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	695b      	ldr	r3, [r3, #20]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d104      	bne.n	800a3ce <osMessageQueueNew+0x8c>
          mem = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	61bb      	str	r3, [r7, #24]
 800a3c8:	e001      	b.n	800a3ce <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d10b      	bne.n	800a3ec <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	691a      	ldr	r2, [r3, #16]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	2100      	movs	r1, #0
 800a3de:	9100      	str	r1, [sp, #0]
 800a3e0:	68b9      	ldr	r1, [r7, #8]
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 f970 	bl	800a6c8 <xQueueGenericCreateStatic>
 800a3e8:	61f8      	str	r0, [r7, #28]
 800a3ea:	e008      	b.n	800a3fe <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d105      	bne.n	800a3fe <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	68b9      	ldr	r1, [r7, #8]
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 f9de 	bl	800a7b8 <xQueueGenericCreate>
 800a3fc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00c      	beq.n	800a41e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	617b      	str	r3, [r7, #20]
 800a410:	e001      	b.n	800a416 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a412:	2300      	movs	r3, #0
 800a414:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a416:	6979      	ldr	r1, [r7, #20]
 800a418:	69f8      	ldr	r0, [r7, #28]
 800a41a:	f000 fdb5 	bl	800af88 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a41e:	69fb      	ldr	r3, [r7, #28]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3720      	adds	r7, #32
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	4a07      	ldr	r2, [pc, #28]	; (800a454 <vApplicationGetIdleTaskMemory+0x2c>)
 800a438:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	4a06      	ldr	r2, [pc, #24]	; (800a458 <vApplicationGetIdleTaskMemory+0x30>)
 800a43e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2280      	movs	r2, #128	; 0x80
 800a444:	601a      	str	r2, [r3, #0]
}
 800a446:	bf00      	nop
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	24000210 	.word	0x24000210
 800a458:	240002b8 	.word	0x240002b8

0800a45c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	4a07      	ldr	r2, [pc, #28]	; (800a488 <vApplicationGetTimerTaskMemory+0x2c>)
 800a46c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	4a06      	ldr	r2, [pc, #24]	; (800a48c <vApplicationGetTimerTaskMemory+0x30>)
 800a472:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a47a:	601a      	str	r2, [r3, #0]
}
 800a47c:	bf00      	nop
 800a47e:	3714      	adds	r7, #20
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	240004b8 	.word	0x240004b8
 800a48c:	24000560 	.word	0x24000560

0800a490 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f103 0208 	add.w	r2, r3, #8
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f103 0208 	add.w	r2, r3, #8
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f103 0208 	add.w	r2, r3, #8
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4de:	bf00      	nop
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b085      	sub	sp, #20
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	689a      	ldr	r2, [r3, #8]
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	683a      	ldr	r2, [r7, #0]
 800a50e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	1c5a      	adds	r2, r3, #1
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	601a      	str	r2, [r3, #0]
}
 800a526:	bf00      	nop
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a532:	b480      	push	{r7}
 800a534:	b085      	sub	sp, #20
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
 800a53a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a548:	d103      	bne.n	800a552 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	e00c      	b.n	800a56c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	3308      	adds	r3, #8
 800a556:	60fb      	str	r3, [r7, #12]
 800a558:	e002      	b.n	800a560 <vListInsert+0x2e>
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	60fb      	str	r3, [r7, #12]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d2f6      	bcs.n	800a55a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	685a      	ldr	r2, [r3, #4]
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	683a      	ldr	r2, [r7, #0]
 800a57a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	683a      	ldr	r2, [r7, #0]
 800a586:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	601a      	str	r2, [r3, #0]
}
 800a598:	bf00      	nop
 800a59a:	3714      	adds	r7, #20
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	6892      	ldr	r2, [r2, #8]
 800a5ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	6852      	ldr	r2, [r2, #4]
 800a5c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d103      	bne.n	800a5d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	689a      	ldr	r2, [r3, #8]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	1e5a      	subs	r2, r3, #1
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3714      	adds	r7, #20
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10a      	bne.n	800a622 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a61e:	bf00      	nop
 800a620:	e7fe      	b.n	800a620 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a622:	f002 f8af 	bl	800c784 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a62e:	68f9      	ldr	r1, [r7, #12]
 800a630:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a632:	fb01 f303 	mul.w	r3, r1, r3
 800a636:	441a      	add	r2, r3
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a652:	3b01      	subs	r3, #1
 800a654:	68f9      	ldr	r1, [r7, #12]
 800a656:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a658:	fb01 f303 	mul.w	r3, r1, r3
 800a65c:	441a      	add	r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	22ff      	movs	r2, #255	; 0xff
 800a666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	22ff      	movs	r2, #255	; 0xff
 800a66e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d114      	bne.n	800a6a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d01a      	beq.n	800a6b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	3310      	adds	r3, #16
 800a684:	4618      	mov	r0, r3
 800a686:	f001 f963 	bl	800b950 <xTaskRemoveFromEventList>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d012      	beq.n	800a6b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a690:	4b0c      	ldr	r3, [pc, #48]	; (800a6c4 <xQueueGenericReset+0xcc>)
 800a692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a696:	601a      	str	r2, [r3, #0]
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	e009      	b.n	800a6b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	3310      	adds	r3, #16
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7ff fef2 	bl	800a490 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3324      	adds	r3, #36	; 0x24
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7ff feed 	bl	800a490 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a6b6:	f002 f895 	bl	800c7e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a6ba:	2301      	movs	r3, #1
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	e000ed04 	.word	0xe000ed04

0800a6c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b08e      	sub	sp, #56	; 0x38
 800a6cc:	af02      	add	r7, sp, #8
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
 800a6d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10a      	bne.n	800a6f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e0:	f383 8811 	msr	BASEPRI, r3
 800a6e4:	f3bf 8f6f 	isb	sy
 800a6e8:	f3bf 8f4f 	dsb	sy
 800a6ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6ee:	bf00      	nop
 800a6f0:	e7fe      	b.n	800a6f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10a      	bne.n	800a70e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fc:	f383 8811 	msr	BASEPRI, r3
 800a700:	f3bf 8f6f 	isb	sy
 800a704:	f3bf 8f4f 	dsb	sy
 800a708:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a70a:	bf00      	nop
 800a70c:	e7fe      	b.n	800a70c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d002      	beq.n	800a71a <xQueueGenericCreateStatic+0x52>
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <xQueueGenericCreateStatic+0x56>
 800a71a:	2301      	movs	r3, #1
 800a71c:	e000      	b.n	800a720 <xQueueGenericCreateStatic+0x58>
 800a71e:	2300      	movs	r3, #0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10a      	bne.n	800a73a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a728:	f383 8811 	msr	BASEPRI, r3
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	623b      	str	r3, [r7, #32]
}
 800a736:	bf00      	nop
 800a738:	e7fe      	b.n	800a738 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d102      	bne.n	800a746 <xQueueGenericCreateStatic+0x7e>
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d101      	bne.n	800a74a <xQueueGenericCreateStatic+0x82>
 800a746:	2301      	movs	r3, #1
 800a748:	e000      	b.n	800a74c <xQueueGenericCreateStatic+0x84>
 800a74a:	2300      	movs	r3, #0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10a      	bne.n	800a766 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	61fb      	str	r3, [r7, #28]
}
 800a762:	bf00      	nop
 800a764:	e7fe      	b.n	800a764 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a766:	2350      	movs	r3, #80	; 0x50
 800a768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2b50      	cmp	r3, #80	; 0x50
 800a76e:	d00a      	beq.n	800a786 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	61bb      	str	r3, [r7, #24]
}
 800a782:	bf00      	nop
 800a784:	e7fe      	b.n	800a784 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a786:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00d      	beq.n	800a7ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a794:	2201      	movs	r2, #1
 800a796:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a79a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	68b9      	ldr	r1, [r7, #8]
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f000 f83f 	bl	800a82c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3730      	adds	r7, #48	; 0x30
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b08a      	sub	sp, #40	; 0x28
 800a7bc:	af02      	add	r7, sp, #8
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10a      	bne.n	800a7e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	613b      	str	r3, [r7, #16]
}
 800a7de:	bf00      	nop
 800a7e0:	e7fe      	b.n	800a7e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	fb02 f303 	mul.w	r3, r2, r3
 800a7ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	3350      	adds	r3, #80	; 0x50
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f002 f8e9 	bl	800c9c8 <pvPortMalloc>
 800a7f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d011      	beq.n	800a822 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	3350      	adds	r3, #80	; 0x50
 800a806:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a810:	79fa      	ldrb	r2, [r7, #7]
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	4613      	mov	r3, r2
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	68b9      	ldr	r1, [r7, #8]
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f000 f805 	bl	800a82c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a822:	69bb      	ldr	r3, [r7, #24]
	}
 800a824:	4618      	mov	r0, r3
 800a826:	3720      	adds	r7, #32
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
 800a838:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d103      	bne.n	800a848 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	69ba      	ldr	r2, [r7, #24]
 800a844:	601a      	str	r2, [r3, #0]
 800a846:	e002      	b.n	800a84e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a85a:	2101      	movs	r1, #1
 800a85c:	69b8      	ldr	r0, [r7, #24]
 800a85e:	f7ff fecb 	bl	800a5f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	78fa      	ldrb	r2, [r7, #3]
 800a866:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a86a:	bf00      	nop
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b08e      	sub	sp, #56	; 0x38
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
 800a880:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a882:	2300      	movs	r3, #0
 800a884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d10a      	bne.n	800a8a6 <xQueueGenericSend+0x32>
	__asm volatile
 800a890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a894:	f383 8811 	msr	BASEPRI, r3
 800a898:	f3bf 8f6f 	isb	sy
 800a89c:	f3bf 8f4f 	dsb	sy
 800a8a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8a2:	bf00      	nop
 800a8a4:	e7fe      	b.n	800a8a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d103      	bne.n	800a8b4 <xQueueGenericSend+0x40>
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d101      	bne.n	800a8b8 <xQueueGenericSend+0x44>
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e000      	b.n	800a8ba <xQueueGenericSend+0x46>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10a      	bne.n	800a8d4 <xQueueGenericSend+0x60>
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8d0:	bf00      	nop
 800a8d2:	e7fe      	b.n	800a8d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d103      	bne.n	800a8e2 <xQueueGenericSend+0x6e>
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d101      	bne.n	800a8e6 <xQueueGenericSend+0x72>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e000      	b.n	800a8e8 <xQueueGenericSend+0x74>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10a      	bne.n	800a902 <xQueueGenericSend+0x8e>
	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	623b      	str	r3, [r7, #32]
}
 800a8fe:	bf00      	nop
 800a900:	e7fe      	b.n	800a900 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a902:	f001 f9e7 	bl	800bcd4 <xTaskGetSchedulerState>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d102      	bne.n	800a912 <xQueueGenericSend+0x9e>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d101      	bne.n	800a916 <xQueueGenericSend+0xa2>
 800a912:	2301      	movs	r3, #1
 800a914:	e000      	b.n	800a918 <xQueueGenericSend+0xa4>
 800a916:	2300      	movs	r3, #0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10a      	bne.n	800a932 <xQueueGenericSend+0xbe>
	__asm volatile
 800a91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a920:	f383 8811 	msr	BASEPRI, r3
 800a924:	f3bf 8f6f 	isb	sy
 800a928:	f3bf 8f4f 	dsb	sy
 800a92c:	61fb      	str	r3, [r7, #28]
}
 800a92e:	bf00      	nop
 800a930:	e7fe      	b.n	800a930 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a932:	f001 ff27 	bl	800c784 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a93e:	429a      	cmp	r2, r3
 800a940:	d302      	bcc.n	800a948 <xQueueGenericSend+0xd4>
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b02      	cmp	r3, #2
 800a946:	d129      	bne.n	800a99c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a948:	683a      	ldr	r2, [r7, #0]
 800a94a:	68b9      	ldr	r1, [r7, #8]
 800a94c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a94e:	f000 fa0b 	bl	800ad68 <prvCopyDataToQueue>
 800a952:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d010      	beq.n	800a97e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95e:	3324      	adds	r3, #36	; 0x24
 800a960:	4618      	mov	r0, r3
 800a962:	f000 fff5 	bl	800b950 <xTaskRemoveFromEventList>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d013      	beq.n	800a994 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a96c:	4b3f      	ldr	r3, [pc, #252]	; (800aa6c <xQueueGenericSend+0x1f8>)
 800a96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	e00a      	b.n	800a994 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a980:	2b00      	cmp	r3, #0
 800a982:	d007      	beq.n	800a994 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a984:	4b39      	ldr	r3, [pc, #228]	; (800aa6c <xQueueGenericSend+0x1f8>)
 800a986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a994:	f001 ff26 	bl	800c7e4 <vPortExitCritical>
				return pdPASS;
 800a998:	2301      	movs	r3, #1
 800a99a:	e063      	b.n	800aa64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d103      	bne.n	800a9aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9a2:	f001 ff1f 	bl	800c7e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	e05c      	b.n	800aa64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d106      	bne.n	800a9be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9b0:	f107 0314 	add.w	r3, r7, #20
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f001 f82f 	bl	800ba18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9be:	f001 ff11 	bl	800c7e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9c2:	f000 fd9b 	bl	800b4fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9c6:	f001 fedd 	bl	800c784 <vPortEnterCritical>
 800a9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9d0:	b25b      	sxtb	r3, r3
 800a9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d6:	d103      	bne.n	800a9e0 <xQueueGenericSend+0x16c>
 800a9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9e6:	b25b      	sxtb	r3, r3
 800a9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ec:	d103      	bne.n	800a9f6 <xQueueGenericSend+0x182>
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9f6:	f001 fef5 	bl	800c7e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9fa:	1d3a      	adds	r2, r7, #4
 800a9fc:	f107 0314 	add.w	r3, r7, #20
 800aa00:	4611      	mov	r1, r2
 800aa02:	4618      	mov	r0, r3
 800aa04:	f001 f81e 	bl	800ba44 <xTaskCheckForTimeOut>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d124      	bne.n	800aa58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa10:	f000 faa2 	bl	800af58 <prvIsQueueFull>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d018      	beq.n	800aa4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1c:	3310      	adds	r3, #16
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	4611      	mov	r1, r2
 800aa22:	4618      	mov	r0, r3
 800aa24:	f000 ff44 	bl	800b8b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa2a:	f000 fa2d 	bl	800ae88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa2e:	f000 fd73 	bl	800b518 <xTaskResumeAll>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f47f af7c 	bne.w	800a932 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aa3a:	4b0c      	ldr	r3, [pc, #48]	; (800aa6c <xQueueGenericSend+0x1f8>)
 800aa3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa40:	601a      	str	r2, [r3, #0]
 800aa42:	f3bf 8f4f 	dsb	sy
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	e772      	b.n	800a932 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa4e:	f000 fa1b 	bl	800ae88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa52:	f000 fd61 	bl	800b518 <xTaskResumeAll>
 800aa56:	e76c      	b.n	800a932 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa5a:	f000 fa15 	bl	800ae88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa5e:	f000 fd5b 	bl	800b518 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3738      	adds	r7, #56	; 0x38
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	e000ed04 	.word	0xe000ed04

0800aa70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b090      	sub	sp, #64	; 0x40
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
 800aa7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10a      	bne.n	800aa9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa9a:	bf00      	nop
 800aa9c:	e7fe      	b.n	800aa9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d103      	bne.n	800aaac <xQueueGenericSendFromISR+0x3c>
 800aaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d101      	bne.n	800aab0 <xQueueGenericSendFromISR+0x40>
 800aaac:	2301      	movs	r3, #1
 800aaae:	e000      	b.n	800aab2 <xQueueGenericSendFromISR+0x42>
 800aab0:	2300      	movs	r3, #0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d10a      	bne.n	800aacc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaba:	f383 8811 	msr	BASEPRI, r3
 800aabe:	f3bf 8f6f 	isb	sy
 800aac2:	f3bf 8f4f 	dsb	sy
 800aac6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aac8:	bf00      	nop
 800aaca:	e7fe      	b.n	800aaca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d103      	bne.n	800aada <xQueueGenericSendFromISR+0x6a>
 800aad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d101      	bne.n	800aade <xQueueGenericSendFromISR+0x6e>
 800aada:	2301      	movs	r3, #1
 800aadc:	e000      	b.n	800aae0 <xQueueGenericSendFromISR+0x70>
 800aade:	2300      	movs	r3, #0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d10a      	bne.n	800aafa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae8:	f383 8811 	msr	BASEPRI, r3
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	623b      	str	r3, [r7, #32]
}
 800aaf6:	bf00      	nop
 800aaf8:	e7fe      	b.n	800aaf8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aafa:	f001 ff25 	bl	800c948 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aafe:	f3ef 8211 	mrs	r2, BASEPRI
 800ab02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	61fa      	str	r2, [r7, #28]
 800ab14:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab16:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab18:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d302      	bcc.n	800ab2c <xQueueGenericSendFromISR+0xbc>
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d12f      	bne.n	800ab8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	68b9      	ldr	r1, [r7, #8]
 800ab40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab42:	f000 f911 	bl	800ad68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ab4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4e:	d112      	bne.n	800ab76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d016      	beq.n	800ab86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5a:	3324      	adds	r3, #36	; 0x24
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 fef7 	bl	800b950 <xTaskRemoveFromEventList>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00e      	beq.n	800ab86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00b      	beq.n	800ab86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	e007      	b.n	800ab86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	b25a      	sxtb	r2, r3
 800ab80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab86:	2301      	movs	r3, #1
 800ab88:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ab8a:	e001      	b.n	800ab90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab92:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3740      	adds	r7, #64	; 0x40
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
	...

0800aba8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b08c      	sub	sp, #48	; 0x30
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800abb4:	2300      	movs	r3, #0
 800abb6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800abbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d10a      	bne.n	800abd8 <xQueueReceive+0x30>
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	623b      	str	r3, [r7, #32]
}
 800abd4:	bf00      	nop
 800abd6:	e7fe      	b.n	800abd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d103      	bne.n	800abe6 <xQueueReceive+0x3e>
 800abde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d101      	bne.n	800abea <xQueueReceive+0x42>
 800abe6:	2301      	movs	r3, #1
 800abe8:	e000      	b.n	800abec <xQueueReceive+0x44>
 800abea:	2300      	movs	r3, #0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d10a      	bne.n	800ac06 <xQueueReceive+0x5e>
	__asm volatile
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	61fb      	str	r3, [r7, #28]
}
 800ac02:	bf00      	nop
 800ac04:	e7fe      	b.n	800ac04 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac06:	f001 f865 	bl	800bcd4 <xTaskGetSchedulerState>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d102      	bne.n	800ac16 <xQueueReceive+0x6e>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d101      	bne.n	800ac1a <xQueueReceive+0x72>
 800ac16:	2301      	movs	r3, #1
 800ac18:	e000      	b.n	800ac1c <xQueueReceive+0x74>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10a      	bne.n	800ac36 <xQueueReceive+0x8e>
	__asm volatile
 800ac20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	61bb      	str	r3, [r7, #24]
}
 800ac32:	bf00      	nop
 800ac34:	e7fe      	b.n	800ac34 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac36:	f001 fda5 	bl	800c784 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d01f      	beq.n	800ac86 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac46:	68b9      	ldr	r1, [r7, #8]
 800ac48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac4a:	f000 f8f7 	bl	800ae3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac50:	1e5a      	subs	r2, r3, #1
 800ac52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00f      	beq.n	800ac7e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac60:	3310      	adds	r3, #16
 800ac62:	4618      	mov	r0, r3
 800ac64:	f000 fe74 	bl	800b950 <xTaskRemoveFromEventList>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d007      	beq.n	800ac7e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac6e:	4b3d      	ldr	r3, [pc, #244]	; (800ad64 <xQueueReceive+0x1bc>)
 800ac70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac74:	601a      	str	r2, [r3, #0]
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac7e:	f001 fdb1 	bl	800c7e4 <vPortExitCritical>
				return pdPASS;
 800ac82:	2301      	movs	r3, #1
 800ac84:	e069      	b.n	800ad5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d103      	bne.n	800ac94 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac8c:	f001 fdaa 	bl	800c7e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac90:	2300      	movs	r3, #0
 800ac92:	e062      	b.n	800ad5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d106      	bne.n	800aca8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac9a:	f107 0310 	add.w	r3, r7, #16
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 feba 	bl	800ba18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aca4:	2301      	movs	r3, #1
 800aca6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aca8:	f001 fd9c 	bl	800c7e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acac:	f000 fc26 	bl	800b4fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acb0:	f001 fd68 	bl	800c784 <vPortEnterCritical>
 800acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acba:	b25b      	sxtb	r3, r3
 800acbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc0:	d103      	bne.n	800acca <xQueueReceive+0x122>
 800acc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800accc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acd0:	b25b      	sxtb	r3, r3
 800acd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd6:	d103      	bne.n	800ace0 <xQueueReceive+0x138>
 800acd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acda:	2200      	movs	r2, #0
 800acdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ace0:	f001 fd80 	bl	800c7e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ace4:	1d3a      	adds	r2, r7, #4
 800ace6:	f107 0310 	add.w	r3, r7, #16
 800acea:	4611      	mov	r1, r2
 800acec:	4618      	mov	r0, r3
 800acee:	f000 fea9 	bl	800ba44 <xTaskCheckForTimeOut>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d123      	bne.n	800ad40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acfa:	f000 f917 	bl	800af2c <prvIsQueueEmpty>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d017      	beq.n	800ad34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad06:	3324      	adds	r3, #36	; 0x24
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	4611      	mov	r1, r2
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f000 fdcf 	bl	800b8b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad14:	f000 f8b8 	bl	800ae88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad18:	f000 fbfe 	bl	800b518 <xTaskResumeAll>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d189      	bne.n	800ac36 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ad22:	4b10      	ldr	r3, [pc, #64]	; (800ad64 <xQueueReceive+0x1bc>)
 800ad24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	f3bf 8f4f 	dsb	sy
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	e780      	b.n	800ac36 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad36:	f000 f8a7 	bl	800ae88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad3a:	f000 fbed 	bl	800b518 <xTaskResumeAll>
 800ad3e:	e77a      	b.n	800ac36 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad42:	f000 f8a1 	bl	800ae88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad46:	f000 fbe7 	bl	800b518 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad4c:	f000 f8ee 	bl	800af2c <prvIsQueueEmpty>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f43f af6f 	beq.w	800ac36 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3730      	adds	r7, #48	; 0x30
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	e000ed04 	.word	0xe000ed04

0800ad68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b086      	sub	sp, #24
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad74:	2300      	movs	r3, #0
 800ad76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10d      	bne.n	800ada2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d14d      	bne.n	800ae2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	4618      	mov	r0, r3
 800ad94:	f000 ffbc 	bl	800bd10 <xTaskPriorityDisinherit>
 800ad98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	609a      	str	r2, [r3, #8]
 800ada0:	e043      	b.n	800ae2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d119      	bne.n	800addc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6858      	ldr	r0, [r3, #4]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb0:	461a      	mov	r2, r3
 800adb2:	68b9      	ldr	r1, [r7, #8]
 800adb4:	f002 f876 	bl	800cea4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc0:	441a      	add	r2, r3
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	685a      	ldr	r2, [r3, #4]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	429a      	cmp	r2, r3
 800add0:	d32b      	bcc.n	800ae2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	605a      	str	r2, [r3, #4]
 800adda:	e026      	b.n	800ae2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	68d8      	ldr	r0, [r3, #12]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade4:	461a      	mov	r2, r3
 800ade6:	68b9      	ldr	r1, [r7, #8]
 800ade8:	f002 f85c 	bl	800cea4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	68da      	ldr	r2, [r3, #12]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf4:	425b      	negs	r3, r3
 800adf6:	441a      	add	r2, r3
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	68da      	ldr	r2, [r3, #12]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d207      	bcs.n	800ae18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	689a      	ldr	r2, [r3, #8]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae10:	425b      	negs	r3, r3
 800ae12:	441a      	add	r2, r3
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	d105      	bne.n	800ae2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	3b01      	subs	r3, #1
 800ae28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	1c5a      	adds	r2, r3, #1
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ae32:	697b      	ldr	r3, [r7, #20]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3718      	adds	r7, #24
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d018      	beq.n	800ae80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	68da      	ldr	r2, [r3, #12]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae56:	441a      	add	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	68da      	ldr	r2, [r3, #12]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d303      	bcc.n	800ae70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	68d9      	ldr	r1, [r3, #12]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae78:	461a      	mov	r2, r3
 800ae7a:	6838      	ldr	r0, [r7, #0]
 800ae7c:	f002 f812 	bl	800cea4 <memcpy>
	}
}
 800ae80:	bf00      	nop
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae90:	f001 fc78 	bl	800c784 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae9c:	e011      	b.n	800aec2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d012      	beq.n	800aecc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	3324      	adds	r3, #36	; 0x24
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f000 fd50 	bl	800b950 <xTaskRemoveFromEventList>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d001      	beq.n	800aeba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aeb6:	f000 fe27 	bl	800bb08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	3b01      	subs	r3, #1
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	dce9      	bgt.n	800ae9e <prvUnlockQueue+0x16>
 800aeca:	e000      	b.n	800aece <prvUnlockQueue+0x46>
					break;
 800aecc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	22ff      	movs	r2, #255	; 0xff
 800aed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aed6:	f001 fc85 	bl	800c7e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aeda:	f001 fc53 	bl	800c784 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aee4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aee6:	e011      	b.n	800af0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d012      	beq.n	800af16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	3310      	adds	r3, #16
 800aef4:	4618      	mov	r0, r3
 800aef6:	f000 fd2b 	bl	800b950 <xTaskRemoveFromEventList>
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d001      	beq.n	800af04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af00:	f000 fe02 	bl	800bb08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af04:	7bbb      	ldrb	r3, [r7, #14]
 800af06:	3b01      	subs	r3, #1
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af10:	2b00      	cmp	r3, #0
 800af12:	dce9      	bgt.n	800aee8 <prvUnlockQueue+0x60>
 800af14:	e000      	b.n	800af18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	22ff      	movs	r2, #255	; 0xff
 800af1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800af20:	f001 fc60 	bl	800c7e4 <vPortExitCritical>
}
 800af24:	bf00      	nop
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af34:	f001 fc26 	bl	800c784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d102      	bne.n	800af46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af40:	2301      	movs	r3, #1
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	e001      	b.n	800af4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af46:	2300      	movs	r3, #0
 800af48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af4a:	f001 fc4b 	bl	800c7e4 <vPortExitCritical>

	return xReturn;
 800af4e:	68fb      	ldr	r3, [r7, #12]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af60:	f001 fc10 	bl	800c784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d102      	bne.n	800af76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af70:	2301      	movs	r3, #1
 800af72:	60fb      	str	r3, [r7, #12]
 800af74:	e001      	b.n	800af7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af76:	2300      	movs	r3, #0
 800af78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af7a:	f001 fc33 	bl	800c7e4 <vPortExitCritical>

	return xReturn;
 800af7e:	68fb      	ldr	r3, [r7, #12]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af92:	2300      	movs	r3, #0
 800af94:	60fb      	str	r3, [r7, #12]
 800af96:	e014      	b.n	800afc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af98:	4a0f      	ldr	r2, [pc, #60]	; (800afd8 <vQueueAddToRegistry+0x50>)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10b      	bne.n	800afbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800afa4:	490c      	ldr	r1, [pc, #48]	; (800afd8 <vQueueAddToRegistry+0x50>)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	683a      	ldr	r2, [r7, #0]
 800afaa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800afae:	4a0a      	ldr	r2, [pc, #40]	; (800afd8 <vQueueAddToRegistry+0x50>)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	00db      	lsls	r3, r3, #3
 800afb4:	4413      	add	r3, r2
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800afba:	e006      	b.n	800afca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	3301      	adds	r3, #1
 800afc0:	60fb      	str	r3, [r7, #12]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2b07      	cmp	r3, #7
 800afc6:	d9e7      	bls.n	800af98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800afc8:	bf00      	nop
 800afca:	bf00      	nop
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	24000960 	.word	0x24000960

0800afdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800afec:	f001 fbca 	bl	800c784 <vPortEnterCritical>
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aff6:	b25b      	sxtb	r3, r3
 800aff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800affc:	d103      	bne.n	800b006 <vQueueWaitForMessageRestricted+0x2a>
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b00c:	b25b      	sxtb	r3, r3
 800b00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b012:	d103      	bne.n	800b01c <vQueueWaitForMessageRestricted+0x40>
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b01c:	f001 fbe2 	bl	800c7e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b024:	2b00      	cmp	r3, #0
 800b026:	d106      	bne.n	800b036 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	3324      	adds	r3, #36	; 0x24
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	68b9      	ldr	r1, [r7, #8]
 800b030:	4618      	mov	r0, r3
 800b032:	f000 fc61 	bl	800b8f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b036:	6978      	ldr	r0, [r7, #20]
 800b038:	f7ff ff26 	bl	800ae88 <prvUnlockQueue>
	}
 800b03c:	bf00      	nop
 800b03e:	3718      	adds	r7, #24
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b044:	b580      	push	{r7, lr}
 800b046:	b08e      	sub	sp, #56	; 0x38
 800b048:	af04      	add	r7, sp, #16
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	607a      	str	r2, [r7, #4]
 800b050:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10a      	bne.n	800b06e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	623b      	str	r3, [r7, #32]
}
 800b06a:	bf00      	nop
 800b06c:	e7fe      	b.n	800b06c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10a      	bne.n	800b08a <xTaskCreateStatic+0x46>
	__asm volatile
 800b074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	61fb      	str	r3, [r7, #28]
}
 800b086:	bf00      	nop
 800b088:	e7fe      	b.n	800b088 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b08a:	23a8      	movs	r3, #168	; 0xa8
 800b08c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	2ba8      	cmp	r3, #168	; 0xa8
 800b092:	d00a      	beq.n	800b0aa <xTaskCreateStatic+0x66>
	__asm volatile
 800b094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	61bb      	str	r3, [r7, #24]
}
 800b0a6:	bf00      	nop
 800b0a8:	e7fe      	b.n	800b0a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b0aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d01e      	beq.n	800b0f0 <xTaskCreateStatic+0xac>
 800b0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d01b      	beq.n	800b0f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c4:	2202      	movs	r2, #2
 800b0c6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	9303      	str	r3, [sp, #12]
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d0:	9302      	str	r3, [sp, #8]
 800b0d2:	f107 0314 	add.w	r3, r7, #20
 800b0d6:	9301      	str	r3, [sp, #4]
 800b0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	68b9      	ldr	r1, [r7, #8]
 800b0e2:	68f8      	ldr	r0, [r7, #12]
 800b0e4:	f000 f850 	bl	800b188 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0ea:	f000 f8f3 	bl	800b2d4 <prvAddNewTaskToReadyList>
 800b0ee:	e001      	b.n	800b0f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b0f4:	697b      	ldr	r3, [r7, #20]
	}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3728      	adds	r7, #40	; 0x28
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b08c      	sub	sp, #48	; 0x30
 800b102:	af04      	add	r7, sp, #16
 800b104:	60f8      	str	r0, [r7, #12]
 800b106:	60b9      	str	r1, [r7, #8]
 800b108:	603b      	str	r3, [r7, #0]
 800b10a:	4613      	mov	r3, r2
 800b10c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b10e:	88fb      	ldrh	r3, [r7, #6]
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	4618      	mov	r0, r3
 800b114:	f001 fc58 	bl	800c9c8 <pvPortMalloc>
 800b118:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00e      	beq.n	800b13e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b120:	20a8      	movs	r0, #168	; 0xa8
 800b122:	f001 fc51 	bl	800c9c8 <pvPortMalloc>
 800b126:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d003      	beq.n	800b136 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	697a      	ldr	r2, [r7, #20]
 800b132:	631a      	str	r2, [r3, #48]	; 0x30
 800b134:	e005      	b.n	800b142 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b136:	6978      	ldr	r0, [r7, #20]
 800b138:	f001 fd12 	bl	800cb60 <vPortFree>
 800b13c:	e001      	b.n	800b142 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b13e:	2300      	movs	r3, #0
 800b140:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d017      	beq.n	800b178 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b150:	88fa      	ldrh	r2, [r7, #6]
 800b152:	2300      	movs	r3, #0
 800b154:	9303      	str	r3, [sp, #12]
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	9302      	str	r3, [sp, #8]
 800b15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15c:	9301      	str	r3, [sp, #4]
 800b15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b160:	9300      	str	r3, [sp, #0]
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	68b9      	ldr	r1, [r7, #8]
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	f000 f80e 	bl	800b188 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b16c:	69f8      	ldr	r0, [r7, #28]
 800b16e:	f000 f8b1 	bl	800b2d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b172:	2301      	movs	r3, #1
 800b174:	61bb      	str	r3, [r7, #24]
 800b176:	e002      	b.n	800b17e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b178:	f04f 33ff 	mov.w	r3, #4294967295
 800b17c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b17e:	69bb      	ldr	r3, [r7, #24]
	}
 800b180:	4618      	mov	r0, r3
 800b182:	3720      	adds	r7, #32
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b088      	sub	sp, #32
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
 800b194:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b198:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	461a      	mov	r2, r3
 800b1a0:	21a5      	movs	r1, #165	; 0xa5
 800b1a2:	f001 fdfb 	bl	800cd9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1aa:	6879      	ldr	r1, [r7, #4]
 800b1ac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b1b0:	440b      	add	r3, r1
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4413      	add	r3, r2
 800b1b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	f023 0307 	bic.w	r3, r3, #7
 800b1be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	f003 0307 	and.w	r3, r3, #7
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00a      	beq.n	800b1e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	617b      	str	r3, [r7, #20]
}
 800b1dc:	bf00      	nop
 800b1de:	e7fe      	b.n	800b1de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d01f      	beq.n	800b226 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	61fb      	str	r3, [r7, #28]
 800b1ea:	e012      	b.n	800b212 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	7819      	ldrb	r1, [r3, #0]
 800b1f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	3334      	adds	r3, #52	; 0x34
 800b1fc:	460a      	mov	r2, r1
 800b1fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	4413      	add	r3, r2
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d006      	beq.n	800b21a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	3301      	adds	r3, #1
 800b210:	61fb      	str	r3, [r7, #28]
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	2b0f      	cmp	r3, #15
 800b216:	d9e9      	bls.n	800b1ec <prvInitialiseNewTask+0x64>
 800b218:	e000      	b.n	800b21c <prvInitialiseNewTask+0x94>
			{
				break;
 800b21a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21e:	2200      	movs	r2, #0
 800b220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b224:	e003      	b.n	800b22e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b230:	2b37      	cmp	r3, #55	; 0x37
 800b232:	d901      	bls.n	800b238 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b234:	2337      	movs	r3, #55	; 0x37
 800b236:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b23c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b242:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b246:	2200      	movs	r2, #0
 800b248:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24c:	3304      	adds	r3, #4
 800b24e:	4618      	mov	r0, r3
 800b250:	f7ff f93e 	bl	800a4d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b256:	3318      	adds	r3, #24
 800b258:	4618      	mov	r0, r3
 800b25a:	f7ff f939 	bl	800a4d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b262:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b266:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b272:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b276:	2200      	movs	r2, #0
 800b278:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b286:	3354      	adds	r3, #84	; 0x54
 800b288:	224c      	movs	r2, #76	; 0x4c
 800b28a:	2100      	movs	r1, #0
 800b28c:	4618      	mov	r0, r3
 800b28e:	f001 fd85 	bl	800cd9c <memset>
 800b292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b294:	4a0c      	ldr	r2, [pc, #48]	; (800b2c8 <prvInitialiseNewTask+0x140>)
 800b296:	659a      	str	r2, [r3, #88]	; 0x58
 800b298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29a:	4a0c      	ldr	r2, [pc, #48]	; (800b2cc <prvInitialiseNewTask+0x144>)
 800b29c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a0:	4a0b      	ldr	r2, [pc, #44]	; (800b2d0 <prvInitialiseNewTask+0x148>)
 800b2a2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	68f9      	ldr	r1, [r7, #12]
 800b2a8:	69b8      	ldr	r0, [r7, #24]
 800b2aa:	f001 f941 	bl	800c530 <pxPortInitialiseStack>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d002      	beq.n	800b2c0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2c0:	bf00      	nop
 800b2c2:	3720      	adds	r7, #32
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	24004bf4 	.word	0x24004bf4
 800b2cc:	24004c5c 	.word	0x24004c5c
 800b2d0:	24004cc4 	.word	0x24004cc4

0800b2d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b2dc:	f001 fa52 	bl	800c784 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b2e0:	4b2d      	ldr	r3, [pc, #180]	; (800b398 <prvAddNewTaskToReadyList+0xc4>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	4a2c      	ldr	r2, [pc, #176]	; (800b398 <prvAddNewTaskToReadyList+0xc4>)
 800b2e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b2ea:	4b2c      	ldr	r3, [pc, #176]	; (800b39c <prvAddNewTaskToReadyList+0xc8>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d109      	bne.n	800b306 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2f2:	4a2a      	ldr	r2, [pc, #168]	; (800b39c <prvAddNewTaskToReadyList+0xc8>)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2f8:	4b27      	ldr	r3, [pc, #156]	; (800b398 <prvAddNewTaskToReadyList+0xc4>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d110      	bne.n	800b322 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b300:	f000 fc26 	bl	800bb50 <prvInitialiseTaskLists>
 800b304:	e00d      	b.n	800b322 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b306:	4b26      	ldr	r3, [pc, #152]	; (800b3a0 <prvAddNewTaskToReadyList+0xcc>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d109      	bne.n	800b322 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b30e:	4b23      	ldr	r3, [pc, #140]	; (800b39c <prvAddNewTaskToReadyList+0xc8>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b318:	429a      	cmp	r2, r3
 800b31a:	d802      	bhi.n	800b322 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b31c:	4a1f      	ldr	r2, [pc, #124]	; (800b39c <prvAddNewTaskToReadyList+0xc8>)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b322:	4b20      	ldr	r3, [pc, #128]	; (800b3a4 <prvAddNewTaskToReadyList+0xd0>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	3301      	adds	r3, #1
 800b328:	4a1e      	ldr	r2, [pc, #120]	; (800b3a4 <prvAddNewTaskToReadyList+0xd0>)
 800b32a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b32c:	4b1d      	ldr	r3, [pc, #116]	; (800b3a4 <prvAddNewTaskToReadyList+0xd0>)
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b338:	4b1b      	ldr	r3, [pc, #108]	; (800b3a8 <prvAddNewTaskToReadyList+0xd4>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d903      	bls.n	800b348 <prvAddNewTaskToReadyList+0x74>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b344:	4a18      	ldr	r2, [pc, #96]	; (800b3a8 <prvAddNewTaskToReadyList+0xd4>)
 800b346:	6013      	str	r3, [r2, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b34c:	4613      	mov	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4413      	add	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4a15      	ldr	r2, [pc, #84]	; (800b3ac <prvAddNewTaskToReadyList+0xd8>)
 800b356:	441a      	add	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	3304      	adds	r3, #4
 800b35c:	4619      	mov	r1, r3
 800b35e:	4610      	mov	r0, r2
 800b360:	f7ff f8c3 	bl	800a4ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b364:	f001 fa3e 	bl	800c7e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b368:	4b0d      	ldr	r3, [pc, #52]	; (800b3a0 <prvAddNewTaskToReadyList+0xcc>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00e      	beq.n	800b38e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b370:	4b0a      	ldr	r3, [pc, #40]	; (800b39c <prvAddNewTaskToReadyList+0xc8>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d207      	bcs.n	800b38e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b37e:	4b0c      	ldr	r3, [pc, #48]	; (800b3b0 <prvAddNewTaskToReadyList+0xdc>)
 800b380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b38e:	bf00      	nop
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	24000e74 	.word	0x24000e74
 800b39c:	240009a0 	.word	0x240009a0
 800b3a0:	24000e80 	.word	0x24000e80
 800b3a4:	24000e90 	.word	0x24000e90
 800b3a8:	24000e7c 	.word	0x24000e7c
 800b3ac:	240009a4 	.word	0x240009a4
 800b3b0:	e000ed04 	.word	0xe000ed04

0800b3b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d017      	beq.n	800b3f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b3c6:	4b13      	ldr	r3, [pc, #76]	; (800b414 <vTaskDelay+0x60>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00a      	beq.n	800b3e4 <vTaskDelay+0x30>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	60bb      	str	r3, [r7, #8]
}
 800b3e0:	bf00      	nop
 800b3e2:	e7fe      	b.n	800b3e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b3e4:	f000 f88a 	bl	800b4fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fcfe 	bl	800bdec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3f0:	f000 f892 	bl	800b518 <xTaskResumeAll>
 800b3f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d107      	bne.n	800b40c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b3fc:	4b06      	ldr	r3, [pc, #24]	; (800b418 <vTaskDelay+0x64>)
 800b3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b40c:	bf00      	nop
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	24000e9c 	.word	0x24000e9c
 800b418:	e000ed04 	.word	0xe000ed04

0800b41c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b08a      	sub	sp, #40	; 0x28
 800b420:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b422:	2300      	movs	r3, #0
 800b424:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b426:	2300      	movs	r3, #0
 800b428:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b42a:	463a      	mov	r2, r7
 800b42c:	1d39      	adds	r1, r7, #4
 800b42e:	f107 0308 	add.w	r3, r7, #8
 800b432:	4618      	mov	r0, r3
 800b434:	f7fe fff8 	bl	800a428 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	68ba      	ldr	r2, [r7, #8]
 800b43e:	9202      	str	r2, [sp, #8]
 800b440:	9301      	str	r3, [sp, #4]
 800b442:	2300      	movs	r3, #0
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	2300      	movs	r3, #0
 800b448:	460a      	mov	r2, r1
 800b44a:	4924      	ldr	r1, [pc, #144]	; (800b4dc <vTaskStartScheduler+0xc0>)
 800b44c:	4824      	ldr	r0, [pc, #144]	; (800b4e0 <vTaskStartScheduler+0xc4>)
 800b44e:	f7ff fdf9 	bl	800b044 <xTaskCreateStatic>
 800b452:	4603      	mov	r3, r0
 800b454:	4a23      	ldr	r2, [pc, #140]	; (800b4e4 <vTaskStartScheduler+0xc8>)
 800b456:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b458:	4b22      	ldr	r3, [pc, #136]	; (800b4e4 <vTaskStartScheduler+0xc8>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d002      	beq.n	800b466 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b460:	2301      	movs	r3, #1
 800b462:	617b      	str	r3, [r7, #20]
 800b464:	e001      	b.n	800b46a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b466:	2300      	movs	r3, #0
 800b468:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d102      	bne.n	800b476 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b470:	f000 fd10 	bl	800be94 <xTimerCreateTimerTask>
 800b474:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d11b      	bne.n	800b4b4 <vTaskStartScheduler+0x98>
	__asm volatile
 800b47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	613b      	str	r3, [r7, #16]
}
 800b48e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b490:	4b15      	ldr	r3, [pc, #84]	; (800b4e8 <vTaskStartScheduler+0xcc>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	3354      	adds	r3, #84	; 0x54
 800b496:	4a15      	ldr	r2, [pc, #84]	; (800b4ec <vTaskStartScheduler+0xd0>)
 800b498:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b49a:	4b15      	ldr	r3, [pc, #84]	; (800b4f0 <vTaskStartScheduler+0xd4>)
 800b49c:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b4a2:	4b14      	ldr	r3, [pc, #80]	; (800b4f4 <vTaskStartScheduler+0xd8>)
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b4a8:	4b13      	ldr	r3, [pc, #76]	; (800b4f8 <vTaskStartScheduler+0xdc>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b4ae:	f001 f8c7 	bl	800c640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b4b2:	e00e      	b.n	800b4d2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ba:	d10a      	bne.n	800b4d2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c0:	f383 8811 	msr	BASEPRI, r3
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	60fb      	str	r3, [r7, #12]
}
 800b4ce:	bf00      	nop
 800b4d0:	e7fe      	b.n	800b4d0 <vTaskStartScheduler+0xb4>
}
 800b4d2:	bf00      	nop
 800b4d4:	3718      	adds	r7, #24
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	0800cfa8 	.word	0x0800cfa8
 800b4e0:	0800bb21 	.word	0x0800bb21
 800b4e4:	24000e98 	.word	0x24000e98
 800b4e8:	240009a0 	.word	0x240009a0
 800b4ec:	24000060 	.word	0x24000060
 800b4f0:	24000e94 	.word	0x24000e94
 800b4f4:	24000e80 	.word	0x24000e80
 800b4f8:	24000e78 	.word	0x24000e78

0800b4fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b500:	4b04      	ldr	r3, [pc, #16]	; (800b514 <vTaskSuspendAll+0x18>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	3301      	adds	r3, #1
 800b506:	4a03      	ldr	r2, [pc, #12]	; (800b514 <vTaskSuspendAll+0x18>)
 800b508:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b50a:	bf00      	nop
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	24000e9c 	.word	0x24000e9c

0800b518 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b51e:	2300      	movs	r3, #0
 800b520:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b522:	2300      	movs	r3, #0
 800b524:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b526:	4b42      	ldr	r3, [pc, #264]	; (800b630 <xTaskResumeAll+0x118>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10a      	bne.n	800b544 <xTaskResumeAll+0x2c>
	__asm volatile
 800b52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b532:	f383 8811 	msr	BASEPRI, r3
 800b536:	f3bf 8f6f 	isb	sy
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	603b      	str	r3, [r7, #0]
}
 800b540:	bf00      	nop
 800b542:	e7fe      	b.n	800b542 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b544:	f001 f91e 	bl	800c784 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b548:	4b39      	ldr	r3, [pc, #228]	; (800b630 <xTaskResumeAll+0x118>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3b01      	subs	r3, #1
 800b54e:	4a38      	ldr	r2, [pc, #224]	; (800b630 <xTaskResumeAll+0x118>)
 800b550:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b552:	4b37      	ldr	r3, [pc, #220]	; (800b630 <xTaskResumeAll+0x118>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d162      	bne.n	800b620 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b55a:	4b36      	ldr	r3, [pc, #216]	; (800b634 <xTaskResumeAll+0x11c>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d05e      	beq.n	800b620 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b562:	e02f      	b.n	800b5c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b564:	4b34      	ldr	r3, [pc, #208]	; (800b638 <xTaskResumeAll+0x120>)
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	3318      	adds	r3, #24
 800b570:	4618      	mov	r0, r3
 800b572:	f7ff f817 	bl	800a5a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	3304      	adds	r3, #4
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7ff f812 	bl	800a5a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b584:	4b2d      	ldr	r3, [pc, #180]	; (800b63c <xTaskResumeAll+0x124>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d903      	bls.n	800b594 <xTaskResumeAll+0x7c>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b590:	4a2a      	ldr	r2, [pc, #168]	; (800b63c <xTaskResumeAll+0x124>)
 800b592:	6013      	str	r3, [r2, #0]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b598:	4613      	mov	r3, r2
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	4413      	add	r3, r2
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4a27      	ldr	r2, [pc, #156]	; (800b640 <xTaskResumeAll+0x128>)
 800b5a2:	441a      	add	r2, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	4610      	mov	r0, r2
 800b5ac:	f7fe ff9d 	bl	800a4ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b4:	4b23      	ldr	r3, [pc, #140]	; (800b644 <xTaskResumeAll+0x12c>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d302      	bcc.n	800b5c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b5be:	4b22      	ldr	r3, [pc, #136]	; (800b648 <xTaskResumeAll+0x130>)
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5c4:	4b1c      	ldr	r3, [pc, #112]	; (800b638 <xTaskResumeAll+0x120>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d1cb      	bne.n	800b564 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5d2:	f000 fb5f 	bl	800bc94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b5d6:	4b1d      	ldr	r3, [pc, #116]	; (800b64c <xTaskResumeAll+0x134>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d010      	beq.n	800b604 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5e2:	f000 f847 	bl	800b674 <xTaskIncrementTick>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b5ec:	4b16      	ldr	r3, [pc, #88]	; (800b648 <xTaskResumeAll+0x130>)
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1f1      	bne.n	800b5e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b5fe:	4b13      	ldr	r3, [pc, #76]	; (800b64c <xTaskResumeAll+0x134>)
 800b600:	2200      	movs	r2, #0
 800b602:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b604:	4b10      	ldr	r3, [pc, #64]	; (800b648 <xTaskResumeAll+0x130>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d009      	beq.n	800b620 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b60c:	2301      	movs	r3, #1
 800b60e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b610:	4b0f      	ldr	r3, [pc, #60]	; (800b650 <xTaskResumeAll+0x138>)
 800b612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b616:	601a      	str	r2, [r3, #0]
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b620:	f001 f8e0 	bl	800c7e4 <vPortExitCritical>

	return xAlreadyYielded;
 800b624:	68bb      	ldr	r3, [r7, #8]
}
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	24000e9c 	.word	0x24000e9c
 800b634:	24000e74 	.word	0x24000e74
 800b638:	24000e34 	.word	0x24000e34
 800b63c:	24000e7c 	.word	0x24000e7c
 800b640:	240009a4 	.word	0x240009a4
 800b644:	240009a0 	.word	0x240009a0
 800b648:	24000e88 	.word	0x24000e88
 800b64c:	24000e84 	.word	0x24000e84
 800b650:	e000ed04 	.word	0xe000ed04

0800b654 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b65a:	4b05      	ldr	r3, [pc, #20]	; (800b670 <xTaskGetTickCount+0x1c>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b660:	687b      	ldr	r3, [r7, #4]
}
 800b662:	4618      	mov	r0, r3
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	24000e78 	.word	0x24000e78

0800b674 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b67a:	2300      	movs	r3, #0
 800b67c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b67e:	4b4f      	ldr	r3, [pc, #316]	; (800b7bc <xTaskIncrementTick+0x148>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	f040 808f 	bne.w	800b7a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b688:	4b4d      	ldr	r3, [pc, #308]	; (800b7c0 <xTaskIncrementTick+0x14c>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	3301      	adds	r3, #1
 800b68e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b690:	4a4b      	ldr	r2, [pc, #300]	; (800b7c0 <xTaskIncrementTick+0x14c>)
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d120      	bne.n	800b6de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b69c:	4b49      	ldr	r3, [pc, #292]	; (800b7c4 <xTaskIncrementTick+0x150>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00a      	beq.n	800b6bc <xTaskIncrementTick+0x48>
	__asm volatile
 800b6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6aa:	f383 8811 	msr	BASEPRI, r3
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	603b      	str	r3, [r7, #0]
}
 800b6b8:	bf00      	nop
 800b6ba:	e7fe      	b.n	800b6ba <xTaskIncrementTick+0x46>
 800b6bc:	4b41      	ldr	r3, [pc, #260]	; (800b7c4 <xTaskIncrementTick+0x150>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	60fb      	str	r3, [r7, #12]
 800b6c2:	4b41      	ldr	r3, [pc, #260]	; (800b7c8 <xTaskIncrementTick+0x154>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a3f      	ldr	r2, [pc, #252]	; (800b7c4 <xTaskIncrementTick+0x150>)
 800b6c8:	6013      	str	r3, [r2, #0]
 800b6ca:	4a3f      	ldr	r2, [pc, #252]	; (800b7c8 <xTaskIncrementTick+0x154>)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6013      	str	r3, [r2, #0]
 800b6d0:	4b3e      	ldr	r3, [pc, #248]	; (800b7cc <xTaskIncrementTick+0x158>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	4a3d      	ldr	r2, [pc, #244]	; (800b7cc <xTaskIncrementTick+0x158>)
 800b6d8:	6013      	str	r3, [r2, #0]
 800b6da:	f000 fadb 	bl	800bc94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6de:	4b3c      	ldr	r3, [pc, #240]	; (800b7d0 <xTaskIncrementTick+0x15c>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	693a      	ldr	r2, [r7, #16]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d349      	bcc.n	800b77c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6e8:	4b36      	ldr	r3, [pc, #216]	; (800b7c4 <xTaskIncrementTick+0x150>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d104      	bne.n	800b6fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6f2:	4b37      	ldr	r3, [pc, #220]	; (800b7d0 <xTaskIncrementTick+0x15c>)
 800b6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f8:	601a      	str	r2, [r3, #0]
					break;
 800b6fa:	e03f      	b.n	800b77c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6fc:	4b31      	ldr	r3, [pc, #196]	; (800b7c4 <xTaskIncrementTick+0x150>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b70c:	693a      	ldr	r2, [r7, #16]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	429a      	cmp	r2, r3
 800b712:	d203      	bcs.n	800b71c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b714:	4a2e      	ldr	r2, [pc, #184]	; (800b7d0 <xTaskIncrementTick+0x15c>)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b71a:	e02f      	b.n	800b77c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	3304      	adds	r3, #4
 800b720:	4618      	mov	r0, r3
 800b722:	f7fe ff3f 	bl	800a5a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d004      	beq.n	800b738 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	3318      	adds	r3, #24
 800b732:	4618      	mov	r0, r3
 800b734:	f7fe ff36 	bl	800a5a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b73c:	4b25      	ldr	r3, [pc, #148]	; (800b7d4 <xTaskIncrementTick+0x160>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	429a      	cmp	r2, r3
 800b742:	d903      	bls.n	800b74c <xTaskIncrementTick+0xd8>
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b748:	4a22      	ldr	r2, [pc, #136]	; (800b7d4 <xTaskIncrementTick+0x160>)
 800b74a:	6013      	str	r3, [r2, #0]
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b750:	4613      	mov	r3, r2
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	4413      	add	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4a1f      	ldr	r2, [pc, #124]	; (800b7d8 <xTaskIncrementTick+0x164>)
 800b75a:	441a      	add	r2, r3
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	3304      	adds	r3, #4
 800b760:	4619      	mov	r1, r3
 800b762:	4610      	mov	r0, r2
 800b764:	f7fe fec1 	bl	800a4ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76c:	4b1b      	ldr	r3, [pc, #108]	; (800b7dc <xTaskIncrementTick+0x168>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b772:	429a      	cmp	r2, r3
 800b774:	d3b8      	bcc.n	800b6e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b776:	2301      	movs	r3, #1
 800b778:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b77a:	e7b5      	b.n	800b6e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b77c:	4b17      	ldr	r3, [pc, #92]	; (800b7dc <xTaskIncrementTick+0x168>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b782:	4915      	ldr	r1, [pc, #84]	; (800b7d8 <xTaskIncrementTick+0x164>)
 800b784:	4613      	mov	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4413      	add	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	440b      	add	r3, r1
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d901      	bls.n	800b798 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b794:	2301      	movs	r3, #1
 800b796:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b798:	4b11      	ldr	r3, [pc, #68]	; (800b7e0 <xTaskIncrementTick+0x16c>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d007      	beq.n	800b7b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	617b      	str	r3, [r7, #20]
 800b7a4:	e004      	b.n	800b7b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b7a6:	4b0f      	ldr	r3, [pc, #60]	; (800b7e4 <xTaskIncrementTick+0x170>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	4a0d      	ldr	r2, [pc, #52]	; (800b7e4 <xTaskIncrementTick+0x170>)
 800b7ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b7b0:	697b      	ldr	r3, [r7, #20]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3718      	adds	r7, #24
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	24000e9c 	.word	0x24000e9c
 800b7c0:	24000e78 	.word	0x24000e78
 800b7c4:	24000e2c 	.word	0x24000e2c
 800b7c8:	24000e30 	.word	0x24000e30
 800b7cc:	24000e8c 	.word	0x24000e8c
 800b7d0:	24000e94 	.word	0x24000e94
 800b7d4:	24000e7c 	.word	0x24000e7c
 800b7d8:	240009a4 	.word	0x240009a4
 800b7dc:	240009a0 	.word	0x240009a0
 800b7e0:	24000e88 	.word	0x24000e88
 800b7e4:	24000e84 	.word	0x24000e84

0800b7e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7ee:	4b2a      	ldr	r3, [pc, #168]	; (800b898 <vTaskSwitchContext+0xb0>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d003      	beq.n	800b7fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7f6:	4b29      	ldr	r3, [pc, #164]	; (800b89c <vTaskSwitchContext+0xb4>)
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7fc:	e046      	b.n	800b88c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b7fe:	4b27      	ldr	r3, [pc, #156]	; (800b89c <vTaskSwitchContext+0xb4>)
 800b800:	2200      	movs	r2, #0
 800b802:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b804:	4b26      	ldr	r3, [pc, #152]	; (800b8a0 <vTaskSwitchContext+0xb8>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	60fb      	str	r3, [r7, #12]
 800b80a:	e010      	b.n	800b82e <vTaskSwitchContext+0x46>
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10a      	bne.n	800b828 <vTaskSwitchContext+0x40>
	__asm volatile
 800b812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b816:	f383 8811 	msr	BASEPRI, r3
 800b81a:	f3bf 8f6f 	isb	sy
 800b81e:	f3bf 8f4f 	dsb	sy
 800b822:	607b      	str	r3, [r7, #4]
}
 800b824:	bf00      	nop
 800b826:	e7fe      	b.n	800b826 <vTaskSwitchContext+0x3e>
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	3b01      	subs	r3, #1
 800b82c:	60fb      	str	r3, [r7, #12]
 800b82e:	491d      	ldr	r1, [pc, #116]	; (800b8a4 <vTaskSwitchContext+0xbc>)
 800b830:	68fa      	ldr	r2, [r7, #12]
 800b832:	4613      	mov	r3, r2
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4413      	add	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	440b      	add	r3, r1
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d0e4      	beq.n	800b80c <vTaskSwitchContext+0x24>
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	4613      	mov	r3, r2
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	4413      	add	r3, r2
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	4a15      	ldr	r2, [pc, #84]	; (800b8a4 <vTaskSwitchContext+0xbc>)
 800b84e:	4413      	add	r3, r2
 800b850:	60bb      	str	r3, [r7, #8]
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	685a      	ldr	r2, [r3, #4]
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	605a      	str	r2, [r3, #4]
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	685a      	ldr	r2, [r3, #4]
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	3308      	adds	r3, #8
 800b864:	429a      	cmp	r2, r3
 800b866:	d104      	bne.n	800b872 <vTaskSwitchContext+0x8a>
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	685a      	ldr	r2, [r3, #4]
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	605a      	str	r2, [r3, #4]
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	4a0b      	ldr	r2, [pc, #44]	; (800b8a8 <vTaskSwitchContext+0xc0>)
 800b87a:	6013      	str	r3, [r2, #0]
 800b87c:	4a08      	ldr	r2, [pc, #32]	; (800b8a0 <vTaskSwitchContext+0xb8>)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b882:	4b09      	ldr	r3, [pc, #36]	; (800b8a8 <vTaskSwitchContext+0xc0>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	3354      	adds	r3, #84	; 0x54
 800b888:	4a08      	ldr	r2, [pc, #32]	; (800b8ac <vTaskSwitchContext+0xc4>)
 800b88a:	6013      	str	r3, [r2, #0]
}
 800b88c:	bf00      	nop
 800b88e:	3714      	adds	r7, #20
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr
 800b898:	24000e9c 	.word	0x24000e9c
 800b89c:	24000e88 	.word	0x24000e88
 800b8a0:	24000e7c 	.word	0x24000e7c
 800b8a4:	240009a4 	.word	0x240009a4
 800b8a8:	240009a0 	.word	0x240009a0
 800b8ac:	24000060 	.word	0x24000060

0800b8b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10a      	bne.n	800b8d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	60fb      	str	r3, [r7, #12]
}
 800b8d2:	bf00      	nop
 800b8d4:	e7fe      	b.n	800b8d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8d6:	4b07      	ldr	r3, [pc, #28]	; (800b8f4 <vTaskPlaceOnEventList+0x44>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	3318      	adds	r3, #24
 800b8dc:	4619      	mov	r1, r3
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7fe fe27 	bl	800a532 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8e4:	2101      	movs	r1, #1
 800b8e6:	6838      	ldr	r0, [r7, #0]
 800b8e8:	f000 fa80 	bl	800bdec <prvAddCurrentTaskToDelayedList>
}
 800b8ec:	bf00      	nop
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	240009a0 	.word	0x240009a0

0800b8f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10a      	bne.n	800b920 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90e:	f383 8811 	msr	BASEPRI, r3
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	f3bf 8f4f 	dsb	sy
 800b91a:	617b      	str	r3, [r7, #20]
}
 800b91c:	bf00      	nop
 800b91e:	e7fe      	b.n	800b91e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b920:	4b0a      	ldr	r3, [pc, #40]	; (800b94c <vTaskPlaceOnEventListRestricted+0x54>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	3318      	adds	r3, #24
 800b926:	4619      	mov	r1, r3
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f7fe fdde 	bl	800a4ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d002      	beq.n	800b93a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b934:	f04f 33ff 	mov.w	r3, #4294967295
 800b938:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b93a:	6879      	ldr	r1, [r7, #4]
 800b93c:	68b8      	ldr	r0, [r7, #8]
 800b93e:	f000 fa55 	bl	800bdec <prvAddCurrentTaskToDelayedList>
	}
 800b942:	bf00      	nop
 800b944:	3718      	adds	r7, #24
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	240009a0 	.word	0x240009a0

0800b950 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b086      	sub	sp, #24
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d10a      	bne.n	800b97c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96a:	f383 8811 	msr	BASEPRI, r3
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f3bf 8f4f 	dsb	sy
 800b976:	60fb      	str	r3, [r7, #12]
}
 800b978:	bf00      	nop
 800b97a:	e7fe      	b.n	800b97a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	3318      	adds	r3, #24
 800b980:	4618      	mov	r0, r3
 800b982:	f7fe fe0f 	bl	800a5a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b986:	4b1e      	ldr	r3, [pc, #120]	; (800ba00 <xTaskRemoveFromEventList+0xb0>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d11d      	bne.n	800b9ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	3304      	adds	r3, #4
 800b992:	4618      	mov	r0, r3
 800b994:	f7fe fe06 	bl	800a5a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b99c:	4b19      	ldr	r3, [pc, #100]	; (800ba04 <xTaskRemoveFromEventList+0xb4>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d903      	bls.n	800b9ac <xTaskRemoveFromEventList+0x5c>
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a8:	4a16      	ldr	r2, [pc, #88]	; (800ba04 <xTaskRemoveFromEventList+0xb4>)
 800b9aa:	6013      	str	r3, [r2, #0]
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4413      	add	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	4a13      	ldr	r2, [pc, #76]	; (800ba08 <xTaskRemoveFromEventList+0xb8>)
 800b9ba:	441a      	add	r2, r3
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	3304      	adds	r3, #4
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	f7fe fd91 	bl	800a4ea <vListInsertEnd>
 800b9c8:	e005      	b.n	800b9d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	3318      	adds	r3, #24
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	480e      	ldr	r0, [pc, #56]	; (800ba0c <xTaskRemoveFromEventList+0xbc>)
 800b9d2:	f7fe fd8a 	bl	800a4ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9da:	4b0d      	ldr	r3, [pc, #52]	; (800ba10 <xTaskRemoveFromEventList+0xc0>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d905      	bls.n	800b9f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9e8:	4b0a      	ldr	r3, [pc, #40]	; (800ba14 <xTaskRemoveFromEventList+0xc4>)
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	601a      	str	r2, [r3, #0]
 800b9ee:	e001      	b.n	800b9f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b9f4:	697b      	ldr	r3, [r7, #20]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3718      	adds	r7, #24
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	24000e9c 	.word	0x24000e9c
 800ba04:	24000e7c 	.word	0x24000e7c
 800ba08:	240009a4 	.word	0x240009a4
 800ba0c:	24000e34 	.word	0x24000e34
 800ba10:	240009a0 	.word	0x240009a0
 800ba14:	24000e88 	.word	0x24000e88

0800ba18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba20:	4b06      	ldr	r3, [pc, #24]	; (800ba3c <vTaskInternalSetTimeOutState+0x24>)
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba28:	4b05      	ldr	r3, [pc, #20]	; (800ba40 <vTaskInternalSetTimeOutState+0x28>)
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	605a      	str	r2, [r3, #4]
}
 800ba30:	bf00      	nop
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr
 800ba3c:	24000e8c 	.word	0x24000e8c
 800ba40:	24000e78 	.word	0x24000e78

0800ba44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b088      	sub	sp, #32
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d10a      	bne.n	800ba6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ba54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba58:	f383 8811 	msr	BASEPRI, r3
 800ba5c:	f3bf 8f6f 	isb	sy
 800ba60:	f3bf 8f4f 	dsb	sy
 800ba64:	613b      	str	r3, [r7, #16]
}
 800ba66:	bf00      	nop
 800ba68:	e7fe      	b.n	800ba68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10a      	bne.n	800ba86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	60fb      	str	r3, [r7, #12]
}
 800ba82:	bf00      	nop
 800ba84:	e7fe      	b.n	800ba84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ba86:	f000 fe7d 	bl	800c784 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba8a:	4b1d      	ldr	r3, [pc, #116]	; (800bb00 <xTaskCheckForTimeOut+0xbc>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	69ba      	ldr	r2, [r7, #24]
 800ba96:	1ad3      	subs	r3, r2, r3
 800ba98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa2:	d102      	bne.n	800baaa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800baa4:	2300      	movs	r3, #0
 800baa6:	61fb      	str	r3, [r7, #28]
 800baa8:	e023      	b.n	800baf2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	4b15      	ldr	r3, [pc, #84]	; (800bb04 <xTaskCheckForTimeOut+0xc0>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d007      	beq.n	800bac6 <xTaskCheckForTimeOut+0x82>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	69ba      	ldr	r2, [r7, #24]
 800babc:	429a      	cmp	r2, r3
 800babe:	d302      	bcc.n	800bac6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bac0:	2301      	movs	r3, #1
 800bac2:	61fb      	str	r3, [r7, #28]
 800bac4:	e015      	b.n	800baf2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	697a      	ldr	r2, [r7, #20]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d20b      	bcs.n	800bae8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	1ad2      	subs	r2, r2, r3
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f7ff ff9b 	bl	800ba18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bae2:	2300      	movs	r3, #0
 800bae4:	61fb      	str	r3, [r7, #28]
 800bae6:	e004      	b.n	800baf2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	2200      	movs	r2, #0
 800baec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800baee:	2301      	movs	r3, #1
 800baf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800baf2:	f000 fe77 	bl	800c7e4 <vPortExitCritical>

	return xReturn;
 800baf6:	69fb      	ldr	r3, [r7, #28]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3720      	adds	r7, #32
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	24000e78 	.word	0x24000e78
 800bb04:	24000e8c 	.word	0x24000e8c

0800bb08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb08:	b480      	push	{r7}
 800bb0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb0c:	4b03      	ldr	r3, [pc, #12]	; (800bb1c <vTaskMissedYield+0x14>)
 800bb0e:	2201      	movs	r2, #1
 800bb10:	601a      	str	r2, [r3, #0]
}
 800bb12:	bf00      	nop
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr
 800bb1c:	24000e88 	.word	0x24000e88

0800bb20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb28:	f000 f852 	bl	800bbd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb2c:	4b06      	ldr	r3, [pc, #24]	; (800bb48 <prvIdleTask+0x28>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d9f9      	bls.n	800bb28 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb34:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <prvIdleTask+0x2c>)
 800bb36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb3a:	601a      	str	r2, [r3, #0]
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb44:	e7f0      	b.n	800bb28 <prvIdleTask+0x8>
 800bb46:	bf00      	nop
 800bb48:	240009a4 	.word	0x240009a4
 800bb4c:	e000ed04 	.word	0xe000ed04

0800bb50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb56:	2300      	movs	r3, #0
 800bb58:	607b      	str	r3, [r7, #4]
 800bb5a:	e00c      	b.n	800bb76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	4613      	mov	r3, r2
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	4413      	add	r3, r2
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	4a12      	ldr	r2, [pc, #72]	; (800bbb0 <prvInitialiseTaskLists+0x60>)
 800bb68:	4413      	add	r3, r2
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7fe fc90 	bl	800a490 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	3301      	adds	r3, #1
 800bb74:	607b      	str	r3, [r7, #4]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2b37      	cmp	r3, #55	; 0x37
 800bb7a:	d9ef      	bls.n	800bb5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb7c:	480d      	ldr	r0, [pc, #52]	; (800bbb4 <prvInitialiseTaskLists+0x64>)
 800bb7e:	f7fe fc87 	bl	800a490 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb82:	480d      	ldr	r0, [pc, #52]	; (800bbb8 <prvInitialiseTaskLists+0x68>)
 800bb84:	f7fe fc84 	bl	800a490 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb88:	480c      	ldr	r0, [pc, #48]	; (800bbbc <prvInitialiseTaskLists+0x6c>)
 800bb8a:	f7fe fc81 	bl	800a490 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb8e:	480c      	ldr	r0, [pc, #48]	; (800bbc0 <prvInitialiseTaskLists+0x70>)
 800bb90:	f7fe fc7e 	bl	800a490 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb94:	480b      	ldr	r0, [pc, #44]	; (800bbc4 <prvInitialiseTaskLists+0x74>)
 800bb96:	f7fe fc7b 	bl	800a490 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb9a:	4b0b      	ldr	r3, [pc, #44]	; (800bbc8 <prvInitialiseTaskLists+0x78>)
 800bb9c:	4a05      	ldr	r2, [pc, #20]	; (800bbb4 <prvInitialiseTaskLists+0x64>)
 800bb9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bba0:	4b0a      	ldr	r3, [pc, #40]	; (800bbcc <prvInitialiseTaskLists+0x7c>)
 800bba2:	4a05      	ldr	r2, [pc, #20]	; (800bbb8 <prvInitialiseTaskLists+0x68>)
 800bba4:	601a      	str	r2, [r3, #0]
}
 800bba6:	bf00      	nop
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	240009a4 	.word	0x240009a4
 800bbb4:	24000e04 	.word	0x24000e04
 800bbb8:	24000e18 	.word	0x24000e18
 800bbbc:	24000e34 	.word	0x24000e34
 800bbc0:	24000e48 	.word	0x24000e48
 800bbc4:	24000e60 	.word	0x24000e60
 800bbc8:	24000e2c 	.word	0x24000e2c
 800bbcc:	24000e30 	.word	0x24000e30

0800bbd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbd6:	e019      	b.n	800bc0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bbd8:	f000 fdd4 	bl	800c784 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbdc:	4b10      	ldr	r3, [pc, #64]	; (800bc20 <prvCheckTasksWaitingTermination+0x50>)
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	68db      	ldr	r3, [r3, #12]
 800bbe2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7fe fcdb 	bl	800a5a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbee:	4b0d      	ldr	r3, [pc, #52]	; (800bc24 <prvCheckTasksWaitingTermination+0x54>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	4a0b      	ldr	r2, [pc, #44]	; (800bc24 <prvCheckTasksWaitingTermination+0x54>)
 800bbf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bbf8:	4b0b      	ldr	r3, [pc, #44]	; (800bc28 <prvCheckTasksWaitingTermination+0x58>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	4a0a      	ldr	r2, [pc, #40]	; (800bc28 <prvCheckTasksWaitingTermination+0x58>)
 800bc00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc02:	f000 fdef 	bl	800c7e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f810 	bl	800bc2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc0c:	4b06      	ldr	r3, [pc, #24]	; (800bc28 <prvCheckTasksWaitingTermination+0x58>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d1e1      	bne.n	800bbd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc14:	bf00      	nop
 800bc16:	bf00      	nop
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	24000e48 	.word	0x24000e48
 800bc24:	24000e74 	.word	0x24000e74
 800bc28:	24000e5c 	.word	0x24000e5c

0800bc2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	3354      	adds	r3, #84	; 0x54
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f001 f8b7 	bl	800cdac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d108      	bne.n	800bc5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f000 ff87 	bl	800cb60 <vPortFree>
				vPortFree( pxTCB );
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 ff84 	bl	800cb60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc58:	e018      	b.n	800bc8c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d103      	bne.n	800bc6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 ff7b 	bl	800cb60 <vPortFree>
	}
 800bc6a:	e00f      	b.n	800bc8c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800bc72:	2b02      	cmp	r3, #2
 800bc74:	d00a      	beq.n	800bc8c <prvDeleteTCB+0x60>
	__asm volatile
 800bc76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7a:	f383 8811 	msr	BASEPRI, r3
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f3bf 8f4f 	dsb	sy
 800bc86:	60fb      	str	r3, [r7, #12]
}
 800bc88:	bf00      	nop
 800bc8a:	e7fe      	b.n	800bc8a <prvDeleteTCB+0x5e>
	}
 800bc8c:	bf00      	nop
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc9a:	4b0c      	ldr	r3, [pc, #48]	; (800bccc <prvResetNextTaskUnblockTime+0x38>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d104      	bne.n	800bcae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bca4:	4b0a      	ldr	r3, [pc, #40]	; (800bcd0 <prvResetNextTaskUnblockTime+0x3c>)
 800bca6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bcac:	e008      	b.n	800bcc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcae:	4b07      	ldr	r3, [pc, #28]	; (800bccc <prvResetNextTaskUnblockTime+0x38>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	4a04      	ldr	r2, [pc, #16]	; (800bcd0 <prvResetNextTaskUnblockTime+0x3c>)
 800bcbe:	6013      	str	r3, [r2, #0]
}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr
 800bccc:	24000e2c 	.word	0x24000e2c
 800bcd0:	24000e94 	.word	0x24000e94

0800bcd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bcda:	4b0b      	ldr	r3, [pc, #44]	; (800bd08 <xTaskGetSchedulerState+0x34>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d102      	bne.n	800bce8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bce2:	2301      	movs	r3, #1
 800bce4:	607b      	str	r3, [r7, #4]
 800bce6:	e008      	b.n	800bcfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bce8:	4b08      	ldr	r3, [pc, #32]	; (800bd0c <xTaskGetSchedulerState+0x38>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d102      	bne.n	800bcf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bcf0:	2302      	movs	r3, #2
 800bcf2:	607b      	str	r3, [r7, #4]
 800bcf4:	e001      	b.n	800bcfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bcfa:	687b      	ldr	r3, [r7, #4]
	}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr
 800bd08:	24000e80 	.word	0x24000e80
 800bd0c:	24000e9c 	.word	0x24000e9c

0800bd10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d056      	beq.n	800bdd4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd26:	4b2e      	ldr	r3, [pc, #184]	; (800bde0 <xTaskPriorityDisinherit+0xd0>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	693a      	ldr	r2, [r7, #16]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d00a      	beq.n	800bd46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	60fb      	str	r3, [r7, #12]
}
 800bd42:	bf00      	nop
 800bd44:	e7fe      	b.n	800bd44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10a      	bne.n	800bd64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	60bb      	str	r3, [r7, #8]
}
 800bd60:	bf00      	nop
 800bd62:	e7fe      	b.n	800bd62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd68:	1e5a      	subs	r2, r3, #1
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d02c      	beq.n	800bdd4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d128      	bne.n	800bdd4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	3304      	adds	r3, #4
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fe fc0c 	bl	800a5a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bda4:	4b0f      	ldr	r3, [pc, #60]	; (800bde4 <xTaskPriorityDisinherit+0xd4>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d903      	bls.n	800bdb4 <xTaskPriorityDisinherit+0xa4>
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb0:	4a0c      	ldr	r2, [pc, #48]	; (800bde4 <xTaskPriorityDisinherit+0xd4>)
 800bdb2:	6013      	str	r3, [r2, #0]
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb8:	4613      	mov	r3, r2
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	4413      	add	r3, r2
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4a09      	ldr	r2, [pc, #36]	; (800bde8 <xTaskPriorityDisinherit+0xd8>)
 800bdc2:	441a      	add	r2, r3
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	4619      	mov	r1, r3
 800bdca:	4610      	mov	r0, r2
 800bdcc:	f7fe fb8d 	bl	800a4ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bdd4:	697b      	ldr	r3, [r7, #20]
	}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3718      	adds	r7, #24
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	240009a0 	.word	0x240009a0
 800bde4:	24000e7c 	.word	0x24000e7c
 800bde8:	240009a4 	.word	0x240009a4

0800bdec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bdf6:	4b21      	ldr	r3, [pc, #132]	; (800be7c <prvAddCurrentTaskToDelayedList+0x90>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdfc:	4b20      	ldr	r3, [pc, #128]	; (800be80 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	3304      	adds	r3, #4
 800be02:	4618      	mov	r0, r3
 800be04:	f7fe fbce 	bl	800a5a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be0e:	d10a      	bne.n	800be26 <prvAddCurrentTaskToDelayedList+0x3a>
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d007      	beq.n	800be26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be16:	4b1a      	ldr	r3, [pc, #104]	; (800be80 <prvAddCurrentTaskToDelayedList+0x94>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	3304      	adds	r3, #4
 800be1c:	4619      	mov	r1, r3
 800be1e:	4819      	ldr	r0, [pc, #100]	; (800be84 <prvAddCurrentTaskToDelayedList+0x98>)
 800be20:	f7fe fb63 	bl	800a4ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be24:	e026      	b.n	800be74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	4413      	add	r3, r2
 800be2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be2e:	4b14      	ldr	r3, [pc, #80]	; (800be80 <prvAddCurrentTaskToDelayedList+0x94>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	68ba      	ldr	r2, [r7, #8]
 800be34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be36:	68ba      	ldr	r2, [r7, #8]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d209      	bcs.n	800be52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be3e:	4b12      	ldr	r3, [pc, #72]	; (800be88 <prvAddCurrentTaskToDelayedList+0x9c>)
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	4b0f      	ldr	r3, [pc, #60]	; (800be80 <prvAddCurrentTaskToDelayedList+0x94>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	3304      	adds	r3, #4
 800be48:	4619      	mov	r1, r3
 800be4a:	4610      	mov	r0, r2
 800be4c:	f7fe fb71 	bl	800a532 <vListInsert>
}
 800be50:	e010      	b.n	800be74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be52:	4b0e      	ldr	r3, [pc, #56]	; (800be8c <prvAddCurrentTaskToDelayedList+0xa0>)
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	4b0a      	ldr	r3, [pc, #40]	; (800be80 <prvAddCurrentTaskToDelayedList+0x94>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	3304      	adds	r3, #4
 800be5c:	4619      	mov	r1, r3
 800be5e:	4610      	mov	r0, r2
 800be60:	f7fe fb67 	bl	800a532 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be64:	4b0a      	ldr	r3, [pc, #40]	; (800be90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d202      	bcs.n	800be74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be6e:	4a08      	ldr	r2, [pc, #32]	; (800be90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	6013      	str	r3, [r2, #0]
}
 800be74:	bf00      	nop
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	24000e78 	.word	0x24000e78
 800be80:	240009a0 	.word	0x240009a0
 800be84:	24000e60 	.word	0x24000e60
 800be88:	24000e30 	.word	0x24000e30
 800be8c:	24000e2c 	.word	0x24000e2c
 800be90:	24000e94 	.word	0x24000e94

0800be94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b08a      	sub	sp, #40	; 0x28
 800be98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be9a:	2300      	movs	r3, #0
 800be9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be9e:	f000 fb07 	bl	800c4b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bea2:	4b1c      	ldr	r3, [pc, #112]	; (800bf14 <xTimerCreateTimerTask+0x80>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d021      	beq.n	800beee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800beaa:	2300      	movs	r3, #0
 800beac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800beae:	2300      	movs	r3, #0
 800beb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800beb2:	1d3a      	adds	r2, r7, #4
 800beb4:	f107 0108 	add.w	r1, r7, #8
 800beb8:	f107 030c 	add.w	r3, r7, #12
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7fe facd 	bl	800a45c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bec2:	6879      	ldr	r1, [r7, #4]
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	9202      	str	r2, [sp, #8]
 800beca:	9301      	str	r3, [sp, #4]
 800becc:	2302      	movs	r3, #2
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	2300      	movs	r3, #0
 800bed2:	460a      	mov	r2, r1
 800bed4:	4910      	ldr	r1, [pc, #64]	; (800bf18 <xTimerCreateTimerTask+0x84>)
 800bed6:	4811      	ldr	r0, [pc, #68]	; (800bf1c <xTimerCreateTimerTask+0x88>)
 800bed8:	f7ff f8b4 	bl	800b044 <xTaskCreateStatic>
 800bedc:	4603      	mov	r3, r0
 800bede:	4a10      	ldr	r2, [pc, #64]	; (800bf20 <xTimerCreateTimerTask+0x8c>)
 800bee0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bee2:	4b0f      	ldr	r3, [pc, #60]	; (800bf20 <xTimerCreateTimerTask+0x8c>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800beea:	2301      	movs	r3, #1
 800beec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10a      	bne.n	800bf0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	613b      	str	r3, [r7, #16]
}
 800bf06:	bf00      	nop
 800bf08:	e7fe      	b.n	800bf08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bf0a:	697b      	ldr	r3, [r7, #20]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3718      	adds	r7, #24
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	24000ed0 	.word	0x24000ed0
 800bf18:	0800cfb0 	.word	0x0800cfb0
 800bf1c:	0800c059 	.word	0x0800c059
 800bf20:	24000ed4 	.word	0x24000ed4

0800bf24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b08a      	sub	sp, #40	; 0x28
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
 800bf30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bf32:	2300      	movs	r3, #0
 800bf34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10a      	bne.n	800bf52 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	623b      	str	r3, [r7, #32]
}
 800bf4e:	bf00      	nop
 800bf50:	e7fe      	b.n	800bf50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bf52:	4b1a      	ldr	r3, [pc, #104]	; (800bfbc <xTimerGenericCommand+0x98>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d02a      	beq.n	800bfb0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b05      	cmp	r3, #5
 800bf6a:	dc18      	bgt.n	800bf9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf6c:	f7ff feb2 	bl	800bcd4 <xTaskGetSchedulerState>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b02      	cmp	r3, #2
 800bf74:	d109      	bne.n	800bf8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf76:	4b11      	ldr	r3, [pc, #68]	; (800bfbc <xTimerGenericCommand+0x98>)
 800bf78:	6818      	ldr	r0, [r3, #0]
 800bf7a:	f107 0110 	add.w	r1, r7, #16
 800bf7e:	2300      	movs	r3, #0
 800bf80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf82:	f7fe fc77 	bl	800a874 <xQueueGenericSend>
 800bf86:	6278      	str	r0, [r7, #36]	; 0x24
 800bf88:	e012      	b.n	800bfb0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf8a:	4b0c      	ldr	r3, [pc, #48]	; (800bfbc <xTimerGenericCommand+0x98>)
 800bf8c:	6818      	ldr	r0, [r3, #0]
 800bf8e:	f107 0110 	add.w	r1, r7, #16
 800bf92:	2300      	movs	r3, #0
 800bf94:	2200      	movs	r2, #0
 800bf96:	f7fe fc6d 	bl	800a874 <xQueueGenericSend>
 800bf9a:	6278      	str	r0, [r7, #36]	; 0x24
 800bf9c:	e008      	b.n	800bfb0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf9e:	4b07      	ldr	r3, [pc, #28]	; (800bfbc <xTimerGenericCommand+0x98>)
 800bfa0:	6818      	ldr	r0, [r3, #0]
 800bfa2:	f107 0110 	add.w	r1, r7, #16
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	683a      	ldr	r2, [r7, #0]
 800bfaa:	f7fe fd61 	bl	800aa70 <xQueueGenericSendFromISR>
 800bfae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3728      	adds	r7, #40	; 0x28
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	24000ed0 	.word	0x24000ed0

0800bfc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b088      	sub	sp, #32
 800bfc4:	af02      	add	r7, sp, #8
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfca:	4b22      	ldr	r3, [pc, #136]	; (800c054 <prvProcessExpiredTimer+0x94>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fe fae3 	bl	800a5a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfe4:	f003 0304 	and.w	r3, r3, #4
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d022      	beq.n	800c032 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	699a      	ldr	r2, [r3, #24]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	18d1      	adds	r1, r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	683a      	ldr	r2, [r7, #0]
 800bff8:	6978      	ldr	r0, [r7, #20]
 800bffa:	f000 f8d1 	bl	800c1a0 <prvInsertTimerInActiveList>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d01f      	beq.n	800c044 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c004:	2300      	movs	r3, #0
 800c006:	9300      	str	r3, [sp, #0]
 800c008:	2300      	movs	r3, #0
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	2100      	movs	r1, #0
 800c00e:	6978      	ldr	r0, [r7, #20]
 800c010:	f7ff ff88 	bl	800bf24 <xTimerGenericCommand>
 800c014:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d113      	bne.n	800c044 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	60fb      	str	r3, [r7, #12]
}
 800c02e:	bf00      	nop
 800c030:	e7fe      	b.n	800c030 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c038:	f023 0301 	bic.w	r3, r3, #1
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	6a1b      	ldr	r3, [r3, #32]
 800c048:	6978      	ldr	r0, [r7, #20]
 800c04a:	4798      	blx	r3
}
 800c04c:	bf00      	nop
 800c04e:	3718      	adds	r7, #24
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	24000ec8 	.word	0x24000ec8

0800c058 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c060:	f107 0308 	add.w	r3, r7, #8
 800c064:	4618      	mov	r0, r3
 800c066:	f000 f857 	bl	800c118 <prvGetNextExpireTime>
 800c06a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	4619      	mov	r1, r3
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f000 f803 	bl	800c07c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c076:	f000 f8d5 	bl	800c224 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c07a:	e7f1      	b.n	800c060 <prvTimerTask+0x8>

0800c07c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c086:	f7ff fa39 	bl	800b4fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c08a:	f107 0308 	add.w	r3, r7, #8
 800c08e:	4618      	mov	r0, r3
 800c090:	f000 f866 	bl	800c160 <prvSampleTimeNow>
 800c094:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d130      	bne.n	800c0fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10a      	bne.n	800c0b8 <prvProcessTimerOrBlockTask+0x3c>
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d806      	bhi.n	800c0b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c0aa:	f7ff fa35 	bl	800b518 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c0ae:	68f9      	ldr	r1, [r7, #12]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f7ff ff85 	bl	800bfc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c0b6:	e024      	b.n	800c102 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d008      	beq.n	800c0d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c0be:	4b13      	ldr	r3, [pc, #76]	; (800c10c <prvProcessTimerOrBlockTask+0x90>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d101      	bne.n	800c0cc <prvProcessTimerOrBlockTask+0x50>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e000      	b.n	800c0ce <prvProcessTimerOrBlockTask+0x52>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c0d0:	4b0f      	ldr	r3, [pc, #60]	; (800c110 <prvProcessTimerOrBlockTask+0x94>)
 800c0d2:	6818      	ldr	r0, [r3, #0]
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	683a      	ldr	r2, [r7, #0]
 800c0dc:	4619      	mov	r1, r3
 800c0de:	f7fe ff7d 	bl	800afdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c0e2:	f7ff fa19 	bl	800b518 <xTaskResumeAll>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d10a      	bne.n	800c102 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c0ec:	4b09      	ldr	r3, [pc, #36]	; (800c114 <prvProcessTimerOrBlockTask+0x98>)
 800c0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0f2:	601a      	str	r2, [r3, #0]
 800c0f4:	f3bf 8f4f 	dsb	sy
 800c0f8:	f3bf 8f6f 	isb	sy
}
 800c0fc:	e001      	b.n	800c102 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c0fe:	f7ff fa0b 	bl	800b518 <xTaskResumeAll>
}
 800c102:	bf00      	nop
 800c104:	3710      	adds	r7, #16
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	24000ecc 	.word	0x24000ecc
 800c110:	24000ed0 	.word	0x24000ed0
 800c114:	e000ed04 	.word	0xe000ed04

0800c118 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c120:	4b0e      	ldr	r3, [pc, #56]	; (800c15c <prvGetNextExpireTime+0x44>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d101      	bne.n	800c12e <prvGetNextExpireTime+0x16>
 800c12a:	2201      	movs	r2, #1
 800c12c:	e000      	b.n	800c130 <prvGetNextExpireTime+0x18>
 800c12e:	2200      	movs	r2, #0
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d105      	bne.n	800c148 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c13c:	4b07      	ldr	r3, [pc, #28]	; (800c15c <prvGetNextExpireTime+0x44>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	60fb      	str	r3, [r7, #12]
 800c146:	e001      	b.n	800c14c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c148:	2300      	movs	r3, #0
 800c14a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c14c:	68fb      	ldr	r3, [r7, #12]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3714      	adds	r7, #20
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	24000ec8 	.word	0x24000ec8

0800c160 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c168:	f7ff fa74 	bl	800b654 <xTaskGetTickCount>
 800c16c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c16e:	4b0b      	ldr	r3, [pc, #44]	; (800c19c <prvSampleTimeNow+0x3c>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	429a      	cmp	r2, r3
 800c176:	d205      	bcs.n	800c184 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c178:	f000 f936 	bl	800c3e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	601a      	str	r2, [r3, #0]
 800c182:	e002      	b.n	800c18a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c18a:	4a04      	ldr	r2, [pc, #16]	; (800c19c <prvSampleTimeNow+0x3c>)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c190:	68fb      	ldr	r3, [r7, #12]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	24000ed8 	.word	0x24000ed8

0800c1a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
 800c1ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	68ba      	ldr	r2, [r7, #8]
 800c1b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c1be:	68ba      	ldr	r2, [r7, #8]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d812      	bhi.n	800c1ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	1ad2      	subs	r2, r2, r3
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d302      	bcc.n	800c1da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	617b      	str	r3, [r7, #20]
 800c1d8:	e01b      	b.n	800c212 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c1da:	4b10      	ldr	r3, [pc, #64]	; (800c21c <prvInsertTimerInActiveList+0x7c>)
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	3304      	adds	r3, #4
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	4610      	mov	r0, r2
 800c1e6:	f7fe f9a4 	bl	800a532 <vListInsert>
 800c1ea:	e012      	b.n	800c212 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d206      	bcs.n	800c202 <prvInsertTimerInActiveList+0x62>
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d302      	bcc.n	800c202 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	617b      	str	r3, [r7, #20]
 800c200:	e007      	b.n	800c212 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c202:	4b07      	ldr	r3, [pc, #28]	; (800c220 <prvInsertTimerInActiveList+0x80>)
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	3304      	adds	r3, #4
 800c20a:	4619      	mov	r1, r3
 800c20c:	4610      	mov	r0, r2
 800c20e:	f7fe f990 	bl	800a532 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c212:	697b      	ldr	r3, [r7, #20]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3718      	adds	r7, #24
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	24000ecc 	.word	0x24000ecc
 800c220:	24000ec8 	.word	0x24000ec8

0800c224 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b08e      	sub	sp, #56	; 0x38
 800c228:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c22a:	e0ca      	b.n	800c3c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	da18      	bge.n	800c264 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c232:	1d3b      	adds	r3, r7, #4
 800c234:	3304      	adds	r3, #4
 800c236:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d10a      	bne.n	800c254 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c242:	f383 8811 	msr	BASEPRI, r3
 800c246:	f3bf 8f6f 	isb	sy
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	61fb      	str	r3, [r7, #28]
}
 800c250:	bf00      	nop
 800c252:	e7fe      	b.n	800c252 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c25a:	6850      	ldr	r0, [r2, #4]
 800c25c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c25e:	6892      	ldr	r2, [r2, #8]
 800c260:	4611      	mov	r1, r2
 800c262:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	f2c0 80ab 	blt.w	800c3c2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c272:	695b      	ldr	r3, [r3, #20]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d004      	beq.n	800c282 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27a:	3304      	adds	r3, #4
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7fe f991 	bl	800a5a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c282:	463b      	mov	r3, r7
 800c284:	4618      	mov	r0, r3
 800c286:	f7ff ff6b 	bl	800c160 <prvSampleTimeNow>
 800c28a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b09      	cmp	r3, #9
 800c290:	f200 8096 	bhi.w	800c3c0 <prvProcessReceivedCommands+0x19c>
 800c294:	a201      	add	r2, pc, #4	; (adr r2, 800c29c <prvProcessReceivedCommands+0x78>)
 800c296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29a:	bf00      	nop
 800c29c:	0800c2c5 	.word	0x0800c2c5
 800c2a0:	0800c2c5 	.word	0x0800c2c5
 800c2a4:	0800c2c5 	.word	0x0800c2c5
 800c2a8:	0800c339 	.word	0x0800c339
 800c2ac:	0800c34d 	.word	0x0800c34d
 800c2b0:	0800c397 	.word	0x0800c397
 800c2b4:	0800c2c5 	.word	0x0800c2c5
 800c2b8:	0800c2c5 	.word	0x0800c2c5
 800c2bc:	0800c339 	.word	0x0800c339
 800c2c0:	0800c34d 	.word	0x0800c34d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2ca:	f043 0301 	orr.w	r3, r3, #1
 800c2ce:	b2da      	uxtb	r2, r3
 800c2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c2d6:	68ba      	ldr	r2, [r7, #8]
 800c2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2da:	699b      	ldr	r3, [r3, #24]
 800c2dc:	18d1      	adds	r1, r2, r3
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2e4:	f7ff ff5c 	bl	800c1a0 <prvInsertTimerInActiveList>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d069      	beq.n	800c3c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f0:	6a1b      	ldr	r3, [r3, #32]
 800c2f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2fc:	f003 0304 	and.w	r3, r3, #4
 800c300:	2b00      	cmp	r3, #0
 800c302:	d05e      	beq.n	800c3c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c304:	68ba      	ldr	r2, [r7, #8]
 800c306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c308:	699b      	ldr	r3, [r3, #24]
 800c30a:	441a      	add	r2, r3
 800c30c:	2300      	movs	r3, #0
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	2300      	movs	r3, #0
 800c312:	2100      	movs	r1, #0
 800c314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c316:	f7ff fe05 	bl	800bf24 <xTimerGenericCommand>
 800c31a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c31c:	6a3b      	ldr	r3, [r7, #32]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d14f      	bne.n	800c3c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c326:	f383 8811 	msr	BASEPRI, r3
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	61bb      	str	r3, [r7, #24]
}
 800c334:	bf00      	nop
 800c336:	e7fe      	b.n	800c336 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c33e:	f023 0301 	bic.w	r3, r3, #1
 800c342:	b2da      	uxtb	r2, r3
 800c344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c34a:	e03a      	b.n	800c3c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c352:	f043 0301 	orr.w	r3, r3, #1
 800c356:	b2da      	uxtb	r2, r3
 800c358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c35e:	68ba      	ldr	r2, [r7, #8]
 800c360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c362:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c366:	699b      	ldr	r3, [r3, #24]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10a      	bne.n	800c382 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c370:	f383 8811 	msr	BASEPRI, r3
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	f3bf 8f4f 	dsb	sy
 800c37c:	617b      	str	r3, [r7, #20]
}
 800c37e:	bf00      	nop
 800c380:	e7fe      	b.n	800c380 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c384:	699a      	ldr	r2, [r3, #24]
 800c386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c388:	18d1      	adds	r1, r2, r3
 800c38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c38e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c390:	f7ff ff06 	bl	800c1a0 <prvInsertTimerInActiveList>
					break;
 800c394:	e015      	b.n	800c3c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c39c:	f003 0302 	and.w	r3, r3, #2
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d103      	bne.n	800c3ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c3a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3a6:	f000 fbdb 	bl	800cb60 <vPortFree>
 800c3aa:	e00a      	b.n	800c3c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3b2:	f023 0301 	bic.w	r3, r3, #1
 800c3b6:	b2da      	uxtb	r2, r3
 800c3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c3be:	e000      	b.n	800c3c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c3c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3c2:	4b08      	ldr	r3, [pc, #32]	; (800c3e4 <prvProcessReceivedCommands+0x1c0>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	1d39      	adds	r1, r7, #4
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7fe fbec 	bl	800aba8 <xQueueReceive>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f47f af2a 	bne.w	800c22c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c3d8:	bf00      	nop
 800c3da:	bf00      	nop
 800c3dc:	3730      	adds	r7, #48	; 0x30
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	24000ed0 	.word	0x24000ed0

0800c3e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b088      	sub	sp, #32
 800c3ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3ee:	e048      	b.n	800c482 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3f0:	4b2d      	ldr	r3, [pc, #180]	; (800c4a8 <prvSwitchTimerLists+0xc0>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3fa:	4b2b      	ldr	r3, [pc, #172]	; (800c4a8 <prvSwitchTimerLists+0xc0>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	3304      	adds	r3, #4
 800c408:	4618      	mov	r0, r3
 800c40a:	f7fe f8cb 	bl	800a5a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	6a1b      	ldr	r3, [r3, #32]
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c41c:	f003 0304 	and.w	r3, r3, #4
 800c420:	2b00      	cmp	r3, #0
 800c422:	d02e      	beq.n	800c482 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	699b      	ldr	r3, [r3, #24]
 800c428:	693a      	ldr	r2, [r7, #16]
 800c42a:	4413      	add	r3, r2
 800c42c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	429a      	cmp	r2, r3
 800c434:	d90e      	bls.n	800c454 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c442:	4b19      	ldr	r3, [pc, #100]	; (800c4a8 <prvSwitchTimerLists+0xc0>)
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	3304      	adds	r3, #4
 800c44a:	4619      	mov	r1, r3
 800c44c:	4610      	mov	r0, r2
 800c44e:	f7fe f870 	bl	800a532 <vListInsert>
 800c452:	e016      	b.n	800c482 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c454:	2300      	movs	r3, #0
 800c456:	9300      	str	r3, [sp, #0]
 800c458:	2300      	movs	r3, #0
 800c45a:	693a      	ldr	r2, [r7, #16]
 800c45c:	2100      	movs	r1, #0
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f7ff fd60 	bl	800bf24 <xTimerGenericCommand>
 800c464:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d10a      	bne.n	800c482 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	603b      	str	r3, [r7, #0]
}
 800c47e:	bf00      	nop
 800c480:	e7fe      	b.n	800c480 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c482:	4b09      	ldr	r3, [pc, #36]	; (800c4a8 <prvSwitchTimerLists+0xc0>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d1b1      	bne.n	800c3f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c48c:	4b06      	ldr	r3, [pc, #24]	; (800c4a8 <prvSwitchTimerLists+0xc0>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c492:	4b06      	ldr	r3, [pc, #24]	; (800c4ac <prvSwitchTimerLists+0xc4>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a04      	ldr	r2, [pc, #16]	; (800c4a8 <prvSwitchTimerLists+0xc0>)
 800c498:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c49a:	4a04      	ldr	r2, [pc, #16]	; (800c4ac <prvSwitchTimerLists+0xc4>)
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	6013      	str	r3, [r2, #0]
}
 800c4a0:	bf00      	nop
 800c4a2:	3718      	adds	r7, #24
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	24000ec8 	.word	0x24000ec8
 800c4ac:	24000ecc 	.word	0x24000ecc

0800c4b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c4b6:	f000 f965 	bl	800c784 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c4ba:	4b15      	ldr	r3, [pc, #84]	; (800c510 <prvCheckForValidListAndQueue+0x60>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d120      	bne.n	800c504 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c4c2:	4814      	ldr	r0, [pc, #80]	; (800c514 <prvCheckForValidListAndQueue+0x64>)
 800c4c4:	f7fd ffe4 	bl	800a490 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c4c8:	4813      	ldr	r0, [pc, #76]	; (800c518 <prvCheckForValidListAndQueue+0x68>)
 800c4ca:	f7fd ffe1 	bl	800a490 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c4ce:	4b13      	ldr	r3, [pc, #76]	; (800c51c <prvCheckForValidListAndQueue+0x6c>)
 800c4d0:	4a10      	ldr	r2, [pc, #64]	; (800c514 <prvCheckForValidListAndQueue+0x64>)
 800c4d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c4d4:	4b12      	ldr	r3, [pc, #72]	; (800c520 <prvCheckForValidListAndQueue+0x70>)
 800c4d6:	4a10      	ldr	r2, [pc, #64]	; (800c518 <prvCheckForValidListAndQueue+0x68>)
 800c4d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c4da:	2300      	movs	r3, #0
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	4b11      	ldr	r3, [pc, #68]	; (800c524 <prvCheckForValidListAndQueue+0x74>)
 800c4e0:	4a11      	ldr	r2, [pc, #68]	; (800c528 <prvCheckForValidListAndQueue+0x78>)
 800c4e2:	2110      	movs	r1, #16
 800c4e4:	200a      	movs	r0, #10
 800c4e6:	f7fe f8ef 	bl	800a6c8 <xQueueGenericCreateStatic>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	4a08      	ldr	r2, [pc, #32]	; (800c510 <prvCheckForValidListAndQueue+0x60>)
 800c4ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c4f0:	4b07      	ldr	r3, [pc, #28]	; (800c510 <prvCheckForValidListAndQueue+0x60>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d005      	beq.n	800c504 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c4f8:	4b05      	ldr	r3, [pc, #20]	; (800c510 <prvCheckForValidListAndQueue+0x60>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	490b      	ldr	r1, [pc, #44]	; (800c52c <prvCheckForValidListAndQueue+0x7c>)
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7fe fd42 	bl	800af88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c504:	f000 f96e 	bl	800c7e4 <vPortExitCritical>
}
 800c508:	bf00      	nop
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	24000ed0 	.word	0x24000ed0
 800c514:	24000ea0 	.word	0x24000ea0
 800c518:	24000eb4 	.word	0x24000eb4
 800c51c:	24000ec8 	.word	0x24000ec8
 800c520:	24000ecc 	.word	0x24000ecc
 800c524:	24000f7c 	.word	0x24000f7c
 800c528:	24000edc 	.word	0x24000edc
 800c52c:	0800cfb8 	.word	0x0800cfb8

0800c530 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c530:	b480      	push	{r7}
 800c532:	b085      	sub	sp, #20
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	3b04      	subs	r3, #4
 800c540:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	3b04      	subs	r3, #4
 800c54e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	f023 0201 	bic.w	r2, r3, #1
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	3b04      	subs	r3, #4
 800c55e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c560:	4a0c      	ldr	r2, [pc, #48]	; (800c594 <pxPortInitialiseStack+0x64>)
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	3b14      	subs	r3, #20
 800c56a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	3b04      	subs	r3, #4
 800c576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f06f 0202 	mvn.w	r2, #2
 800c57e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	3b20      	subs	r3, #32
 800c584:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c586:	68fb      	ldr	r3, [r7, #12]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr
 800c594:	0800c599 	.word	0x0800c599

0800c598 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c5a2:	4b12      	ldr	r3, [pc, #72]	; (800c5ec <prvTaskExitError+0x54>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5aa:	d00a      	beq.n	800c5c2 <prvTaskExitError+0x2a>
	__asm volatile
 800c5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	60fb      	str	r3, [r7, #12]
}
 800c5be:	bf00      	nop
 800c5c0:	e7fe      	b.n	800c5c0 <prvTaskExitError+0x28>
	__asm volatile
 800c5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c6:	f383 8811 	msr	BASEPRI, r3
 800c5ca:	f3bf 8f6f 	isb	sy
 800c5ce:	f3bf 8f4f 	dsb	sy
 800c5d2:	60bb      	str	r3, [r7, #8]
}
 800c5d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c5d6:	bf00      	nop
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d0fc      	beq.n	800c5d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c5de:	bf00      	nop
 800c5e0:	bf00      	nop
 800c5e2:	3714      	adds	r7, #20
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr
 800c5ec:	24000010 	.word	0x24000010

0800c5f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c5f0:	4b07      	ldr	r3, [pc, #28]	; (800c610 <pxCurrentTCBConst2>)
 800c5f2:	6819      	ldr	r1, [r3, #0]
 800c5f4:	6808      	ldr	r0, [r1, #0]
 800c5f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fa:	f380 8809 	msr	PSP, r0
 800c5fe:	f3bf 8f6f 	isb	sy
 800c602:	f04f 0000 	mov.w	r0, #0
 800c606:	f380 8811 	msr	BASEPRI, r0
 800c60a:	4770      	bx	lr
 800c60c:	f3af 8000 	nop.w

0800c610 <pxCurrentTCBConst2>:
 800c610:	240009a0 	.word	0x240009a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c614:	bf00      	nop
 800c616:	bf00      	nop

0800c618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c618:	4808      	ldr	r0, [pc, #32]	; (800c63c <prvPortStartFirstTask+0x24>)
 800c61a:	6800      	ldr	r0, [r0, #0]
 800c61c:	6800      	ldr	r0, [r0, #0]
 800c61e:	f380 8808 	msr	MSP, r0
 800c622:	f04f 0000 	mov.w	r0, #0
 800c626:	f380 8814 	msr	CONTROL, r0
 800c62a:	b662      	cpsie	i
 800c62c:	b661      	cpsie	f
 800c62e:	f3bf 8f4f 	dsb	sy
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	df00      	svc	0
 800c638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c63a:	bf00      	nop
 800c63c:	e000ed08 	.word	0xe000ed08

0800c640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c646:	4b46      	ldr	r3, [pc, #280]	; (800c760 <xPortStartScheduler+0x120>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a46      	ldr	r2, [pc, #280]	; (800c764 <xPortStartScheduler+0x124>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d10a      	bne.n	800c666 <xPortStartScheduler+0x26>
	__asm volatile
 800c650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c654:	f383 8811 	msr	BASEPRI, r3
 800c658:	f3bf 8f6f 	isb	sy
 800c65c:	f3bf 8f4f 	dsb	sy
 800c660:	613b      	str	r3, [r7, #16]
}
 800c662:	bf00      	nop
 800c664:	e7fe      	b.n	800c664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c666:	4b3e      	ldr	r3, [pc, #248]	; (800c760 <xPortStartScheduler+0x120>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a3f      	ldr	r2, [pc, #252]	; (800c768 <xPortStartScheduler+0x128>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d10a      	bne.n	800c686 <xPortStartScheduler+0x46>
	__asm volatile
 800c670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c674:	f383 8811 	msr	BASEPRI, r3
 800c678:	f3bf 8f6f 	isb	sy
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	60fb      	str	r3, [r7, #12]
}
 800c682:	bf00      	nop
 800c684:	e7fe      	b.n	800c684 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c686:	4b39      	ldr	r3, [pc, #228]	; (800c76c <xPortStartScheduler+0x12c>)
 800c688:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	22ff      	movs	r2, #255	; 0xff
 800c696:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c6a0:	78fb      	ldrb	r3, [r7, #3]
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c6a8:	b2da      	uxtb	r2, r3
 800c6aa:	4b31      	ldr	r3, [pc, #196]	; (800c770 <xPortStartScheduler+0x130>)
 800c6ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c6ae:	4b31      	ldr	r3, [pc, #196]	; (800c774 <xPortStartScheduler+0x134>)
 800c6b0:	2207      	movs	r2, #7
 800c6b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6b4:	e009      	b.n	800c6ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c6b6:	4b2f      	ldr	r3, [pc, #188]	; (800c774 <xPortStartScheduler+0x134>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	4a2d      	ldr	r2, [pc, #180]	; (800c774 <xPortStartScheduler+0x134>)
 800c6be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c6c0:	78fb      	ldrb	r3, [r7, #3]
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6ca:	78fb      	ldrb	r3, [r7, #3]
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6d2:	2b80      	cmp	r3, #128	; 0x80
 800c6d4:	d0ef      	beq.n	800c6b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c6d6:	4b27      	ldr	r3, [pc, #156]	; (800c774 <xPortStartScheduler+0x134>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f1c3 0307 	rsb	r3, r3, #7
 800c6de:	2b04      	cmp	r3, #4
 800c6e0:	d00a      	beq.n	800c6f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e6:	f383 8811 	msr	BASEPRI, r3
 800c6ea:	f3bf 8f6f 	isb	sy
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	60bb      	str	r3, [r7, #8]
}
 800c6f4:	bf00      	nop
 800c6f6:	e7fe      	b.n	800c6f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c6f8:	4b1e      	ldr	r3, [pc, #120]	; (800c774 <xPortStartScheduler+0x134>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	021b      	lsls	r3, r3, #8
 800c6fe:	4a1d      	ldr	r2, [pc, #116]	; (800c774 <xPortStartScheduler+0x134>)
 800c700:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c702:	4b1c      	ldr	r3, [pc, #112]	; (800c774 <xPortStartScheduler+0x134>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c70a:	4a1a      	ldr	r2, [pc, #104]	; (800c774 <xPortStartScheduler+0x134>)
 800c70c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	b2da      	uxtb	r2, r3
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c716:	4b18      	ldr	r3, [pc, #96]	; (800c778 <xPortStartScheduler+0x138>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a17      	ldr	r2, [pc, #92]	; (800c778 <xPortStartScheduler+0x138>)
 800c71c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c720:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c722:	4b15      	ldr	r3, [pc, #84]	; (800c778 <xPortStartScheduler+0x138>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a14      	ldr	r2, [pc, #80]	; (800c778 <xPortStartScheduler+0x138>)
 800c728:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c72c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c72e:	f000 f8dd 	bl	800c8ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c732:	4b12      	ldr	r3, [pc, #72]	; (800c77c <xPortStartScheduler+0x13c>)
 800c734:	2200      	movs	r2, #0
 800c736:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c738:	f000 f8fc 	bl	800c934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c73c:	4b10      	ldr	r3, [pc, #64]	; (800c780 <xPortStartScheduler+0x140>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a0f      	ldr	r2, [pc, #60]	; (800c780 <xPortStartScheduler+0x140>)
 800c742:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c746:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c748:	f7ff ff66 	bl	800c618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c74c:	f7ff f84c 	bl	800b7e8 <vTaskSwitchContext>
	prvTaskExitError();
 800c750:	f7ff ff22 	bl	800c598 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c754:	2300      	movs	r3, #0
}
 800c756:	4618      	mov	r0, r3
 800c758:	3718      	adds	r7, #24
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	e000ed00 	.word	0xe000ed00
 800c764:	410fc271 	.word	0x410fc271
 800c768:	410fc270 	.word	0x410fc270
 800c76c:	e000e400 	.word	0xe000e400
 800c770:	24000fcc 	.word	0x24000fcc
 800c774:	24000fd0 	.word	0x24000fd0
 800c778:	e000ed20 	.word	0xe000ed20
 800c77c:	24000010 	.word	0x24000010
 800c780:	e000ef34 	.word	0xe000ef34

0800c784 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
	__asm volatile
 800c78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78e:	f383 8811 	msr	BASEPRI, r3
 800c792:	f3bf 8f6f 	isb	sy
 800c796:	f3bf 8f4f 	dsb	sy
 800c79a:	607b      	str	r3, [r7, #4]
}
 800c79c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c79e:	4b0f      	ldr	r3, [pc, #60]	; (800c7dc <vPortEnterCritical+0x58>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	4a0d      	ldr	r2, [pc, #52]	; (800c7dc <vPortEnterCritical+0x58>)
 800c7a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c7a8:	4b0c      	ldr	r3, [pc, #48]	; (800c7dc <vPortEnterCritical+0x58>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d10f      	bne.n	800c7d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c7b0:	4b0b      	ldr	r3, [pc, #44]	; (800c7e0 <vPortEnterCritical+0x5c>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00a      	beq.n	800c7d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7be:	f383 8811 	msr	BASEPRI, r3
 800c7c2:	f3bf 8f6f 	isb	sy
 800c7c6:	f3bf 8f4f 	dsb	sy
 800c7ca:	603b      	str	r3, [r7, #0]
}
 800c7cc:	bf00      	nop
 800c7ce:	e7fe      	b.n	800c7ce <vPortEnterCritical+0x4a>
	}
}
 800c7d0:	bf00      	nop
 800c7d2:	370c      	adds	r7, #12
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr
 800c7dc:	24000010 	.word	0x24000010
 800c7e0:	e000ed04 	.word	0xe000ed04

0800c7e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c7ea:	4b12      	ldr	r3, [pc, #72]	; (800c834 <vPortExitCritical+0x50>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d10a      	bne.n	800c808 <vPortExitCritical+0x24>
	__asm volatile
 800c7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	607b      	str	r3, [r7, #4]
}
 800c804:	bf00      	nop
 800c806:	e7fe      	b.n	800c806 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c808:	4b0a      	ldr	r3, [pc, #40]	; (800c834 <vPortExitCritical+0x50>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	3b01      	subs	r3, #1
 800c80e:	4a09      	ldr	r2, [pc, #36]	; (800c834 <vPortExitCritical+0x50>)
 800c810:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c812:	4b08      	ldr	r3, [pc, #32]	; (800c834 <vPortExitCritical+0x50>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d105      	bne.n	800c826 <vPortExitCritical+0x42>
 800c81a:	2300      	movs	r3, #0
 800c81c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	f383 8811 	msr	BASEPRI, r3
}
 800c824:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c826:	bf00      	nop
 800c828:	370c      	adds	r7, #12
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr
 800c832:	bf00      	nop
 800c834:	24000010 	.word	0x24000010
	...

0800c840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c840:	f3ef 8009 	mrs	r0, PSP
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	4b15      	ldr	r3, [pc, #84]	; (800c8a0 <pxCurrentTCBConst>)
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	f01e 0f10 	tst.w	lr, #16
 800c850:	bf08      	it	eq
 800c852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c85a:	6010      	str	r0, [r2, #0]
 800c85c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c860:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c864:	f380 8811 	msr	BASEPRI, r0
 800c868:	f3bf 8f4f 	dsb	sy
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f7fe ffba 	bl	800b7e8 <vTaskSwitchContext>
 800c874:	f04f 0000 	mov.w	r0, #0
 800c878:	f380 8811 	msr	BASEPRI, r0
 800c87c:	bc09      	pop	{r0, r3}
 800c87e:	6819      	ldr	r1, [r3, #0]
 800c880:	6808      	ldr	r0, [r1, #0]
 800c882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c886:	f01e 0f10 	tst.w	lr, #16
 800c88a:	bf08      	it	eq
 800c88c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c890:	f380 8809 	msr	PSP, r0
 800c894:	f3bf 8f6f 	isb	sy
 800c898:	4770      	bx	lr
 800c89a:	bf00      	nop
 800c89c:	f3af 8000 	nop.w

0800c8a0 <pxCurrentTCBConst>:
 800c8a0:	240009a0 	.word	0x240009a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c8a4:	bf00      	nop
 800c8a6:	bf00      	nop

0800c8a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b2:	f383 8811 	msr	BASEPRI, r3
 800c8b6:	f3bf 8f6f 	isb	sy
 800c8ba:	f3bf 8f4f 	dsb	sy
 800c8be:	607b      	str	r3, [r7, #4]
}
 800c8c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c8c2:	f7fe fed7 	bl	800b674 <xTaskIncrementTick>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d003      	beq.n	800c8d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c8cc:	4b06      	ldr	r3, [pc, #24]	; (800c8e8 <xPortSysTickHandler+0x40>)
 800c8ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8d2:	601a      	str	r2, [r3, #0]
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	f383 8811 	msr	BASEPRI, r3
}
 800c8de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c8e0:	bf00      	nop
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	e000ed04 	.word	0xe000ed04

0800c8ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c8f0:	4b0b      	ldr	r3, [pc, #44]	; (800c920 <vPortSetupTimerInterrupt+0x34>)
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c8f6:	4b0b      	ldr	r3, [pc, #44]	; (800c924 <vPortSetupTimerInterrupt+0x38>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c8fc:	4b0a      	ldr	r3, [pc, #40]	; (800c928 <vPortSetupTimerInterrupt+0x3c>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a0a      	ldr	r2, [pc, #40]	; (800c92c <vPortSetupTimerInterrupt+0x40>)
 800c902:	fba2 2303 	umull	r2, r3, r2, r3
 800c906:	099b      	lsrs	r3, r3, #6
 800c908:	4a09      	ldr	r2, [pc, #36]	; (800c930 <vPortSetupTimerInterrupt+0x44>)
 800c90a:	3b01      	subs	r3, #1
 800c90c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c90e:	4b04      	ldr	r3, [pc, #16]	; (800c920 <vPortSetupTimerInterrupt+0x34>)
 800c910:	2207      	movs	r2, #7
 800c912:	601a      	str	r2, [r3, #0]
}
 800c914:	bf00      	nop
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	e000e010 	.word	0xe000e010
 800c924:	e000e018 	.word	0xe000e018
 800c928:	24000000 	.word	0x24000000
 800c92c:	10624dd3 	.word	0x10624dd3
 800c930:	e000e014 	.word	0xe000e014

0800c934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c934:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c944 <vPortEnableVFP+0x10>
 800c938:	6801      	ldr	r1, [r0, #0]
 800c93a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c93e:	6001      	str	r1, [r0, #0]
 800c940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c942:	bf00      	nop
 800c944:	e000ed88 	.word	0xe000ed88

0800c948 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c94e:	f3ef 8305 	mrs	r3, IPSR
 800c952:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2b0f      	cmp	r3, #15
 800c958:	d914      	bls.n	800c984 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c95a:	4a17      	ldr	r2, [pc, #92]	; (800c9b8 <vPortValidateInterruptPriority+0x70>)
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	4413      	add	r3, r2
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c964:	4b15      	ldr	r3, [pc, #84]	; (800c9bc <vPortValidateInterruptPriority+0x74>)
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	7afa      	ldrb	r2, [r7, #11]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d20a      	bcs.n	800c984 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c972:	f383 8811 	msr	BASEPRI, r3
 800c976:	f3bf 8f6f 	isb	sy
 800c97a:	f3bf 8f4f 	dsb	sy
 800c97e:	607b      	str	r3, [r7, #4]
}
 800c980:	bf00      	nop
 800c982:	e7fe      	b.n	800c982 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c984:	4b0e      	ldr	r3, [pc, #56]	; (800c9c0 <vPortValidateInterruptPriority+0x78>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c98c:	4b0d      	ldr	r3, [pc, #52]	; (800c9c4 <vPortValidateInterruptPriority+0x7c>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	429a      	cmp	r2, r3
 800c992:	d90a      	bls.n	800c9aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c998:	f383 8811 	msr	BASEPRI, r3
 800c99c:	f3bf 8f6f 	isb	sy
 800c9a0:	f3bf 8f4f 	dsb	sy
 800c9a4:	603b      	str	r3, [r7, #0]
}
 800c9a6:	bf00      	nop
 800c9a8:	e7fe      	b.n	800c9a8 <vPortValidateInterruptPriority+0x60>
	}
 800c9aa:	bf00      	nop
 800c9ac:	3714      	adds	r7, #20
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	e000e3f0 	.word	0xe000e3f0
 800c9bc:	24000fcc 	.word	0x24000fcc
 800c9c0:	e000ed0c 	.word	0xe000ed0c
 800c9c4:	24000fd0 	.word	0x24000fd0

0800c9c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b08a      	sub	sp, #40	; 0x28
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c9d4:	f7fe fd92 	bl	800b4fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c9d8:	4b5b      	ldr	r3, [pc, #364]	; (800cb48 <pvPortMalloc+0x180>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d101      	bne.n	800c9e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c9e0:	f000 f920 	bl	800cc24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c9e4:	4b59      	ldr	r3, [pc, #356]	; (800cb4c <pvPortMalloc+0x184>)
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4013      	ands	r3, r2
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f040 8093 	bne.w	800cb18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d01d      	beq.n	800ca34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c9f8:	2208      	movs	r2, #8
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f003 0307 	and.w	r3, r3, #7
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d014      	beq.n	800ca34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f023 0307 	bic.w	r3, r3, #7
 800ca10:	3308      	adds	r3, #8
 800ca12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f003 0307 	and.w	r3, r3, #7
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00a      	beq.n	800ca34 <pvPortMalloc+0x6c>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	617b      	str	r3, [r7, #20]
}
 800ca30:	bf00      	nop
 800ca32:	e7fe      	b.n	800ca32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d06e      	beq.n	800cb18 <pvPortMalloc+0x150>
 800ca3a:	4b45      	ldr	r3, [pc, #276]	; (800cb50 <pvPortMalloc+0x188>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d869      	bhi.n	800cb18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ca44:	4b43      	ldr	r3, [pc, #268]	; (800cb54 <pvPortMalloc+0x18c>)
 800ca46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca48:	4b42      	ldr	r3, [pc, #264]	; (800cb54 <pvPortMalloc+0x18c>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca4e:	e004      	b.n	800ca5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ca50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d903      	bls.n	800ca6c <pvPortMalloc+0xa4>
 800ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d1f1      	bne.n	800ca50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca6c:	4b36      	ldr	r3, [pc, #216]	; (800cb48 <pvPortMalloc+0x180>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d050      	beq.n	800cb18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2208      	movs	r2, #8
 800ca7c:	4413      	add	r3, r2
 800ca7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	6a3b      	ldr	r3, [r7, #32]
 800ca86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8a:	685a      	ldr	r2, [r3, #4]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	1ad2      	subs	r2, r2, r3
 800ca90:	2308      	movs	r3, #8
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d91f      	bls.n	800cad8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	f003 0307 	and.w	r3, r3, #7
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00a      	beq.n	800cac0 <pvPortMalloc+0xf8>
	__asm volatile
 800caaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caae:	f383 8811 	msr	BASEPRI, r3
 800cab2:	f3bf 8f6f 	isb	sy
 800cab6:	f3bf 8f4f 	dsb	sy
 800caba:	613b      	str	r3, [r7, #16]
}
 800cabc:	bf00      	nop
 800cabe:	e7fe      	b.n	800cabe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac2:	685a      	ldr	r2, [r3, #4]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	1ad2      	subs	r2, r2, r3
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cad2:	69b8      	ldr	r0, [r7, #24]
 800cad4:	f000 f908 	bl	800cce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cad8:	4b1d      	ldr	r3, [pc, #116]	; (800cb50 <pvPortMalloc+0x188>)
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	4a1b      	ldr	r2, [pc, #108]	; (800cb50 <pvPortMalloc+0x188>)
 800cae4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cae6:	4b1a      	ldr	r3, [pc, #104]	; (800cb50 <pvPortMalloc+0x188>)
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	4b1b      	ldr	r3, [pc, #108]	; (800cb58 <pvPortMalloc+0x190>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d203      	bcs.n	800cafa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800caf2:	4b17      	ldr	r3, [pc, #92]	; (800cb50 <pvPortMalloc+0x188>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a18      	ldr	r2, [pc, #96]	; (800cb58 <pvPortMalloc+0x190>)
 800caf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafc:	685a      	ldr	r2, [r3, #4]
 800cafe:	4b13      	ldr	r3, [pc, #76]	; (800cb4c <pvPortMalloc+0x184>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	431a      	orrs	r2, r3
 800cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cb0e:	4b13      	ldr	r3, [pc, #76]	; (800cb5c <pvPortMalloc+0x194>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	3301      	adds	r3, #1
 800cb14:	4a11      	ldr	r2, [pc, #68]	; (800cb5c <pvPortMalloc+0x194>)
 800cb16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb18:	f7fe fcfe 	bl	800b518 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	f003 0307 	and.w	r3, r3, #7
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00a      	beq.n	800cb3c <pvPortMalloc+0x174>
	__asm volatile
 800cb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2a:	f383 8811 	msr	BASEPRI, r3
 800cb2e:	f3bf 8f6f 	isb	sy
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	60fb      	str	r3, [r7, #12]
}
 800cb38:	bf00      	nop
 800cb3a:	e7fe      	b.n	800cb3a <pvPortMalloc+0x172>
	return pvReturn;
 800cb3c:	69fb      	ldr	r3, [r7, #28]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3728      	adds	r7, #40	; 0x28
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	24004bdc 	.word	0x24004bdc
 800cb4c:	24004bf0 	.word	0x24004bf0
 800cb50:	24004be0 	.word	0x24004be0
 800cb54:	24004bd4 	.word	0x24004bd4
 800cb58:	24004be4 	.word	0x24004be4
 800cb5c:	24004be8 	.word	0x24004be8

0800cb60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b086      	sub	sp, #24
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d04d      	beq.n	800cc0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb72:	2308      	movs	r3, #8
 800cb74:	425b      	negs	r3, r3
 800cb76:	697a      	ldr	r2, [r7, #20]
 800cb78:	4413      	add	r3, r2
 800cb7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	685a      	ldr	r2, [r3, #4]
 800cb84:	4b24      	ldr	r3, [pc, #144]	; (800cc18 <vPortFree+0xb8>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4013      	ands	r3, r2
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d10a      	bne.n	800cba4 <vPortFree+0x44>
	__asm volatile
 800cb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb92:	f383 8811 	msr	BASEPRI, r3
 800cb96:	f3bf 8f6f 	isb	sy
 800cb9a:	f3bf 8f4f 	dsb	sy
 800cb9e:	60fb      	str	r3, [r7, #12]
}
 800cba0:	bf00      	nop
 800cba2:	e7fe      	b.n	800cba2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00a      	beq.n	800cbc2 <vPortFree+0x62>
	__asm volatile
 800cbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	60bb      	str	r3, [r7, #8]
}
 800cbbe:	bf00      	nop
 800cbc0:	e7fe      	b.n	800cbc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	685a      	ldr	r2, [r3, #4]
 800cbc6:	4b14      	ldr	r3, [pc, #80]	; (800cc18 <vPortFree+0xb8>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4013      	ands	r3, r2
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d01e      	beq.n	800cc0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d11a      	bne.n	800cc0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	685a      	ldr	r2, [r3, #4]
 800cbdc:	4b0e      	ldr	r3, [pc, #56]	; (800cc18 <vPortFree+0xb8>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	43db      	mvns	r3, r3
 800cbe2:	401a      	ands	r2, r3
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cbe8:	f7fe fc88 	bl	800b4fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	685a      	ldr	r2, [r3, #4]
 800cbf0:	4b0a      	ldr	r3, [pc, #40]	; (800cc1c <vPortFree+0xbc>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4413      	add	r3, r2
 800cbf6:	4a09      	ldr	r2, [pc, #36]	; (800cc1c <vPortFree+0xbc>)
 800cbf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cbfa:	6938      	ldr	r0, [r7, #16]
 800cbfc:	f000 f874 	bl	800cce8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cc00:	4b07      	ldr	r3, [pc, #28]	; (800cc20 <vPortFree+0xc0>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	3301      	adds	r3, #1
 800cc06:	4a06      	ldr	r2, [pc, #24]	; (800cc20 <vPortFree+0xc0>)
 800cc08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cc0a:	f7fe fc85 	bl	800b518 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc0e:	bf00      	nop
 800cc10:	3718      	adds	r7, #24
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	24004bf0 	.word	0x24004bf0
 800cc1c:	24004be0 	.word	0x24004be0
 800cc20:	24004bec 	.word	0x24004bec

0800cc24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc24:	b480      	push	{r7}
 800cc26:	b085      	sub	sp, #20
 800cc28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cc2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc30:	4b27      	ldr	r3, [pc, #156]	; (800ccd0 <prvHeapInit+0xac>)
 800cc32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f003 0307 	and.w	r3, r3, #7
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d00c      	beq.n	800cc58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	3307      	adds	r3, #7
 800cc42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f023 0307 	bic.w	r3, r3, #7
 800cc4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cc4c:	68ba      	ldr	r2, [r7, #8]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	1ad3      	subs	r3, r2, r3
 800cc52:	4a1f      	ldr	r2, [pc, #124]	; (800ccd0 <prvHeapInit+0xac>)
 800cc54:	4413      	add	r3, r2
 800cc56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc5c:	4a1d      	ldr	r2, [pc, #116]	; (800ccd4 <prvHeapInit+0xb0>)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc62:	4b1c      	ldr	r3, [pc, #112]	; (800ccd4 <prvHeapInit+0xb0>)
 800cc64:	2200      	movs	r2, #0
 800cc66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	68ba      	ldr	r2, [r7, #8]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc70:	2208      	movs	r2, #8
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	1a9b      	subs	r3, r3, r2
 800cc76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f023 0307 	bic.w	r3, r3, #7
 800cc7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	4a15      	ldr	r2, [pc, #84]	; (800ccd8 <prvHeapInit+0xb4>)
 800cc84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc86:	4b14      	ldr	r3, [pc, #80]	; (800ccd8 <prvHeapInit+0xb4>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc8e:	4b12      	ldr	r3, [pc, #72]	; (800ccd8 <prvHeapInit+0xb4>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2200      	movs	r2, #0
 800cc94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	1ad2      	subs	r2, r2, r3
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cca4:	4b0c      	ldr	r3, [pc, #48]	; (800ccd8 <prvHeapInit+0xb4>)
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	4a0a      	ldr	r2, [pc, #40]	; (800ccdc <prvHeapInit+0xb8>)
 800ccb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	4a09      	ldr	r2, [pc, #36]	; (800cce0 <prvHeapInit+0xbc>)
 800ccba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ccbc:	4b09      	ldr	r3, [pc, #36]	; (800cce4 <prvHeapInit+0xc0>)
 800ccbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ccc2:	601a      	str	r2, [r3, #0]
}
 800ccc4:	bf00      	nop
 800ccc6:	3714      	adds	r7, #20
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr
 800ccd0:	24000fd4 	.word	0x24000fd4
 800ccd4:	24004bd4 	.word	0x24004bd4
 800ccd8:	24004bdc 	.word	0x24004bdc
 800ccdc:	24004be4 	.word	0x24004be4
 800cce0:	24004be0 	.word	0x24004be0
 800cce4:	24004bf0 	.word	0x24004bf0

0800cce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ccf0:	4b28      	ldr	r3, [pc, #160]	; (800cd94 <prvInsertBlockIntoFreeList+0xac>)
 800ccf2:	60fb      	str	r3, [r7, #12]
 800ccf4:	e002      	b.n	800ccfc <prvInsertBlockIntoFreeList+0x14>
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	60fb      	str	r3, [r7, #12]
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d8f7      	bhi.n	800ccf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	4413      	add	r3, r2
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d108      	bne.n	800cd2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	685a      	ldr	r2, [r3, #4]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	441a      	add	r2, r3
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	68ba      	ldr	r2, [r7, #8]
 800cd34:	441a      	add	r2, r3
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d118      	bne.n	800cd70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	4b15      	ldr	r3, [pc, #84]	; (800cd98 <prvInsertBlockIntoFreeList+0xb0>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d00d      	beq.n	800cd66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	685a      	ldr	r2, [r3, #4]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	441a      	add	r2, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	681a      	ldr	r2, [r3, #0]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	601a      	str	r2, [r3, #0]
 800cd64:	e008      	b.n	800cd78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd66:	4b0c      	ldr	r3, [pc, #48]	; (800cd98 <prvInsertBlockIntoFreeList+0xb0>)
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	601a      	str	r2, [r3, #0]
 800cd6e:	e003      	b.n	800cd78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d002      	beq.n	800cd86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd86:	bf00      	nop
 800cd88:	3714      	adds	r7, #20
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	24004bd4 	.word	0x24004bd4
 800cd98:	24004bdc 	.word	0x24004bdc

0800cd9c <memset>:
 800cd9c:	4402      	add	r2, r0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d100      	bne.n	800cda6 <memset+0xa>
 800cda4:	4770      	bx	lr
 800cda6:	f803 1b01 	strb.w	r1, [r3], #1
 800cdaa:	e7f9      	b.n	800cda0 <memset+0x4>

0800cdac <_reclaim_reent>:
 800cdac:	4b29      	ldr	r3, [pc, #164]	; (800ce54 <_reclaim_reent+0xa8>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4283      	cmp	r3, r0
 800cdb2:	b570      	push	{r4, r5, r6, lr}
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	d04b      	beq.n	800ce50 <_reclaim_reent+0xa4>
 800cdb8:	69c3      	ldr	r3, [r0, #28]
 800cdba:	b143      	cbz	r3, 800cdce <_reclaim_reent+0x22>
 800cdbc:	68db      	ldr	r3, [r3, #12]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d144      	bne.n	800ce4c <_reclaim_reent+0xa0>
 800cdc2:	69e3      	ldr	r3, [r4, #28]
 800cdc4:	6819      	ldr	r1, [r3, #0]
 800cdc6:	b111      	cbz	r1, 800cdce <_reclaim_reent+0x22>
 800cdc8:	4620      	mov	r0, r4
 800cdca:	f000 f879 	bl	800cec0 <_free_r>
 800cdce:	6961      	ldr	r1, [r4, #20]
 800cdd0:	b111      	cbz	r1, 800cdd8 <_reclaim_reent+0x2c>
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f000 f874 	bl	800cec0 <_free_r>
 800cdd8:	69e1      	ldr	r1, [r4, #28]
 800cdda:	b111      	cbz	r1, 800cde2 <_reclaim_reent+0x36>
 800cddc:	4620      	mov	r0, r4
 800cdde:	f000 f86f 	bl	800cec0 <_free_r>
 800cde2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cde4:	b111      	cbz	r1, 800cdec <_reclaim_reent+0x40>
 800cde6:	4620      	mov	r0, r4
 800cde8:	f000 f86a 	bl	800cec0 <_free_r>
 800cdec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdee:	b111      	cbz	r1, 800cdf6 <_reclaim_reent+0x4a>
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f000 f865 	bl	800cec0 <_free_r>
 800cdf6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cdf8:	b111      	cbz	r1, 800ce00 <_reclaim_reent+0x54>
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	f000 f860 	bl	800cec0 <_free_r>
 800ce00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ce02:	b111      	cbz	r1, 800ce0a <_reclaim_reent+0x5e>
 800ce04:	4620      	mov	r0, r4
 800ce06:	f000 f85b 	bl	800cec0 <_free_r>
 800ce0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ce0c:	b111      	cbz	r1, 800ce14 <_reclaim_reent+0x68>
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f000 f856 	bl	800cec0 <_free_r>
 800ce14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ce16:	b111      	cbz	r1, 800ce1e <_reclaim_reent+0x72>
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f000 f851 	bl	800cec0 <_free_r>
 800ce1e:	6a23      	ldr	r3, [r4, #32]
 800ce20:	b1b3      	cbz	r3, 800ce50 <_reclaim_reent+0xa4>
 800ce22:	4620      	mov	r0, r4
 800ce24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce28:	4718      	bx	r3
 800ce2a:	5949      	ldr	r1, [r1, r5]
 800ce2c:	b941      	cbnz	r1, 800ce40 <_reclaim_reent+0x94>
 800ce2e:	3504      	adds	r5, #4
 800ce30:	69e3      	ldr	r3, [r4, #28]
 800ce32:	2d80      	cmp	r5, #128	; 0x80
 800ce34:	68d9      	ldr	r1, [r3, #12]
 800ce36:	d1f8      	bne.n	800ce2a <_reclaim_reent+0x7e>
 800ce38:	4620      	mov	r0, r4
 800ce3a:	f000 f841 	bl	800cec0 <_free_r>
 800ce3e:	e7c0      	b.n	800cdc2 <_reclaim_reent+0x16>
 800ce40:	680e      	ldr	r6, [r1, #0]
 800ce42:	4620      	mov	r0, r4
 800ce44:	f000 f83c 	bl	800cec0 <_free_r>
 800ce48:	4631      	mov	r1, r6
 800ce4a:	e7ef      	b.n	800ce2c <_reclaim_reent+0x80>
 800ce4c:	2500      	movs	r5, #0
 800ce4e:	e7ef      	b.n	800ce30 <_reclaim_reent+0x84>
 800ce50:	bd70      	pop	{r4, r5, r6, pc}
 800ce52:	bf00      	nop
 800ce54:	24000060 	.word	0x24000060

0800ce58 <__libc_init_array>:
 800ce58:	b570      	push	{r4, r5, r6, lr}
 800ce5a:	4d0d      	ldr	r5, [pc, #52]	; (800ce90 <__libc_init_array+0x38>)
 800ce5c:	4c0d      	ldr	r4, [pc, #52]	; (800ce94 <__libc_init_array+0x3c>)
 800ce5e:	1b64      	subs	r4, r4, r5
 800ce60:	10a4      	asrs	r4, r4, #2
 800ce62:	2600      	movs	r6, #0
 800ce64:	42a6      	cmp	r6, r4
 800ce66:	d109      	bne.n	800ce7c <__libc_init_array+0x24>
 800ce68:	4d0b      	ldr	r5, [pc, #44]	; (800ce98 <__libc_init_array+0x40>)
 800ce6a:	4c0c      	ldr	r4, [pc, #48]	; (800ce9c <__libc_init_array+0x44>)
 800ce6c:	f000 f880 	bl	800cf70 <_init>
 800ce70:	1b64      	subs	r4, r4, r5
 800ce72:	10a4      	asrs	r4, r4, #2
 800ce74:	2600      	movs	r6, #0
 800ce76:	42a6      	cmp	r6, r4
 800ce78:	d105      	bne.n	800ce86 <__libc_init_array+0x2e>
 800ce7a:	bd70      	pop	{r4, r5, r6, pc}
 800ce7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce80:	4798      	blx	r3
 800ce82:	3601      	adds	r6, #1
 800ce84:	e7ee      	b.n	800ce64 <__libc_init_array+0xc>
 800ce86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce8a:	4798      	blx	r3
 800ce8c:	3601      	adds	r6, #1
 800ce8e:	e7f2      	b.n	800ce76 <__libc_init_array+0x1e>
 800ce90:	0800d014 	.word	0x0800d014
 800ce94:	0800d014 	.word	0x0800d014
 800ce98:	0800d014 	.word	0x0800d014
 800ce9c:	0800d018 	.word	0x0800d018

0800cea0 <__retarget_lock_acquire_recursive>:
 800cea0:	4770      	bx	lr

0800cea2 <__retarget_lock_release_recursive>:
 800cea2:	4770      	bx	lr

0800cea4 <memcpy>:
 800cea4:	440a      	add	r2, r1
 800cea6:	4291      	cmp	r1, r2
 800cea8:	f100 33ff 	add.w	r3, r0, #4294967295
 800ceac:	d100      	bne.n	800ceb0 <memcpy+0xc>
 800ceae:	4770      	bx	lr
 800ceb0:	b510      	push	{r4, lr}
 800ceb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ceb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ceba:	4291      	cmp	r1, r2
 800cebc:	d1f9      	bne.n	800ceb2 <memcpy+0xe>
 800cebe:	bd10      	pop	{r4, pc}

0800cec0 <_free_r>:
 800cec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cec2:	2900      	cmp	r1, #0
 800cec4:	d044      	beq.n	800cf50 <_free_r+0x90>
 800cec6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ceca:	9001      	str	r0, [sp, #4]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f1a1 0404 	sub.w	r4, r1, #4
 800ced2:	bfb8      	it	lt
 800ced4:	18e4      	addlt	r4, r4, r3
 800ced6:	f000 f83f 	bl	800cf58 <__malloc_lock>
 800ceda:	4a1e      	ldr	r2, [pc, #120]	; (800cf54 <_free_r+0x94>)
 800cedc:	9801      	ldr	r0, [sp, #4]
 800cede:	6813      	ldr	r3, [r2, #0]
 800cee0:	b933      	cbnz	r3, 800cef0 <_free_r+0x30>
 800cee2:	6063      	str	r3, [r4, #4]
 800cee4:	6014      	str	r4, [r2, #0]
 800cee6:	b003      	add	sp, #12
 800cee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ceec:	f000 b83a 	b.w	800cf64 <__malloc_unlock>
 800cef0:	42a3      	cmp	r3, r4
 800cef2:	d908      	bls.n	800cf06 <_free_r+0x46>
 800cef4:	6825      	ldr	r5, [r4, #0]
 800cef6:	1961      	adds	r1, r4, r5
 800cef8:	428b      	cmp	r3, r1
 800cefa:	bf01      	itttt	eq
 800cefc:	6819      	ldreq	r1, [r3, #0]
 800cefe:	685b      	ldreq	r3, [r3, #4]
 800cf00:	1949      	addeq	r1, r1, r5
 800cf02:	6021      	streq	r1, [r4, #0]
 800cf04:	e7ed      	b.n	800cee2 <_free_r+0x22>
 800cf06:	461a      	mov	r2, r3
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	b10b      	cbz	r3, 800cf10 <_free_r+0x50>
 800cf0c:	42a3      	cmp	r3, r4
 800cf0e:	d9fa      	bls.n	800cf06 <_free_r+0x46>
 800cf10:	6811      	ldr	r1, [r2, #0]
 800cf12:	1855      	adds	r5, r2, r1
 800cf14:	42a5      	cmp	r5, r4
 800cf16:	d10b      	bne.n	800cf30 <_free_r+0x70>
 800cf18:	6824      	ldr	r4, [r4, #0]
 800cf1a:	4421      	add	r1, r4
 800cf1c:	1854      	adds	r4, r2, r1
 800cf1e:	42a3      	cmp	r3, r4
 800cf20:	6011      	str	r1, [r2, #0]
 800cf22:	d1e0      	bne.n	800cee6 <_free_r+0x26>
 800cf24:	681c      	ldr	r4, [r3, #0]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	6053      	str	r3, [r2, #4]
 800cf2a:	440c      	add	r4, r1
 800cf2c:	6014      	str	r4, [r2, #0]
 800cf2e:	e7da      	b.n	800cee6 <_free_r+0x26>
 800cf30:	d902      	bls.n	800cf38 <_free_r+0x78>
 800cf32:	230c      	movs	r3, #12
 800cf34:	6003      	str	r3, [r0, #0]
 800cf36:	e7d6      	b.n	800cee6 <_free_r+0x26>
 800cf38:	6825      	ldr	r5, [r4, #0]
 800cf3a:	1961      	adds	r1, r4, r5
 800cf3c:	428b      	cmp	r3, r1
 800cf3e:	bf04      	itt	eq
 800cf40:	6819      	ldreq	r1, [r3, #0]
 800cf42:	685b      	ldreq	r3, [r3, #4]
 800cf44:	6063      	str	r3, [r4, #4]
 800cf46:	bf04      	itt	eq
 800cf48:	1949      	addeq	r1, r1, r5
 800cf4a:	6021      	streq	r1, [r4, #0]
 800cf4c:	6054      	str	r4, [r2, #4]
 800cf4e:	e7ca      	b.n	800cee6 <_free_r+0x26>
 800cf50:	b003      	add	sp, #12
 800cf52:	bd30      	pop	{r4, r5, pc}
 800cf54:	24004d30 	.word	0x24004d30

0800cf58 <__malloc_lock>:
 800cf58:	4801      	ldr	r0, [pc, #4]	; (800cf60 <__malloc_lock+0x8>)
 800cf5a:	f7ff bfa1 	b.w	800cea0 <__retarget_lock_acquire_recursive>
 800cf5e:	bf00      	nop
 800cf60:	24004d2c 	.word	0x24004d2c

0800cf64 <__malloc_unlock>:
 800cf64:	4801      	ldr	r0, [pc, #4]	; (800cf6c <__malloc_unlock+0x8>)
 800cf66:	f7ff bf9c 	b.w	800cea2 <__retarget_lock_release_recursive>
 800cf6a:	bf00      	nop
 800cf6c:	24004d2c 	.word	0x24004d2c

0800cf70 <_init>:
 800cf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf72:	bf00      	nop
 800cf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf76:	bc08      	pop	{r3}
 800cf78:	469e      	mov	lr, r3
 800cf7a:	4770      	bx	lr

0800cf7c <_fini>:
 800cf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf7e:	bf00      	nop
 800cf80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf82:	bc08      	pop	{r3}
 800cf84:	469e      	mov	lr, r3
 800cf86:	4770      	bx	lr
